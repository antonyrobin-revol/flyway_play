SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
/*PRINT N'Dropping constraints from [dbo].[CmnCodeMaster]'
GO
ALTER TABLE [dbo].[CmnCodeMaster] DROP CONSTRAINT [DF__CmnCodeMa__SubTy__44CA3770]
GO
PRINT N'Dropping constraints from [dbo].[CmnCodeMaster]'
GO
ALTER TABLE [dbo].[CmnCodeMaster] DROP CONSTRAINT [DF__CmnCodeMa__Butto__45BE5BA9]
GO
PRINT N'Dropping constraints from [dbo].[CmnCodeMaster]'
GO
ALTER TABLE [dbo].[CmnCodeMaster] DROP CONSTRAINT [DF__CmnCodeMa__IsMul__46B27FE2]
GO
PRINT N'Dropping constraints from [dbo].[CmnCodeMaster]'
GO
ALTER TABLE [dbo].[CmnCodeMaster] DROP CONSTRAINT [DF__CmnCodeMa__IsDml__47A6A41B]
GO
PRINT N'Dropping constraints from [dbo].[CmnFormTabs]'
GO
ALTER TABLE [dbo].[CmnFormTabs] DROP CONSTRAINT [DF__CmnFormTa__IsMob__625A9A57]
GO
PRINT N'Dropping constraints from [dbo].[CmnUserDetails]'
GO
ALTER TABLE [dbo].[CmnUserDetails] DROP CONSTRAINT [DF__CmnUserDe__MenuB__37703C52]
GO
PRINT N'Dropping constraints from [dbo].[CmnUserDetails]'
GO
ALTER TABLE [dbo].[CmnUserDetails] DROP CONSTRAINT [DF__CmnUserDe__NotAc__3D2915A8]
GO*/
PRINT N'Creating [dbo].[CmnAfterSaveDML]'
GO
CREATE TABLE [dbo].[CmnAfterSaveDML]
(
[ReferenceID] [int] NOT NULL IDENTITY(1, 1),
[FormID] [int] NOT NULL,
[DMLControlType] [int] NOT NULL,
[SaveEventType] [int] NOT NULL,
[TableName] [NVARCHAR] (255) NOT NULL,
[KeyColumns] [NVARCHAR] (max) NULL,
[SPName] [NVARCHAR] (255) NOT NULL,
[DeleteFlag] [int] NOT NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnAfterSaveDML_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnAfterSaveDML_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnAfterSaveDML_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnAfterSaveDML_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnAfterSaveDML_IsCurrentVersion] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF_CmnAfterSaveDML_Version] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [BIGINT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_CmnAfterSaveDML] on [dbo].[CmnAfterSaveDML]'
GO
ALTER TABLE [dbo].[CmnAfterSaveDML] ADD CONSTRAINT [PK_CmnAfterSaveDML] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[CmnApplicationMessages]'
GO
CREATE TABLE [dbo].[CmnApplicationMessages]
(
[KeyCode] [VARCHAR] (5) NOT NULL,
[Message] [NVARCHAR] (max) NOT NULL,
[Category] [INT] NOT NULL,
[Changeable] [BIT] NOT NULL CONSTRAINT [DF_CmnApplicationMessages_Changeable] DEFAULT ((1)),
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnApplicationMessages_CreatedDate] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnApplicationMessages_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnApplicationMessages_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL
)
GO
PRINT N'Creating primary key [PK_CmnApplicationMessages] on [dbo].[CmnApplicationMessages]'
GO
ALTER TABLE [dbo].[CmnApplicationMessages] ADD CONSTRAINT [PK_CmnApplicationMessages] PRIMARY KEY CLUSTERED ([KeyCode])
GO
PRINT N'Creating [dbo].[CmnDMLParameterProcess]'
GO
CREATE TABLE [dbo].[CmnDMLParameterProcess]
(
[ControlName] [NVARCHAR] (255) NOT NULL,
[ColumnName] [NVARCHAR] (255) NOT NULL,
[ColumnValue] [NVARCHAR] (max) NULL,
[ControlType] [NVARCHAR] (255) NOT NULL,
[DataType] [NVARCHAR] (255) NOT NULL,
[IsIdentity] [BIT] NOT NULL,
[IsMandatory] [BIT] NOT NULL,
[IsDmlControl] [BIT] NOT NULL,
[UniqueGroup] [VARCHAR] (100) NULL,
[IsFKTable] [BIT] NULL,
[IsNoAdd] [BIT] NOT NULL CONSTRAINT [DF_CmnDMLParameterProcess_IsNoAdd] DEFAULT ((0)),
[IsNoUpdate] [BIT] NOT NULL CONSTRAINT [DF_CmnDMLParameterProcess_IsNoUpdate] DEFAULT ((0)),
[UserID] [INT] NULL,
[TableName] [sys].[sysname] NULL,
[PreviousValue] [NVARCHAR] (max) NULL,
[ControlID] [INT] NOT NULL,
[IsParent] [BIT] NULL CONSTRAINT [DF__CmnDMLPar__IsPar__18191748] DEFAULT ((0)),
[VersionCheck] [BIT] NULL,
[SessionID] [VARCHAR] (500) NULL
)
GO
PRINT N'Creating index [IDX_CmnDMLParameterDmlControl] on [dbo].[CmnDMLParameterProcess]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnDMLParameterDmlControl] ON [dbo].[CmnDMLParameterProcess] ([UserID], [IsDmlControl])
GO
PRINT N'Creating index [IDX_CmnDMLParameterIdentity] on [dbo].[CmnDMLParameterProcess]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnDMLParameterIdentity] ON [dbo].[CmnDMLParameterProcess] ([UserID], [IsIdentity])
GO
PRINT N'Creating index [IDX_CmnDMLParameterMandatory] on [dbo].[CmnDMLParameterProcess]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnDMLParameterMandatory] ON [dbo].[CmnDMLParameterProcess] ([UserID], [IsMandatory], [IsDmlControl], [DataType], [IsFKTable])
GO
PRINT N'Creating index [IDX_CmnDMLParameterUniqueGroup] on [dbo].[CmnDMLParameterProcess]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnDMLParameterUniqueGroup] ON [dbo].[CmnDMLParameterProcess] ([UserID], [UniqueGroup])
GO
PRINT N'Creating [dbo].[CmnGUIKeywords]'
GO
CREATE TABLE [dbo].[CmnGUIKeywords]
(
[KeyCode] [NVARCHAR] (200) NOT NULL,
[KeyValue] [NVARCHAR] (max) NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnGUIKeywords_CreatedDate] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnGUIKeywords_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnGUIKeywords_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL
)
GO
PRINT N'Creating primary key [PK_CmnGUIKeywords] on [dbo].[CmnGUIKeywords]'
GO
ALTER TABLE [dbo].[CmnGUIKeywords] ADD CONSTRAINT [PK_CmnGUIKeywords] PRIMARY KEY CLUSTERED ([KeyCode])
GO
PRINT N'Creating [dbo].[CmnPasswordHistory]'
GO
CREATE TABLE [dbo].[CmnPasswordHistory]
(
[UserID] [INT] NOT NULL,
[OldPassword] [NVARCHAR] (200) NULL,
[NewPassword] [NVARCHAR] (200) NOT NULL,
[ChangeReasonID] [INT] NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnPasswordHistory_ModifiedDate] DEFAULT (getutcdate())
)
GO
PRINT N'Creating index [IDX_CmnPasswordHistory] on [dbo].[CmnPasswordHistory]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnPasswordHistory] ON [dbo].[CmnPasswordHistory] ([UserID], [ModifiedDate] DESC)
GO
PRINT N'Creating [dbo].[CmnPasswordPolicy]'
GO
CREATE TABLE [dbo].[CmnPasswordPolicy]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[MinimumLength] [INT] NOT NULL,
[MaximumLength] [INT] NOT NULL,
[ExpiryDays] [INT] NOT NULL,
[ExpiryDaysNegotiable] [BIT] NULL,
[IsNumeric] [BIT] NOT NULL,
[IsAlpha] [BIT] NOT NULL,
[IsSplCharacter] [BIT] NOT NULL,
[StartWithID] [INT] NOT NULL,
[LoginAttempt] [SMALLINT] NOT NULL,
[SessionTimeout] [SMALLINT] NOT NULL,
[CaptchaValidation] [BIT] NOT NULL,
[CaptchaLevel] [INT] NOT NULL,
[OTPValidation] [BIT] NOT NULL,
[OTPType] [INT] NOT NULL,
[OTPExpireMin] [SMALLINT] NOT NULL,
[MultipleLogin] [BIT] NOT NULL,
[AuthenticationType] [VARCHAR] (100) NULL,
[RememberUser] [BIT] NOT NULL,
[RetrivePassword] [BIT] NOT NULL,
[RetriveType] [INT] NOT NULL,
[PreviousPolicy] [INT] NULL,
[PreviousPolicyValue] [VARCHAR] (1000) NULL,
[SelfCompany] [BIT] NULL,
[SelfBranch] [BIT] NULL,
[UserRegistration] [BIT] NULL,
[CompanyID] [INT] NULL,
[PrevPwdRetrieveCount] [SMALLINT] NOT NULL CONSTRAINT [DF_CmnPasswordPolicy_PrevPwdRetrieveCount] DEFAULT ((0)),
[LicenseValidationBasisID] [INT] NOT NULL CONSTRAINT [DF_CmnPasswordPolicy_LicenseValidationBasisID] DEFAULT ((2)),
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnPasswordPolicy_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnPasswordPolicy_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnPasswordPolicy_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnPasswordPolicy_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnPasswordPolicy_IsCurrentVersion] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF_CmnPasswordPolicy_Version] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL,
[PasswordResetType] [INT] NOT NULL CONSTRAINT [DF_CmnPasswordPolicy_PasswordResetType] DEFAULT ((1))
)
GO
PRINT N'Creating primary key [PK_CmnPasswordPolicy] on [dbo].[CmnPasswordPolicy]'
GO
ALTER TABLE [dbo].[CmnPasswordPolicy] ADD CONSTRAINT [PK_CmnPasswordPolicy] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[CmnPrefixSuffixMaster]'
GO
CREATE TABLE [dbo].[CmnPrefixSuffixMaster]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[Name] [NVARCHAR] (200) NOT NULL,
[TableName] [VARCHAR] (255) NOT NULL,
[ColumnName] [VARCHAR] (255) NOT NULL,
[FkTypeID] [INT] NULL,
[CodeMasterType] [NVARCHAR] (500) NULL,
[KeyColumn] [VARCHAR] (255) NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnPrefixSuffixMaster_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnPrefixSuffixMaster_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnPrefixSuffixMaster_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnPrefixSuffixMaster_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnPrefixSuffixMaster_IsCurrentVersion] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF_CmnPrefixSuffixMaster_Version] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_CmnPrefixSuffixMaster] on [dbo].[CmnPrefixSuffixMaster]'
GO
ALTER TABLE [dbo].[CmnPrefixSuffixMaster] ADD CONSTRAINT [PK_CmnPrefixSuffixMaster] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnPrefixSuffixMaster] on [dbo].[CmnPrefixSuffixMaster]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnPrefixSuffixMaster] ON [dbo].[CmnPrefixSuffixMaster] ([TableName], [ColumnName])
GO
PRINT N'Creating [dbo].[CmnRbsGroupForms]'
GO
CREATE TABLE [dbo].[CmnRbsGroupForms]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[FormID] [BIGINT] NOT NULL,
[RBSGroupID] [BIGINT] NOT NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRbsGroupForms_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRbsGroupForms_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnRbsGroupForms_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnRbsGroupForms_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnRbsGroupForms_IsCurrentVersion] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF_CmnRbsGroupForms_Version] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_CmnRbsGroupForms] on [dbo].[CmnRbsGroupForms]'
GO
ALTER TABLE [dbo].[CmnRbsGroupForms] ADD CONSTRAINT [PK_CmnRbsGroupForms] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[CmnRbsGroups]'
GO
CREATE TABLE [dbo].[CmnRbsGroups]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[Code] [VARCHAR] (500) NOT NULL,
[Name] [VARCHAR] (500) NOT NULL,
[Description] [NVARCHAR] (4000) NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRbsGroups_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRbsGroups_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnRbsGroups_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnRbsGroups_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnRbsGroups_IsCurrentVersion] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF_CmnRbsGroups_Version] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_CmnRbsGroups] on [dbo].[CmnRbsGroups]'
GO
ALTER TABLE [dbo].[CmnRbsGroups] ADD CONSTRAINT [PK_CmnRbsGroups] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[CmnRBSGroupsDataVariable]'
GO
CREATE TABLE [dbo].[CmnRBSGroupsDataVariable]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[RBSGroupID] [INT] NOT NULL,
[FormID] [INT] NOT NULL,
[ControlName] [NVARCHAR] (200) NULL,
[TableName] [VARCHAR] (255) NULL,
[TableColumn] [VARCHAR] (255) NULL,
[DataValue] [NVARCHAR] (max) NULL,
[SelfData] [BIT] NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRBSGroupsDataVariable_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRBSGroupsDataVariable_CreatedDateGMT] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRBSGroupsDataVariable_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRBSGroupsDataVariable_ModifiedDateGMT] DEFAULT (getutcdate()),
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnRBSGroupsDataVariable_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (max) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnRBSGroupsDataVariable_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (max) NULL,
[OrderBy] [INT] NOT NULL,
[VersionID] [INT] NULL,
[Version] [INT] NOT NULL CONSTRAINT [DF_CmnRBSGroupsDataVariable_Version] DEFAULT ((0)),
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnRBSGroupsDataVariable_IsCurrentVersion] DEFAULT ((1)),
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_CmnRBSGroupsDataVariable] on [dbo].[CmnRBSGroupsDataVariable]'
GO
ALTER TABLE [dbo].[CmnRBSGroupsDataVariable] ADD CONSTRAINT [PK_CmnRBSGroupsDataVariable] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnRBSGroupsDataVariable] on [dbo].[CmnRBSGroupsDataVariable]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnRBSGroupsDataVariable] ON [dbo].[CmnRBSGroupsDataVariable] ([RBSGroupID], [FormID], [TableName], [TableColumn])
GO
PRINT N'Creating [dbo].[CmnUserContacts]'
GO
CREATE TABLE [dbo].[CmnUserContacts]
(
[ContactID] [INT] NOT NULL IDENTITY(1, 1),
[Type] [INT] NOT NULL,
[TypeID] [INT] NOT NULL,
[PriTelephone] [VARCHAR] (25) NULL,
[PriTelephoneExt] [VARCHAR] (25) NULL,
[SecTelephone] [VARCHAR] (25) NULL,
[SecTelephoneExt] [VARCHAR] (25) NULL,
[MobileCarrier] [INT] NULL,
[Mobile] [VARCHAR] (25) NULL,
[ResTelephone] [VARCHAR] (25) NULL,
[Fax] [VARCHAR] (25) NULL,
[FaxExt] [VARCHAR] (25) NULL,
[OfficialEmail] [NVARCHAR] (500) NULL,
[PersonalEmail] [NVARCHAR] (500) NULL,
[Address] [NVARCHAR] (1000) NULL,
[Remarks] [NVARCHAR] (1000) NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnUserContacts_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnUserContacts_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnUserContacts_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_CmnUserContacts] on [dbo].[CmnUserContacts]'
GO
ALTER TABLE [dbo].[CmnUserContacts] ADD CONSTRAINT [PK_CmnUserContacts] PRIMARY KEY CLUSTERED ([ContactID])
GO
PRINT N'Creating index [IDX_CmnUserContacts] on [dbo].[CmnUserContacts]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnUserContacts] ON [dbo].[CmnUserContacts] ([Type], [TypeID])
GO
PRINT N'Creating [dbo].[CmnCodeMasterMultiLingual]'
GO
CREATE TABLE [dbo].[CmnCodeMasterMultiLingual]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[LanguageID] [INT] NOT NULL,
[CodeMasterID] [INT] NOT NULL,
[Type] [NVARCHAR] (200) NOT NULL,
[TypeValues] [NVARCHAR] (200) NOT NULL,
[Name] [NVARCHAR] (200) NOT NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnCodeMasterMultiLingual_IsDeleted] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnCodeMasterMultiLingual] on [dbo].[CmnCodeMasterMultiLingual]'
GO
ALTER TABLE [dbo].[CmnCodeMasterMultiLingual] ADD CONSTRAINT [PK_CmnCodeMasterMultiLingual] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnCodeMasterMultiLingual] on [dbo].[CmnCodeMasterMultiLingual]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnCodeMasterMultiLingual] ON [dbo].[CmnCodeMasterMultiLingual] ([CodeMasterID], [Type], [TypeValues], [LanguageID], [IsDeleted])
GO
PRINT N'Creating [dbo].[CmnFileUpload]'
GO
CREATE TABLE [dbo].[CmnFileUpload]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[FileRefID] [BIGINT] NOT NULL,
[FormID] [INT] NOT NULL,
[Type] [NVARCHAR] (100) NOT NULL,
[OriginalFileName] [NVARCHAR] (1000) NOT NULL,
[FileName] [NVARCHAR] (1000) NOT NULL,
[FilePath] [NVARCHAR] (1000) NOT NULL,
[FileExtension] [VARCHAR] (50) NOT NULL,
[Checksum] [NVARCHAR] (4000) NOT NULL,
[SecFileRefID] [BIGINT] NULL,
[AddSecFileRefID] [BIGINT] NULL,
[AttachmentName] [NVARCHAR] (100) NULL,
[AttachmentType] [INT] NULL,
[AttachmentCategory] [NVARCHAR] (100) NULL,
[RefNo] [NVARCHAR] (100) NULL,
[ExpiryDate] [DATETIME] NULL,
[ExpiryAction] [INT] NULL,
[GUIID] [VARCHAR] (500) NULL,
[TableName] [sys].[sysname] NULL,
[FullPath] [NVARCHAR] (1000) NOT NULL,
[Version] [INT] NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnFileUpload_CreatedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnFileUpload_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedReason] [NVARCHAR] (500) NULL
)
GO
PRINT N'Creating primary key [PK_CmnFileUpload] on [dbo].[CmnFileUpload]'
GO
ALTER TABLE [dbo].[CmnFileUpload] ADD CONSTRAINT [PK_CmnFileUpload] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [idx_CmnFileUploadIsDeleted] on [dbo].[CmnFileUpload]'
GO
CREATE NONCLUSTERED INDEX [idx_CmnFileUploadIsDeleted] ON [dbo].[CmnFileUpload] ([FilePath], [IsDeleted])
GO
PRINT N'Creating index [idx_CmnFileUploadType] on [dbo].[CmnFileUpload]'
GO
CREATE NONCLUSTERED INDEX [idx_CmnFileUploadType] ON [dbo].[CmnFileUpload] ([FilePath], [Type], [IsDeleted])
GO
PRINT N'Creating index [IDX_CmnFileUpload] on [dbo].[CmnFileUpload]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnFileUpload] ON [dbo].[CmnFileUpload] ([FormID], [Type], [FileRefID])
GO
PRINT N'Creating index [FK_CmnFileUploadFormID] on [dbo].[CmnFileUpload]'
GO
CREATE NONCLUSTERED INDEX [FK_CmnFileUploadFormID] ON [dbo].[CmnFileUpload] ([GUIID], [IsDeleted])
GO
PRINT N'Creating [dbo].[CmnFormButtonProperties]'
GO
CREATE TABLE [dbo].[CmnFormButtonProperties]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[FormID] [INT] NOT NULL,
[ButtonID] [BIGINT] NOT NULL,
[ReqOldRefID] [BIT] NULL,
[ClearControls] [VARCHAR] (max) NULL,
[ClearColumns] [VARCHAR] (max) NULL,
[AutoClose] [BIT] NULL,
[IsMobile] [BIT] NOT NULL CONSTRAINT [DF__CmnFormBu__IsMob__19B0237] DEFAULT ((1)),
[IsAudit] [BIT] NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnFormButtonProperties_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnFormButtonProperties_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnFormButtonProperties_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnFormButtonProperties_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnFormButtonProperties_IsCurrentVersion] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF_CmnFormButtonProperties_Version] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_CmnFormButtonProperties] on [dbo].[CmnFormButtonProperties]'
GO
ALTER TABLE [dbo].[CmnFormButtonProperties] ADD CONSTRAINT [PK_CmnFormButtonProperties] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnFormButtonProperties] on [dbo].[CmnFormButtonProperties]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnFormButtonProperties] ON [dbo].[CmnFormButtonProperties] ([FormID], [ButtonID], [IsDeleted])
GO
PRINT N'Creating [dbo].[CmnFormMultiLingual]'
GO
CREATE TABLE [dbo].[CmnFormMultiLingual]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[LanguageID] [INT] NOT NULL,
[FormID] [INT] NOT NULL,
[Name] [NVARCHAR] (200) NOT NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnFormMultiLingual_IsDeleted] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnFormMultiLingual] on [dbo].[CmnFormMultiLingual]'
GO
ALTER TABLE [dbo].[CmnFormMultiLingual] ADD CONSTRAINT [PK_CmnFormMultiLingual] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnFormMultiLingual] on [dbo].[CmnFormMultiLingual]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnFormMultiLingual] ON [dbo].[CmnFormMultiLingual] ([FormID], [LanguageID])
GO
PRINT N'Creating [dbo].[CmnGUIMultiLingual]'
GO
CREATE TABLE [dbo].[CmnGUIMultiLingual]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[LanguageID] [INT] NOT NULL,
[KeyCode] [NVARCHAR] (200) NOT NULL,
[KeyValue] [NVARCHAR] (max) NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnGUIMultiLingual_CreatedDate] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnGUIMultiLingual_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnGUIMultiLingual_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL
)
GO
PRINT N'Creating primary key [PK_CmnGUIMultiLingual] on [dbo].[CmnGUIMultiLingual]'
GO
ALTER TABLE [dbo].[CmnGUIMultiLingual] ADD CONSTRAINT [PK_CmnGUIMultiLingual] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnGUIMultiLingual] on [dbo].[CmnGUIMultiLingual]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnGUIMultiLingual] ON [dbo].[CmnGUIMultiLingual] ([LanguageID], [KeyCode])
GO
PRINT N'Creating [dbo].[CmnHelpTemplate]'
GO
CREATE TABLE [dbo].[CmnHelpTemplate]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[FormID] [BIGINT] NOT NULL,
[HelpText] [NVARCHAR] (max) NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnHelpTemplate_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_CmnHelpTemplate_CreatedDateGMT] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnHelpTemplate_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_CmnHelpTemplate_ModifiedDateGMT] DEFAULT (getutcdate()),
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnHelpTemplate_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (max) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnHelpTemplate_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (max) NULL,
[OrderBy] [INT] NOT NULL,
[VersionID] [INT] NULL,
[Version] [INT] NOT NULL CONSTRAINT [DF_CmnHelpTemplate_Version] DEFAULT ((0)),
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnHelpTemplate_IsCurrentVersion] DEFAULT ((1)),
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_CmnHelpTemplate] on [dbo].[CmnHelpTemplate]'
GO
ALTER TABLE [dbo].[CmnHelpTemplate] ADD CONSTRAINT [PK_CmnHelpTemplate] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnHelpTemplate] on [dbo].[CmnHelpTemplate]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnHelpTemplate] ON [dbo].[CmnHelpTemplate] ([FormID])
GO
PRINT N'Creating [dbo].[CmnMessagesMultiLingual]'
GO
CREATE TABLE [dbo].[CmnMessagesMultiLingual]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[LanguageID] [INT] NOT NULL,
[KeyCode] [VARCHAR] (5) NOT NULL,
[Message] [NVARCHAR] (max) NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnMessagesMultiLingual_CreatedDate] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnMessagesMultiLingual_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnMessagesMultiLingual_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[OrderBy] [INT] NOT NULL,
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedDateGMT] [DATETIME] NOT NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnMessagesMultiLingual_IsCurrentVersion] DEFAULT ((1)),
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnMessagesMultiLingual_NotActive] DEFAULT ((0))
)
GO
PRINT N'Creating index [IDX_CmnMessagesMultiLingual] on [dbo].[CmnMessagesMultiLingual]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnMessagesMultiLingual] ON [dbo].[CmnMessagesMultiLingual] ([LanguageID], [KeyCode])
GO
PRINT N'Creating [dbo].[CmnRBSDataVariablePermission]'
GO
CREATE TABLE [dbo].[CmnRBSDataVariablePermission]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[UserID] [INT] NOT NULL,
[FormID] [INT] NOT NULL,
[ControlName] [NVARCHAR] (200) NULL,
[TableName] [VARCHAR] (255) NULL,
[TableColumn] [VARCHAR] (255) NULL,
[DataValue] [NVARCHAR] (max) NULL,
[SelfData] [BIT] NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRBSDataVariablePermission_CreatedDate] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRBSDataVariablePermission_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnRBSDataVariablePermission_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL
)
GO
PRINT N'Creating primary key [PK_CmnRBSDataVariablePermission] on [dbo].[CmnRBSDataVariablePermission]'
GO
ALTER TABLE [dbo].[CmnRBSDataVariablePermission] ADD CONSTRAINT [PK_CmnRBSDataVariablePermission] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnRBSDataVariablePermission] on [dbo].[CmnRBSDataVariablePermission]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnRBSDataVariablePermission] ON [dbo].[CmnRBSDataVariablePermission] ([UserID], [FormID], [TableName], [TableColumn])
GO
PRINT N'Creating [dbo].[CmnRBSPermission]'
GO
CREATE TABLE [dbo].[CmnRBSPermission]
(
[UserID] [INT] NOT NULL,
[FormID] [INT] NOT NULL,
[HasReadPermission] [BIT] NOT NULL,
[Tabs] [VARCHAR] (200) NULL,
[Buttons] [VARCHAR] (1000) NULL,
[Audit] [BIT] NOT NULL,
[SubAudit] [BIT] NOT NULL,
[ValidateChecksum] [BIT] NOT NULL,
[IsFavourite] [BIT] NOT NULL,
[FavouriteOrder] [INT] NULL,
[MainMenuOrder] [INT] NULL,
[SubMenuOrder] [INT] NULL,
[ConfirmMsg] [BIT] NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRBSPermission_CreatedDate] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRBSPermission_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnRBSPermission_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL
)
GO
PRINT N'Creating index [IDX_CmnRBSPermission] on [dbo].[CmnRBSPermission]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnRBSPermission] ON [dbo].[CmnRBSPermission] ([UserID], [FormID], [IsDeleted])
GO
PRINT N'Creating [dbo].[CmnRBSRoleDataVariablePermission]'
GO
CREATE TABLE [dbo].[CmnRBSRoleDataVariablePermission]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[RoleID] [INT] NOT NULL,
[FormID] [INT] NOT NULL,
[ControlName] [NVARCHAR] (200) NULL,
[TableName] [VARCHAR] (255) NULL,
[TableColumn] [VARCHAR] (255) NULL,
[DataValue] [NVARCHAR] (max) NULL,
[SelfData] [BIT] NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRBSRoleDataVariablePermission_CreatedDate] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRBSRoleDataVariablePermission_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnRBSRoleDataVariablePermission_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL
)
GO
PRINT N'Creating primary key [PK_CmnRBSRoleDataVariablePermission] on [dbo].[CmnRBSRoleDataVariablePermission]'
GO
ALTER TABLE [dbo].[CmnRBSRoleDataVariablePermission] ADD CONSTRAINT [PK_CmnRBSRoleDataVariablePermission] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnRBSRoleDataVariablePermission] on [dbo].[CmnRBSRoleDataVariablePermission]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnRBSRoleDataVariablePermission] ON [dbo].[CmnRBSRoleDataVariablePermission] ([RoleID], [FormID], [TableName], [TableColumn])
GO
PRINT N'Creating [dbo].[CmnRolePermission]'
GO
CREATE TABLE [dbo].[CmnRolePermission]
(
[RoleID] [INT] NOT NULL,
[FormID] [INT] NOT NULL,
[HasReadPermission] [BIT] NOT NULL,
[Tabs] [VARCHAR] (200) NULL,
[Buttons] [VARCHAR] (1000) NULL,
[Audit] [BIT] NOT NULL,
[SubAudit] [BIT] NOT NULL,
[ValidateChecksum] [BIT] NOT NULL,
[IsFavourite] [BIT] NOT NULL,
[FavouriteOrder] [INT] NULL,
[MainMenuOrder] [INT] NULL,
[SubMenuOrder] [INT] NULL,
[ConfirmMsg] [BIT] NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRolePermission_CreatedDate] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRolePermission_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnRolePermission_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL
)
GO
PRINT N'Creating index [IDX_CmnRolePermission] on [dbo].[CmnRolePermission]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnRolePermission] ON [dbo].[CmnRolePermission] ([RoleID], [FormID])
GO
PRINT N'Creating [dbo].[CmnRoleSettings]'
GO
CREATE TABLE [dbo].[CmnRoleSettings]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[RoleID] [INT] NULL,
[MainDashboardID] [INT] NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRoleSettings_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRoleSettings_CreatedDateGMT] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRoleSettings_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_CmnRoleSettings_ModifiedDateGMT] DEFAULT (getutcdate()),
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnRoleSettings_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (max) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnRoleSettings_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (max) NULL,
[OrderBy] [INT] NOT NULL,
[VersionID] [INT] NULL,
[Version] [INT] NOT NULL CONSTRAINT [DF_CmnRoleSettings_Version] DEFAULT ((0)),
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnRoleSettings_IsCurrentVersion] DEFAULT ((1)),
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating index [IDX_CmnRoleSettings] on [dbo].[CmnRoleSettings]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnRoleSettings] ON [dbo].[CmnRoleSettings] ([RoleID])
GO
PRINT N'Creating [dbo].[CmnUserProfile]'
GO
CREATE TABLE [dbo].[CmnUserProfile]
(
[UserProfileID] [INT] NOT NULL IDENTITY(1, 1),
[UserID] [INT] NOT NULL,
[ProfileID] [INT] NULL CONSTRAINT [DF_CmnUserProfile_ProfileID] DEFAULT ((0)),
[ThemesID] [INT] NULL CONSTRAINT [DF_CmnUserProfile_ThemesID] DEFAULT ((0)),
[FontType] [INT] NULL CONSTRAINT [DF_CmnUserProfile_FontType] DEFAULT ((0)),
[MenuType] [INT] NULL CONSTRAINT [DF_CmnUserProfile_MenuType] DEFAULT ((0)),
[MenuBar] [BIT] NULL CONSTRAINT [DF__CmnUserPr__MenuB__2486F411] DEFAULT ((0)),
[BarcodePrinterID] [INT] NULL CONSTRAINT [DF_CmnUserProfile_BarcodePrinterID] DEFAULT ((0)),
[COAPrinterID] [INT] NULL CONSTRAINT [DF_CmnUserProfile_COAPrinterID] DEFAULT ((0)),
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnUserProfile_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnUserProfile_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_CmnUserProfile] on [dbo].[CmnUserProfile]'
GO
ALTER TABLE [dbo].[CmnUserProfile] ADD CONSTRAINT [PK_CmnUserProfile] PRIMARY KEY CLUSTERED ([UserProfileID])
GO
PRINT N'Creating [dbo].[CmnUserRegistration]'
GO
CREATE TABLE [dbo].[CmnUserRegistration]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[BranchID] [INT] NOT NULL,
[FirstName] [NVARCHAR] (200) NOT NULL,
[UserName] [NVARCHAR] (200) NOT NULL,
[EmailID] [NVARCHAR] (300) NULL,
[DepartmentID] [INT] NULL,
[LabID] [INT] NULL,
[ApprovedByComments] [NVARCHAR] (4000) NULL,
[ApprovedByID] [INT] NULL,
[ApprovedDate] [DATE] NULL,
[AuthenticationType] [INT] NULL,
[Code] [VARCHAR] (100) NULL,
[DesignationID] [INT] NULL,
[GenderID] [INT] NULL,
[LicenseType] [INT] NULL,
[MenuType] [INT] NULL,
[Mobile] [NVARCHAR] (50) NULL,
[OfficialEmail] [NVARCHAR] (300) NULL,
[ProfileID] [INT] NULL,
[RBSGroupIDs] [VARCHAR] (200) NULL,
[RoleID] [VARCHAR] (200) NULL,
[StatusID] [INT] NULL,
[RejectedByID] [INT] NULL,
[RejectedDate] [DATE] NULL,
[RejectionComments] [NVARCHAR] (4000) NULL,
[StausID] [INT] NULL,
[FontType] [INT] NULL,
[ThemesID] [INT] NULL,
[Password] [NVARCHAR] (200) NULL,
[OriginalPassword] [NVARCHAR] (200) NULL,
[MainPageID] [INT] NULL,
[ProfileOrientation] [INT] NULL,
[ThemeMode] [INT] NULL,
[ModuleBarRequired] [INT] NULL,
[SearchType] [INT] NULL,
[RememberSearch] [INT] NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnUserRegistration_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_CmnUserRegistration_CreatedDateGMT] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnUserRegistration_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_CmnUserRegistration_ModifiedDateGMT] DEFAULT (getutcdate()),
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnUserRegistration_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (max) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnUserRegistration_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (max) NULL,
[OrderBy] [INT] NOT NULL,
[VersionID] [INT] NULL,
[Version] [INT] NOT NULL CONSTRAINT [DF_CmnUserRegistration_Version] DEFAULT ((0)),
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnUserRegistration_IsCurrentVersion] DEFAULT ((1)),
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating index [IDX_CmnUserRegistration] on [dbo].[CmnUserRegistration]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnUserRegistration] ON [dbo].[CmnUserRegistration] ([BranchID])
GO
PRINT N'Creating [dbo].[CmnGroupBoxes]'
GO
CREATE TABLE [dbo].[CmnGroupBoxes]
(
[GroupID] [INT] NOT NULL IDENTITY(1, 1),
[TabID] [INT] NOT NULL,
[Name] [NVARCHAR] (100) NOT NULL,
[DisplayName] [NVARCHAR] (100) NULL,
[GroupOrder] [SMALLINT] NOT NULL,
[CommonGroup] [BIT] NOT NULL,
[TableName] [sys].[sysname] NULL,
[KeyColumn] [sys].[sysname] NULL,
[ControlPerRow] [SMALLINT] NULL,
[IsMobile] [BIT] NOT NULL CONSTRAINT [DF__CmnGroupB__IsMob__246AD526] DEFAULT ((1)),
[Description] [NVARCHAR] (max) NULL,
[IsChildGroupBox] [BIT] NULL,
[ControlCount] [INT] NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnGroupBoxes_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnGroupBoxes_IsDeleted] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnGroupBoxes] on [dbo].[CmnGroupBoxes]'
GO
ALTER TABLE [dbo].[CmnGroupBoxes] ADD CONSTRAINT [PK_CmnGroupBoxes] PRIMARY KEY CLUSTERED ([GroupID])
GO
PRINT N'Creating index [IDX_CmnGroupBoxes] on [dbo].[CmnGroupBoxes]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnGroupBoxes] ON [dbo].[CmnGroupBoxes] ([TabID], [Name])
GO
PRINT N'Creating [dbo].[CmnTabsMultiLingual]'
GO
CREATE TABLE [dbo].[CmnTabsMultiLingual]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[LanguageID] [INT] NOT NULL,
[TabID] [INT] NOT NULL,
[Name] [NVARCHAR] (200) NOT NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnTabsMultiLingual_IsDeleted] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnTabsMultiLingual] on [dbo].[CmnTabsMultiLingual]'
GO
ALTER TABLE [dbo].[CmnTabsMultiLingual] ADD CONSTRAINT [PK_CmnTabsMultiLingual] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnTabsMultiLingual] on [dbo].[CmnTabsMultiLingual]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnTabsMultiLingual] ON [dbo].[CmnTabsMultiLingual] ([TabID], [LanguageID])
GO
PRINT N'Creating [dbo].[CmnFormControls]'
GO
CREATE TABLE [dbo].[CmnFormControls]
(
[ControlID] [INT] NOT NULL IDENTITY(1, 1),
[GroupID] [INT] NOT NULL,
[Name] [NVARCHAR] (100) NOT NULL,
[TableColumn] [sys].[sysname] NOT NULL,
[ControlType] [INT] NOT NULL,
[DataType] [INT] NOT NULL,
[Visibility] [BIT] NOT NULL,
[Readonly] [BIT] NOT NULL,
[IsMandatory] [BIT] NOT NULL,
[IsMobile] [BIT] NULL,
[IsWizard] [BIT] NULL,
[MaxLength] [INT] NOT NULL,
[Events] [NVARCHAR] (max) NULL,
[ValidationEvent] [NVARCHAR] (max) NULL,
[SearchApplicable] [BIT] NOT NULL CONSTRAINT [DF_CmnFormControls_SearchApplicable] DEFAULT ((0)),
[SelectApplicable] [BIT] NOT NULL,
[DefaultValue] [NVARCHAR] (500) NULL,
[MaxRange] [NVARCHAR] (500) NULL,
[AttachmentPath] [NVARCHAR] (255) NULL,
[IsIdentity] [BIT] NOT NULL,
[UniqueGroup] [VARCHAR] (100) NULL,
[IsDmlControl] [BIT] NOT NULL,
[IsEncrypt] [BIT] NOT NULL CONSTRAINT [DF_CmnFormControls_IsEncrypt] DEFAULT ((0)),
[IsReturnFill] [BIT] NOT NULL CONSTRAINT [DF_CmnFormControls_IsReturnFill] DEFAULT ((1)),
[IsNoAdd] [BIT] NOT NULL CONSTRAINT [DF_CmnFormControls_IsNoAdd] DEFAULT ((0)),
[IsNoUpdate] [BIT] NOT NULL CONSTRAINT [DF_CmnFormControls_IsNoUpdate] DEFAULT ((0)),
[FkType] [INT] NULL,
[FkTable] [VARCHAR] (255) NULL,
[FkColumn] [VARCHAR] (255) NULL,
[FkData] [VARCHAR] (255) NULL,
[FkData1] [VARCHAR] (255) NULL,
[FkData2] [VARCHAR] (255) NULL,
[AdditionalConditions] [NVARCHAR] (1000) NULL,
[FilterConditions] [NVARCHAR] (1000) NULL,
[FillEvent] [NVARCHAR] (max) NULL,
[FillType] [BIT] NOT NULL CONSTRAINT [DF_CmnFormControls_FillType] DEFAULT ((0)),
[ButtonID] [INT] NULL,
[ButtonDmlType] [INT] NULL,
[FkOrder] [INT] NULL,
[FkDelete] [BIT] NOT NULL CONSTRAINT [DF_CmnFormControls_FkDelete] DEFAULT ((0)),
[FkNotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnFormControls_FkNotActive] DEFAULT ((0)),
[FkVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnFormControls_FkVersion] DEFAULT ((0)),
[FkShowActive] [BIT] NOT NULL CONSTRAINT [DF_CmnFormControls_FkShowActive] DEFAULT ((0)),
[VersionCheck] [BIT] NOT NULL CONSTRAINT [DF_CmnFormControls_VersionCheck] DEFAULT ((0)),
[ControlOrder] [SMALLINT] NOT NULL,
[IsOldRefColumn] [BIT] NULL,
[DataVariable] [BIT] NULL,
[IsAutoGenerate] [BIT] NULL,
[IsSelectAll] [BIT] NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnFormControls_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnFormControls_IsDeleted] DEFAULT ((0)),
[ColumnWidth] [VARCHAR] (4) NULL,
[DateDifference] [INT] NULL,
[Description] [NVARCHAR] (max) NULL,
[BarLimitCount] [INT] NULL,
[ResultRoundOf] [INT] NULL,
[BarColour] [NVARCHAR] (max) NULL,
[StartPoint] [INT] NULL,
[CustomPointValue] [VARCHAR] (max) NULL,
[AttachmentMaxSize] [INT] NULL,
[IsMyDashboard] [BIT] NULL,
[CategoryDisplay] [BIT] NULL
)
GO
PRINT N'Creating primary key [PK_CmnFormControls] on [dbo].[CmnFormControls]'
GO
ALTER TABLE [dbo].[CmnFormControls] ADD CONSTRAINT [PK_CmnFormControls] PRIMARY KEY CLUSTERED ([ControlID])
GO
PRINT N'Creating index [IDX_CmnFormControls] on [dbo].[CmnFormControls]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnFormControls] ON [dbo].[CmnFormControls] ([GroupID], [Name])
GO
PRINT N'Creating [dbo].[CmnGroupMultiLingual]'
GO
CREATE TABLE [dbo].[CmnGroupMultiLingual]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[LanguageID] [INT] NOT NULL,
[GroupID] [INT] NOT NULL,
[Name] [NVARCHAR] (200) NOT NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnGroupMultiLingual_IsDeleted] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnGroupMultiLingual] on [dbo].[CmnGroupMultiLingual]'
GO
ALTER TABLE [dbo].[CmnGroupMultiLingual] ADD CONSTRAINT [PK_CmnGroupMultiLingual] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnGroupMultiLingual] on [dbo].[CmnGroupMultiLingual]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnGroupMultiLingual] ON [dbo].[CmnGroupMultiLingual] ([GroupID], [LanguageID])
GO
PRINT N'Creating [dbo].[CmnAuditTracking]'
GO
CREATE TABLE [dbo].[CmnAuditTracking]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[AuditDate] [DATETIME] NOT NULL,
[UserID] [INT] NOT NULL,
[FormID] [INT] NOT NULL,
[IpAddress] [NVARCHAR] (100) NOT NULL,
[FormName] [VARCHAR] (100) NOT NULL,
[EventName] [NVARCHAR] (100) NOT NULL,
[TableName] [sys].[sysname] NOT NULL,
[IdentityColumn] [sys].[sysname] NOT NULL,
[IdentityValue] [BIGINT] NOT NULL,
[Comments] [NVARCHAR] (4000) NULL,
[Status] [CHAR] (1) NOT NULL,
IsProcessed CHAR(1) NOT NULL DEFAULT '0',
[SessionID] [VARCHAR] (500) NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnAuditTracking_CreatedDate] DEFAULT (getutcdate()),
[ModifiedDate] [DATETIME] NULL,
[ModifiedBy] [INT] NULL,
[IsDeleted] [BIT] NULL CONSTRAINT [DF_CmnAuditTracking_IsDeleted] DEFAULT ((0)),
[CompanyID] [INT] NULL
)
GO
PRINT N'Creating primary key [PK_CmnAuditTracking] on [dbo].[CmnAuditTracking]'
GO
ALTER TABLE [dbo].[CmnAuditTracking] ADD CONSTRAINT [PK_CmnAuditTracking] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnAuditTracking] on [dbo].[CmnAuditTracking]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnAuditTracking] ON [dbo].[CmnAuditTracking] ([AuditDate], [UserID])
GO
PRINT N'Creating index [IDX_CmnAuditTracking_Session] on [dbo].[CmnAuditTracking]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnAuditTracking_Session] ON [dbo].[CmnAuditTracking] ([SessionID], [UserID])
GO
PRINT N'Creating [dbo].[CmnControlColumns]'
GO
CREATE TABLE [dbo].[CmnControlColumns]
(
[ColumnID] [BIGINT] NOT NULL IDENTITY(1, 1),
[ControlID] [INT] NOT NULL,
[ColumnName] [sys].[sysname] NOT NULL,
[ColumnName1] [sys].[sysname] NULL,
[ColumnName2] [sys].[sysname] NULL,
[DisplayName] [NVARCHAR] (255) NOT NULL,
[ControlType] [INT] NOT NULL,
[DataType] [INT] NOT NULL,
[Visibility] [BIT] NOT NULL,
[Readonly] [BIT] NOT NULL CONSTRAINT [DF_CmnControlColumns_Readonly] DEFAULT ((0)),
[IsMandatory] [BIT] NOT NULL CONSTRAINT [DF_CmnControlColumns_IsMandatory] DEFAULT ((0)),
[IsMobile] [BIT] NULL,
[IsWizard] [BIT] NULL,
[MaxLength] [INT] NOT NULL,
[Events] [NVARCHAR] (1000) NULL,
[ValidationEvent] [NVARCHAR] (500) NULL,
[SearchApplicable] [BIT] NOT NULL CONSTRAINT [DF_CmnControlColumns_SearchApplicable] DEFAULT ((0)),
[SelectApplicable] [BIT] NOT NULL CONSTRAINT [DF_CmnControlColumns_SelectApplicable] DEFAULT ((0)),
[DefaultValue] [NVARCHAR] (2000) NULL,
[MaxRange] [NVARCHAR] (2000) NULL,
[AttachmentPath] [NVARCHAR] (255) NULL,
[IsIdentity] [BIT] NOT NULL CONSTRAINT [DF_CmnControlColumns_IsIdentity] DEFAULT ((0)),
[UniqueGroup] [SMALLINT] NULL,
[IsDmlControl] [BIT] NOT NULL CONSTRAINT [DF_CmnControlColumns_IsDmlControl] DEFAULT ((0)),
[FkType] [INT] NULL,
[FkTable] [sys].[sysname] NULL,
[FkColumn] [sys].[sysname] NULL,
[FkData] [sys].[sysname] NULL,
[FkData1] [sys].[sysname] NULL,
[FkData2] [sys].[sysname] NULL,
[AdditionalConditions] [NVARCHAR] (1000) NULL,
[DependentFlag] [BIT] NULL CONSTRAINT [DF__CmnContro__Depen__20F0F209] DEFAULT ((0)),
[ColumnWidth] [VARCHAR] (4) NULL,
[GridParentControl] [VARCHAR] (100) NULL,
[FillEvent] [NVARCHAR] (500) NULL,
[DependentType] [SMALLINT] NULL,
[FkOrder] [INT] NULL,
[FkDelete] [BIT] NOT NULL CONSTRAINT [DF_CmnControlColumns_FkDelete] DEFAULT ((0)),
[FkNotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnControlColumns_FkNotActive] DEFAULT ((0)),
[FkVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnControlColumns_FkVersion] DEFAULT ((0)),
[FkShowActive] [BIT] NOT NULL CONSTRAINT [DF_CmnControlColumns_FkShowActive] DEFAULT ((0)),
[VersionCheck] [BIT] NOT NULL CONSTRAINT [DF_CmnControlColumns_VersionCheck] DEFAULT ((0)),
[ColumnOrder] [SMALLINT] NOT NULL,
[DataVariable] [BIT] NULL,
[IsAutoGenerate] [BIT] NULL,
[IsSelectAll] [BIT] NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnControlColumns_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnControlColumns_IsDeleted] DEFAULT ((0)),
[DateDifference] [INT] NULL,
[Description] [NVARCHAR] (max) NULL,
[AttachmentMaxSize] [INT] NULL,
[IsNoUpdate] [BIT] NULL CONSTRAINT [DF__CmnContro__IsNoU__44C3BFAE] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnControlColumns] on [dbo].[CmnControlColumns]'
GO
ALTER TABLE [dbo].[CmnControlColumns] ADD CONSTRAINT [PK_CmnControlColumns] PRIMARY KEY CLUSTERED ([ColumnID])
GO
PRINT N'Creating index [IDX_CmnControlColumns] on [dbo].[CmnControlColumns]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnControlColumns] ON [dbo].[CmnControlColumns] ([ControlID], [ColumnName], [DisplayName])
GO
PRINT N'Creating [dbo].[CmnControlProperty]'
GO
CREATE TABLE [dbo].[CmnControlProperty]
(
[ControlID] [INT] NOT NULL,
[Name] [NVARCHAR] (100) NOT NULL,
[Value] [NVARCHAR] (1000) NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnControlProperty_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnControlProperty_IsDeleted] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnControlProperty] on [dbo].[CmnControlProperty]'
GO
ALTER TABLE [dbo].[CmnControlProperty] ADD CONSTRAINT [PK_CmnControlProperty] PRIMARY KEY CLUSTERED ([ControlID], [Name])
GO
PRINT N'Creating [dbo].[CmnControlsMultiLingual]'
GO
CREATE TABLE [dbo].[CmnControlsMultiLingual]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[LanguageID] [INT] NOT NULL,
[ControlID] [INT] NOT NULL,
[Name] [NVARCHAR] (200) NOT NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnControlsMultiLingual_IsDeleted] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnControlsMultiLingual] on [dbo].[CmnControlsMultiLingual]'
GO
ALTER TABLE [dbo].[CmnControlsMultiLingual] ADD CONSTRAINT [PK_CmnControlsMultiLingual] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnControlsMultiLingual] on [dbo].[CmnControlsMultiLingual]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnControlsMultiLingual] ON [dbo].[CmnControlsMultiLingual] ([ControlID], [LanguageID])
GO
PRINT N'Creating [dbo].[CmnFormSearchControl]'
GO
CREATE TABLE [dbo].[CmnFormSearchControl]
(
[SearchID] [INT] NOT NULL IDENTITY(1, 1),
[ControlID] [INT] NOT NULL,
[FormID] [INT] NOT NULL,
[Name] [NVARCHAR] (100) NOT NULL,
[TableColumn] [sys].[sysname] NOT NULL,
[ControlType] [INT] NOT NULL,
[DataType] [INT] NOT NULL,
[Visibility] [BIT] NOT NULL,
[Readonly] [BIT] NOT NULL,
[IsMandatory] [BIT] NOT NULL,
[IsMobile] [BIT] NULL,
[MaxLength] [INT] NULL CONSTRAINT [DF_CmnFormSearchControl_MaxLength] DEFAULT ((-1)),
[Events] [NVARCHAR] (1000) NULL,
[ValidationEvent] [NVARCHAR] (500) NULL,
[SelectApplicable] [BIT] NULL,
[DefaultValue] [NVARCHAR] (2000) NULL,
[MaxRange] [NVARCHAR] (2000) NULL,
[FkType] [INT] NULL,
[FkTable] [sys].[sysname] NULL,
[FkColumn] [sys].[sysname] NULL,
[FkData] [sys].[sysname] NULL,
[AdditionalConditions] [NVARCHAR] (1000) NULL,
[FkOrder] [INT] NULL,
[FkDelete] [BIT] NOT NULL CONSTRAINT [DF_CmnFormSearchControl_FkDelete] DEFAULT ((0)),
[FkNotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnFormSearchControl_FkNotActive] DEFAULT ((0)),
[FkVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnFormSearchControl_FkVersion] DEFAULT ((0)),
[SearchOrder] [SMALLINT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnFormSearchControl_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnFormSearchControl_IsDeleted] DEFAULT ((0)),
[ButtonID] [INT] NULL,
[Type] [VARCHAR] (15) NULL,
[DateFilterType] [INT] NULL,
[FillEvent] [NVARCHAR] (500) NULL,
[DataVariable] [BIT] NULL,
[DateDifference] [INT] NULL,
[Description] [NVARCHAR] (max) NULL
)
GO
PRINT N'Creating primary key [PK_CmnFormSearchControl] on [dbo].[CmnFormSearchControl]'
GO
ALTER TABLE [dbo].[CmnFormSearchControl] ADD CONSTRAINT [PK_CmnFormSearchControl] PRIMARY KEY CLUSTERED ([SearchID])
GO
PRINT N'Creating index [IDX_CmnFormSearchControl] on [dbo].[CmnFormSearchControl]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnFormSearchControl] ON [dbo].[CmnFormSearchControl] ([FormID], [ControlID], [Name])
GO
PRINT N'Creating [dbo].[CmnAuditDataTracking]'
GO
CREATE TABLE [dbo].[CmnAuditDataTracking]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[AuditTrackingID] [BIGINT] NOT NULL,
[ControlID] [BIGINT] NOT NULL,
[ColumnID] [BIGINT] NULL,
[TableColumn] [sys].[sysname] NOT NULL,
[OldData] [NVARCHAR] (4000) NULL,
[NewData] [NVARCHAR] (4000) NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnAuditDataTracking_CreatedDate] DEFAULT (getutcdate()),
[ModifiedDate] [DATETIME] NULL,
[ModifiedBy] [INT] NULL,
[IsDeleted] [BIT] NULL CONSTRAINT [DF_CmnAuditDataTracking_IsDeleted] DEFAULT ((0)),
[SyncError] [BIT] NOT NULL CONSTRAINT [DF__CmnAuditD__SyncE__474499D1] DEFAULT ((0)),
[ErrorMessage] [NVARCHAR] (4000) NULL,
OldDataDisplay NVARCHAR(4000) NULL,
NewDataDisplay NVARCHAR(4000) NULL,
TableColumnDisplay NVARCHAR(255) NULL
)
GO
PRINT N'Creating primary key [PK_CmnAuditDataTracking] on [dbo].[CmnAuditDataTracking]'
GO
ALTER TABLE [dbo].[CmnAuditDataTracking] ADD CONSTRAINT [PK_CmnAuditDataTracking] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnAuditDataTracking] on [dbo].[CmnAuditDataTracking]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnAuditDataTracking] ON [dbo].[CmnAuditDataTracking] ([AuditTrackingID], [ControlID], [TableColumn])
GO
PRINT N'Creating [dbo].[CmnColumnProperty]'
GO
CREATE TABLE [dbo].[CmnColumnProperty]
(
[ColumnID] [BIGINT] NOT NULL,
[Name] [NVARCHAR] (100) NOT NULL,
[Value] [NVARCHAR] (100) NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnColumnProperty_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnColumnProperty_IsDeleted] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnColumnProperty] on [dbo].[CmnColumnProperty]'
GO
ALTER TABLE [dbo].[CmnColumnProperty] ADD CONSTRAINT [PK_CmnColumnProperty] PRIMARY KEY CLUSTERED ([ColumnID], [Name])
GO
PRINT N'Creating [dbo].[CmnColumnsMultiLingual]'
GO
CREATE TABLE [dbo].[CmnColumnsMultiLingual]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[LanguageID] [INT] NOT NULL,
[ColumnID] [BIGINT] NOT NULL,
[Name] [NVARCHAR] (200) NOT NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnColumnsMultiLingual_IsDeleted] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnColumnsMultiLingual] on [dbo].[CmnColumnsMultiLingual]'
GO
ALTER TABLE [dbo].[CmnColumnsMultiLingual] ADD CONSTRAINT [PK_CmnColumnsMultiLingual] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnColumnsMultiLingual] on [dbo].[CmnColumnsMultiLingual]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnColumnsMultiLingual] ON [dbo].[CmnColumnsMultiLingual] ([ColumnID], [LanguageID])
GO
PRINT N'Creating [dbo].[CmnControlAutoGenerateConfig]'
GO
CREATE TABLE [dbo].[CmnControlAutoGenerateConfig]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[FormID] [BIGINT] NOT NULL,
[ConfigTypeID] [INT] NOT NULL,
[ControlID] [BIGINT] NOT NULL,
[CountBasisID] [INT] NULL,
[ResetPeriodID] [INT] NULL,
[StartingNumber] [INT] NULL,
[DigitsCount] [INT] NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnControlAutoGenerateConfig_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnControlAutoGenerateConfig_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnControlAutoGenerateConfig_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnControlAutoGenerateConfig_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnControlAutoGenerateConfig_IsCurrentVersion] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF_CmnControlAutoGenerateConfig_Version] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_CmnControlAutoGenerateConfig] on [dbo].[CmnControlAutoGenerateConfig]'
GO
ALTER TABLE [dbo].[CmnControlAutoGenerateConfig] ADD CONSTRAINT [PK_CmnControlAutoGenerateConfig] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnControlAutoGenerateConfig] on [dbo].[CmnControlAutoGenerateConfig]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnControlAutoGenerateConfig] ON [dbo].[CmnControlAutoGenerateConfig] ([FormID], [ConfigTypeID], [ControlID])
GO
PRINT N'Creating [dbo].[CmnGeneralProperty]'
GO
CREATE TABLE [dbo].[CmnGeneralProperty]
(
[Type] [NVARCHAR] (100) NOT NULL,
[TypeID] [INT] NOT NULL,
[Name] [NVARCHAR] (100) NOT NULL,
[Value] [NVARCHAR] (100) NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnGeneralProperty_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnGeneralProperty_IsDeleted] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnGeneralProperty] on [dbo].[CmnGeneralProperty]'
GO
ALTER TABLE [dbo].[CmnGeneralProperty] ADD CONSTRAINT [PK_CmnGeneralProperty] PRIMARY KEY CLUSTERED ([Type], [TypeID], [Name])
GO
PRINT N'Creating index [IDX_CmnGeneralProperty] on [dbo].[CmnGeneralProperty]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnGeneralProperty] ON [dbo].[CmnGeneralProperty] ([Type], [TypeID], [IsDeleted])
GO
PRINT N'Creating [dbo].[CmnGridControlColumns]'
GO
CREATE TABLE [dbo].[CmnGridControlColumns]
(
[ColumnID] [BIGINT] NOT NULL IDENTITY(1, 1),
[ControlID] [INT] NOT NULL,
[ColumnName] [sys].[sysname] NOT NULL,
[ColumnName1] [sys].[sysname] NULL,
[ColumnName2] [sys].[sysname] NULL,
[DisplayName] [NVARCHAR] (255) NOT NULL,
[ControlType] [INT] NOT NULL,
[DataType] [INT] NOT NULL,
[Visibility] [BIT] NOT NULL,
[Readonly] [BIT] NOT NULL CONSTRAINT [DF_CmnGridControlColumns_Readonly] DEFAULT ((0)),
[IsMandatory] [BIT] NOT NULL CONSTRAINT [DF_CmnGridControlColumns_IsMandatory] DEFAULT ((0)),
[IsMobile] [BIT] NULL,
[IsWizard] [BIT] NULL,
[MaxLength] [INT] NOT NULL,
[Events] [NVARCHAR] (1000) NULL,
[ValidationEvent] [NVARCHAR] (500) NULL,
[SearchApplicable] [BIT] NOT NULL CONSTRAINT [DF_CmnGridControlColumns_SearchApplicable] DEFAULT ((0)),
[SelectApplicable] [BIT] NOT NULL CONSTRAINT [DF_CmnGridControlColumns_SelectApplicable] DEFAULT ((0)),
[DefaultValue] [NVARCHAR] (2000) NULL,
[MaxRange] [NVARCHAR] (2000) NULL,
[AttachmentPath] [NVARCHAR] (255) NULL,
[IsIdentity] [BIT] NOT NULL CONSTRAINT [DF_CmnGridControlColumns_IsIdentity] DEFAULT ((0)),
[UniqueGroup] [SMALLINT] NULL,
[IsDmlControl] [BIT] NOT NULL CONSTRAINT [DF_CmnGridControlColumns_IsDmlControl] DEFAULT ((0)),
[FkType] [INT] NULL,
[FkTable] [sys].[sysname] NULL,
[FkColumn] [sys].[sysname] NULL,
[FkData] [sys].[sysname] NULL,
[AdditionalConditions] [NVARCHAR] (1000) NULL,
[IsDataSource] [BIT] NULL CONSTRAINT [DF__CmnGridCo__IsDat__1EE34205] DEFAULT ((0)),
[DecimalLength] [SMALLINT] NULL,
[IsCurrency] [BIT] NULL CONSTRAINT [DF__CmnGridCo__IsCur__69527B23] DEFAULT ((0)),
[CurrencyColumn] [VARCHAR] (100) NULL,
[DependentFlag] [BIT] NULL CONSTRAINT [DF__CmnGridCo__Depen__18FE9855] DEFAULT ((0)),
[DependentType] [SMALLINT] NULL,
[FkOrder] [INT] NULL,
[FkDelete] [BIT] NOT NULL CONSTRAINT [DF_CmnGridControlColumns_FkDelete] DEFAULT ((0)),
[FkNotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnGridControlColumns_FkNotActive] DEFAULT ((0)),
[FkVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnGridControlColumns_FkVersion] DEFAULT ((0)),
[FkShowActive] [BIT] NOT NULL CONSTRAINT [DF_CmnGridControlColumns_FkShowActive] DEFAULT ((0)),
[VersionCheck] [BIT] NOT NULL CONSTRAINT [DF_CmnGridControlColumns_VersionCheck] DEFAULT ((0)),
[ColumnOrder] [SMALLINT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnGridControlColumns_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnGridControlColumns_IsDeleted] DEFAULT ((0)),
[ColumnWidth] [VARCHAR] (4) NULL,
[DateDifference] [INT] NULL,
[Description] [NVARCHAR] (max) NULL,
[AttachmentMaxSize] [INT] NULL
)
GO
PRINT N'Creating primary key [PK_CmnGridControlColumns] on [dbo].[CmnGridControlColumns]'
GO
ALTER TABLE [dbo].[CmnGridControlColumns] ADD CONSTRAINT [PK_CmnGridControlColumns] PRIMARY KEY CLUSTERED ([ColumnID])
GO
PRINT N'Creating index [IDX_CmnGridControlColumns] on [dbo].[CmnGridControlColumns]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnGridControlColumns] ON [dbo].[CmnGridControlColumns] ([ControlID], [ColumnName], [DisplayName])
GO
PRINT N'Creating [dbo].[CmnSearchControlColumns]'
GO
CREATE TABLE [dbo].[CmnSearchControlColumns]
(
[ColumnID] [BIGINT] NOT NULL IDENTITY(1, 1),
[SearchID] [INT] NOT NULL,
[ColumnName] [sys].[sysname] NOT NULL,
[ColumnName1] [sys].[sysname] NULL,
[ColumnName2] [sys].[sysname] NULL,
[DisplayName] [NVARCHAR] (255) NOT NULL,
[ControlType] [INT] NOT NULL,
[DataType] [INT] NOT NULL,
[Visibility] [BIT] NOT NULL,
[Readonly] [BIT] NOT NULL CONSTRAINT [DF_CmnSearchControlColumns_Readonly] DEFAULT ((0)),
[IsMandatory] [BIT] NOT NULL CONSTRAINT [DF_CmnSearchControlColumns_IsMandatory] DEFAULT ((0)),
[MaxLength] [INT] NOT NULL,
[Events] [NVARCHAR] (1000) NULL,
[ValidationEvent] [NVARCHAR] (500) NULL,
[SelectApplicable] [BIT] NOT NULL CONSTRAINT [DF_CmnSearchControlColumns_SelectApplicable] DEFAULT ((0)),
[DefaultValue] [NVARCHAR] (max) NULL,
[MaxRange] [NVARCHAR] (max) NULL,
[AttachmentPath] [NVARCHAR] (255) NULL,
[IsIdentity] [BIT] NOT NULL CONSTRAINT [DF_CmnSearchControlColumns_IsIdentity] DEFAULT ((0)),
[UniqueGroup] [SMALLINT] NULL,
[IsDmlControl] [BIT] NOT NULL CONSTRAINT [DF_CmnSearchControlColumns_IsDmlControl] DEFAULT ((0)),
[FkType] [INT] NULL,
[FkTable] [sys].[sysname] NULL,
[FkColumn] [sys].[sysname] NULL,
[FkData] [sys].[sysname] NULL,
[AdditionalConditions] [NVARCHAR] (1000) NULL,
[FkOrder] [INT] NULL,
[FkDelete] [BIT] NOT NULL CONSTRAINT [DF_CmnSearchControlColumns_FkDelete] DEFAULT ((0)),
[FkNotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnSearchControlColumns_FkNotActive] DEFAULT ((0)),
[FkVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnSearchControlColumns_FkVersion] DEFAULT ((0)),
[FkShowActive] [BIT] NOT NULL CONSTRAINT [DF_CmnSearchControlColumns_FkShowActive] DEFAULT ((0)),
[ColumnOrder] [SMALLINT] NOT NULL,
[DependentType] [SMALLINT] NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnSearchControlColumns_ModifiedDate] DEFAULT (getutcdate()),
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnSearchControlColumns_LoginAttempt] DEFAULT ((0)),
[DateDifference] [INT] NULL,
[Description] [NVARCHAR] (max) NULL
)
GO
PRINT N'Creating primary key [PK__CmnSearchControl__444B1371] on [dbo].[CmnSearchControlColumns]'
GO
ALTER TABLE [dbo].[CmnSearchControlColumns] ADD CONSTRAINT [PK__CmnSearchControl__444B1371] PRIMARY KEY CLUSTERED ([ColumnID])
GO
PRINT N'Creating index [IDX_CmnSearchControlColumns] on [dbo].[CmnSearchControlColumns]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnSearchControlColumns] ON [dbo].[CmnSearchControlColumns] ([SearchID], [ColumnName], [DisplayName])
GO
PRINT N'Creating [dbo].[CmnSearchMultiLingual]'
GO
CREATE TABLE [dbo].[CmnSearchMultiLingual]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[LanguageID] [INT] NOT NULL,
[SearchID] [INT] NOT NULL,
[Name] [NVARCHAR] (200) NOT NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnSearchMultiLingual_IsDeleted] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnSearchMultiLingual] on [dbo].[CmnSearchMultiLingual]'
GO
ALTER TABLE [dbo].[CmnSearchMultiLingual] ADD CONSTRAINT [PK_CmnSearchMultiLingual] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnSearchMultiLingual] on [dbo].[CmnSearchMultiLingual]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnSearchMultiLingual] ON [dbo].[CmnSearchMultiLingual] ([SearchID], [LanguageID])
GO
PRINT N'Creating [dbo].[CmnControlCodeAutoConfig]'
GO
CREATE TABLE [dbo].[CmnControlCodeAutoConfig]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[ControlConfigID] [BIGINT] NOT NULL,
[FormID] [BIGINT] NOT NULL,
[ControlID] [BIGINT] NOT NULL,
[CodeTypeID] [INT] NULL,
[MasterID] [INT] NULL,
[FixedCode] [NVARCHAR] (10) NULL,
[FieldTypeID] [INT] NULL,
[FieldName] [VARCHAR] (255) NULL,
[SeparatorChar] [NVARCHAR] (10) NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnControlCodeAutoConfig_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_CmnControlCodeAutoConfig_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_CmnControlCodeAutoConfig_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnControlCodeAutoConfig_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_CmnControlCodeAutoConfig_IsCurrentVersion] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF_CmnControlCodeAutoConfig_Version] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_CmnControlCodeAutoConfig] on [dbo].[CmnControlCodeAutoConfig]'
GO
ALTER TABLE [dbo].[CmnControlCodeAutoConfig] ADD CONSTRAINT [PK_CmnControlCodeAutoConfig] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnControlCodeAutoConfig] on [dbo].[CmnControlCodeAutoConfig]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnControlCodeAutoConfig] ON [dbo].[CmnControlCodeAutoConfig] ([FormID], [ControlConfigID], [ControlID])
GO
PRINT N'Creating [dbo].[CmnGridColumnsMultiLingual]'
GO
CREATE TABLE [dbo].[CmnGridColumnsMultiLingual]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[LanguageID] [INT] NOT NULL,
[ColumnID] [BIGINT] NOT NULL,
[Name] [NVARCHAR] (200) NOT NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnGridColumnsMultiLingual_IsDeleted] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnGridColumnsMultiLingual] on [dbo].[CmnGridColumnsMultiLingual]'
GO
ALTER TABLE [dbo].[CmnGridColumnsMultiLingual] ADD CONSTRAINT [PK_CmnGridColumnsMultiLingual] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnGridColumnsMultiLingual] on [dbo].[CmnGridColumnsMultiLingual]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnGridColumnsMultiLingual] ON [dbo].[CmnGridColumnsMultiLingual] ([ColumnID], [LanguageID])
GO
PRINT N'Creating [dbo].[CmnSearchColumnsMultiLingual]'
GO
CREATE TABLE [dbo].[CmnSearchColumnsMultiLingual]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[LanguageID] [INT] NOT NULL,
[ColumnID] [BIGINT] NOT NULL,
[Name] [NVARCHAR] (200) NOT NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_CmnSearchColumnsMultiLingual_IsDeleted] DEFAULT ((0))
)
GO
PRINT N'Creating primary key [PK_CmnSearchColumnsMultiLingual] on [dbo].[CmnSearchColumnsMultiLingual]'
GO
ALTER TABLE [dbo].[CmnSearchColumnsMultiLingual] ADD CONSTRAINT [PK_CmnSearchColumnsMultiLingual] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnSearchColumnsMultiLingual] on [dbo].[CmnSearchColumnsMultiLingual]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnSearchColumnsMultiLingual] ON [dbo].[CmnSearchColumnsMultiLingual] ([ColumnID], [LanguageID])
GO
PRINT N'Creating [dbo].[MstClientDetails]'
GO
CREATE TABLE [dbo].[MstClientDetails]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[Code] [NVARCHAR] (100) NOT NULL,
[Name] [NVARCHAR] (500) NOT NULL,
[Initial] [NVARCHAR] (50) NULL,
[PriceCurrency] [INT] NULL,
[RegistrationNumber] [NVARCHAR] (255) NULL,
[VendorNo] [NVARCHAR] (255) NULL,
[VATNo] [NVARCHAR] (255) NULL,
[Address1] [NVARCHAR] (1000) NULL,
[Address2] [NVARCHAR] (1000) NULL,
[CountryID] [INT] NULL,
[State] [NVARCHAR] (100) NULL,
[City] [NVARCHAR] (100) NULL,
[ZIP] [NVARCHAR] (200) NULL,
[Tel] [NVARCHAR] (25) NULL,
[TelExt] [NVARCHAR] (25) NULL,
[Mobile] [NVARCHAR] (25) NULL,
[Fax] [NVARCHAR] (50) NULL,
[FaxExt] [NVARCHAR] (50) NULL,
[Email] [NVARCHAR] (500) NULL,
[SalesEmail] [NVARCHAR] (500) NULL,
[SupportEmail] [NVARCHAR] (500) NULL,
[Website] [NVARCHAR] (1000) NULL,
[BranchID] [NVARCHAR] (500) NULL,
[CreditLimit] [INT] NULL,
[TokenID] [NVARCHAR] (500) NULL,
[PortalPassword] [NVARCHAR] (500) NULL,
[ShipmentModeID] [INT] NULL,
[PaymentModeID] [INT] NULL,
[CarrierID] [INT] NULL,
[GroupID] [INT] NULL,
[CollectorCodeID] [INT] NULL,
[BusinesstypeID] [INT] NULL,
[Segment] [INT] NULL,
[Classification] [INT] NULL,
[CostCenterID] [INT] NULL,
[StdDiscount] [DECIMAL] (6, 3) NULL,
[Blocked] [BIT] NULL CONSTRAINT [DF_MstClientDetails_Blocked] DEFAULT ((0)),
[BlockReason] [INT] NULL,
[RefClient] [BIT] NULL CONSTRAINT [DF_MstClientDetails_RefClient] DEFAULT ((0)),
[KeyClient] [BIT] NULL CONSTRAINT [DF_MstClientDetails_KeyClient] DEFAULT ((0)),
[ReferenceClient] [BIT] NULL CONSTRAINT [DF_MstClientDetails_ReferenceClient] DEFAULT ((0)),
[Remarks] [NVARCHAR] (max) NULL,
[Attachment] [INT] NULL,
[CategoryID] [INT] NULL,
[CreditLimitCurrency] [INT] NULL,
[ClientPhoto] [INT] NULL,
[CheckSumPhoto] [INT] NULL,
[CheckSumStatus] [BIT] NULL CONSTRAINT [DF_MstClientDetails_CheckSumStatus] DEFAULT ((0)),
[SingleSelection] [INT] NULL,
[MultipleSelection] [NVARCHAR] (1000) NULL,
[ContactPerson] [NVARCHAR] (500) NULL,
[PortalUserName] [NVARCHAR] (100) NULL,
[ClientPortalPassword] [NVARCHAR] (200) NULL,
[IsServiceTaxExempt] [BIT] NULL,
[IsDutyTax] [BIT] NULL,
[DutyTaxID] [INT] NULL,
[IsItemTax] [BIT] NULL,
[ItemTaxID] [INT] NULL,
[IsServiceTax] [BIT] NULL,
[ServiceTaxID] [INT] NULL,
[ItemTypes] [VARCHAR] (max) NULL,
[IsBusinessOpportunity] [BIT] NULL,
[MarketingPersonID] [INT] NULL,
[SalesPersonID] [INT] NULL,
[SupportPersonID] [INT] NULL,
[OrderProcessPersonID] [INT] NULL,
[InvoicePersonID] [INT] NULL,
[ReceivablesPersonID] [INT] NULL,
[RelationshipPersonID] [INT] NULL,
[SyncClientID] [INT] NULL,
[DOB] [DATE] NULL,
[GenderID] [INT] NULL,
[Pincode] [VARCHAR] (100) NULL,
[Address] [NVARCHAR] (1000) NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstClientDetails_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstClientDetails_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_MstClientDetails_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (max) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_MstClientDetails_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[OrderBy] [INT] NOT NULL,
[VersionID] [INT] NULL,
[Version] [INT] NOT NULL CONSTRAINT [DF_MstClientDetails_Version] DEFAULT ((1)),
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_MstClientDetails_IsCurrentVersion] DEFAULT ((1)),
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_MstClientDetails] on [dbo].[MstClientDetails]'
GO
ALTER TABLE [dbo].[MstClientDetails] ADD CONSTRAINT [PK_MstClientDetails] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[MstCompanyDetails]'
GO
CREATE TABLE [dbo].[MstCompanyDetails]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[ParentCompanyID] [INT] NULL,
[Code] [NVARCHAR] (100) NOT NULL,
[Name] [NVARCHAR] (500) NOT NULL,
[HeadOffice] [BIT] NULL,
[Initial] [NVARCHAR] (50) NULL,
[VATNo] [NVARCHAR] (255) NULL,
[PObox] [NVARCHAR] (100) NULL,
[City] [NVARCHAR] (100) NULL,
[State] [INT] NULL,
[CountryID] [INT] NULL,
[Address] [NVARCHAR] (1000) NULL,
[Remarks] [NVARCHAR] (1000) NULL,
[WeekendDays] [VARCHAR] (100) NULL,
[CurrencyID] [INT] NULL,
[IndustryID] [INT] NULL,
[FinanceYearStartMonthID] [INT] NULL,
[FinanceYearEndMonthID] [INT] NULL,
[OfficeStartTime] [TIME] NULL,
[OfficeEndTime] [TIME] NULL,
[BreakHours] [TIME] NULL,
[BreakMinutes] [TIME] NULL,
[MonthlyWorkingDays] [INT] NULL,
[DailyWorkingHours] [INT] NULL,
[DailyWorkingMinutes] [INT] NULL,
[DeliveryTime] [INT] NULL,
[LeaveCarryForward] [INT] NULL,
[LeaveExempt] [VARCHAR] (100) NULL,
[ExemptLeaveType] [VARCHAR] (100) NULL,
[MonthExemptLimit] [INT] NULL,
[LeaveApplicable] [NVARCHAR] (100) NULL,
[RegistrationNumber] [NVARCHAR] (100) NULL,
[TaxExempt] [BIT] NULL,
[PrimaryTelephone] [VARCHAR] (25) NULL,
[PrimaryTelephoneExt] [VARCHAR] (25) NULL,
[SecondaryTelephone] [VARCHAR] (25) NULL,
[SecondaryTelephoneExt] [VARCHAR] (25) NULL,
[PrimaryFax] [VARCHAR] (25) NULL,
[PrimaryFaxExt] [VARCHAR] (25) NULL,
[SecondaryFax] [VARCHAR] (25) NULL,
[SecondaryFaxExt] [VARCHAR] (25) NULL,
[PrimaryEmail] [NVARCHAR] (500) NULL,
[SecondaryEmail] [NVARCHAR] (500) NULL,
[Website] [NVARCHAR] (500) NULL,
[ClientPortal] [NVARCHAR] (500) NULL,
[OffsetMinute] [INT] NOT NULL CONSTRAINT [DF_MstCompanyDetails_OffsetMinute] DEFAULT ((0)),
[Logo] [INT] NULL,
[Header] [INT] NULL,
[Footer] [INT] NULL,
[Accreditation] [INT] NULL,
[Stamp] [INT] NULL,
[Watermark] [INT] NULL,
[PhotoViewer] [INT] NULL,
[DefaultUserPassword] [NVARCHAR] (200) NULL,
[StateID] [INT] NULL,
[MasterGSTAccountEmail] [NVARCHAR] (500) NULL,
[MasterGSTAccountPassword] [NVARCHAR] (500) NULL,
[ClientID] [NVARCHAR] (500) NULL,
[ClientSecretKey] [NVARCHAR] (max) NULL,
[ClientUserName] [NVARCHAR] (500) NULL,
[ClientPassword] [NVARCHAR] (500) NULL,
[TaxNo] [NVARCHAR] (500) NULL,
[MasterGSTApiURL] [NVARCHAR] (max) NULL,
[SmallLogoID] [INT] NULL,
[BackgroundImgID] [INT] NULL,
[LoginPageImgLeftID] [INT] NULL,
[LoginPageImgRightID] [INT] NULL,
[LoginPageHeader] [NVARCHAR] (1000) NULL,
[HeaderDescription] [NVARCHAR] (1000) NULL,
[CompanyID] [INT] NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstCompanyDetails_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstCompanyDetails_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_MstCompanyDetails_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_MstCompanyDetails_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_MstCompanyDetails_IsCurrentVersion] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF_MstCompanyDetails_Version] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_MstCompanyDetails] on [dbo].[MstCompanyDetails]'
GO
ALTER TABLE [dbo].[MstCompanyDetails] ADD CONSTRAINT [PK_MstCompanyDetails] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_MstCompanyDetails] on [dbo].[MstCompanyDetails]'
GO
CREATE NONCLUSTERED INDEX [IDX_MstCompanyDetails] ON [dbo].[MstCompanyDetails] ([ParentCompanyID], [Code], [Name])
GO
PRINT N'Creating [dbo].[MstManufacturerDetails]'
GO
CREATE TABLE [dbo].[MstManufacturerDetails]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[Code] [NVARCHAR] (100) NOT NULL,
[Name] [NVARCHAR] (500) NOT NULL,
[Initial] [NVARCHAR] (50) NULL,
[PriceCurrency] [INT] NULL,
[RegistrationNumber] [NVARCHAR] (255) NULL,
[VendorNo] [NVARCHAR] (100) NULL,
[VATNo] [NVARCHAR] (255) NULL,
[Address1] [NVARCHAR] (1000) NULL,
[Address2] [NVARCHAR] (1000) NULL,
[CountryID] [INT] NULL,
[State] [NVARCHAR] (100) NULL,
[City] [NVARCHAR] (100) NULL,
[ZIP] [NVARCHAR] (200) NULL,
[Tel] [NVARCHAR] (25) NULL,
[TelExt] [NVARCHAR] (25) NULL,
[Mobile] [NVARCHAR] (25) NULL,
[Fax] [NVARCHAR] (50) NULL,
[FaxExt] [NVARCHAR] (50) NULL,
[Email] [NVARCHAR] (500) NULL,
[SalesEmail] [NVARCHAR] (500) NULL,
[SupportEmail] [NVARCHAR] (500) NULL,
[Website] [NVARCHAR] (1000) NULL,
[BranchID] [NVARCHAR] (500) NULL,
[CreditLimit] [INT] NULL,
[CreditLimitCurrency] [INT] NULL,
[TokenID] [NVARCHAR] (500) NULL,
[PortalPassword] [NVARCHAR] (500) NULL,
[ShipmentModeID] [INT] NULL,
[PaymentModeID] [INT] NULL,
[CarrierID] [INT] NULL,
[GroupID] [INT] NULL,
[CollectorCodeID] [INT] NULL,
[BusinesstypeID] [INT] NULL,
[Segment] [INT] NULL,
[Classification] [INT] NULL,
[CostCenterID] [INT] NULL,
[StdDiscount] [DECIMAL] (6, 3) NULL,
[Blocked] [BIT] NULL CONSTRAINT [DF_MstManufacturerDetails_Blocked] DEFAULT ((0)),
[BlockReason] [INT] NULL,
[RefClient] [BIT] NULL CONSTRAINT [DF_MstManufacturerDetails_RefClient] DEFAULT ((0)),
[KeyClient] [BIT] NULL CONSTRAINT [DF_MstManufacturerDetails_KeyClient] DEFAULT ((0)),
[Remarks] [NVARCHAR] (max) NULL,
[Attachment] [INT] NULL,
[CategoryID] [INT] NULL,
[ManufacturerPhoto] [INT] NULL,
[CheckSumPhoto] [INT] NULL,
[CheckSumStatus] [BIT] NULL CONSTRAINT [DF_MstManufacturerDetails_CheckSumStatus] DEFAULT ((0)),
[SingleSelection] [INT] NULL,
[MultipleSelection] [NVARCHAR] (1000) NULL,
[SyncManufacturerID] [INT] NULL,
[IsFreeZone] [BIT] NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstManufacturerDetails_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstManufacturerDetails_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_MstManufacturerDetails_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (max) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_MstManufacturerDetails_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[OrderBy] [INT] NOT NULL,
[VersionID] [INT] NULL,
[Version] [INT] NOT NULL CONSTRAINT [DF_MstManufacturerDetails_Version] DEFAULT ((1)),
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_MstManufacturerDetails_IsCurrentVersion] DEFAULT ((1)),
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_MstManufacturerDetails] on [dbo].[MstManufacturerDetails]'
GO
ALTER TABLE [dbo].[MstManufacturerDetails] ADD CONSTRAINT [PK_MstManufacturerDetails] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[MstSupplierDetails]'
GO
CREATE TABLE [dbo].[MstSupplierDetails]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[Code] [NVARCHAR] (100) NOT NULL,
[Name] [NVARCHAR] (500) NOT NULL,
[Initial] [NVARCHAR] (50) NULL,
[PriceCurrency] [INT] NULL,
[RegistrationNumber] [NVARCHAR] (255) NULL,
[VendorNo] [NVARCHAR] (100) NULL,
[VATNo] [NVARCHAR] (255) NULL,
[Address1] [NVARCHAR] (1000) NULL,
[Address2] [NVARCHAR] (1000) NULL,
[CountryID] [INT] NULL,
[State] [NVARCHAR] (100) NULL,
[City] [NVARCHAR] (100) NULL,
[ZIP] [NVARCHAR] (200) NULL,
[Tel] [NVARCHAR] (25) NULL,
[TelExt] [NVARCHAR] (25) NULL,
[Mobile] [NVARCHAR] (25) NULL,
[Fax] [NVARCHAR] (50) NULL,
[FaxExt] [NVARCHAR] (50) NULL,
[Email] [NVARCHAR] (500) NULL,
[SalesEmail] [NVARCHAR] (500) NULL,
[SupportEmail] [NVARCHAR] (500) NULL,
[Website] [NVARCHAR] (1000) NULL,
[BranchID] [NVARCHAR] (500) NULL,
[CreditLimit] [INT] NULL,
[CreditLimitCurrency] [INT] NULL,
[TokenID] [NVARCHAR] (500) NULL,
[PortalPassword] [NVARCHAR] (500) NULL,
[ShipmentModeID] [INT] NULL,
[PaymentModeID] [INT] NULL,
[CarrierID] [INT] NULL,
[GroupID] [INT] NULL,
[CollectorCodeID] [INT] NULL,
[BusinesstypeID] [INT] NULL,
[Segment] [INT] NULL,
[Classification] [INT] NULL,
[CostCenterID] [INT] NULL,
[StdDiscount] [DECIMAL] (6, 3) NULL,
[Blocked] [BIT] NULL CONSTRAINT [DF_MstSupplierDetails_Blocked] DEFAULT ((0)),
[BlockReason] [INT] NULL,
[RefClient] [BIT] NULL CONSTRAINT [DF_MstSupplierDetails_RefClient] DEFAULT ((0)),
[KeyClient] [BIT] NULL CONSTRAINT [DF_MstSupplierDetails_KeyClient] DEFAULT ((0)),
[Remarks] [NVARCHAR] (max) NULL,
[Attachment] [INT] NULL,
[CategoryID] [INT] NULL,
[SupplierPhoto] [INT] NULL,
[CheckSumPhoto] [INT] NULL,
[CheckSumStatus] [BIT] NULL CONSTRAINT [DF_MstSupplierDetails_CheckSumStatus] DEFAULT ((0)),
[SingleSelection] [INT] NULL,
[MultipleSelection] [NVARCHAR] (1000) NULL,
[SyncSupplierID] [INT] NULL,
[SupplierTypeID] [INT] NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstSupplierDetails_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstSupplierDetails_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_MstSupplierDetails_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (max) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_MstSupplierDetails_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[OrderBy] [INT] NOT NULL,
[VersionID] [INT] NULL,
[Version] [INT] NOT NULL CONSTRAINT [DF_MstSupplierDetails_Version] DEFAULT ((1)),
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_MstSupplierDetails_IsCurrentVersion] DEFAULT ((1)),
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_MstSupplierDetails] on [dbo].[MstSupplierDetails]'
GO
ALTER TABLE [dbo].[MstSupplierDetails] ADD CONSTRAINT [PK_MstSupplierDetails] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[MstClientContacts]'
GO
CREATE TABLE [dbo].[MstClientContacts]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[ClientID] [INT] NULL,
Code VARCHAR(50) NULL,
[Name] [NVARCHAR] (500) NULL,
[Initial] [NVARCHAR] (50) NULL,
[FunctionalSectionID] [INT] NULL,
[Designation] [NVARCHAR] (300) NULL,
[Department] [NVARCHAR] (300) NULL,
[DepartmentID] [INT] NULL,
[TelPri] [NVARCHAR] (25) NULL,
[TelPriExt] [NVARCHAR] (25) NULL,
[TelSec] [NVARCHAR] (25) NULL,
[TelSecExt] [NVARCHAR] (25) NULL,
[TelRes] [NVARCHAR] (25) NULL,
[Mobile] [NVARCHAR] (25) NULL,
[Fax] [NVARCHAR] (50) NULL,
[FaxExt] [NVARCHAR] (50) NULL,
[OfficialEmail] [NVARCHAR] (500) NULL,
[EmailPer] [NVARCHAR] (500) NULL,
EmailOff NVARCHAR(500) NULL,
[KeyPerson] [BIT] NULL,
[DecisionMaker] [BIT] NULL,
[Influencer] [BIT] NULL,
[Blocker] [BIT] NULL,
[IsOptOut] [BIT] NULL,
[Remarks] [NVARCHAR] (max) NULL,
[ContactPhoto] [INT] NULL,
[ContactSignature] [INT] NULL,
[TitleID] [INT] NOT NULL CONSTRAINT [DF_MstClientContacts_TitleID] DEFAULT ((0)),
[SyncClientContactID] [INT] NULL,
[AlternateName] [NVARCHAR] (1) NULL,
[IsPurchaser] [BIT] NULL,
[ClientContactCategoryID] [INT] NULL,
[UserRewardPoints] [INT] NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstClientContacts_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_MstClientContacts_CreatedDateGMT] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstClientContacts_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_MstClientContacts_ModifiedDateGMT] DEFAULT (getutcdate()),
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_MstClientContacts_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (max) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_MstClientContacts_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (max) NULL,
[OrderBy] [INT] NOT NULL,
[VersionID] [INT] NULL,
[Version] [INT] NOT NULL CONSTRAINT [DF_MstClientContacts_Version] DEFAULT ((0)),
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_MstClientContacts_IsCurrentVersion] DEFAULT ((1)),
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_MstClientContacts] on [dbo].[MstClientContacts]'
GO
ALTER TABLE [dbo].[MstClientContacts] ADD CONSTRAINT [PK_MstClientContacts] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[MstManufacturerContacts]'
GO
CREATE TABLE [dbo].[MstManufacturerContacts]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[ManufacturerID] [INT] NULL,
[Name] [NVARCHAR] (500) NULL,
[Initial] [NVARCHAR] (50) NULL,
[FunctionalSectionID] [INT] NULL,
[Designation] [NVARCHAR] (300) NULL,
[Department] [NVARCHAR] (300) NULL,
[DepartmentID] [INT] NULL,
[TelPri] [NVARCHAR] (25) NULL,
[TelPriExt] [NVARCHAR] (25) NULL,
[TelSec] [NVARCHAR] (25) NULL,
[TelSecExt] [NVARCHAR] (25) NULL,
[TelRes] [NVARCHAR] (25) NULL,
[Mobile] [NVARCHAR] (25) NULL,
[Fax] [NVARCHAR] (50) NULL,
[FaxExt] [NVARCHAR] (50) NULL,
[OfficialEmail] [NVARCHAR] (500) NULL,
[EmailPer] [NVARCHAR] (500) NULL,
[KeyPerson] [BIT] NULL,
[DecisionMaker] [BIT] NULL,
[Influencer] [BIT] NULL,
[Blocker] [BIT] NULL,
[Remarks] [NVARCHAR] (max) NULL,
[ContactPhoto] [INT] NULL,
[ContactSignature] [INT] NULL,
[TitleID] [INT] NOT NULL CONSTRAINT [DF_MstManufacturerContacts_TitleID] DEFAULT ((0)),
[SyncManufacturerContactID] [INT] NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstManufacturerContacts_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_MstManufacturerContacts_CreatedDateGMT] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstManufacturerContacts_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_MstManufacturerContacts_ModifiedDateGMT] DEFAULT (getutcdate()),
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_MstManufacturerContacts_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (max) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_MstManufacturerContacts_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (max) NULL,
[OrderBy] [INT] NOT NULL,
[VersionID] [INT] NULL,
[Version] [INT] NOT NULL CONSTRAINT [DF_MstManufacturerContacts_Version] DEFAULT ((0)),
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_MstManufacturerContacts_IsCurrentVersion] DEFAULT ((1)),
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_MstManufacturerContacts] on [dbo].[MstManufacturerContacts]'
GO
ALTER TABLE [dbo].[MstManufacturerContacts] ADD CONSTRAINT [PK_MstManufacturerContacts] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[MstSupplierContacts]'
GO
CREATE TABLE [dbo].[MstSupplierContacts]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[SupplierID] [INT] NULL,
[Name] [NVARCHAR] (500) NULL,
[Initial] [NVARCHAR] (50) NULL,
[FunctionalSectionID] [INT] NULL,
[Designation] [NVARCHAR] (300) NULL,
[Department] [NVARCHAR] (300) NULL,
[DepartmentID] [INT] NULL,
[TelPri] [NVARCHAR] (25) NULL,
[TelPriExt] [NVARCHAR] (25) NULL,
[TelSec] [NVARCHAR] (25) NULL,
[TelSecExt] [NVARCHAR] (25) NULL,
[TelRes] [NVARCHAR] (25) NULL,
[Mobile] [NVARCHAR] (25) NULL,
[Fax] [NVARCHAR] (50) NULL,
[FaxExt] [NVARCHAR] (50) NULL,
[OfficialEmail] [NVARCHAR] (500) NULL,
[EmailPer] [NVARCHAR] (500) NULL,
[KeyPerson] [BIT] NULL,
[DecisionMaker] [BIT] NULL,
[Influencer] [BIT] NULL,
[Blocker] [BIT] NULL,
[Remarks] [NVARCHAR] (max) NULL,
[ContactPhoto] [INT] NULL,
[ContactSignature] [INT] NULL,
[TitleID] [INT] NOT NULL CONSTRAINT [DF_MstSupplierContacts_TitleID] DEFAULT ((0)),
[SyncSupplierContactID] [INT] NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstSupplierContacts_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_MstSupplierContacts_CreatedDateGMT] DEFAULT (getutcdate()),
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_MstSupplierContacts_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL CONSTRAINT [DF_MstSupplierContactss_ModifiedDateGMT] DEFAULT (getutcdate()),
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_MstSupplierContacts_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (max) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_MstSupplierContacts_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (max) NULL,
[OrderBy] [INT] NOT NULL,
[VersionID] [INT] NULL,
[Version] [INT] NOT NULL CONSTRAINT [DF_MstSupplierContacts_Version] DEFAULT ((0)),
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_MstSupplierContacts_IsCurrentVersion] DEFAULT ((1)),
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_MstSupplierContacts] on [dbo].[MstSupplierContacts]'
GO
ALTER TABLE [dbo].[MstSupplierContacts] ADD CONSTRAINT [PK_MstSupplierContacts] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[SrvApiTransactionTracking]'
GO
CREATE TABLE [dbo].[SrvApiTransactionTracking]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[ApiName] [VARCHAR] (200) NOT NULL,
[RefID] [BIGINT] NOT NULL,
[RequestMethod] [VARCHAR] (10) NOT NULL,
[ApiLink] [NVARCHAR] (4000) NOT NULL,
[Payload] [NVARCHAR] (max) NULL,
[Header] [NVARCHAR] (4000) NULL,
[ContentType] [NVARCHAR] (1000) NULL,
[FormID] [INT] NULL,
[UserID] [INT] NULL,
[SessionID] [VARCHAR] (200) NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_SrvApiTransactionTracking_CreatedDate] DEFAULT (getutcdate()),
[SendDate] [DATETIME] NULL,
[Comments] [NVARCHAR] (4000) NULL,
[RetryCount] [INT] NOT NULL CONSTRAINT [DF__SrvApiTra__Retry__52FC0DF] DEFAULT ((5)),
[FailureCount] [INT] NULL,
[Status] [INT] NOT NULL CONSTRAINT [DF__SrvApiTra__Statu__3A9406EF] DEFAULT ((1)),
[ErrorCode] [VARCHAR] (100) NULL,
[ErrorMessage] [NVARCHAR] (4000) NULL,
[CompanyID] [INT] NOT NULL,
[ApiResponse] [NVARCHAR] (4000) NULL
)
GO
PRINT N'Creating primary key [PK_SrvApiTransactionTracking] on [dbo].[SrvApiTransactionTracking]'
GO
ALTER TABLE [dbo].[SrvApiTransactionTracking] ADD CONSTRAINT [PK_SrvApiTransactionTracking] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_SrvApiTransactionTracking] on [dbo].[SrvApiTransactionTracking]'
GO
CREATE NONCLUSTERED INDEX [IDX_SrvApiTransactionTracking] ON [dbo].[SrvApiTransactionTracking] ([ApiName], [RefID], [RequestMethod])
GO
PRINT N'Creating [dbo].[SrvDataSyncConfiguration]'
GO
CREATE TABLE [dbo].[SrvDataSyncConfiguration]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[Name] [NVARCHAR] (500) NOT NULL,
[SourceDatabaseType] [VARCHAR] (50) NOT NULL,
[SourceServerName] [NVARCHAR] (500) NOT NULL,
[SourceAuthentication] [BIT] NULL,
[SourceUsername] [NVARCHAR] (200) NULL,
[SourcePassword] [NVARCHAR] (500) NULL,
[SourcePortNo] [INT] NULL,
[SourceDatabaseName] [NVARCHAR] (500) NOT NULL,
[SourceTableName] [NVARCHAR] (255) NOT NULL,
[SyncDateColumn] [NVARCHAR] (255) NOT NULL,
[SyncStartDate] [DATETIME] NULL,
[SyncInterval] [INT] NULL,
[SyncIntervalPeriod] [INT] NULL,
[DestTableName] [NVARCHAR] (255) NOT NULL,
[SpName] [NVARCHAR] (255) NOT NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_SrvDataSyncConfiguration_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_SrvDataSyncConfiguration_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_SrvDataSyncConfiguration_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_SrvDataSyncConfiguration_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_SrvDataSyncConfiguration_IsCurrentVersion] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF_SrvDataSyncConfiguration_Version] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_SrvDataSyncConfiguration] on [dbo].[SrvDataSyncConfiguration]'
GO
ALTER TABLE [dbo].[SrvDataSyncConfiguration] ADD CONSTRAINT [PK_SrvDataSyncConfiguration] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[SrvFileCopierConfiguration]'
GO
CREATE TABLE [dbo].[SrvFileCopierConfiguration]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[PathTypeID] [INT] NULL,
[FtpIpAddress] [VARCHAR] (100) NULL,
[FtpPort] [INT] NULL,
[AuthTypeID] [INT] NULL,
[FtpUsername] [NVARCHAR] (200) NULL,
[FtpPassword] [NVARCHAR] (200) NULL,
[KeyFileID] [BIGINT] NULL,
[FtpPath] [NVARCHAR] (1000) NULL,
[SourcePath] [NVARCHAR] (4000) NULL,
[DestinationPath] [NVARCHAR] (4000) NULL,
[FileTypesIDs] [VARCHAR] (max) NULL,
[FileNamePattern] [VARCHAR] (1000) NULL,
[TransferModeID] [INT] NULL,
[FileOldDuration] [INT] NULL,
[FileOldDurationUnitID] [INT] NULL,
[FiletypeIDs] [VARCHAR] (500) NULL,
[TransferTypeID] [INT] NULL,
[Comments] [NVARCHAR] (4000) NULL,
[ReplaceReq] [BIT] NULL,
[SubDirectoryReq] [BIT] NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL,
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL,
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF__SrvFileCo__NotAc__6DD3006F] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF__SrvFileCo__IsDel__6EDB4EFA] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF__SrvFileCo__IsCur__4E7DA11] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF__SrvFileCo__Versi__758A73E] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_SrvFileCopierConfiguration] on [dbo].[SrvFileCopierConfiguration]'
GO
ALTER TABLE [dbo].[SrvFileCopierConfiguration] ADD CONSTRAINT [PK_SrvFileCopierConfiguration] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[SrvSsrsReportConfiguration]'
GO
CREATE TABLE [dbo].[SrvSsrsReportConfiguration]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[Code] [VARCHAR] (50) NULL,
[Name] [NVARCHAR] (200) NOT NULL,
[ReportTypeID] [INT] NULL,
[RdlFileID] [BIGINT] NULL,
[SpName] [VARCHAR] (200) NULL,
[SpParameters] [VARCHAR] (2000) NULL,
[IsMultipleReport] [BIT] NULL,
[IsSaveAttachment] [BIT] NULL,
[AttachmentPath] [NVARCHAR] (1000) NULL,
[Comments] [NVARCHAR] (2000) NULL,
[IsAttachmentEntryReq] [BIT] NULL,
[FilePath] [VARCHAR] (500) NULL,
[IsEmailTrackingReq] [BIT] NULL,
[ClientIDs] [VARCHAR] (500) NULL,
[EmployeeIDs] [VARCHAR] (500) NULL,
[MailTypeID] [INT] NULL,
[TrackingSP] [VARCHAR] (500) NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_SrvSsrsReportConfiguration_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_SrvSsrsReportConfiguration_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_SrvSsrsReportConfiguration_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_SrvSsrsReportConfiguration_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_SrvSsrsReportConfiguration_IsCurrentVersion] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF_SrvSsrsReportConfiguration_Version] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_SrvSsrsReportConfiguration] on [dbo].[SrvSsrsReportConfiguration]'
GO
ALTER TABLE [dbo].[SrvSsrsReportConfiguration] ADD CONSTRAINT [PK_SrvSsrsReportConfiguration] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_SrvSsrsReportConfiguration] on [dbo].[SrvSsrsReportConfiguration]'
GO
CREATE NONCLUSTERED INDEX [IDX_SrvSsrsReportConfiguration] ON [dbo].[SrvSsrsReportConfiguration] ([Code], [Name])
GO
PRINT N'Creating [dbo].[SrvDataSyncColumnConfiguration]'
GO
CREATE TABLE [dbo].[SrvDataSyncColumnConfiguration]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[DataSyncID] [INT] NOT NULL,
[DestinationColumn] [NVARCHAR] (255) NOT NULL,
[SourceColumn] [NVARCHAR] (255) NOT NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_SrvDataSyncColumnConfiguration_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_SrvDataSyncColumnConfiguration_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_SrvDataSyncColumnConfiguration_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_SrvDataSyncColumnConfiguration_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_SrvDataSyncColumnConfiguration_IsCurrentVersion] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF_SrvDataSyncColumnConfiguration_Version] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_SrvDataSyncColumnConfiguration] on [dbo].[SrvDataSyncColumnConfiguration]'
GO
ALTER TABLE [dbo].[SrvDataSyncColumnConfiguration] ADD CONSTRAINT [PK_SrvDataSyncColumnConfiguration] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_SrvDataSyncColumnConfiguration] on [dbo].[SrvDataSyncColumnConfiguration]'
GO
CREATE NONCLUSTERED INDEX [IDX_SrvDataSyncColumnConfiguration] ON [dbo].[SrvDataSyncColumnConfiguration] ([DataSyncID], [DestinationColumn])
GO
PRINT N'Creating [dbo].[SrvDataSyncTracking]'
GO
CREATE TABLE [dbo].[SrvDataSyncTracking]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[DataSyncID] [INT] NOT NULL,
[SyncStartDate] [DATETIME] NULL,
[SyncEndDate] [DATETIME] NULL,
[SyncStatus] [VARCHAR] (1) NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_SrvDataSyncTracking_ModifiedDate] DEFAULT (getutcdate()),
[ErrorMessage] [NVARCHAR] (4000) NULL
)
GO
PRINT N'Creating primary key [PK_SrvDataSyncTracking] on [dbo].[SrvDataSyncTracking]'
GO
ALTER TABLE [dbo].[SrvDataSyncTracking] ADD CONSTRAINT [PK_SrvDataSyncTracking] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_SrvDataSyncTracking] on [dbo].[SrvDataSyncTracking]'
GO
CREATE NONCLUSTERED INDEX [IDX_SrvDataSyncTracking] ON [dbo].[SrvDataSyncTracking] ([DataSyncID], [SyncStatus])
GO
PRINT N'Creating [dbo].[SrvSsrsReportDataSources]'
GO
CREATE TABLE [dbo].[SrvSsrsReportDataSources]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[SsrsReportID] [BIGINT] NOT NULL,
[DataSource] [VARCHAR] (100) NOT NULL,
[ImagePathColumns] [VARCHAR] (max) NULL,
[CompanyID] [INT] NOT NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL CONSTRAINT [DF_SrvSsrsReportDataSources_CreatedDate] DEFAULT (getutcdate()),
[CreatedDateGMT] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL CONSTRAINT [DF_SrvSsrsReportDataSources_ModifiedDate] DEFAULT (getutcdate()),
[ModifiedDateGMT] [DATETIME] NOT NULL,
[NotActive] [BIT] NOT NULL CONSTRAINT [DF_SrvSsrsReportDataSources_NotActive] DEFAULT ((0)),
[NotActiveDate] [DATETIME] NULL,
[NotActiveDateGMT] [DATETIME] NULL,
[NotActiveReason] [NVARCHAR] (100) NULL,
[IsDeleted] [BIT] NOT NULL CONSTRAINT [DF_SrvSsrsReportDataSources_IsDeleted] DEFAULT ((0)),
[DeletedBy] [INT] NULL,
[DeletedDate] [DATETIME] NULL,
[DeletedDateGMT] [DATETIME] NULL,
[DeleteReason] [NVARCHAR] (100) NULL,
[IsCurrentVersion] [BIT] NOT NULL CONSTRAINT [DF_SrvSsrsReportDataSources_IsCurrentVersion] DEFAULT ((1)),
[Version] [INT] NOT NULL CONSTRAINT [DF_SrvSsrsReportDataSources_Version] DEFAULT ((1)),
[VersionID] [INT] NULL,
[OrderBy] [INT] NOT NULL,
[ERPID] [VARCHAR] (25) NULL
)
GO
PRINT N'Creating primary key [PK_SrvSsrsReportDataSources] on [dbo].[SrvSsrsReportDataSources]'
GO
ALTER TABLE [dbo].[SrvSsrsReportDataSources] ADD CONSTRAINT [PK_SrvSsrsReportDataSources] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_SrvSsrsReportDataSources] on [dbo].[SrvSsrsReportDataSources]'
GO
CREATE NONCLUSTERED INDEX [IDX_SrvSsrsReportDataSources] ON [dbo].[SrvSsrsReportDataSources] ([SsrsReportID], [DataSource])
GO
PRINT N'Creating [dbo].[CmnLoginHistory]'
GO
CREATE TABLE [dbo].[CmnLoginHistory]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[UserID] [INT] NULL,
[UserName] [NVARCHAR] (100) NULL,
[SessionID] [NVARCHAR] (400) NULL,
[LoginIP] [VARCHAR] (100) NULL,
[LoginTime] [DATETIME] NULL,
[LogoutTime] [DATETIME] NULL,
[UserStatusID] [INT] NULL,
[FailReasonID] [INT] NULL,
[LogoutTypeID] [INT] NULL,
[Remarks] [VARCHAR] (250) NULL,
[LastUpdatedTime] [DATETIME] NULL,
[IsMobileApp] [BIT] NULL,
[IsMobileBrowser] [BIT] NULL,
[ScreenSize] [VARCHAR] (50) NULL,
[OS] [VARCHAR] (100) NULL,
[OSVersion] [VARCHAR] (100) NULL,
[Browser] [VARCHAR] (100) NULL,
[BrowserVersion] [VARCHAR] (100) NULL,
[UserAgent] [NVARCHAR] (max) NULL
)
GO
PRINT N'Creating index [IDX_CmnLoginHistory] on [dbo].[CmnLoginHistory]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnLoginHistory] ON [dbo].[CmnLoginHistory] ([UserID], [SessionID], [UserStatusID])
GO
PRINT N'Creating index [IDX_CmnLoginHistoryStatus] on [dbo].[CmnLoginHistory]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnLoginHistoryStatus] ON [dbo].[CmnLoginHistory] ([UserStatusID], [UserID])
GO
PRINT N'Creating [dbo].[spCmnRBSDataVarGroupUpdate]'
GO

CREATE PROCEDURE [dbo].[spCmnRBSDataVarGroupUpdate](@IN_RBSUserID INT, @IN_USERID INT, @IN_SESSIONID VARCHAR(500))
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
			@ErrorSeverity NVARCHAR(50),
			@ErrorState NVARCHAR(50),
			@UTCTime DATETIME = GETUTCDATE(),
			@RBSGroupIDs VARCHAR(100);

		SELECT @RBSGroupIDs = RBSGroupIDs
		FROM CmnUserDetails 
		WHERE UserID = @IN_RBSUserID;

		DECLARE @RBSGroup Table (RBSGroupID BIGINT);

		INSERT INTO @RBSGroup
		SELECT Value FROM STRING_SPLIT(@RBSGroupIDs, ',');
							
		UPDATE CmnRBSDataVariablePermission
		SET IsDeleted = 1, DeletedBy = @IN_USERID, DeletedDate = @UTCTime
		WHERE UserID = @IN_RBSUserID AND IsDeleted = 0;

		INSERT INTO CmnRBSDataVariablePermission
			(UserID, FormID, ControlName, TableName,
			 TableColumn, DataValue, SelfData, CreatedBy,
			 CreatedDate, ModifiedBy, ModifiedDate,	IsDeleted)
		SELECT @IN_RBSUserID, D.FormID, D.ControlName, D.TableName, D.TableColumn,
			REPLACE(REPLACE(STRING_AGG(CAST(D.DataValue AS VARCHAR(50)), ',') WITHIN GROUP (ORDER BY CAST(D.DataValue AS INT)), '-1,', ''), '-1', '') AS DataValue,
			MAX(CAST(D.SelfData AS INT)) AS SelfData, @IN_USERID,
			@UTCTime, @IN_USERID, @UTCTime, 0
		FROM 
			(SELECT DISTINCT
				GFV.FormID,
				GFV.ControlName,
				GFV.TableName,
				GFV.TableColumn,
				--STRING_AGG(DV.value, ',') WITHIN GROUP (ORDER BY CAST(DV.value AS INT)) AS DataValue
				CASE WHEN TRIM(DV.value) = '' THEN '-1' ELSE TRIM(DV.value) END AS DataValue,
				GFV.SelfData
			FROM CmnRbsGroups G
				JOIN @RBSGroup FG ON FG.RBSGroupID = G.ReferenceID
				JOIN CmnRbsGroupForms GF ON GF.RBSGroupID = G.ReferenceID AND GF.IsDeleted = 0
				JOIN CmnRBSGroupsDataVariable GFV ON GFV.RBSGroupID = GF.RBSGroupID 
					AND GFV.FormID = GF.FormID AND GFV.IsDeleted = 0
				CROSS APPLY STRING_SPLIT(GFV.DataValue, ',') AS DV) AS D
		GROUP BY D.FormID,
			D.ControlName,
			D.TableName,
			D.TableColumn

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating trigger [dbo].[trgCmnUpdateRolePermission] on [dbo].[CmnUserDetails]'
GO


CREATE TRIGGER [dbo].[trgCmnUpdateRolePermission]
ON [dbo].[CmnUserDetails]
 AFTER UPDATE
AS
	SET NOCOUNT ON;
	DECLARE @UTCTime DATETIME = GETUTCDATE(),
			@PrevRoles VARCHAR(100),
			@NewRoles VARCHAR(100),
			@UserID INT,
			@ModifiedBy INT,
			@PrevNotActive BIT,
			@NotActive BIT; 

	SELECT @PrevRoles = RoleID, @PrevNotActive = NotActive FROM DELETED;
	SELECT @NewRoles = RoleID, @UserID = UserID, @ModifiedBy = ModifiedBy, @NotActive = NotActive FROM INSERTED;

	IF @PrevRoles <> @NewRoles 
	BEGIN
		DELETE FROM CmnRBSPermission WHERE UserID = @UserID;

		WITH UserRoleCTE AS (
			SELECT DISTINCT FormID, CASE WHEN SUM(CASE WHEN PATINDEX('%,' + CAST(RoleID AS VARCHAR(MAX)) + ',%', ',' + ISNULL(@NewRoles, '') + ',') > 0 
										AND HasReadPermission = 1 THEN 1 ELSE 0 END) > 0 THEN 1
				ELSE 0 END AS HasReadPermission, MIN(RoleID) AS RoleID
			FROM CmnRolePermission
			WHERE PATINDEX('%,' + CAST(RoleID AS VARCHAR(MAX)) + ',%', ',' + ISNULL(@NewRoles, '') + ',') > 0 AND IsDeleted = 0
			GROUP BY FormID
		) 
		INSERT INTO CmnRBSPermission (FormID, HasReadPermission, Tabs, Buttons, Audit, SubAudit, ValidateChecksum, 
			MainMenuOrder, SubMenuOrder, IsFavourite, FavouriteOrder, UserID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted)
		SELECT DISTINCT E.FormID, I.HasReadPermission, E.Tabs, E.Buttons, E.Audit, E.SubAudit, E.ValidateChecksum, 
			E.MainMenuOrder, E.SubMenuOrder, E.IsFavourite, E.FavouriteOrder, @UserID, @ModifiedBy, @UTCTime, @ModifiedBy, @UTCTime, 0
		FROM CmnRolePermission E
			JOIN UserRoleCTE I ON I.RoleID = E.RoleID AND I.FormID = E.FormID
		WHERE E.IsDeleted = 0;

		DELETE FROM CmnRBSDataVariablePermission WHERE UserID = @UserID;

		INSERT INTO CmnRBSDataVariablePermission (UserID, FormID, ControlName, TableName, TableColumn,
			DataValue, SelfData, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted)
		SELECT @UserID, D.FormID, D.ControlName, D.TableName, D.TableColumn,
					REPLACE(REPLACE(STRING_AGG(CAST(D.DataValue AS VARCHAR(50)), ',') WITHIN GROUP (ORDER BY CAST(D.DataValue AS INT)), '-1,', ''), '-1', '') AS DataValue,
					MAX(CAST(D.SelfData AS INT)) AS SelfData, @ModifiedBy, @UTCTime, @ModifiedBy, @UTCTime, 0
		FROM (SELECT DISTINCT
				GFV.FormID, GFV.ControlName, GFV.TableName, GFV.TableColumn,
				CASE WHEN TRIM(DV.value) = '' THEN '-1' ELSE TRIM(DV.value) END AS DataValue,
				GFV.SelfData
			FROM CmnRBSRoleDataVariablePermission GFV
				CROSS APPLY STRING_SPLIT(GFV.DataValue, ',') AS DV WHERE PATINDEX('%,' + CAST(GFV.RoleID AS VARCHAR(MAX)) + ',%', ',' + ISNULL(@NewRoles, '') + ',') > 0 
					AND GFV.IsDeleted = 0) AS D
		GROUP BY D.FormID, D.ControlName, D.TableName, D.TableColumn;

		EXEC spCmnRBSDataVarGroupUpdate @UserID, @ModifiedBy, '';
	END

	IF ((@PrevNotActive <> @NotActive) AND @NotActive = 1)
	BEGIN
		UPDATE CmnLoginHistory  
		SET	UserStatusID = 2, 
			LogoutTime = @UTCTime, 
			LogoutTypeID = 3,
			Remarks ='User Not Active' 
		WHERE UserID = @UserID AND UserStatusID = 1;
	END
GO
PRINT N'Creating trigger [dbo].[trgCmnUserPermission] on [dbo].[CmnUserDetails]'
GO

CREATE TRIGGER trgCmnUserPermission
ON CmnUserDetails FOR INSERT AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @UTCTime DATETIME = GETUTCDATE(),
			@Roles VARCHAR(100),
			@UserID INT,
			@ModifiedBy INT;
			
	SELECT @Roles = RoleID, @UserID = UserID, @ModifiedBy = ModifiedBy FROM INSERTED;

	WITH UserRoleCTE AS (
		SELECT DISTINCT FormID, CASE WHEN SUM(CASE WHEN PATINDEX('%,' + CAST(RoleID AS VARCHAR(MAX)) + ',%', ',' + ISNULL(@Roles, '') + ',') > 0 
									AND HasReadPermission = 1 THEN 1 ELSE 0 END) > 0 THEN 1
			ELSE 0 END AS HasReadPermission, MIN(RoleID) AS RoleID
		FROM CmnRolePermission
		WHERE PATINDEX('%,' + CAST(RoleID AS VARCHAR(MAX)) + ',%', ',' + ISNULL(@Roles, '') + ',') > 0 AND IsDeleted = 0
		GROUP BY FormID
	) 
	INSERT INTO CmnRBSPermission (FormID, HasReadPermission, Tabs, Buttons, Audit, SubAudit, ValidateChecksum, 
		MainMenuOrder, SubMenuOrder, IsFavourite, FavouriteOrder, UserID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted)
	SELECT DISTINCT E.FormID, I.HasReadPermission, E.Tabs, E.Buttons, E.Audit, E.SubAudit, E.ValidateChecksum, 
		E.MainMenuOrder, E.SubMenuOrder, E.IsFavourite, E.FavouriteOrder, @UserID, @ModifiedBy, @UTCTime, @ModifiedBy, @UTCTime, 0
	FROM CmnRolePermission E
		JOIN UserRoleCTE I ON I.RoleID = E.RoleID AND I.FormID = E.FormID
	WHERE E.IsDeleted = 0;

	INSERT INTO CmnRBSDataVariablePermission (UserID, FormID, ControlName, TableName, TableColumn,
		DataValue, SelfData, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted)
	SELECT @UserID, D.FormID, D.ControlName, D.TableName, D.TableColumn,
				REPLACE(REPLACE(STRING_AGG(CAST(D.DataValue AS VARCHAR(50)), ',') WITHIN GROUP (ORDER BY CAST(D.DataValue AS INT)), '-1,', ''), '-1', '') AS DataValue,
				MAX(CAST(D.SelfData AS INT)) AS SelfData, @ModifiedBy, @UTCTime, @ModifiedBy, @UTCTime, 0
	FROM (SELECT DISTINCT
			GFV.FormID, GFV.ControlName, GFV.TableName, GFV.TableColumn,
			CASE WHEN TRIM(DV.value) = '' THEN '-1' ELSE TRIM(DV.value) END AS DataValue,
			GFV.SelfData
		FROM CmnRBSRoleDataVariablePermission GFV
			CROSS APPLY STRING_SPLIT(GFV.DataValue, ',') AS DV WHERE PATINDEX('%,' + CAST(GFV.RoleID AS VARCHAR(MAX)) + ',%', ',' + ISNULL(@Roles, '') + ',') > 0 
				AND GFV.IsDeleted = 0) AS D
	GROUP BY D.FormID, D.ControlName, D.TableName, D.TableColumn;

	EXEC spCmnRBSDataVarGroupUpdate @UserID, @ModifiedBy, '';
END
GO
PRINT N'Creating trigger [dbo].[trgDeleteUser] on [dbo].[MstEmployeeDetails]'
GO

CREATE TRIGGER trgDeleteUser
ON MstEmployeeDetails FOR UPDATE AS  
BEGIN
	SET NOCOUNT ON;

	DECLARE @UTCTime DATETIME = GETUTCDATE(),
			@UserID INT = 0,
			@GMTTime DATETIME = '',
			@Deleted BIT = 0,
			@ReferenceID INT = 0

			SET @UserID = ISNULL((SELECT UserID FROM CmnUserDetails WHERE Username = 'Revol'), 1)
			SET @GMTTime = dbo.fn_GMTCalculation(@UserID)

			SELECT TOP 1 @Deleted = ins.IsDeleted, @ReferenceID = ins.ReferenceID FROM INSERTED ins;	
	  
	  IF @Deleted = 1
	  BEGIN
		UPDATE CmnUserDetails SET IsDeleted = 1, DeletedBy = @UserID, DeletedDate = @UTCTime, DeletedDateGMT = @GMTTime WHERE Type = 1 AND TypeID = @ReferenceID;
	  END

END
GO
PRINT N'Creating [dbo].[spCmnUserDeleteNotActive]'
GO

CREATE PROCEDURE [dbo].[spCmnUserDeleteNotActive] (
	@IN_UserID INT,
	@IN_DmlFlag BIT,
	@IN_NotActiveFlag BIT,
	@IN_Type INT
)
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(4000),
			@ErrorSeverity INT,
			@ErrorState INT,
			@UTCTime DATETIME = GETUTCDATE(),
			@GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
			@UserID INT;

			SET @UserID = ISNULL((SELECT UserID FROM CmnUserDetails WHERE Type = @IN_Type AND TypeID = @IN_UserID AND IsDeleted = 0), 0);

			IF @IN_DmlFlag = 1
			BEGIN
				UPDATE CmnUserDetails 
				SET IsDeleted = 1,
					DeletedBy = @IN_UserID,
					DeletedDate = @UTCTime, 
					DeletedDateGMT = @GMTTime,
					DeleteReason = 'User Parent is Deleted'
				WHERE Type = @IN_Type AND TypeID = @IN_UserID AND IsDeleted = 0;

				UPDATE CmnLoginHistory  
				SET	UserStatusID = 2, 
					LogoutTime = @UTCTime, 
					LogoutTypeID = 3,
					Remarks ='User is Deleted' 
				WHERE UserID = @UserID AND UserStatusID = 1;
			END
			ELSE IF @IN_DmlFlag = 0
			BEGIN
				IF (@IN_NotActiveFlag = 1)
				BEGIN
					UPDATE CmnUserDetails 
					SET NotActive = 1,
						NotActiveDate = @UTCTime,
						NotActiveReason = 'User Parent Not Active'
					WHERE Type = @IN_Type AND TypeID = @IN_UserID AND IsDeleted = 0;

					UPDATE CmnLoginHistory  
					SET	UserStatusID = 2, 
						LogoutTime = @UTCTime, 
						LogoutTypeID = 3,
						Remarks ='User Not Active' 
					WHERE UserID = @UserID AND UserStatusID = 1;
				END
				ELSE IF (@IN_NotActiveFlag = 0)
				BEGIN
					UPDATE CmnUserDetails 
					SET NotActive = 0,
						NotActiveDate = @UTCTime,
						NotActiveReason = ''
					WHERE Type = @IN_Type AND TypeID = @IN_UserID AND IsDeleted = 0;
				END
			END
	END TRY
	BEGIN CATCH
		 SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
		 RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating trigger [dbo].[trgMstClientUserUpdate] on [dbo].[MstClientContacts]'
GO

CREATE TRIGGER trgMstClientUserUpdate
ON MstClientContacts
AFTER UPDATE
AS
	DECLARE @GMTTime DATETIME, @UTCTime DATETIME, @UserID INT, @GroupID BIGINT, @CompanyID INT, @IsDeleted BIT, @NotActive BIT,
			@OldIsDeleted BIT, @OldNotActive BIT, @DeletedBy INT, @ClientID INT;

	SELECT	@ClientID = ISNULL(ReferenceID, 0), @IsDeleted = ISNULL(IsDeleted, 0), @NotActive = ISNULL(NotActive, 0),
			@UserID = ISNULL(ModifiedBy, 0), @DeletedBy = ISNULL(DeletedBy, 0) FROM INSERTED;

	SELECT	@OldIsDeleted = ISNULL(IsDeleted, 0), @OldNotActive = ISNULL(NotActive, 0) FROM DELETED;
		
	IF (@IsDeleted = 1 AND (@IsDeleted <> @OldIsDeleted))
	BEGIN
		EXEC spCmnUserDeleteNotActive @ClientID, 1, 0, 2;
	END

	IF (@NotActive <> @OldNotActive)
	BEGIN
		EXEC spCmnUserDeleteNotActive @ClientID, 0, @NotActive, 2;
	END

GO
PRINT N'Creating trigger [dbo].[trgMstEmployeeUserUpdate] on [dbo].[MstEmployeeDetails]'
GO

CREATE TRIGGER trgMstEmployeeUserUpdate
ON MstEmployeeDetails
AFTER UPDATE
AS
	DECLARE @GMTTime DATETIME, @UTCTime DATETIME, @UserID INT, @GroupID BIGINT, @CompanyID INT, @IsDeleted BIT, @NotActive BIT,
			@OldIsDeleted BIT, @OldNotActive BIT, @DeletedBy INT, @EmployeeID INT;

	SELECT	@EmployeeID = ISNULL(ReferenceID, 0), @IsDeleted = ISNULL(IsDeleted, 0), @NotActive = ISNULL(NotActive, 0),
			@UserID = ISNULL(ModifiedBy, 0), @DeletedBy = ISNULL(DeletedBy, 0) FROM INSERTED;

	SELECT	@OldIsDeleted = ISNULL(IsDeleted, 0), @OldNotActive = ISNULL(NotActive, 0) FROM DELETED;
		
	IF (@IsDeleted = 1 AND (@IsDeleted <> @OldIsDeleted))
	BEGIN
		EXEC spCmnUserDeleteNotActive @EmployeeID, 1, 0, 1;
	END

	IF (@NotActive <> @OldNotActive)
	BEGIN
		EXEC spCmnUserDeleteNotActive @EmployeeID, 0, @NotActive, 1;
	END
GO
PRINT N'Creating trigger [dbo].[trgMstManufactureUserUpdate] on [dbo].[MstManufacturerContacts]'
GO

CREATE TRIGGER trgMstManufactureUserUpdate
ON MstManufacturerContacts
AFTER UPDATE
AS
	DECLARE @GMTTime DATETIME, @UTCTime DATETIME, @UserID INT, @GroupID BIGINT, @CompanyID INT, @IsDeleted BIT, @NotActive BIT,
			@OldIsDeleted BIT, @OldNotActive BIT, @DeletedBy INT, @ManufacturerID INT;

	SELECT	@ManufacturerID = ISNULL(ReferenceID, 0), @IsDeleted = ISNULL(IsDeleted, 0), @NotActive = ISNULL(NotActive, 0),
			@UserID = ISNULL(ModifiedBy, 0), @DeletedBy = ISNULL(DeletedBy, 0) FROM INSERTED;

	SELECT	@OldIsDeleted = ISNULL(IsDeleted, 0), @OldNotActive = ISNULL(NotActive, 0) FROM DELETED;
		
	IF (@IsDeleted = 1 AND (@IsDeleted <> @OldIsDeleted))
	BEGIN
		EXEC spCmnUserDeleteNotActive @ManufacturerID, 1, 0, 3;
	END

	IF (@NotActive <> @OldNotActive)
	BEGIN
		EXEC spCmnUserDeleteNotActive @ManufacturerID, 0, @NotActive, 3;
	END

GO
PRINT N'Creating trigger [dbo].[trgMstSupplierUserUpdate] on [dbo].[MstSupplierContacts]'
GO

CREATE TRIGGER trgMstSupplierUserUpdate
ON MstSupplierContacts
AFTER UPDATE
AS
	DECLARE @GMTTime DATETIME, @UTCTime DATETIME, @UserID INT, @GroupID BIGINT, @CompanyID INT, @IsDeleted BIT, @NotActive BIT,
			@OldIsDeleted BIT, @OldNotActive BIT, @DeletedBy INT, @SupplierID INT;

	SELECT	@SupplierID = ISNULL(ReferenceID, 0), @IsDeleted = ISNULL(IsDeleted, 0), @NotActive = ISNULL(NotActive, 0),
			@UserID = ISNULL(ModifiedBy, 0), @DeletedBy = ISNULL(DeletedBy, 0) FROM INSERTED;

	SELECT	@OldIsDeleted = ISNULL(IsDeleted, 0), @OldNotActive = ISNULL(NotActive, 0) FROM DELETED;
		
	IF (@IsDeleted = 1 AND (@IsDeleted <> @OldIsDeleted))
	BEGIN
		EXEC spCmnUserDeleteNotActive @SupplierID, 1, 0, 4;
	END

	IF (@NotActive <> @OldNotActive)
	BEGIN
		EXEC spCmnUserDeleteNotActive @SupplierID, 0, @NotActive, 4;
	END

GO
PRINT N'Creating [dbo].[CmnRememberSearchControl]'
GO
CREATE TABLE [dbo].[CmnRememberSearchControl]
(
[SearchID] [INT] NOT NULL,
[FormID] [INT] NOT NULL,
[UserID] [INT] NOT NULL,
[ControlValues] [NVARCHAR] (max) NULL,
[ColumnName] [VARCHAR] (100) NULL,
[CreatedBy] [INT] NOT NULL,
[CreatedDate] [DATETIME] NOT NULL,
[ModifiedBy] [INT] NOT NULL,
[ModifiedDate] [DATETIME] NOT NULL,
[IsDeleted] [BIT] NOT NULL
)
GO
PRINT N'Creating index [IDX_CmnRememberSearchControl] on [dbo].[CmnRememberSearchControl]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnRememberSearchControl] ON [dbo].[CmnRememberSearchControl] ([FormID], [UserID], [SearchID])
GO
PRINT N'Creating [dbo].[fn_SplitString]'
GO


CREATE FUNCTION [dbo].[fn_SplitString](
	@IN_String NVARCHAR(MAX),
	@IN_Delimiter NVARCHAR(10),
	@IN_Position INT)
RETURNS NVARCHAR(255)
AS        
BEGIN        
    DECLARE @idx INT,
      @ID INT = 1,
      @slice NVARCHAR(MAX),
			@Output NVARCHAR(255)

		DECLARE @temptable TABLE (ID BIGINT, items NVARCHAR(MAX))
      
    SELECT @idx = 1, @IN_Delimiter = LTRIM(RTRIM(@IN_Delimiter)), @IN_String = RTRIM(@IN_String) 
          
    IF LEN(@IN_String) < 1 or ISNULL(@IN_String, '') = ''
      RETURN ''
      
    IF ISNULL(@IN_Delimiter, '') = ''
    BEGIN
      INSERT INTO @temptable(ID, Items) VALUES(@ID, @IN_String)  
      RETURN  ''    
    END     
       
    WHILE @idx!= 0        
    BEGIN        
        SET @idx = PATINDEX('%' + @IN_Delimiter + '%', @IN_String)    
            
        IF @idx != 0        
            SET @slice = LEFT(@IN_String, @idx - 1)        
        ELSE        
            SET @slice = @IN_String        
           
        INSERT INTO @temptable(ID, Items) VALUES(@ID, @slice)        
  
        IF LEN(@IN_String) >= LEN(@IN_Delimiter)
          SET @IN_String = RIGHT(@IN_String, LEN(@IN_String) - (@idx + LEN(@IN_Delimiter) - 1))
         
        SET @ID += 1
				IF(@ID > @IN_Position) BREAK       
        IF @idx = 0 AND LEN(@IN_String) = 0 BREAK 
				
				       
    END 

	SET @Output = ISNULL((SELECT items FROM @temptable WHERE ID = @IN_Position), '')

RETURN @Output
END
GO
PRINT N'Creating [dbo].[fn_RevolSpliter]'
GO


CREATE FUNCTION [dbo].[fn_RevolSpliter](@String NVARCHAR(MAX), @Delimiter VARCHAR(10))        
RETURNS @temptable TABLE (ID BIGINT,items NVARCHAR(MAX) )        
as        
BEGIN        
    DECLARE @idx INT,
            @ID   BIGINT = 1,
            @slice NVARCHAR(MAX)
            
    SELECT @idx = 1, @Delimiter = LTRIM(RTRIM(@Delimiter)), @String = RTRIM(@String) 
          
    IF LEN(@String) < 1 or ISNULL(@String, '') = ''
      RETURN    
      
    IF ISNULL(@Delimiter, '') = ''
    BEGIN
      INSERT INTO @temptable(ID, Items) VALUES(@ID,@String)  
      RETURN      
    END     
       
    WHILE @idx!= 0        
    BEGIN        
        SET @idx = patindex('%' + @Delimiter + '%', @String)    
            
        IF @idx!=0        
            SET @slice = left(@String, @idx - 1)        
        ELSE        
            SET @slice = @String        
           
        --IF(LEN(@slice) > 0)   
            INSERT INTO @temptable(ID, Items) VALUES(@ID, @slice)
                    
        IF LEN(@String) >= LEN(@Delimiter)
          SET @String = RIGHT(@String,LEN(@String) - (@idx + LEN(@Delimiter) - 1)) 
        SET @ID+= 1       
        IF LEN(@String) = 0 BREAK        
    END    
RETURN        
END

GO
PRINT N'Creating [dbo].[fn_ConstractDependentConditions]'
GO

CREATE FUNCTION [dbo].[fn_ConstractDependentConditions] (@IN_FilterConditions NVARCHAR(MAX), @IN_FilterValues NVARCHAR(MAX),
	@IN_ControlType INT, @IN_AliasName VARCHAR(10), @IN_ResultColumnAlias VARCHAR(10))
RETURNS NVARCHAR(MAX)
AS
BEGIN	
	DECLARE @DependentConditions NVARCHAR(MAX) = '',
			@FCMin INT = 0,
			@FCMax INT = 0,
			@FCIndex INT = 0,
			@ConditionColumn NVARCHAR(1000) = '',
			@ConditionValue NVARCHAR(4000) = '',
			@FullCondition NVARCHAR(4000) = '',
			@HasCondition BIT = 0

	DECLARE @FilterConditionList TABLE (RowNum INT IDENTITY NOT NULL, Condition NVARCHAR(1000));
	DECLARE @FilterValuesList TABLE (RowNum INT IDENTITY NOT NULL, ConditionValue NVARCHAR(4000));

	IF ISNULL(@IN_AliasName, '') <> '' AND CHARINDEX('.', @IN_AliasName) <= 0
		SET @IN_AliasName = CONCAT(@IN_AliasName, '.');
	IF ISNULL(@IN_ResultColumnAlias, '') <> '' AND CHARINDEX('.', @IN_ResultColumnAlias) <= 0
		SET @IN_ResultColumnAlias = CONCAT(@IN_ResultColumnAlias, '.');

	IF ISNULL(@IN_ResultColumnAlias, '') <> ''
		SET @IN_FilterValues = REPLACE(ISNULL(@IN_FilterValues, ''), ',', '#');

	INSERT INTO @FilterConditionList (Condition)
	SELECT items
	FROM dbo.fn_RevolSpliter(@IN_FilterConditions, 'AND');

	INSERT INTO @FilterValuesList (ConditionValue)
	SELECT items
	FROM dbo.fn_RevolSpliter(@IN_FilterValues, '#');

	SELECT @FCMax = MAX(RowNum) FROM @FilterConditionList;

	WHILE @FCMin < @FCMax
	BEGIN
		SET @FCMin = @FCMin + 1;

		SELECT @ConditionColumn = LTRIM(RTRIM(dbo.fn_SplitString(Condition, '@', 1))), 
			@FCIndex = CASE WHEN ISNUMERIC(LTRIM(RTRIM(REPLACE(REPLACE(dbo.fn_SplitString(Condition, '@', 2), '''', ''), ')', '')))) = 1 
				THEN CAST(LTRIM(RTRIM(REPLACE(REPLACE(dbo.fn_SplitString(Condition, '@', 2), '''', ''), ')', ''))) AS INT) ELSE -1 END,
			@FullCondition = ISNULL(Condition, ''), @HasCondition = CASE WHEN CHARINDEX('@', ISNULL(Condition, '')) > 0 THEN 1 ELSE 0 END
		FROM @FilterConditionList WHERE RowNum = @FCMin;

		IF @HasCondition = 1 AND @FCIndex <= 0
		BEGIN
			WHILE CHARINDEX('@', @FullCondition) > 0
			BEGIN
				SET @FCIndex = CASE WHEN ISNUMERIC(SUBSTRING(@FullCondition, CHARINDEX('@', @FullCondition) + 1, 1)) = 1 
					THEN CAST(SUBSTRING(@FullCondition, CHARINDEX('@', @FullCondition) + 1, 1) AS INT) ELSE -1 END;
				SET @ConditionValue = '';
				SELECT @ConditionValue = ConditionValue FROM @FilterValuesList WHERE RowNum = @FCIndex;
				IF ISNULL(@ConditionValue, '') = ''
					SET @ConditionValue = '0';

				IF ISNULL(@IN_ResultColumnAlias, '') <> ''
					SET @FullCondition = REPLACE(@FullCondition, CONCAT('@', @FCIndex), CONCAT(@IN_ResultColumnAlias, LTRIM(@ConditionValue)));
				ELSE
					SET @FullCondition = REPLACE(@FullCondition, CONCAT('@', @FCIndex), @ConditionValue);
			END
			SET @DependentConditions = CONCAT(@DependentConditions, ' AND ', @FullCondition);
		END
		ELSE IF @FCIndex > 0 AND ISNULL(@ConditionColumn, '') <> ''
		BEGIN
			SET @ConditionValue = '';
			SELECT @ConditionValue = ConditionValue FROM @FilterValuesList WHERE RowNum = @FCIndex;
			IF ISNULL(@ConditionValue, '') = ''
				SET @ConditionValue = '0';

			IF CHARINDEX('=', @ConditionColumn) > 0 OR CHARINDEX(' IN', @ConditionColumn) > 0
				OR CHARINDEX('!=', @ConditionColumn) > 0 OR CHARINDEX('<>', @ConditionColumn) > 0
				OR CHARINDEX('<', @ConditionColumn) > 0 OR CHARINDEX('>', @ConditionColumn) > 0
			BEGIN
				SELECT @ConditionColumn = Condition FROM @FilterConditionList WHERE RowNum = @FCMin;
				IF ISNULL(@IN_ResultColumnAlias, '') <> ''
					SET @DependentConditions = CONCAT(@DependentConditions, ' AND ', @IN_AliasName, REPLACE(LTRIM(@ConditionColumn), CONCAT('@', @FCIndex), CONCAT(@IN_ResultColumnAlias, LTRIM(@ConditionValue))));
				ELSE
					SET @DependentConditions = CONCAT(@DependentConditions, ' AND ', @IN_AliasName, REPLACE(LTRIM(@ConditionColumn), CONCAT('@', @FCIndex), @ConditionValue));
			END
			ELSE
			BEGIN
				IF ISNULL(@IN_ResultColumnAlias, '') <> ''
					SET @DependentConditions = @DependentConditions + ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + @IN_AliasName + @ConditionColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+ CAST(' + CAST(CONCAT(@IN_ResultColumnAlias, LTRIM(@ConditionValue)) AS VARCHAR(MAX)) + ' AS VARCHAR(MAX)) +'','') > 0))';
				ELSE
					SET @DependentConditions = @DependentConditions + ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + @IN_AliasName + @ConditionColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + CAST(@ConditionValue AS VARCHAR(MAX)) + '''+'','') > 0))';
			END
		END
		ELSE IF ISNULL(@ConditionColumn, '') <> ''
			SET @DependentConditions = CONCAT(@DependentConditions, ' AND ', @IN_AliasName, @ConditionColumn);
	END

	RETURN @DependentConditions
END
GO
PRINT N'Creating [dbo].[fn_GetFinancialYearDetails]'
GO

CREATE FUNCTION [dbo].[fn_GetFinancialYearDetails]( 
	@IN_Year INT,
	@IN_Digits INT,
	@IN_IsYearAdd BIT,
	@IN_UserID INT
)	        
RETURNS INT
AS   
BEGIN
	
	DECLARE @Output INT,
			@BranchID INT = 0,
			@FinanceYearStartMonthID INT = 0,
			@CurrentMonthID INT = 0,
			@CurrentYear INT = 0;

	SELECT @BranchID = ISNULL(MCD.ReferenceID, 0), @FinanceYearStartMonthID = ISNULL(MCD.FinanceYearStartMonthID, 4)
	FROM CmnUserDetails UD 
		JOIN MstEmployeeDetails MED ON MED.ReferenceID = UD.TypeID AND UD.Type = 1 AND ISNULL(MED.IsDeleted, 0) = 0 AND ISNULL(MED.IsCurrentVersion, 1) = 1 
		JOIN MstCompanyDetails MCD ON MCD.ReferenceID = MED.BranchID AND ISNULL(MCD.IsDeleted, 0) = 0 AND ISNULL(MCD.IsCurrentVersion, 1) = 1
	WHERE UD.UserID = @IN_UserID;

	SET @CurrentMonthID = MONTH(GETDATE());
	SET @CurrentYear = YEAR(GETDATE());

	IF (ISNULL(@BranchID, 0) = 0 OR ISNULL(@FinanceYearStartMonthID, 0) = 0)
	BEGIN
		RETURN RIGHT(@CurrentYear, @IN_Digits);
	END

	IF (@CurrentMonthID >= @FinanceYearStartMonthID)
	BEGIN
		IF (@IN_IsYearAdd = 1)
		BEGIN						
			SET @Output = RIGHT((@CurrentYear + 1), @IN_Digits);
		END
		ELSE
		BEGIN
			SET @Output = RIGHT(@CurrentYear, @IN_Digits);
		END
	END
	ELSE IF (@CurrentMonthID < @FinanceYearStartMonthID)
	BEGIN
		IF (@IN_IsYearAdd = 1)
		BEGIN						
			SET @Output = RIGHT(@CurrentYear, @IN_Digits);
		END
		ELSE
		BEGIN
			SET @Output = RIGHT((@CurrentYear - 1), @IN_Digits);
		END
	END

	RETURN @Output;
END 
GO
PRINT N'Creating [dbo].[fn_GetTableBranchRBSCondition]'
GO

CREATE FUNCTION [dbo].[fn_GetTableBranchRBSCondition] (@IN_UserID INT, @IN_CreatedBy VARCHAR(100), @IN_FormID BIGINT)
RETURNS NVARCHAR(MAX)
AS
BEGIN	
	DECLARE @OutputConditions NVARCHAR(MAX) = '',
			@RBSBranchID INT = 0,
			@RBSCompanyID INT = 0,
			@CreatedByBranchID INT = 0,
			@SelfBranch BIT = 0

	IF ISNUMERIC(@IN_CreatedBy) = 1
	BEGIN
		SELECT @RBSCompanyID = ISNULL(ED.CompanyID, UD.CompanyID), @RBSBranchID = ISNULL(ED.BranchID, 0)
		FROM CmnUserDetails UD
			LEFT JOIN MstEmployeeDetails ED ON UD.[Type] = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
		WHERE UD.UserID = @IN_UserID;

		SELECT @CreatedByBranchID = CASE WHEN UD.Type = 0 THEN 0 ELSE ISNULL(ED.BranchID, 0) END
		FROM CmnUserDetails UD
			LEFT JOIN MstEmployeeDetails ED ON UD.[Type] = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
		WHERE UD.UserID = @IN_CreatedBy;

		IF ISNULL(@RBSCompanyID, 0) <> 0 AND ISNULL(@RBSBranchID, 0) <> 0
		BEGIN
			SELECT @SelfBranch = ISNULL(SelfBranch, 0)
			FROM CmnPasswordPolicy WHERE CompanyID = @RBSCompanyID AND IsDeleted = 0;

			IF @SelfBranch = 1 AND EXISTS(SELECT 1 FROM CmnUserDetails WHERE UserID = @IN_UserID AND AccessTypeID = 1)
			BEGIN
				SET @SelfBranch = 0;
			END
		END
	END

	IF @SelfBranch = 0 OR (@SelfBranch = 1 AND (@RBSBranchID = @CreatedByBranchID OR @RBSBranchID = 0 OR @CreatedByBranchID = 0))
	BEGIN
		SET @OutputConditions = '1';
	END
	ELSE
	BEGIN
		SET @OutputConditions = '0';
	END

	RETURN @OutputConditions
END

GO
PRINT N'Creating [dbo].[fn_GetTableCompanyRBSCondition]'
GO

CREATE FUNCTION [dbo].[fn_GetTableCompanyRBSCondition] (@IN_UserID INT, @IN_TableName VARCHAR(255), @IN_FkType VARCHAR(100))
RETURNS NVARCHAR(MAX)
AS
BEGIN	
	DECLARE @OutputConditions NVARCHAR(MAX) = '',
			@RBSCompanyID INT = 0,
			@SelfCompany BIT = 1,
			@RBSBranchID INT = 0,
			@SelfBranch BIT = 0,
			@OutputBranchConditions NVARCHAR(MAX) = '',
			@BranchUserID VARCHAR(MAX) = '',
			@RevolBranchUserID VARCHAR(MAX) = '',
			@UserType INT = 0,
			@AliasName VARCHAR(50) = 'MT'

	SELECT @RBSCompanyID = ISNULL(ED.CompanyID, UD.CompanyID), @RBSBranchID = ISNULL(ED.BranchID, 0), @UserType = UD.Type
	FROM CmnUserDetails UD
		LEFT JOIN MstEmployeeDetails ED ON UD.[Type] = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
	WHERE UD.UserID = @IN_UserID AND UD.Type <> 0;

	IF ISNULL(@RBSCompanyID, 0) = 0 AND ISNULL(@UserType, 0) <> 0
		SET @RBSCompanyID = ISNULL((SELECT TOP 1 ReferenceID FROM MstCompanyDetails WHERE IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1 AND ParentCompanyID IS NULL), 0);

	IF ISNULL(@RBSCompanyID, 0) <> 0
	BEGIN
		SELECT @SelfCompany = ISNULL(SelfCompany, 1), @SelfBranch = ISNULL(SelfBranch, 0)
		FROM CmnPasswordPolicy WHERE CompanyID = @RBSCompanyID AND IsDeleted = 0;

		IF @SelfCompany = 1 AND EXISTS(SELECT 1 FROM CmnUserDetails WHERE UserID = @IN_UserID AND AccessTypeID = 2)
		BEGIN
			SET @SelfCompany = 0;
			SET @SelfBranch = 0;
		END
		ELSE IF @SelfBranch = 1 AND (ISNULL(@RBSBranchID, 0) = 0 OR EXISTS(SELECT 1 FROM CmnUserDetails WHERE UserID = @IN_UserID AND AccessTypeID = 1))
		BEGIN
			SET @SelfBranch = 0;
		END
	END

	IF @IN_TableName = 'CmnCodeMaster' AND @IN_FkType = '2'
		SET @AliasName = 'MT';
	ELSE IF @IN_TableName = 'CmnCodeMaster'
		SET @AliasName = 'CM';
	ELSE IF @IN_TableName = 'CmnFilUpload'
		SET @AliasName = 'FU';

	IF @SelfCompany = 1 AND @RBSCompanyID <> 0 AND EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @IN_TableName AND COLUMN_NAME = 'CompanyID')
	BEGIN
		SET @OutputConditions = @OutputConditions + ' AND (ISNULL(' + @AliasName + '.CompanyID, 0) = 0 OR EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + @AliasName + '.CompanyID, '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + CAST(@RBSCompanyID AS VARCHAR(50)) + '''+'','') > 0)))'
	END

	IF @SelfBranch = 1 AND @RBSBranchID <> 0
	BEGIN
		SET @BranchUserID = ISNULL(SUBSTRING((SELECT ',' + ISNULL(CAST(UD.UserID AS NVARCHAR(MAX)), '''') 
										FROM CmnUserDetails UD
    										JOIN MstEmployeeDetails ED ON UD.Type = 1 AND ED.BranchID = @RBSBranchID AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
										WHERE UD.IsDeleted = 0
										FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '');

		SET @RevolBranchUserID = ISNULL(SUBSTRING((SELECT ',' + ISNULL(CAST(UD.UserID AS NVARCHAR(MAX)), '''') 
											FROM CmnUserDetails UD
											WHERE UD.Type = 0 AND UD.IsDeleted = 0
											FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '');

		IF ISNULL(@RevolBranchUserID, '')  <> ''
		BEGIN
			SET @RevolBranchUserID = @RevolBranchUserID + ',';
		END
											
		SET @BranchUserID = @RevolBranchUserID + @BranchUserID;

		IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @IN_TableName AND COLUMN_NAME = 'BranchID') AND @SelfBranch = 1
		BEGIN
			SET @OutputBranchConditions = (' AND ' + @AliasName + '.BranchID = ' + CAST(@RBSBranchID AS VARCHAR(50)));
		END
		ELSE IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @IN_TableName AND COLUMN_NAME = 'CreatedBy') AND @SelfBranch = 1
		BEGIN
			SET @OutputBranchConditions = (' AND ' + @AliasName + '.CreatedBy IN (' + @BranchUserID + ')');
		END
		ELSE IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @IN_TableName AND COLUMN_NAME = 'ModifiedBy') AND @SelfBranch = 1
		BEGIN
			SET @OutputBranchConditions = (' AND ' + @AliasName + '.ModifiedBy IN (' + @BranchUserID + ')');  
		END  
	END

	SET @OutputConditions = @OutputConditions + @OutputBranchConditions;

	RETURN @OutputConditions
END

GO
PRINT N'Creating [dbo].[CmnSuperscriptMapping]'
GO
CREATE TABLE [dbo].[CmnSuperscriptMapping]
(
[Superscript] [NVARCHAR] (5) NULL,
[Digit] [INT] NULL
)
GO
PRINT N'Creating [dbo].[fn_GetUnitConversionRate]'
GO

CREATE FUNCTION [dbo].[fn_GetUnitConversionRate] (@IN_FromUnitID INT, @IN_ToUnitID INT)
RETURNS FLOAT
AS
BEGIN	
	DECLARE @ConvertionRate FLOAT = 1

	SELECT TOP 1 @ConvertionRate =  ISNULL(ConversionRate, 0)
		FROM MstUnitConversion
	WHERE FromUnitID = @IN_FromUnitID AND ToUnitID = @IN_ToUnitID
		AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive,0) = 0 AND ISNULL(IsCurrentVersion,1) = 1									
 
 RETURN ISNULL(@ConvertionRate, 1)
END

GO
PRINT N'Creating [dbo].[fn_GetExpUnitConversionRate]'
GO

CREATE FUNCTION [dbo].[fn_GetExpUnitConversionRate] (@IN_FromUnitID INT, @IN_ToUnitID INT, @IN_ExpValue NVARCHAR(50))
RETURNS NVARCHAR(1000)
AS
BEGIN
		
	DECLARE @Base FLOAT, @PowerValue NVARCHAR(100), @UnitConvRate FLOAT, @ConvValue FLOAT;

	SET @PowerValue = SUBSTRING(@IN_ExpValue, CHARINDEX('x10', @IN_ExpValue) + 3, LEN(@IN_ExpValue));
	SET @UnitConvRate = dbo.fn_GetUnitConversionRate(@IN_FromUnitID, @IN_ToUnitID);

	SELECT @Base = SUBSTRING(@IN_ExpValue, 1, CHARINDEX('x10', @IN_ExpValue) - 1), 
	  @PowerValue = REPLACE(@PowerValue, Superscript, Digit) 
	FROM CmnSuperscriptMapping

	SET @ConvValue = @UnitConvRate * (@Base * POWER(10.0, CAST(@PowerValue AS FLOAT)));

	SELECT @Base = CAST(CAST(@ConvValue / POWER(10.0, FLOOR(LOG10(@ConvValue))) AS FLOAT) AS VARCHAR(10)),
		   @PowerValue = CAST(FLOOR(LOG10(@ConvValue)) AS VARCHAR(10))

	SELECT @PowerValue = REPLACE(@PowerValue, Digit, Superscript)
	FROM CmnSuperscriptMapping

 
 RETURN CAST(@Base AS NVARCHAR(10)) + 'x10' + @PowerValue
END

GO
PRINT N'Creating [dbo].[spAdmGetUserDetails]'
GO

CREATE PROCEDURE [dbo].[spAdmGetUserDetails](
    @IN_UserID INT
)
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50);			

	SELECT ISNULL(UD.UserName, '') UserName, ISNULL(UD.Password, '') Password, 
			CASE WHEN UD.Type = 1 THEN ISNULL(CUC.OfficialEmail, '') WHEN UD.Type = 2 THEN ISNULL(CC.OfficialEmail, '') ELSE '' END AS OfficialEmail, 
			CASE WHEN UD.Type = 1 THEN ISNULL(CUC.Mobile, '') WHEN UD.Type = 2 THEN ISNULL(CC.Mobile, '') ELSE '' END AS Mobile, ISNULL(UD.Type, 0) Type
	FROM CmnUserDetails UD
		JOIN CmnUserContacts CUC ON CUC.Type = UD.Type AND CUC.TypeID = UD.TypeID AND UD.Type = 1
		LEFT JOIN MstClientContacts CC ON UD.Type = 2 AND CC.ReferenceID = UD.TypeID AND CC.IsDeleted = 0 AND CC.NotActive = 0
	WHERE UD.UserID = @IN_USERID;
	
END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spAdmLockUser]'
GO

CREATE PROCEDURE [dbo].[spAdmLockUser](
    @IN_LockUserIDs VARCHAR(1000),
	@IN_UserID INT)	
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@UTCTime DATETIME = GETUTCDATE(),
				@GMTTime DATETIME;
		
		SET @GMTTime = dbo.fn_GMTCalculation(@IN_UserID);		
		UPDATE CmnUserDetails 
		SET IsLocked = 1,
			ModifiedBy = @IN_UserID,
			ModifiedDate = @UTCTime,
			ModifiedDateGMT = @GMTTime
		WHERE UserID IN (SELECT VALUE FROM STRING_SPLIT(@IN_LockUserIDs, ','));

		UPDATE CmnLoginHistory  
		SET	UserStatusID = 2, 
			LogoutTime = @UTCTime, 
			LogoutTypeID = 3,
			Remarks ='User Locked' 
		WHERE UserID IN (SELECT VALUE FROM STRING_SPLIT(@IN_LockUserIDs, ',')) AND UserStatusID = 1;

END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spAdmnRBSGroupPostSave]'
GO

CREATE PROCEDURE [dbo].[spAdmnRBSGroupPostSave] (
	@IN_UserID INT,
	@IN_DataID BIGINT,
	@DMLEvent VARCHAR(200)
)
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY

		DECLARE	@ErrorMessage VARCHAR(2000),
			@ErrorSeverity VARCHAR(50),
			@ErrorState INT,
			@GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
			@UTCTime DATETIME = GETUTCDATE(),
			@IsDeleted INT = 0,
			@FormID INT = 0,
			@RBSGroupID INT = 0;

		SELECT @IsDeleted = ISNULL(CM.IsDeleted, 0), @FormID = ISNULL(CM.FormID, 0), @RBSGroupID = ISNULL(CM.RBSGroupID, 0)
		FROM CmnRbsGroupForms CM 
		WHERE CM.ReferenceID = @IN_DataID;

		IF (@IsDeleted = 1)
		BEGIN
			UPDATE CmnRBSGroupsDataVariable 
			SET IsDeleted = 1, DeletedBy = @IN_UserID, DeletedDate = @UTCTime, DeletedDateGMT = @GMTTime
			WHERE ISNULL(RBSGroupID, 0) = @RBSGroupID AND ISNULL(FormID, 0) = @FormID AND ISNULL(IsDeleted, 0) = 0;
		END;
		
	END TRY	
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spAdmOnlineUserCreation]'
GO

CREATE PROCEDURE [dbo].[spAdmOnlineUserCreation](
	@IN_Name NVARCHAR(200),
	@IN_Email NVARCHAR(500),
	@IN_Mobile NVARCHAR(50),
	@IN_USERNAME NVARCHAR(100),
	@IN_PASSWORD NVARCHAR(200), 
	@IN_IPAddress VARCHAR(200) = '',
	@IN_SESSIONID NVARCHAR(500) = '')	
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
		BEGIN TRANSACTION tran_PortalUserCreation
			DECLARE @ErrorMessage NVARCHAR(2000),
							@ErrorSeverity NVARCHAR(50),
							@ErrorState NVARCHAR(50),
							@UserID INT = 0,
							@Password  NVARCHAR(1000) = '',
							@IsBlocked BIT = 0,
							@NotActive BIT = 0,
							@Message NVARCHAR(500) = '',
							@UTCTime DATETIME = GETUTCDATE(),
							@ExceptionState INT = 0,
							@ClientID BIGINT = 0,
							@ClientContactID BIGINT = 0
		
			SELECT @UserID = UD.UserID, @Password =  UD.[Password], 
				@IsBlocked = UD.IsLocked, @NotActive = ISNULL(CCD.NotActive, 0)
			FROM CmnUserDetails UD 
				LEFT JOIN MstClientContacts CCD ON UD.[Type] = 2 AND UD.TypeID = CCD.ReferenceID AND ISNULL(CCD.IsDeleted, 0) = 0
			WHERE UD.Username = @IN_USERNAME

			IF @UserID <> 0
			BEGIN
				SET @ExceptionState = 1
				SET @Message = 'Username already available'
			END
			ELSE
			BEGIN
				INSERT INTO MstClientDetails (Code, Name, Mobile, Email, Blocked, RefClient, KeyClient, CheckSumStatus,
					OrderBy, Version, IsCurrentVersion, NotActive, IsDeleted, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT)
				VALUES (IDENT_CURRENT('MstClientDetails'), @IN_Name, @IN_Mobile, @IN_Email, 0, 0, 0, 0, ISNULL((SELECT COUNT(1) + 1 FROM MstClientDetails), 1),
					1, 1, 0, 0, @UserID, @UTCTime, @UTCTime, @UserID, @UTCTime, @UTCTime)

				SET @ClientID = (SELECT TOP 1 ReferenceID FROM MstClientDetails ORDER BY ReferenceID DESC);

				INSERT INTO MstClientContacts (ClientID, Name, Mobile, EmailOff, TitleID, OrderBy, Version, IsCurrentVersion, NotActive, IsDeleted, 
					CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT)
				VALUES (@ClientID, @IN_Name, @IN_Mobile, @IN_Email, 0, ISNULL((SELECT COUNT(1) + 1 FROM MstClientContacts), 1),
					1, 1, 0, 0, @UserID, @UTCTime, @UTCTime, @UserID, @UTCTime, @UTCTime)

				SET @ClientContactID = (SELECT TOP 1 ReferenceID FROM MstClientContacts ORDER BY ReferenceID DESC);

				INSERT INTO CmnUserDetails (Type, TypeID, Username, Password, RoleID, OrderBy, LoginAttempt, IsLocked, OnlineUser,
					LicenseType, AuthenticationType, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT)
				VALUES (2, @ClientContactID, @IN_USERNAME, @IN_PASSWORD, 2, ISNULL((SELECT COUNT(1) + 1 FROM CmnUserDetails), 1),
					0, 0, 1, 1, 1, @UserID, @UTCTime, @UTCTime, @UserID, @UTCTime, @UTCTime)

				SET @Message = 'S0002';
			END
			SELECT @Message;

		COMMIT TRANSACTION tran_PortalUserCreation
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION tran_PortalUserCreation

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spAdmResetPassword]'
GO

CREATE PROCEDURE [dbo].[spAdmResetPassword](
    @IN_UserID INT,
	@IN_PassWord NVARCHAR(MAX),
	@IN_FormID INT)	
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50);
				
	UPDATE CmnUserDetails SET Password = @IN_PassWord, ResetPassword = 1, PasswordUpdatedDate = GETDATE() WHERE UserID = @IN_UserID;
	
	SELECT  CASE WHEN UD.Type = 1 THEN ISNULL(CUC.OfficialEmail, '') WHEN UD.Type = 2 THEN ISNULL(CC.OfficialEmail, '') ELSE '' END, 
			CASE WHEN UD.Type = 1 THEN ISNULL(CUC.Mobile, '') WHEN UD.Type = 2 THEN ISNULL(CC.Mobile, '') ELSE '' END, ISNULL(UD.Type, 0)
	FROM CmnUserDetails UD
		JOIN CmnUserContacts CUC ON CUC.Type = UD.Type AND CUC.TypeID = UD.TypeID AND UD.Type = 1
		LEFT JOIN MstClientContacts CC ON UD.Type = 2 AND CC.ReferenceID = UD.TypeID AND CC.IsDeleted = 0 AND CC.NotActive = 0
	WHERE UD.UserID = @IN_USERID;
	
END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spAdmUnlockUser]'
GO

CREATE PROCEDURE [dbo].[spAdmUnlockUser](
    @IN_UnlockUserIDs VARCHAR(1000),
	@IN_UserID INT)	
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@UTCTime DATETIME = GETUTCDATE(),
				@GMTTime DATETIME;

		SET @GMTTime = dbo.fn_GMTCalculation(@IN_UserID);				
		UPDATE CmnUserDetails 
		SET IsLocked = 0, 
			LoginAttempt = 0,
			ModifiedBy = @IN_UserID,
			ModifiedDate = @UTCTime,
			ModifiedDateGMT = @GMTTime
		WHERE UserID IN (SELECT VALUE FROM STRING_SPLIT(@IN_UnlockUserIDs, ','));

END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spAdmUserLogout]'
GO

CREATE PROCEDURE [dbo].[spAdmUserLogout] (
	@IN_LogOutUserIDs VARCHAR(1000), 
	@IN_UserID INT)
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
		BEGIN TRANSACTION tran_CmnLogoutDML

		DECLARE @UTCTime DATETIME = GETUTCDATE(),
				@ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50)

		UPDATE CmnLoginHistory  
		SET	UserStatusID = 2, 
			LogoutTime = @UTCTime, 
			LogoutTypeID = 3,
			Remarks='Logged Out' 
		WHERE UserID IN (SELECT VALUE FROM STRING_SPLIT(@IN_LogOutUserIDs, ',')) AND UserStatusID = 1

		COMMIT TRANSACTION tran_CmnLogoutDML
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION tran_CmnLogoutDML
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[CmnFormErrors]'
GO
CREATE TABLE [dbo].[CmnFormErrors]
(
[ReferenceID] [int] NOT NULL IDENTITY(1, 1),
[FormID] [int] NOT NULL,
[SPName] [nvarchar] (200) NOT NULL,
[INParameters] [NVARCHAR] (max) NOT NULL,
[Query] [NVARCHAR] (max) NOT NULL,
[ErrorMessage] [NVARCHAR] (max) NULL,
[CreatedDate] [datetime] NOT NULL
)
GO
PRINT N'Creating primary key [PK_CmnFormErrors] on [dbo].[CmnFormErrors]'
GO
ALTER TABLE [dbo].[CmnFormErrors] ADD CONSTRAINT [PK_CmnFormErrors] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[CmnApplicationErrors]'
GO
CREATE TABLE [dbo].[CmnApplicationErrors]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[MenuID] [INT] NOT NULL,
[UserID] [INT] NOT NULL,
[IPAddress] [VARCHAR] (100) NULL,
[ErrorEvent] [VARCHAR] (100) NULL,
[ErrorCode] [VARCHAR] (100) NULL,
[ErrorType] [NVARCHAR] (500) NULL,
[ErrorMessage] [NVARCHAR] (1000) NULL,
[StackTrace] [NVARCHAR] (max) NULL,
[LoggedDate] [DATETIME] NOT NULL
)
GO
PRINT N'Creating primary key [PK_CmnApplicationErrors] on [dbo].[CmnApplicationErrors]'
GO
ALTER TABLE [dbo].[CmnApplicationErrors] ADD CONSTRAINT [PK_CmnApplicationErrors] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnApplicationErrors] on [dbo].[CmnApplicationErrors]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnApplicationErrors] ON [dbo].[CmnApplicationErrors] ([MenuID], [UserID], [IPAddress])
GO
PRINT N'Creating [dbo].[viewCmnAppFormErrors]'
GO

CREATE VIEW [dbo].[viewCmnAppFormErrors] AS 
	SELECT ISNULL(CAE.ReferenceID, 0) AS ReferenceID,
		1 AS ErrorTypeID,
		ISNULL(CM.Typevalues, '') AS ErrorType,
		ISNULL(CAE.MenuID, 0) AS FormID,
		ISNULL(CFD.DisplayName, '') AS Form,
		ISNULL(CAE.UserID, 0) AS UserID,			
		ISNULL(CUD.UserName, '') AS Username,
		ISNULL(CAE.IPAddress, '') AS IPAddress,
		ISNULL(CAE.ErrorEvent, '') AS ErrorEvent,
		ISNULL(CAE.ErrorType, '') AS ExceptionType,
		ISNULL(CAE.ErrorMessage, '') AS ErrorMessage,
		ISNULL(CAE.StackTrace, '') AS StackTrace,
		CAE.LoggedDate AS ErrorDate,
		FORMAT(CAE.LoggedDate, 'dd-MMM-yyyy') AS DateValue,
		FORMAT(CAE.LoggedDate, 'yyyyMMdd') AS DateOrder,
		FORMAT(CAE.LoggedDate, 'MMM-yyyy') AS MonthValue,
		FORMAT(CAE.LoggedDate, 'yyyyMM') AS MonthOrder
	FROM CmnApplicationErrors CAE
		LEFT JOIN CmnFormDetails CFD ON CAE.MenuID = CFD.FormID AND CFD.IsDeleted = 0 
		LEFT JOIN CmnUserDetails CUD ON CAE.UserID = CUD.UserID AND CUD.IsDeleted = 0 
		LEFT JOIN CmnCodemaster CM ON CM.Type = 'Error Type' AND CM.CodemasterID = 1
	UNION ALL
	SELECT ISNULL(CFE.ReferenceID, 0) AS ReferenceID,
		2 AS ErrorTypeID,
		ISNULL(CM.Typevalues, '') AS ErrorType,
		ISNULL(CFE.FormID, 0) AS FormID,
		ISNULL(CFD.DisplayName, '') AS Form,
		0 AS UserID,
		'' AS Username,
		'' AS IPAddress,
		ISNULL(CFE.SPName, '') AS ErrorEvent,
		'' AS ExceptionType,
		ISNULL(CFE.ErrorMessage, '') AS ErrorMessage,
		CONCAT('QUERY:', CHAR(13), CHAR(10), CFE.Query, 'Parameters:', CHAR(13), CHAR(10), CFE.INParameters) AS StackTrace,
		CFE.CreatedDate AS ErrorDate,
		FORMAT(CFE.CreatedDate, 'dd-MMM-yyyy') AS DateValue,
		FORMAT(CFE.CreatedDate, 'yyyyMMdd') AS DateOrder,
		FORMAT(CFE.CreatedDate, 'MMM-yyyy') AS MonthValue,
		FORMAT(CFE.CreatedDate, 'yyyyMM') AS MonthOrder
	FROM CmnFormErrors CFE
		LEFT JOIN CmnFormDetails CFD ON CFE.FormID = CFD.FormID AND CFD.IsDeleted = 0 
		LEFT JOIN CmnCodemaster CM ON CM.Type = 'Error Type' AND CM.CodemasterID = 2;
GO
PRINT N'Creating [dbo].[spEmailAdmReportAppErrors]'
GO

CREATE PROCEDURE [dbo].[spEmailAdmReportAppErrors](@IN_EmailID INT, @IN_RefID BIGINT, @IN_MainID BIGINT)	
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
			@ErrorSeverity NVARCHAR(50),
			@ErrorState NVARCHAR(50),
			@UTCTime DATETIME = GETUTCDATE(),
			@Offset INT = DATEDIFF(MINUTE, GETUTCDATE(), GETDATE()),
			@ReportStartDate DATETIME,
			@ReportEndDate DATETIME,
			@CompanyID INT = 0; 

		SELECT @CompanyID = ISNULL(CompanyID, 0)
		FROM EmailConfiguration WHERE ReferenceID = @IN_EmailID;

		SELECT @ReportStartDate = StartDate, @ReportEndDate = EndDate
		FROM EmailSchedulerHistory WHERE ReferenceID = @IN_RefID;
		
		SELECT 
		AFE.ReferenceID AS ID,
		AFE.ErrorType AS ErrorType,
		AFE.Form AS Form,
		AFE.Username AS UserName,
		AFE.IPAddress AS IPAddress,
		AFE.ErrorEvent AS ErrorEvent,
		AFE.ErrorMessage AS ErrorMessage,
		FORMAT(AFE.ErrorDate, 'dd-MMM-yyyy HH:mm:ss.fff') AS ErrorDate
		FROM viewCmnAppFormErrors AFE
		WHERE CAST(ErrorDate AS DATE) = CAST(GETDATE() AS DATE);
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spEmailAdmSummaryAppErrors]'
GO

CREATE PROCEDURE [dbo].[spEmailAdmSummaryAppErrors](@IN_EmailID INT)	
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
			@ErrorSeverity NVARCHAR(50),
			@ErrorState NVARCHAR(50),
			@UTCTime DATETIME = GETUTCDATE(),
			@ReportStartDate DATETIME,
			@ReportEndDate DATETIME,
			@RefID BIGINT = 0,
			@CompanyID INT = 0;

		SELECT @CompanyID = ISNULL(CompanyID, 0)
		FROM EmailConfiguration WHERE ReferenceID = @IN_EmailID;

		SELECT @ReportStartDate = StartDate, @ReportEndDate = EndDate
		FROM dbo.fn_GetScheduleEmailData(@IN_EmailID);

		IF @ReportEndDate IS NOT NULL
		BEGIN
			INSERT INTO EmailSchedulerHistory (EmailID, StartDate, EndDate) 
			VALUES (@IN_EmailID, @ReportStartDate, @ReportEndDate);

			SET @RefID = IDENT_CURRENT('EmailSchedulerHistory');

				;WITH CTE AS (
				SELECT 
					0 AS RefID, 
					ISNULL(AFE.ReferenceID, 0)AS MainID, 
					'' AS EmailList, 
					AFE.ErrorDate
				FROM viewCmnAppFormErrors AFE
				WHERE CAST(AFE.ErrorDate AS DATE) = CAST(GETDATE() AS DATE)
				)
				SELECT @RefID AS RefID,0 AS MainID,'' AS EmailList,COUNT(1) AS TotalCount
				FROM CTE;
			END
			ELSE
				SELECT 0 WHERE 1 = 2;

		EXEC spEmailTriggerUpdate @IN_EmailID, @UTCTime;
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnStaticAuditTracking]'
GO

CREATE PROCEDURE [dbo].[spCmnStaticAuditTracking](@IN_Event VARCHAR(100), @IN_FormName NVARCHAR(100), @IN_TableName VARCHAR(255), @IN_IdentityColumn VARCHAR(255), 
	@IN_WHERECLAUSE VARCHAR(4000), @IN_PreviousDataTable VARCHAR(255), @IN_ColumnList VARCHAR(MAX), @IN_Comments VARCHAR(4000), 
	@IN_IPAddress VARCHAR(100), @IN_FormID INT, @IN_UserID INT, @IN_SessionID VARCHAR(500), @IN_ControlID bigint)
AS
BEGIN
  SET NOCOUNT ON

	DECLARE @TranCount INT,
					@XactState INT
  --SET @TranCount = @@TRANCOUNT;
  BEGIN TRY
		DECLARE @UTCTime DATETIME = GETUTCDATE(),
						@ErrorMessage NVARCHAR(2000),
						@ErrorSeverity NVARCHAR(50),
						@ErrorState NVARCHAR(50),
						@FormAuditTrail BIT = 0,
						@Min BIGINT = 0,
						@Max BIGINT = 0,
						@RecordID BIGINT = 0,
						@AuditTrackingID BIGINT = 0,
						@Query NVARCHAR(MAX) = '',
						@TDQuery NVARCHAR(MAX) = '',
						@PTDQuery NVARCHAR(MAX) = '',
						@ColumnName VARCHAR(255) = '',
						@AuditCompanyID INT = 0,
            @AuditInTable VARCHAR(255) = '',
            @AuditTable VARCHAR(255) = '',
            @AuditPreviousTable VARCHAR(255) = '',
						@ControlID BIGINT = @IN_ControlID;

		SELECT @AuditCompanyID = ISNULL(ED.CompanyID, 0)
		FROM CmnUserDetails UD
			LEFT JOIN MstEmployeeDetails ED ON UD.[Type] = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
		WHERE UD.UserID = @IN_UserID;

		IF @AuditCompanyID = 0
			SET @AuditCompanyID = ISNULL((SELECT TOP 1 ReferenceID FROM MstCompanyDetails WHERE IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1), 0);

		SELECT @FormAuditTrail = AuditTrail, @IN_FormName = CASE WHEN @IN_FormName = '' THEN DisplayName ELSE @IN_FormName END FROM CmnFormDetails WHERE FormID = @IN_FormID

		IF @FormAuditTrail = 0
			RETURN;
      
    SET @AuditInTable = SUBSTRING(('##atB' +  SUBSTRING(CAST(OBJECT_ID(@IN_TableName) AS VARCHAR(100)), 1, 32) 
                   + RIGHT(ISNULL(@IN_SessionID, ''), 10) + CAST(ISNULL(@IN_FormID, 0) AS VARCHAR(50))) , 1, 63);
      
    SET @AuditTable = @AuditInTable + 'A';

		SET @TDQuery = 'IF OBJECT_ID(''tempdb..' + @AuditTable + ''') IS NOT NULL DROP TABLE ' + @AuditTable + ';' +
        'SELECT * INTO ' + @AuditTable + ' FROM ' + @IN_TableName + ' ' +  ISNULL(@IN_WHERECLAUSE, '') + ';';

		EXEC(@TDQuery);
        
    SET @AuditPreviousTable = @AuditInTable + 'B';
    
    IF ISNULL(@IN_PreviousDataTable, '') = '' 
    BEGIN
      SET @PTDQuery = 'IF OBJECT_ID(''tempdb..' + @AuditPreviousTable + ''') IS NOT NULL DROP TABLE ' + @AuditPreviousTable + ';' +
        'SELECT * INTO ' + @AuditPreviousTable + ' FROM ' + @IN_TableName + ' WHERE 1 = 2;';
    END
    ELSE
    BEGIN
      SET @PTDQuery = 'IF OBJECT_ID(''tempdb..' + @AuditPreviousTable + ''') IS NOT NULL DROP TABLE ' + @AuditPreviousTable + ';' +
        'SELECT * INTO ' + @AuditPreviousTable + ' FROM ' + @IN_PreviousDataTable + ';';
    END;
    
    EXEC(@PTDQuery);
    
    IF OBJECT_ID('tempdb..#temp_AuditColumnList') IS NOT NULL DROP TABLE #temp_AuditColumnList;
    
    CREATE TABLE #temp_AuditColumnList (
      RowNo INTEGER NOT NULL,
      COLUMN_NAME SYSNAME NOT NULL,
      DATA_TYPE NVARCHAR(256) NULL); 

      
    INSERT INTO #temp_AuditColumnList
		SELECT ROW_NUMBER() OVER (ORDER BY ORDINAL_POSITION) AS RowNo, COLUMN_NAME, DATA_TYPE
		FROM INFORMATION_SCHEMA.COLUMNS 
		WHERE TABLE_NAME = @IN_TableName AND COLUMN_NAME <> @IN_IdentityColumn
			AND (ISNULL(@IN_ColumnList, '') = '' OR PATINDEX(CONCAT('%,', COLUMN_NAME, ',%'), CONCAT(',', @IN_ColumnList, ',')) > 0)
		ORDER BY ORDINAL_POSITION;

		IF OBJECT_ID('tempdb..#temp_AuditDataTracking') IS NOT NULL DROP TABLE #temp_AuditDataTracking
		CREATE TABLE #temp_AuditDataTracking (
		  ReferenceID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
		  IdentityValue NVARCHAR(MAX) NOT NULL,
		  TableColumn VARCHAR(255) NOT NULL,
		  OldData NVARCHAR(MAX) NULL,
		  NewData NVARCHAR(MAX) NULL
		);

		SELECT @Query = @Query + '
			INSERT INTO #temp_AuditDataTracking (IdentityValue, TableColumn, OldData, NewData) 
			SELECT ND.' + @IN_IdentityColumn + ', ''' + ACL.COLUMN_NAME + ''', OD.' + ACL.COLUMN_NAME + ', ND.' + ACL.COLUMN_NAME 
			+ ' FROM ' + @AuditTable + ' ND' +
			' LEFT JOIN ' + @AuditPreviousTable + ' OD ON OD.' + @IN_IdentityColumn + ' = ND.' + @IN_IdentityColumn + 
			' WHERE ISNULL(ND.' + ACL.COLUMN_NAME + ',NULL) <> ISNULL(OD.' + ACL.COLUMN_NAME 
			+ ',NULL) OR (OD.' + ACL.COLUMN_NAME + ' IS NULL AND ND.' + ACL.COLUMN_NAME + ' IS NOT NULL);'
		FROM #temp_AuditColumnList ACL

		EXEC(@Query);

		IF OBJECT_ID('tempdb..#temp_AuditTracking') IS NOT NULL DROP TABLE #temp_AuditTracking

		SELECT ROW_NUMBER() OVER (ORDER BY IdentityValue) AS RowNo, IdentityValue INTO #temp_AuditTracking
		FROM #temp_AuditDataTracking WHERE ISNULL(IdentityValue, 0) <> 0 GROUP BY IdentityValue;

		SET @Min = 0;
		SET @Max = 0;
		SELECT @Min = MIN(RowNo), @Max = MAX(RowNo) FROM #temp_AuditTracking;

		--IF @TranCount = 0
		--	BEGIN TRANSACTION
		--ELSE
		--	BEGIN TRANSACTION tran_StaticAuditTracking;

			WHILE ISNULL(@Min, 0) > 0 AND @Min <= @Max
			BEGIN
				SELECT @RecordID = IdentityValue FROM #temp_AuditTracking WHERE RowNo = @Min;
				SET @AuditTrackingID = 0

				IF @RecordID = 0
					CONTINUE;

				BEGIN TRY
					INSERT INTO CmnAuditTracking (AuditDate, UserID, SessionID, FormID, IpAddress, FormName, TableName, EventName, 
						IdentityColumn, IdentityValue, Comments, Status, CreatedDate, ModifiedBy, CompanyID)
					VALUES (@UTCTime, @IN_UserID, @IN_SessionID, @IN_FormID, @IN_IPAddress, @IN_FormName, @IN_TableName, @IN_Event, 
						@IN_IdentityColumn, @RecordID, @IN_Comments, 'I', GETUTCDATE(), @IN_UserID, @AuditCompanyID);
						
						
				  IF ISNULL(@IN_ControlID, 0) != 0 AND 
					   NOT EXISTS(SELECT 1
												FROM #temp_AuditDataTracking DT
													LEFT JOIN CmnControlColumns CC ON CC.ControlID = @IN_ControlID 
														AND DT.TableColumn = CC.ColumnName AND CC.IsDeleted = 0              
												WHERE DT.IdentityValue = @RecordID 
												HAVING COUNT(1) = SUM(CASE WHEN CC.ColumnName IS NULL THEN 0 ELSE 1 END))
						SET @IN_ControlID = 0 
					ELSE SET @IN_ControlID = @ControlID;
					  

					SET @AuditTrackingID = @@IDENTITY;

          IF ISNULL(@IN_ControlID, 0) = 0 AND ISNULL(@IN_FormID, 0) <> 0 
          BEGIN
            ;WITH ColConfig AS (
              SELECT ISNULL(FC.ControlID, FCOL.ControlID) AS ControlID, 
                ISNULL(FCC.ColumnID, 0) AS ColumnID, 
                ISNULL(FCC.ColumnName, FCOL.TableColumn) AS ColumnName, 
                ISNULL(FCC.DisplayName, FCOL.Name) AS DisplayName,
                DENSE_RANK() OVER (PARTITION BY COALESCE(FCC.ColumnName, FCOL.TableColumn, DT.TableColumn)
              ORDER BY COALESCE(FCC.ColumnName, FCOL.TableColumn, DT.TableColumn), 
                CASE WHEN COALESCE(FCC.DisplayName, FCOL.Name, '') != '' THEN 
                  CASE WHEN ISNULL(FCC.DisplayName, FCOL.Name) LIKE '% %' THEN 0 ELSE 1 END
								ELSE 2 END, 
                ISNULL(FCC.ColumnID, 0) DESC,
								ISNULL(FC.ControlID, FCOL.ControlID) DESC) AS ColumnRank
              FROM #temp_AuditDataTracking DT
                JOIN CmnFormDetails FD
                  ON FD.FormID = @IN_FormID AND FD.IsDeleted = 0
                JOIN CmnFormTabs FT
                  ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
                JOIN CmnGroupBoxes GB
                  ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
								LEFT JOIN CmnFormControls FCOL
                  ON FCOL.GroupID = GB.GroupID AND FCOL.IsDeleted = 0	
									  AND FCOL.TableColumn = DT.TableColumn
				            AND FCOL.IsDmlControl = 1
                LEFT JOIN CmnFormControls FC
                  ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FCOL.ControlID IS NULL
                LEFT JOIN CmnControlColumns FCC 
                  ON FCC.ControlID = FC.ControlID AND FCC.ColumnName = DT.TableColumn
                    AND FCC.IsDeleted = 0 AND FCC.IsDmlControl = 1
              WHERE DT.IdentityValue = @RecordID
                AND CASE -- WHEN ISNULL(FC.TableName, '') != '' THEN FC.TableName
                         WHEN ISNULL(GB.TableName, '') != '' THEN GB.TableName
                         WHEN ISNULL(FT.TableName, '') != '' THEN FT.TableName
                         WHEN ISNULL(FD.TableName, '') != '' THEN FD.TableName END = @IN_TableName)
                         
            INSERT INTO CmnAuditDataTracking (
              AuditTrackingID, ControlID, ColumnID, TableColumn, OldData, NewData,
              CreatedDate, ModifiedBy)
            SELECT @AuditTrackingID, ISNULL(ColConfig.ControlID, 0), ISNULL(ColConfig.ColumnID, 0), DT.TableColumn, DT.OldData, DT.NewData, 
              GETUTCDATE(), @IN_UserID
            FROM #temp_AuditDataTracking DT
              LEFT JOIN ColConfig ON ColConfig.ColumnName = DT.TableColumn
                AND ColConfig.ColumnRank = 1 
                AND ColConfig.ControlID IS NOT NULL						
            WHERE DT.IdentityValue = @RecordID 
            ORDER BY DT.ReferenceID;
            
          END
          ELSE               
            INSERT INTO CmnAuditDataTracking (
              AuditTrackingID, ControlID, ColumnID, TableColumn, OldData, NewData, 
              CreatedDate, ModifiedBy)
            SELECT @AuditTrackingID, @IN_ControlID, ISNULL(CC.ColumnID, 0), DT.TableColumn, DT.OldData, DT.NewData, 
              GETUTCDATE(), @IN_UserID
            FROM #temp_AuditDataTracking DT
              LEFT JOIN CmnControlColumns CC ON CC.ControlID = @IN_ControlID 
                AND DT.TableColumn = CC.ColumnName AND CC.IsDeleted = 0              
            WHERE DT.IdentityValue = @RecordID 
            ORDER BY DT.ReferenceID;

					UPDATE CmnAuditTracking
					SET Status = 'S', ModifiedDate = GETUTCDATE()
					WHERE ReferenceID = @AuditTrackingID
				END TRY
				BEGIN CATCH
					UPDATE CmnAuditTracking
					SET Status = 'F', ModifiedDate = GETUTCDATE()
					WHERE ReferenceID = @AuditTrackingID
				END CATCH

				SET @Min = @Min + 1;
			END
      
      IF OBJECT_ID('tempdb..#temp_AuditTracking') IS NOT NULL DROP TABLE #temp_AuditTracking;
      IF OBJECT_ID('tempdb..#temp_AuditDataTracking') IS NOT NULL DROP TABLE #temp_AuditDataTracking;
      IF OBJECT_ID('tempdb..#temp_AuditColumnList') IS NOT NULL DROP TABLE #temp_AuditColumnList;
      
      SET @TDQuery = 'IF OBJECT_ID(''tempdb..' + @AuditPreviousTable + ''') IS NOT NULL DROP TABLE ' + @AuditPreviousTable + ';';
		  EXEC(@PTDQuery);
      
      SET @TDQuery = 'IF OBJECT_ID(''tempdb..' + @AuditTable + ''') IS NOT NULL DROP TABLE ' + @AuditTable + ';';
      EXEC(@TDQuery);      

		--COMMIT TRANSACTION tran_StaticAuditTracking

	END TRY
	BEGIN CATCH
		--SET @XactState = XACT_STATE()
		--IF @XactState = -1
		--		ROLLBACK;
		--IF @XactState = 1 AND @TranCount = 0
		--		ROLLBACK
		--IF @XactState = 1 AND @TranCount > 0
		--		ROLLBACK TRANSACTION tran_StaticAuditTracking;

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnAddMasterData]'
GO

CREATE PROCEDURE [dbo].[spCmnAddMasterData](
	@IN_Type VARCHAR(50),
	@IN_Code VARCHAR(100),
	@IN_Name NVARCHAR(100),
	@IN_Description VARCHAR(1000),
	@IN_Category VARCHAR(400),
	@IN_Remarks VARCHAR(1000),
	@IN_Icon VARCHAR(100),
	@IN_Details VARCHAR(1000),
	@IN_SubType BIT,
	@IN_NotActive BIT,
	@IN_NotActiveDate DATETIME,
	@IN_OrderBy INT, 
	@IN_IPAddress VARCHAR(100), 
	@IN_FormID INT,
	@IN_UserID INT)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
			  @GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
			  @UTCTime DATETIME = GETUTCDATE(),
			  @CodemasterID INT = 0,
			  @UserAccess INT = 0,
			  @OrderBy INT = 0,
			  @Count INT = 0,
			  @TypeValueCount INT = 0,
			  @Message VARCHAR(100) = '',
			  @WhereCondition NVARCHAR(4000) = '',
			  @DupCount INT = 0,
			  @CompanyID INT = 0

		SELECT @CodemasterID = MAX(CodemasterID) + 1 FROM CmnCodeMaster WHERE Type = @IN_Type;
		SELECT @OrderBy = MAX(Orderby) + 1 FROM CmnCodeMaster WHERE Type = @IN_Type AND IsDeleted = 0;
		SELECT TOP 1 @UserAccess = UserAccess FROM CmnCodeMaster WHERE Type = @IN_Type AND IsDeleted = 0;
		SELECT @Count = COUNT(1) FROM CmnCodeMaster WHERE Type = @IN_Type AND OrderBy = @IN_OrderBy AND IsDeleted = 0;
		SELECT @TypeValueCount = COUNT(1) FROM CmnCodeMaster WHERE Type = @IN_Type AND TypeValues = @IN_Name AND IsDeleted = 0;
		SELECT @DupCount = COUNT(1) FROM CmnCodeMaster WHERE Type = @IN_Type AND Code = @IN_Code AND Code <> '' AND IsDeleted = 0;

		SELECT @CompanyID = ISNULL(ED.CompanyID, 0)
		FROM CmnUserDetails UD
			JOIN MstEmployeeDetails ED ON UD.Type = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
		WHERE UD.UserID = @IN_UserID;

		IF @IN_OrderBy = 0 OR @Count > 0
		BEGIN
			SET @IN_OrderBy = @OrderBy;
		END

		IF @TypeValueCount > 0
		BEGIN
			SET @Message = 'Duplicate occured in Name';
		END
		ELSE IF @DupCount > 0
		BEGIN
			SET @Message = 'Duplicate occured in Type & Code';
		END
		ELSE
		BEGIN
			INSERT INTO CmnCodeMaster (CodemasterID, [Type], DisplayType, Code, TypeValues, UserAccess, [Description], Category, Remarks,
				ImagePath, Details, SubType, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT,
				NotActive, NotActiveDate, IsDeleted, IsCurrentVersion, Version, OrderBy, CompanyID)
			VALUES (@CodemasterID, @IN_Type, @IN_Type, @IN_Code, @IN_Name, @UserAccess, @IN_Description, @IN_Category, @IN_Remarks,
				@IN_Icon, @IN_Details, @IN_SubType, @IN_UserID, @UTCTime, @GMTTime, @IN_UserID, @UTCTime, @GMTTime,
				@IN_NotActive, @IN_NotActiveDate, 0, 1, 1, @IN_OrderBy, @CompanyID) 

			SET @WhereCondition = CONCAT('WHERE Type = ''', @IN_Type ,''' AND CodeMasterID = ', CAST(@CodemasterID AS VARCHAR(50)) + ' AND IsDeleted = 0');
			EXEC spCmnStaticAuditTracking 'INSERT', '', 'CmnCodeMaster', 'CodeMasterID', @WhereCondition, '', '', '', @IN_IPAddress, @IN_FormID, @IN_UserID, '', 0;
			
			SET @Message = 'S0002';
		END		

		SELECT @Message;

	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnAddMasterDataType]'
GO

CREATE PROCEDURE [dbo].[spCmnAddMasterDataType](
	@IN_Type VARCHAR(50),
	@IN_DisplayType VARCHAR(100),
	@IN_UserAccess INT,
	@IN_Code VARCHAR(100),
	@IN_Name NVARCHAR(100),
	@IN_Description VARCHAR(1000),
	@IN_Category VARCHAR(400),
	@IN_Remarks VARCHAR(1000),
	@IN_Details VARCHAR(1000),
	@IN_SubType BIT,
	@IN_NotActive BIT,
	@IN_NotActiveDate DATETIME,
	@IN_OrderBy INT,
	@IN_FormID INT = 0,
	@IN_UserID INT = 0)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
			  @GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
			  @UTCTime DATETIME = GETUTCDATE(),
			  @CodemasterID INT = 0,
			  @OrderBy INT = 0,
			  @TypeCount INT = 0,
			  @Message VARCHAR(100) = '',
			  @DupCount INT = 0,
			  @CompanyID INT = 0

			SET @CodemasterID = 1;
			SET @OrderBy = 1;
			SELECT @TypeCount = COUNT(1) FROM CmnCodeMaster WHERE Type = @IN_Type;
			SELECT @DupCount = COUNT(1) FROM CmnCodeMaster WHERE Type = @IN_Type AND Code = @IN_Code AND Code <> '' AND IsDeleted = 0;

			SELECT @CompanyID = ISNULL(ED.CompanyID, 0)
			FROM CmnUserDetails UD
				JOIN MstEmployeeDetails ED ON UD.Type = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
			WHERE UD.UserID = @IN_UserID;
		
			IF @TypeCount > 0
			BEGIN
				SET @Message = 'Duplicate occured in Type';
			END
			ELSE IF @DupCount > 0
			BEGIN
				SET @Message = 'Duplicate occured in Type & Code';
			END
			ELSE
			BEGIN
				INSERT INTO CmnCodeMaster (CodemasterID, [Type], DisplayType, Code, TypeValues, UserAccess, [Description], Category, Remarks,
					Details, SubType, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT,
					NotActive, NotActiveDate, IsDeleted, IsCurrentVersion, Version, OrderBy, CompanyID)
				VALUES (@CodemasterID, @IN_Type, @IN_DisplayType, @IN_Code, @IN_Name, @IN_UserAccess, @IN_Description, @IN_Category, @IN_Remarks,
					@IN_Details, @IN_SubType, @IN_UserID, @UTCTime, @GMTTime, @IN_UserID, @UTCTime, @GMTTime,
					@IN_NotActive, @IN_NotActiveDate, 0, 1, 1, @IN_OrderBy, @CompanyID) 
			
				SET @Message = 'S0002';
			END		

			SELECT @Message;

	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnApplicationErrorDML]'
GO

CREATE PROCEDURE [dbo].[spCmnApplicationErrorDML](
	@IN_Event VARCHAR(20), 
	@IN_IPAddress VARCHAR(100),
	@IN_ErrorCode VARCHAR(100),
	@IN_ErrorType NVARCHAR(500),
	@IN_ErrorMessage NVARCHAR(1000),
	@IN_StackTrace NVARCHAR(MAX),
	@IN_FormID INT,
	@IN_UserID INT)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY
	
	  BEGIN TRANSACTION tran_CmnApplicationErrorDML

	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50)
        
		INSERT INTO CmnApplicationErrors (MenuID, UserID, IPAddress, ErrorEvent, ErrorCode, ErrorType, ErrorMessage, StackTrace, LoggedDate) 
		SELECT @IN_FormID, @IN_UserID, @IN_IPAddress, @IN_Event, @IN_ErrorCode, @IN_ErrorType, @IN_ErrorMessage, @IN_StackTrace,  GETUTCDATE()

		COMMIT TRANSACTION tran_CmnApplicationErrorDML

	END TRY
	BEGIN CATCH

		ROLLBACK TRANSACTION tran_CmnApplicationErrorDML

		--EXEC [Fn_ErrorFetch] @@SPID

		--INSERT INTO tbl_StoredProcedure_Error(MenuID, App_User, SQL_User, Server_Name, [Procedure_Name],
		--	Error_Code, Line_Number, [Error_Message], [Error_State], Logged_Date, [INPUT_PARAMS]) 
		--SELECT @IN_FormID, @IN_UserID, USER_NAME(), @@SERVERNAME, ERROR_PROCEDURE(), ERROR_NUMBER(),
		--	ERROR_LINE(), ERROR_MESSAGE(), ERROR_STATE(), GETUTCDATE(), (SELECT PIN FROM TBL_ERRORFETCH);

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnApplyToOtherRoles]'
GO

CREATE PROCEDURE [dbo].[spCmnApplyToOtherRoles](
	@IN_FormID INT,
	@IN_UserID INT,
	@IN_IntialRoleID INT,
	@IN_RoleID VARCHAR(300),
	@IN_ModuleID INT
)	
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@UTCTime DATETIME = GETUTCDATE(),
				@GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
				@ExceptionState INT = 0,
				@UserFormID INT = 0,
				@RoleFormID INT = 0,
				@RBSGroupFormID INT = 0,
				@OrderBy INT = 0;

		SET @UserFormID = ISNULL((SELECT FormID FROM CmnFormDetails WHERE Name = 'User Permission' AND IsDeleted = 0), 0);

		SET @RoleFormID = ISNULL((SELECT FormID FROM CmnFormDetails WHERE Name = 'Role Permission' AND IsDeleted = 0), 0);

		SET @RBSGroupFormID = ISNULL((SELECT FormID FROM CmnFormDetails WHERE Name = 'RBS Group' AND IsDeleted = 0), 0);
	
		IF (@IN_FormID = @RoleFormID)
		BEGIN
			IF EXISTS(SELECT 1 FROM CmnRolePermission RP 
				WHERE RP.IsDeleted = 0 AND RP.RoleID = @IN_IntialRoleID
					AND NOT EXISTS(SELECT 1 FROM CmnRolePermission ARP WHERE ARP.FormID = RP.FormID AND ARP.IsDeleted = 0
										AND PATINDEX(CONCAT('%,', CAST(ARP.RoleID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0))
			BEGIN
				INSERT INTO CmnRolePermission (RoleID, FormID, HasReadPermission, Buttons, Tabs, IsFavourite, FavouriteOrder, MainMenuOrder, SubMenuOrder,
					Audit, SubAudit, ValidateChecksum, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted, DeletedBy, DeletedDate, ConfirmMsg) 
				SELECT RI.items, RP.FormID, RP.HasReadPermission, RP.Buttons, RP.Tabs, RP.IsFavourite, RP.FavouriteOrder, RP.MainMenuOrder, RP.SubMenuOrder,
					RP.Audit, RP.SubAudit, RP.ValidateChecksum, @IN_UserID, @UTCTime, @IN_UserID, @UTCTime, 0, 0, NULL, RP.ConfirmMsg
				FROM CmnRolePermission RP
					JOIN dbo.fn_RevolSpliter(@IN_RoleID, ',') RI ON ISNULL(RI.items, '') <> '' 
				WHERE RP.IsDeleted = 0 AND RP.RoleID = @IN_IntialRoleID
					AND NOT EXISTS(SELECT 1 FROM CmnRolePermission ARP WHERE ARP.FormID = RP.FormID AND ARP.IsDeleted = 0
										AND PATINDEX(CONCAT('%,', CAST(ARP.RoleID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0)
			END;
			IF NOT EXISTS(SELECT 1 FROM CmnRolePermission RP 
				WHERE RP.IsDeleted = 0 AND RP.RoleID = @IN_IntialRoleID
					AND NOT EXISTS(SELECT 1 FROM CmnRolePermission ARP WHERE ARP.FormID = RP.FormID AND ARP.IsDeleted = 0
										AND PATINDEX(CONCAT('%,', CAST(ARP.RoleID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0))
			BEGIN
				UPDATE RP 
				SET MainMenuOrder = SRP.MainMenuOrder ,SubMenuOrder = SRP.SubMenuOrder ,HasReadPermission = SRP.HasReadPermission , IsFavourite = SRP.IsFavourite,
					Buttons = SRP.Buttons, Tabs = SRP.Tabs, ConfirmMsg = SRP.ConfirmMsg
				FROM CmnRolePermission RP
					JOIN CmnRolePermission SRP ON SRP.RoleID = @IN_IntialRoleID AND RP.FormID = SRP.FormID
				WHERE RP.IsDeleted = 0 AND PATINDEX(CONCAT('%,', CAST(RP.RoleID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0;		
			END;

			IF EXISTS(SELECT 1 FROM CmnRBSPermission UP 
						JOIN CmnUserDetails UD ON UD.UserID = UP.UserID
						JOIN CmnRolePermission SRP ON PATINDEX(CONCAT('%,', CAST(SRP.RoleID AS VARCHAR(50)), ',%'), CONCAT(',', UD.RoleID, ',')) > 0 AND UP.FormID = SRP.FormID
					WHERE UP.IsDeleted = 0 AND UD.RoleID = @IN_IntialRoleID
						AND NOT EXISTS(SELECT 1 FROM CmnRolePermission ARP WHERE ARP.FormID = UP.FormID AND ARP.IsDeleted = 0
										AND PATINDEX(CONCAT('%,', CAST(ARP.RoleID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0))
			BEGIN
				INSERT INTO CmnRBSPermission (UserID, FormID, HasReadPermission, Buttons, Tabs, IsFavourite, FavouriteOrder, MainMenuOrder, SubMenuOrder,
					Audit, SubAudit, ValidateChecksum, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted, DeletedBy, DeletedDate, ConfirmMsg) 
				SELECT UD.UserID, SRP.FormID, SRP.HasReadPermission, SRP.Buttons, SRP.Tabs, SRP.IsFavourite, SRP.FavouriteOrder, SRP.MainMenuOrder, SRP.SubMenuOrder,
					SRP.Audit, SRP.SubAudit, SRP.ValidateChecksum, @IN_UserID, @UTCTime, @IN_UserID, @UTCTime, 0, 0, NULL, SRP.ConfirmMsg
				FROM CmnRBSPermission UP 
					JOIN CmnUserDetails UD ON UD.UserID = UP.UserID
					JOIN CmnRolePermission SRP ON PATINDEX(CONCAT('%,', CAST(SRP.RoleID AS VARCHAR(50)), ',%'), CONCAT(',', UD.RoleID, ',')) > 0 AND UP.FormID = SRP.FormID
				WHERE UP.IsDeleted = 0 AND UD.RoleID = @IN_IntialRoleID
					AND NOT EXISTS(SELECT 1 FROM CmnRolePermission ARP WHERE ARP.FormID = UP.FormID AND ARP.IsDeleted = 0
										AND PATINDEX(CONCAT('%,', CAST(ARP.RoleID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0)
			END;
			IF NOT EXISTS(SELECT 1 FROM CmnRBSPermission UP 
						JOIN CmnUserDetails UD ON UD.UserID = UP.UserID
						JOIN CmnRolePermission SRP ON PATINDEX(CONCAT('%,', CAST(SRP.RoleID AS VARCHAR(50)), ',%'), CONCAT(',', UD.RoleID, ',')) > 0
							AND UP.FormID = SRP.FormID
					WHERE UP.IsDeleted = 0 AND UD.RoleID = @IN_IntialRoleID
						AND NOT EXISTS(SELECT 1 FROM CmnRolePermission ARP WHERE ARP.FormID = UP.FormID AND ARP.IsDeleted = 0
										AND PATINDEX(CONCAT('%,', CAST(ARP.RoleID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0))
			BEGIN
				UPDATE UP 
				SET MainMenuOrder = SRP.MainMenuOrder ,SubMenuOrder = SRP.SubMenuOrder, HasReadPermission = SRP.HasReadPermission, IsFavourite = SRP.IsFavourite,
					Buttons = SRP.Buttons, Tabs = SRP.Tabs, ConfirmMsg = SRP.ConfirmMsg
				FROM CmnRBSPermission UP
					JOIN CmnUserDetails UD ON UD.UserID = UP.UserID
					JOIN CmnRolePermission SRP ON SRP.RoleID = @IN_IntialRoleID AND UP.FormID = SRP.FormID
				WHERE UP.IsDeleted = 0 AND PATINDEX(CONCAT('%,', CAST(UD.RoleID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0;		
			END;
		END
		ELSE IF (@IN_FormID = @UserFormID)
		BEGIN
			IF EXISTS(SELECT 1 FROM CmnRBSPermission RP 
				WHERE RP.IsDeleted = 0 AND RP.UserID = @IN_IntialRoleID
					AND NOT EXISTS(SELECT 1 FROM CmnRBSPermission ARP WHERE ARP.FormID = RP.FormID AND ARP.IsDeleted = 0
										AND PATINDEX(CONCAT('%,', CAST(ARP.UserID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0))
			BEGIN
				INSERT INTO CmnRBSPermission (UserID, FormID, HasReadPermission, Buttons, Tabs, IsFavourite, FavouriteOrder, MainMenuOrder, SubMenuOrder,
					Audit, SubAudit, ValidateChecksum, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted, DeletedBy, DeletedDate, ConfirmMsg) 
				SELECT RI.items, RP.FormID, RP.HasReadPermission, RP.Buttons, RP.Tabs, RP.IsFavourite, RP.FavouriteOrder, RP.MainMenuOrder, RP.SubMenuOrder,
					RP.Audit, RP.SubAudit, RP.ValidateChecksum, @IN_UserID, @UTCTime, @IN_UserID, @UTCTime, 0, 0, NULL, RP.ConfirmMsg
				FROM CmnRBSPermission RP
					JOIN dbo.fn_RevolSpliter(@IN_RoleID, ',') RI ON ISNULL(RI.items, '') <> ''
				WHERE RP.IsDeleted = 0 AND RP.UserID = @IN_IntialRoleID
					AND NOT EXISTS(SELECT 1 FROM CmnRBSPermission ARP WHERE ARP.FormID = RP.FormID AND ARP.IsDeleted = 0
										AND PATINDEX(CONCAT('%,', CAST(ARP.UserID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0)
			END;
			IF NOT EXISTS(SELECT 1 FROM CmnRBSPermission RP 
				WHERE RP.IsDeleted = 0 AND RP.UserID = @IN_IntialRoleID
					AND NOT EXISTS(SELECT 1 FROM CmnRBSPermission ARP WHERE ARP.FormID = RP.FormID AND ARP.IsDeleted = 0
										AND PATINDEX(CONCAT('%,', CAST(ARP.UserID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0))
			BEGIN
				UPDATE RP 
				SET MainMenuOrder = SRP.MainMenuOrder ,SubMenuOrder = SRP.SubMenuOrder ,HasReadPermission = SRP.HasReadPermission , IsFavourite = SRP.IsFavourite,
					Buttons = SRP.Buttons, Tabs = SRP.Tabs, ConfirmMsg = SRP.ConfirmMsg
				FROM CmnRBSPermission RP
					JOIN CmnRBSPermission SRP ON SRP.UserID = @IN_IntialRoleID AND RP.FormID = SRP.FormID
				WHERE RP.IsDeleted = 0 AND PATINDEX(CONCAT('%,', CAST(RP.UserID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0;		
			END;
		END
		ELSE IF (@IN_FormID = @RBSGroupFormID)
		BEGIN
			SET @OrderBy = ISNULL((SELECT MAX(OrderBy) + 1 FROM CmnRbsGroupForms), 1);
			IF EXISTS(SELECT 1 FROM CmnRbsGroupForms RP 
				WHERE ISNULL(RP.IsDeleted, 0) = 0 AND ISNULL(RP.RBSGroupID, 0) = @IN_IntialRoleID
					AND NOT EXISTS(SELECT 1 FROM CmnRbsGroupForms ARP WHERE ISNULL(ARP.FormID, 0) = ISNULL(RP.FormID, 0) AND ISNULL(ARP.IsDeleted, 0) = 0
										AND PATINDEX(CONCAT('%,', CAST(ARP.RBSGroupID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0))
			BEGIN
				INSERT INTO CmnRbsGroupForms (RBSGroupID, FormID, CompanyID, Orderby, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT, IsDeleted, DeletedBy, DeletedDate) 
				SELECT RI.items, RP.FormID, 1, @OrderBy, @IN_UserID, @UTCTime, @GMTTime, @IN_UserID, @UTCTime, @GMTTime, 0, 0, NULL
				FROM CmnRbsGroupForms RP
					JOIN dbo.fn_RevolSpliter(@IN_RoleID, ',') RI ON ISNULL(RI.items, '') <> ''
				WHERE ISNULL(RP.IsDeleted, 0) = 0 AND ISNULL(RP.RBSGroupID, 0) = @IN_IntialRoleID
					AND NOT EXISTS (SELECT 1 FROM CmnRbsGroupForms ARP WHERE ISNULL(ARP.FormID, 0) = ISNULL(RP.FormID, 0) AND ISNULL(ARP.IsDeleted, 0) = 0
										AND PATINDEX(CONCAT('%,', CAST(ARP.RBSGroupID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0)
			END;

			IF EXISTS(SELECT 1 FROM CmnRBSGroupsDataVariable RP 
				WHERE ISNULL(RP.IsDeleted, 0) = 0 AND ISNULL(RP.RBSGroupID, 0) = @IN_IntialRoleID
					AND NOT EXISTS(SELECT 1 FROM CmnRBSGroupsDataVariable ARP WHERE ISNULL(ARP.FormID, 0) = ISNULL(RP.FormID, 0) AND ISNULL(ARP.IsDeleted, 0) = 0
										AND PATINDEX(CONCAT('%,', CAST(ARP.RBSGroupID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0))
			SET @OrderBy = ISNULL((SELECT MAX(OrderBy) + 1 FROM CmnRBSGroupsDataVariable), 1);
			BEGIN
				INSERT INTO CmnRBSGroupsDataVariable (RBSGroupID, FormID, ControlName, TableName, TableColumn, DataValue, SelfData, CompanyID, Orderby, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT, IsDeleted, DeletedBy, DeletedDate) 
				SELECT RI.items, RP.FormID, RP.ControlName, RP.TableName, RP.TableColumn, RP.DataValue, RP.SelfData, 1, @OrderBy, @IN_UserID, @UTCTime, @GMTTime, @IN_UserID, @UTCTime, @GMTTime, 0, 0, NULL
				FROM CmnRBSGroupsDataVariable RP
					JOIN dbo.fn_RevolSpliter(@IN_RoleID, ',') RI ON ISNULL(RI.items, '') <> ''
				WHERE ISNULL(RP.IsDeleted, 0) = 0 AND ISNULL(RP.RBSGroupID, 0) = @IN_IntialRoleID
					AND NOT EXISTS (SELECT 1 FROM CmnRBSGroupsDataVariable ARP WHERE ISNULL(ARP.FormID, 0) = ISNULL(RP.FormID, 0) AND ISNULL(ARP.IsDeleted, 0) = 0
										AND PATINDEX(CONCAT('%,', CAST(ARP.RBSGroupID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0)
			END;
		END

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[fn_GetDataCount]'
GO


CREATE FUNCTION [dbo].[fn_GetDataCount](
	@IN_String NVARCHAR(MAX),
	@IN_Delimiter NVARCHAR(10))
RETURNS BIGINT
AS        
BEGIN        
	DECLARE @Output BIGINT

	SET @Output = LEN(@IN_String) - LEN(REPLACE(@IN_String, @IN_Delimiter, '')) + 1

RETURN @Output
END
GO
PRINT N'Creating [dbo].[spCmnAuditTrackingEntry]'
GO

CREATE PROCEDURE [dbo].[spCmnAuditTrackingEntry](
	@IN_Event NVARCHAR(100),
	@IN_FormName NVARCHAR(100) = '',
	@IN_TableName SYSNAME,
	@IN_IdentityColumn SYSNAME,
	@IN_RecordIDList NVARCHAR(4000),
	@IN_IPAddress VARCHAR(100),
	@IN_Comments NVARCHAR(4000),
	@IN_FormID INT, 
	@IN_UserID INT,
	@IN_SessionID VARCHAR(500),
	@IN_CompanyID INT)
AS
BEGIN
  SET NOCOUNT ON

	DECLARE @TranCount INT,
					@XactState INT
  SET @TranCount = @@TRANCOUNT;
  BEGIN TRY
		DECLARE @UTCTime DATETIME = GETUTCDATE(),
						@ErrorMessage NVARCHAR(2000),
						@ErrorSeverity NVARCHAR(50),
						@ErrorState NVARCHAR(50),
						@FormAuditTrail BIT = 0,
						@DataCount BIGINT = 0,
						@RowCount BIGINT = 1,
						@RecordID BIGINT = 0,
						@AuditTrackingID BIGINT = 0,
						@Query NVARCHAR(MAX) = ''

		SELECT @FormAuditTrail = AuditTrail, @IN_FormName = CASE WHEN @IN_FormName = '' THEN DisplayName ELSE @IN_FormName END FROM CmnFormDetails WHERE FormID = @IN_FormID

		IF @FormAuditTrail = 0
			RETURN;

		IF @TranCount = 0
			BEGIN TRANSACTION
		ELSE
			BEGIN TRANSACTION tran_CmnAuditTrackingEntry;

			SET @DataCount = dbo.fn_GetDataCount(@IN_RecordIDList, ',')

			WHILE (@RowCount <= @DataCount)
			BEGIN
				SET @RecordID = dbo.fn_SplitString(@IN_RecordIDList, ',', @RowCount)
				SET @RowCount = @RowCount + 1;
				SET @AuditTrackingID = 0

				IF @RecordID = 0
					CONTINUE;

				BEGIN TRY
					INSERT INTO CmnAuditTracking (AuditDate, UserID, SessionID, FormID, IpAddress, FormName, TableName, EventName, 
						IdentityColumn, IdentityValue, Comments, Status, CreatedDate, ModifiedBy, CompanyID)
					VALUES (@UTCTime, @IN_UserID, @IN_SessionID, @IN_FormID, @IN_IPAddress, @IN_FormName, @IN_TableName, @IN_Event, 
						@IN_IdentityColumn, @RecordID, @IN_Comments, 'I', GETUTCDATE(), @IN_UserID, @IN_CompanyID)

					SET @AuditTrackingID = @@IDENTITY;
					SET @Query = ''

					IF @IN_Event = 'INSERT'
					BEGIN
						--SELECT @Query = ISNULL(((
						--	SELECT ';INSERT INTO CmnAuditDataTracking (AuditTrackingID, ControlID, TableColumn, OldData, NewData, CreatedDate)
						--		SELECT '+ CONVERT(VARCHAR(50), @AuditTrackingID) +', 0, '''+ COLUMN_NAME +''', NULL, '+ COLUMN_NAME +', GETUTCDATE()
						--		FROM '+ @IN_TableName +' WHERE ReferenceID = '+ CONVERT(VARCHAR(50), @RecordID) +' AND '+ COLUMN_NAME +' IS NOT NULL;' 
						--	FROM INFORMATION_SCHEMA.COLUMNS COL
						--	WHERE COL.TABLE_NAME = @IN_TableName FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','nvarchar(max)')), '')

						--IF @Query <> ''
						--	EXEC(@Query)
						INSERT INTO CmnAuditDataTracking (AuditTrackingID, ControlID, ColumnID, TableColumn, OldData, NewData, CreatedDate, ModifiedBy)
						SELECT @AuditTrackingID, ControlID, 0, ColumnName, NULL, ColumnValue, GETUTCDATE(), @IN_UserID
						FROM CmnDMLParameterProcess DP 
						WHERE DP.UserID = @IN_UserID AND TableName = @IN_TableName AND DP.IsDmlControl = 1 AND DP.IsNoAdd = 0 AND DP.SessionID = @IN_SessionID
					END
					ELSE IF @IN_Event = 'UPDATE'
					BEGIN
						INSERT INTO CmnAuditDataTracking (AuditTrackingID, ControlID, ColumnID, TableColumn, OldData, NewData, CreatedDate, ModifiedBy)
						SELECT @AuditTrackingID, ControlID, 0, ColumnName, PreviousValue, ColumnValue, GETUTCDATE(), @IN_UserID
						FROM CmnDMLParameterProcess DP 
						WHERE DP.UserID = @IN_UserID AND TableName = @IN_TableName AND DP.IsDmlControl = 1 AND DP.IsNoUpdate = 0 AND DP.PreviousValue <> DP.ColumnValue AND DP.SessionID = @IN_SessionID
					END
					ELSE IF @IN_Event = 'DELETE'
					BEGIN
						INSERT INTO CmnAuditDataTracking (AuditTrackingID, ControlID, ColumnID, TableColumn, OldData, NewData, CreatedDate)
						VALUES (@AuditTrackingID, 0, 0, 'IsDeleted', 0, 1, GETUTCDATE())
					END

					UPDATE CmnAuditTracking
					SET Status = 'S', ModifiedDate = GETUTCDATE()
					WHERE ReferenceID = @AuditTrackingID
				END TRY
				BEGIN CATCH
					UPDATE CmnAuditTracking
					SET Status = 'F', ModifiedDate = GETUTCDATE()
					WHERE ReferenceID = @AuditTrackingID
				END CATCH
			END

		COMMIT TRANSACTION tran_CmnAuditTrackingEntry

	END TRY
	BEGIN CATCH
		SET @XactState = XACT_STATE()
		IF @XactState = -1
				ROLLBACK;
		IF @XactState = 1 AND @TranCount = 0
				ROLLBACK
		IF @XactState = 1 AND @TranCount > 0
				ROLLBACK TRANSACTION tran_CmnAuditTrackingEntry;

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnGeneratePrefixSuffix]'
GO

CREATE PROCEDURE [dbo].[spCmnGeneratePrefixSuffix] (
	@IN_CodeConfigID INT, 
	@IN_ACTableName SYSNAME,
	@IN_ACIdentityColumn SYSNAME,
	@IN_ACIdentityValue NVARCHAR(1000),
	@IN_FormID INT, 
	@IN_UserID INT, 
	@OUT_Data NVARCHAR(100) OUTPUT)
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@PSCompanyID INT = 0,
				@PSBranchID INT = 0,
				@PSRoleID VARCHAR(100) = 0,
				@PSCountryID INT = 0,
				@PSDepartmentID INT = 0,
				@PSDesignationID INT = 0,
				@MasterFkTypeID INT = 0,
				@MasterType NVARCHAR(500) = '',
				@MasterTable VARCHAR(255) = '',
				@MasterColumn VARCHAR(255) = '',
				@MasterKeyColumn VARCHAR(255) = '',
				@MasterKeyValue NVARCHAR(500) = '0',
				@Condition VARCHAR(MAX) = '',
				@PSQuery NVARCHAR(MAX) = '',
				@PrifixSuffix NVARCHAR(100) = '',
				@ACMasterID INT = 0,
				@ACCodeTypeID INT = 0,
				@ACFieldTypeID INT = 0,
				@ACFieldName VARCHAR(255) = '',
				@ACFixedCode NVARCHAR(20) = '',
				@ACSeparator NVARCHAR(20) = '',
				@MKYQuery NVARCHAR(MAX) = '',
				@FYValue NVARCHAR(500) = ''

		SELECT @PSCompanyID = ISNULL(ED.CompanyID, 0), @PSBranchID = ISNULL(ED.BranchID, 0), @PSRoleID = ISNULL(UD.RoleID, 0),
			@PSDepartmentID = ISNULL(ED.DepartmentID, 0), @PSDesignationID = ISNULL(ED.DesignationID, 0)
		FROM CmnUserDetails UD
			LEFT JOIN MstEmployeeDetails ED ON UD.[Type] = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
		WHERE UD.UserID = @IN_UserID;

		SELECT @PSCountryID = CountryID
		FROM MstCompanyDetails WHERE ReferenceID = @PSBranchID;

		SELECT @ACCodeTypeID = CAC.CodeTypeID, @ACMasterID = CAC.MasterID, @ACFixedCode = CAC.FixedCode,
			@ACFieldTypeID = CAC.FieldTypeID, @ACFieldName = CAC.FieldName, @ACSeparator = CAC.SeparatorChar
		FROM CmnControlCodeAutoConfig CAC
		WHERE CAC.ReferenceID = @IN_CodeConfigID;

		IF ISNULL(@ACMasterID, 0) = 0
		BEGIN
			SET @PrifixSuffix = ISNULL(@ACFixedCode, '');
		END
		ELSE
		BEGIN
			SELECT @MasterFkTypeID = PSM.FkTypeID, @MasterTable = PSM.TableName, @MasterType = PSM.CodeMasterType,
				@MasterColumn = PSM.ColumnName, @MasterKeyColumn = PSM.KeyColumn
			FROM CmnPrefixSuffixMaster PSM 
			WHERE PSM.ReferenceID = @ACMasterID

			IF ISNULL(@MasterColumn, '') <> '' AND ISNULL(@MasterTable, '') <> ''
			BEGIN
				IF ISNULL(@ACFieldTypeID, 0) = 1
				BEGIN
					SET @MKYQuery = CONCAT('SELECT TOP 1 @KeyValue =', @ACFieldName, ' FROM ', @IN_ACTableName, ' WHERE ', @IN_ACIdentityColumn, '= ''', @IN_ACIdentityValue, '''');

					IF ISNULL(@MKYQuery, '') <> ''
						EXEC sp_executesql @MKYQuery, N'@KeyValue NVARCHAR(500) OUT', @MasterKeyValue OUT
				END
				ELSE IF ISNULL(@ACFieldTypeID, 0) = 2
				BEGIN
					SET @MasterKeyValue = @PSBranchID
				END
				ELSE IF ISNULL(@ACFieldTypeID, 0) = 3
				BEGIN
					SET @MasterKeyValue = @PSDepartmentID
				END
				ELSE IF ISNULL(@ACFieldTypeID, 0) = 4
				BEGIN
					SET @MasterKeyValue = @PSDesignationID
				END
				ELSE IF ISNULL(@ACFieldTypeID, 0) = 5
				BEGIN
					SET @MasterKeyValue = @PSRoleID
				END
				ELSE IF ISNULL(@ACFieldTypeID, 0) = 6
				BEGIN
					SET @MasterKeyValue = @PSCountryID
				END
				ELSE IF ISNULL(@ACFieldTypeID, 0) = 7
				BEGIN
					SET @MasterKeyValue = @PSCompanyID
				END
				ELSE IF ISNULL(@ACFieldTypeID, 0) = 8
				BEGIN
					SELECT @MasterKeyValue = CodemasterID
					FROM CmnCodeMaster 
					WHERE Type = 'Year' AND TypeValues = FORMAT(GETDATE(), 'yyyy')
						AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 1) = 1
				END
				ELSE IF ISNULL(@ACFieldTypeID, 0) = 9
				BEGIN
					SELECT @MasterKeyValue = CodemasterID
					FROM CmnCodeMaster 
					WHERE Type = 'Month' AND TypeValues = FORMAT(GETDATE(), 'MMM')
						AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 1) = 1
				END
				ELSE IF ISNULL(@ACFieldTypeID, 0) = 10
				BEGIN
					SELECT @FYValue = (CASE WHEN EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MstCompanyDetails' AND COLUMN_NAME = 'FinanceYearStartMonthID') 
						AND (ISNULL(CD.FinanceYearStartMonthID, 0) <> 0 AND (MONTH(GETDATE())) < ISNULL(CD.FinanceYearStartMonthID, 0)) THEN DATEPART(YEAR, DATEADD(YEAR, -1, GETDATE()))   					
							ELSE DATEPART(YEAR, GETDATE()) END) 
					FROM MstCompanyDetails CD WHERE CD.ReferenceID = @PSBranchID;

					SELECT @MasterKeyValue = CodemasterID
					FROM CmnCodeMaster 
					WHERE Type = 'Year' AND TypeValues = @FYValue
						AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 1) = 1
				END

				SET @PSQuery = CONCAT('SELECT TOP 1 @PrifixSuffix =', @MasterColumn, ' FROM ', @MasterTable, ' WHERE 1=1 ');

				IF ISNULL(@MasterFkTypeID, 0) = 1
					SET @Condition = CONCAT(' AND Type = ''', ISNULL(@MasterType, ''), '''');

				SET @Condition = CONCAT(@Condition, ' AND ', @MasterKeyColumn, '=''', @MasterKeyValue, '''');

				SET @PSQuery = CONCAT(@PSQuery, @Condition);

				IF ISNULL(@PSQuery, '') <> ''
					EXEC sp_executesql @PSQuery, N'@PrifixSuffix NVARCHAR(100) OUT', @PrifixSuffix OUT
			END
		END
		IF ISNULL(@ACCodeTypeID, 0) = 2
			SET @PrifixSuffix = CONCAT(CASE WHEN ISNULL(@PrifixSuffix, '') <> '' THEN ISNULL(@ACSeparator, '') ELSE '' END, ISNULL(@PrifixSuffix, ''));
		ELSE
			SET @PrifixSuffix = CONCAT(ISNULL(@PrifixSuffix, ''), CASE WHEN ISNULL(@PrifixSuffix, '') <> '' THEN ISNULL(@ACSeparator, '') ELSE '' END);

		SET @OUT_Data = ISNULL(@PrifixSuffix, '')
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnAutoGenerateColumnUpdate]'
GO

CREATE PROCEDURE [dbo].[spCmnAutoGenerateColumnUpdate](
	@IN_Event VARCHAR(50),
	@IN_TableName SYSNAME,
	@IN_IdentityColumn SYSNAME,
	@IN_IdentityValue NVARCHAR(1000),
	@IN_FormID INT,
	@IN_UserID INT,
	@IN_SessionID VARCHAR(500))
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@AGMin INT = 0,
				@AGMax INT = 0,
				@CodeMin INT = 0,
				@CodeMax INT = 0,
				@AGTableName SYSNAME = '',
				@AGColumnName VARCHAR(255) = '',
				@CurrentCode NVARCHAR(20) = '',
				@ControlConfigID BIGINT = 0,
				@CodeConfigID BIGINT = 0,
				@CodeTypeID BIGINT = 0,
				@AGCountBasisID INT = 0,
				@ResetPeriodID INT = 0,
				@StartingNumber INT = 0,
				@DigitsCount INT = 0,
				@Prefix NVARCHAR(50) = '',
				@Suffix NVARCHAR(50) = '',
				@AGCount INT = 0,
				@ReduceCount INT = 1,
				@AGSeqNo INT = 0,
				@GeneratedNo VARCHAR(10) = '',
				@AGQuery NVARCHAR(MAX) = '',
				@UpdateData NVARCHAR(MAX) = '',
				@UpdateQuery NVARCHAR(MAX) = '',
				@AGFormTable SYSNAME = ISNULL((SELECT TOP 1 ISNULL(TableName, '') FROM CmnFormDetails WHERE FormID = @IN_FormID), ''),
				@CompanyID INT = 0,
				@SelfCompany BIT = 0,
				@UserType INT = 0

		SELECT @CompanyID = ISNULL(ED.CompanyID, UD.CompanyID), @UserType = UD.Type
		FROM CmnUserDetails UD
			LEFT JOIN MstEmployeeDetails ED ON UD.[Type] = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
		WHERE UD.UserID = @IN_UserID AND UD.Type <> 0;

		IF ISNULL(@CompanyID, 0) = 0 AND ISNULL(@UserType, 0) <> 0
			SET @CompanyID = ISNULL((SELECT TOP 1 ReferenceID FROM MstCompanyDetails WHERE IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1 AND ParentCompanyID IS NULL), 0);

		IF ISNULL(@CompanyID, 0) <> 0
		BEGIN
			SELECT @SelfCompany = ISNULL(SelfCompany, 1)
			FROM CmnPasswordPolicy WHERE CompanyID = @CompanyID AND IsDeleted = 0;
		END

		DECLARE @ControlAutoGenerateConfig TABLE (RowNum BIGINT IDENTITY(1, 1) NOT NULL, ReferenceID BIGINT, 
			TableName SYSNAME, ColumnName VARCHAR(255), ConfigTypeID INT, ControlID BIGINT, ColumnID BIGINT,
			CountBasisID INT NULL, ResetPeriodID INT NULL, StartingNumber INT NULL, DigitsCount INT NULL);

		INSERT INTO @ControlAutoGenerateConfig (ReferenceID, TableName, ColumnName, ConfigTypeID, ControlID, ColumnID,
			CountBasisID, ResetPeriodID, StartingNumber, DigitsCount)
		SELECT AG.ReferenceID, CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
				WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') ELSE @AGFormTable END AS TableName, 
			ISNULL(CFC.TableColumn, '') AS ColumnName, AG.ConfigTypeID, AG.ControlID, 0 AS ColumnID,
			AG.CountBasisID, AG.ResetPeriodID, AG.StartingNumber, AG.DigitsCount
		FROM CmnControlAutoGenerateConfig AG
			JOIN CmnFormTabs FT ON FT.FormID = AG.FormID AND FT.IsDeleted = 0
			JOIN CmnGroupboxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
			JOIN CmnFormControls CFC ON CFC.GroupID = GB.GroupID AND CFC.IsAutoGenerate = 1 
				AND CFC.ControlID = AG.ControlID AND CFC.IsDeleted = 0
		WHERE AG.FormID = @IN_FormID AND AG.ConfigTypeID = 1
			AND ISNULL(AG.IsDeleted, 0) = 0 AND ISNULL(AG.NotActive, 0) = 0 AND ISNULL(AG.IsCurrentVersion, 1) = 1
		UNION
		SELECT AG.ReferenceID, CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
				WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') ELSE @AGFormTable END AS TableName,
			ISNULL(CC.ColumnName, '') AS ColumnName, AG.ConfigTypeID, CC.ControlID, AG.ControlID AS ColumnID, 
			AG.CountBasisID, AG.ResetPeriodID, AG.StartingNumber, AG.DigitsCount
		FROM CmnControlAutoGenerateConfig AG
			JOIN CmnFormTabs FT ON FT.FormID = AG.FormID AND FT.IsDeleted = 0
			JOIN CmnGroupboxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
			JOIN CmnFormControls CFC ON CFC.GroupID = GB.GroupID AND CFC.IsDeleted = 0
			JOIN CmnControlColumns CC ON CC.ControlID = CFC.ControlID AND CC.IsAutoGenerate = 1 
				AND CC.ColumnID = AG.ControlID AND CC.IsDeleted = 0
		WHERE AG.FormID = @IN_FormID AND AG.ConfigTypeID = 2
			AND ISNULL(AG.IsDeleted, 0) = 0 AND ISNULL(AG.NotActive, 0) = 0 AND ISNULL(AG.IsCurrentVersion, 1) = 1

		SELECT @AGMax = MAX(RowNum) FROM @ControlAutoGenerateConfig
		WHILE @AGMin < @AGMax
		BEGIN
			SET @AGMin = @AGMin + 1;
			SET @AGTableName = '';
			SET @AGColumnName = '';
			SET @CurrentCode = '';
			SET @AGCountBasisID = 0;
			SET @ResetPeriodID = 0;
			SET @StartingNumber = 0;
			SET @DigitsCount = 0;
			SET @Prefix = '';
			SET @Suffix = '';
			SET @AGCount = 0;
			SET @ReduceCount = 1;
			SET @AGSeqNo = 0;
			SET @GeneratedNo = '';
			SET @AGQuery = '';
			SET @ControlConfigID = 0;
			SET @CodeMin = 0;
			SET @CodeMax = 0;

			SELECT @ControlConfigID = ReferenceID, @AGTableName = TableName, @AGColumnName = ColumnName, @AGCountBasisID = CountBasisID, 
				@ResetPeriodID = ResetPeriodID, @StartingNumber = ISNULL(StartingNumber, 1), @DigitsCount = DigitsCount
			FROM @ControlAutoGenerateConfig WHERE RowNum = @AGMin;

			IF @AGTableName = @IN_TableName
			BEGIN
				IF OBJECT_ID('tempdb..#tempControlCodeAutoConfig') IS NOT NULL DROP TABLE #tempControlCodeAutoConfig
				CREATE TABLE #tempControlCodeAutoConfig (RowNum INT IDENTITY(1, 1) NOT NULL PRIMARY KEY, CodeConfigID BIGINT NULL, CodeTypeID INT NULL);

				INSERT INTO #tempControlCodeAutoConfig (CodeConfigID, CodeTypeID)
				SELECT AC.ReferenceID, AC.CodeTypeID
				FROM CmnControlCodeAutoConfig AC
				WHERE AC.FormID = @IN_FormID AND AC.ControlConfigID = @ControlConfigID
					AND AC.IsDeleted = 0 AND AC.NotActive = 0 AND AC.IsCurrentVersion = 1
				ORDER BY AC.OrderBy;

				SELECT @CodeMax = MAX(RowNum) FROM #tempControlCodeAutoConfig;
				WHILE @CodeMin < @CodeMax
				BEGIN
					SET @CodeMin = @CodeMin + 1;
					SET @CodeConfigID = 0;
					SET @CodeTypeID = 0;

					SELECT @CodeConfigID = CodeConfigID, @CodeTypeID = CodeTypeID
					FROM #tempControlCodeAutoConfig WHERE RowNum = @CodeMin;

					EXEC spCmnGeneratePrefixSuffix @CodeConfigID, @IN_TableName, @IN_IdentityColumn, @IN_IdentityValue, @IN_FormID, @IN_UserID, @CurrentCode OUTPUT

					IF ISNULL(@CodeTypeID, 0) = 2
						SET @Suffix = CONCAT(@Suffix, ISNULL(@CurrentCode, ''));
					ELSE
						SET @Prefix = CONCAT(@Prefix, ISNULL(@CurrentCode, ''));
				END
				SET @AGQuery = CONCAT('SELECT @AGCount = COUNT(1) FROM ', @AGTableName, ' WHERE 1=1');
				IF @AGCountBasisID = 1 AND (@Prefix <> '' OR @Suffix <> '')
				BEGIN
					SET @AGQuery = CONCAT(@AGQuery, ' AND ', @AGColumnName, ' LIKE ''', @Prefix, '%''', ' AND ', @AGColumnName, ' LIKE ''%', @Suffix, '''');
					IF ISNULL(@DigitsCount, 0) > 1
					BEGIN
						SET @AGQuery = CONCAT(@AGQuery, ' AND LEN(', @AGColumnName, ') >= ', (LEN(@Prefix) + @DigitsCount + LEN(@Suffix)));
					END
					SET @ReduceCount = 0;
				END

				IF @ResetPeriodID = 1
					SET @AGQuery = CONCAT(@AGQuery, ' AND FORMAT(CreatedDate, ''yyyy'') = ''', FORMAT(GETUTCDATE(), 'yyyy'), '''');
				ELSE IF @ResetPeriodID = 2
					SET @AGQuery = CONCAT(@AGQuery, ' AND FORMAT(CreatedDate, ''MM-yyyy'') = ''', FORMAT(GETUTCDATE(), 'MM-yyyy'), '''');
				ELSE IF @ResetPeriodID = 3
					SET @AGQuery = CONCAT(@AGQuery, ' AND FORMAT(CreatedDate, ''dd-MM-yyyy'') = ''', FORMAT(GETUTCDATE(), 'dd-MM-yyyy'), '''');
					
				IF ISNULL(@SelfCompany, 0) = 1
					SET @AGQuery = CONCAT(@AGQuery, ' AND CompanyID =', @CompanyID);

				EXEC sp_executesql @AGQuery, N'@AGCount INT OUT', @AGCount OUT

				SET @AGSeqNo = @StartingNumber + @AGCount - @ReduceCount;

				IF ISNULL(@DigitsCount, 0) > 0 AND LEN(CAST(@AGSeqNo AS VARCHAR(50))) < @DigitsCount
					SET @GeneratedNo = RIGHT('0000000000' + CAST(@AGSeqNo AS VARCHAR(50)), @DigitsCount)
				ELSE
					SET @GeneratedNo = CAST(@AGSeqNo AS VARCHAR(50))

				IF @UpdateData <> ''
					SET @UpdateData = CONCAT(@UpdateData, ',');
				SET @UpdateData = CONCAT(@UpdateData, @AGColumnName, '=''', CONCAT(@Prefix, @GeneratedNo, @Suffix), '''');
			END
		END
		IF ISNULL(@UpdateData, '') <> ''
		BEGIN
			SET @UpdateQuery = CONCAT('UPDATE ', @IN_TableName, ' SET ', @UpdateData, ' WHERE ', @IN_IdentityColumn, '= ''', @IN_IdentityValue, '''');
			EXEC (@UpdateQuery);
		END
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[CmnSearchParameterProcess]'
GO
CREATE TABLE [dbo].[CmnSearchParameterProcess]
(
[ControlName] [NVARCHAR] (255) NOT NULL,
[ColumnName] [NVARCHAR] (255) NOT NULL,
[ControlType] [NVARCHAR] (100) NOT NULL,
[ColumnValue] [NVARCHAR] (max) NULL,
[TableColumn] [VARCHAR] (100) NULL,
[UserID] [INT] NULL,
[SessionID] [VARCHAR] (255) NULL
)
GO
PRINT N'Creating index [IDX_CmnSearchParameter] on [dbo].[CmnSearchParameterProcess]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnSearchParameter] ON [dbo].[CmnSearchParameterProcess] ([SessionID], [ColumnName])
GO
PRINT N'Creating index [IDX_CmnSearchParameterProcess] on [dbo].[CmnSearchParameterProcess]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnSearchParameterProcess] ON [dbo].[CmnSearchParameterProcess] ([SessionID], [ControlType])
GO
PRINT N'Creating [dbo].[spCmnChangeOrderBy]'
GO

CREATE PROCEDURE [dbo].[spCmnChangeOrderBy] ( 
				  @IN_FormID INT
				, @IN_UserID INT
				, @IN_KeyColumn NVARCHAR(150)
				, @IN_KeyValue1 NVARCHAR(150)
				, @IN_KeyValue2 NVARCHAR(150)
				, @IN_ControlTypeId INT
				, @IN_HeaderName NVARCHAR(100)
				, @IN_SwapIndex INT
				, @IN_DataFillType INT
				, @IN_DataValue NVARCHAR(100)
				, @IN_DataColumn VARCHAR(1000)
				, @IN_SortValues VARCHAR(500)
				, @IN_DataID NVARCHAR(100)	         
				, @IN_DataTreeValue VARCHAR(100)
				, @IN_SessionID VARCHAR(255)
			 )
AS
BEGIN
	SET NOCOUNT ON;		
	BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000)
				, @ErrorSeverity NVARCHAR(50)
				, @ErrorState NVARCHAR(50)				
				, @TableName NVARCHAR(150)
				, @KeyColumn NVARCHAR(150)
				, @FKOrder INT
				, @ControlID INT
				, @Query NVARCHAR(500)
				, @OrderByValue1 INT
				, @OrderByValue2 INT
				, @ControlTypeHeader VARCHAR(50)
				, @valid BIT
				, @AdditionalCondition NVARCHAR(2000) = ''
				, @SortColumn SYSNAME = ''
				, @SortType VARCHAR(50) = ''
				, @DataTreeCondition VARCHAR(100) = ''
				, @OrderByColumn VARCHAR(MAX)
				, @OrderBy VARCHAR(10) = 'ASC'
				, @FilterBy VARCHAR(100) = ''
				, @FilterValue INT = 0
				, @FilterTable VARCHAR(100) = ''
				, @FilterKey VARCHAR(100) = ''
				, @FilterUniqueKey VARCHAR(100) = ''
				, @FkDelete BIT = 0
				, @FkNotActive BIT = 0
				, @KeyValue NVARCHAR(150)
				, @ColumnValues NVARCHAR(2000) = ''
				, @TextColumn NVARCHAR(2000) = ''
				, @ConditionColumns NVARCHAR(MAX) =''

		IF @IN_ControlTypeId = 19 
		BEGIN
			SET @ControlTypeHeader = 'Grid Header'
			SELECT @TableName = CASE WHEN GB.TableName <> '' THEN GB.TableName WHEN FT.TableName <> '' THEN FT.TableName ELSE FD.TableName END,
				@KeyColumn = FC.FkColumn, @FKOrder = FC.FkOrder, @ControlID = FC.ControlID, @FkDelete = FC.FkDelete, @FkNotActive = FC.FkNotActive
			FROM CmnFormDetails FD 
				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.ControlType = @IN_ControlTypeId AND FC.IsDeleted = 0
				JOIN CmnControlProperty CC ON CC.ControlID = FC.ControlID AND CC.Value = @IN_HeaderName AND CC.Name = @ControlTypeHeader AND CC.IsDeleted = 0
			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;	
		END
		ELSE IF @IN_ControlTypeId = 18
		BEGIN
			SET @ControlTypeHeader = 'Tree Header'	
			SELECT @TableName = CASE WHEN GB.TableName <> '' THEN GB.TableName WHEN FT.TableName <> '' THEN FT.TableName ELSE FD.TableName END,
				@KeyColumn = FC.FkColumn, @FKOrder = FC.FkOrder, @ControlID = FC.ControlID, @FkDelete = FC.FkDelete, @FkNotActive = FC.FkNotActive,
				@TextColumn = CASE WHEN ISNULL(FCP.Value, '') <> '' THEN 'FCP.'+FCP.Value ELSE 'CAST(MT.' + CC.ColumnName + ' AS NVARCHAR(MAX))' END + 
								CASE WHEN  ISNULL(ColumnName1, '') <> '' THEN   ' + '' - '' + ISNULL(' + CASE WHEN ISNULL(SCP.Value, '') <> '' THEN 'SCP.'+SCP.Value ELSE 'CAST(MT.' + ISNULL(ColumnName1, '') + ' AS NVARCHAR(MAX))' END + ', '''')' ELSE '' END  
								+ CASE WHEN  ISNULL(ColumnName2, '') <> '' THEN   ' + '' - '' + ISNULL(' + CASE WHEN ISNULL(TCP.Value, '') <> '' THEN 'TCP.'+TCP.Value ELSE 'CAST(MT.' + ISNULL(ColumnName2, '') + ' AS NVARCHAR(MAX))' END + ', '''')' ELSE '' END
			FROM CmnFormDetails FD 
				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.ControlType = @IN_ControlTypeId AND FC.IsDeleted = 0
				JOIN CmnControlProperty CP ON CP.ControlID = FC.ControlID AND CP.Value = @IN_HeaderName AND CP.Name = @ControlTypeHeader AND CP.IsDeleted = 0
				JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0 AND CC.DefaultValue <> 'SubTree'
				LEFT JOIN CmnColumnProperty FCP ON FCP.ColumnID = CC.ColumnID AND FCP.Name = 'Column1 Data' AND FCP.IsDeleted = 0
				LEFT JOIN CmnColumnProperty SCP ON SCP.ColumnID = CC.ColumnID AND SCP.Name = 'Column2 Data' AND SCP.IsDeleted = 0
				LEFT JOIN CmnColumnProperty TCP ON TCP.ColumnID = CC.ColumnID AND TCP.Name = 'Column3 Data' AND TCP.IsDeleted = 0
			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;	
		END			

		 -- for dynamic fill need to identify the swap key value when we move to next or previous page in grid
		IF @IN_DataFillType = 1 AND @IN_KeyValue1 = ''  
		BEGIN
			SET @AdditionalCondition = (SELECT TOP 1 ISNULL(FC.AdditionalConditions, '') FROM CmnFormDetails FD
												JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
												JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
												JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.ControlType = @IN_ControlTypeId AND FC.IsDeleted = 0
												JOIN CmnControlProperty CC ON CC.ControlID = FC.ControlID AND CC.Name = @ControlTypeHeader AND CC.Value = @IN_HeaderName AND CC.IsDeleted = 0
						WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0);		

			SET @DataTreeCondition = ISNULL((SELECT Value FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Data Tree Condition' AND IsDeleted = 0), '');
				 
			IF (@IN_SortValues <> '')
			BEGIN
				SET @SortColumn = dbo.fn_SplitString(@IN_SortValues,  ',',  1)
				SET @SortType = dbo.fn_SplitString(@IN_SortValues, ',', 2);
			END
			
			SELECT @OrderByColumn = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Order By Column' AND IsDeleted = 0;
			IF @OrderByColumn <> ''
			BEGIN 
		 		SET @KeyColumn = 'MT.'+ @OrderByColumn + ',' + @KeyColumn;
			END
		
			SELECT @OrderBy = ISNULL(Value, 'ASC') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Order By' AND IsDeleted = 0;
			IF @FkOrder = 1
			BEGIN
				SET @OrderBy = 'ASC';
			END
			ELSE IF @FkOrder = 2
			BEGIN
				SET @OrderBy = 'DESC';
			END

			SELECT @FilterBy = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter By' AND IsDeleted = 0;
			SELECT @FilterTable = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter Table' AND IsDeleted = 0;
			SELECT @FilterKey = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter Key' AND IsDeleted = 0;
			SELECT @FilterUniqueKey = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter Unique Key' AND IsDeleted = 0;
		
			IF @FilterBy <> ''
			BEGIN
				SELECT @FilterValue = ISNULL(ED.BranchID, '') FROM CmnUserDetails UD
        				JOIN MstEmployeeDetails ED ON ED.ReferenceID = UD.TypeID	
        		WHERE UD.UserID = @IN_UserID;
			END

			IF ISNULL(@FilterValue, '') = 0
				SET @FilterBy = ''
			SET @IN_SwapIndex = @IN_SwapIndex + 1;  -- row number starts at 1

			IF @IN_ControlTypeId = 19 		
			BEGIN
				--IF @IN_DataColumn <> ''  -- FixMe currently Not called in spCmnGridFillControl
				--BEGIN
				--	SET @ColumnValues = REPLACE(@IN_DataColumn, ',', ' LIKE ' + '''%''' +  @IN_DataValue + '%'' AND ')    
				--	SET @ColumnValues = LEFT(@ColumnValues,  LEN(@ColumnValues) -4) + ''
				--END

				SET @Query = ' ;WITH GridFill AS (SELECT ROW_NUMBER() OVER (ORDER BY ' + CASE WHEN @IN_SortValues <> '' THEN @SortColumn + ' ' + @SortType  
									ELSE CASE WHEN @FkOrder = 3 THEN ' MT.OrderBy '+ @OrderBy ELSE @KeyColumn + ' '+ @OrderBy END END  + ') AS row_number, ' 											
								    + @KeyColumn + ' AS KeyValue FROM ' + @TableName + ' MT '+
									CASE WHEN @FilterTable <> '' AND @FilterBy <> '' THEN (' JOIN '+@FilterTable + ' JT ON JT.'+@FilterUniqueKey + ' = CONVERT(VARCHAR(MAX), MT.'+@FilterKey+ ') AND JT.'+@FilterBy + ' = '+CONVERT(VARCHAR(MAX), @FilterValue) + ' ') ELSE '' END +
									'WHERE MT.IsDeleted = 0 ' +
									CASE WHEN @FilterBy <> '' AND ISNULL(@FilterValue, '') <> '' AND ISNULL(@FilterTable, '') = '' THEN ' AND MT.'+ @FilterBy+ ' = '+ CONVERT(VARCHAR(MAX), @FilterValue)+ ' ' ELSE ' ' END +
									CASE WHEN @ColumnValues = '' THEN '' ELSE ' AND ' + @ColumnValues  END +
									CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND MT.'  END + @AdditionalCondition+
									CASE WHEN @AdditionalCondition <> '' AND @IN_DataID <> '' THEN ' IN (''' + @IN_DataID + ''')' ELSE ''  END +
									CASE WHEN @DataTreeCondition = '' THEN '' ELSE ' AND MT.'  END + @DataTreeCondition+
									CASE WHEN @DataTreeCondition <> '' AND @IN_DataTreeValue <> '' THEN ' IN (''' + @IN_DataTreeValue + ''')' ELSE ''  END +
									CASE WHEN ISNULL(@FkDelete, 0) = 0 THEN '' ELSE ' ' END +
									CASE WHEN ISNULL(@FkNotActive, 0) = 0 THEN '' ELSE ' AND MT.NotActive = 0 ' END + ')' +
							' SELECT @KeyVal = CAST(KeyValue AS NVARCHAR(150)) FROM GridFill Where row_number = ' + CAST(@IN_SwapIndex AS VARCHAR(10))
			END
			ELSE
			BEGIN
			
				SET @ConditionColumns = ISNULL(SUBSTRING((SELECT  ' AND ' + CASE WHEN DP.ControlType = 'Textbox' OR DP.ControlType = 'Multiline Textbox' THEN 
																							DP.ColumnName + ' LIKE  ''%' + ISNULL(DP.ColumnValue, '') + '%'''
																	WHEN DP.ControlType = 'Date' OR DP.ControlType = 'DateTime' THEN 
																		CASE WHEN CHARINDEX('AND', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn+ ' BETWEEN '+ ISNULL(DP.ColumnValue, '')+ ')') 
																			WHEN CHARINDEX('>=', DP.ColumnValue) > 0 OR CHARINDEX('<=', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn+ ISNULL(DP.ColumnValue, '')+ ')')
																		ELSE ('('+DP.TableColumn+ ' = '+ ISNULL(DP.ColumnValue, '')+ ')') END 
																	ELSE DP.ColumnName  +' = '''+ ISNULL(DP.ColumnValue, '') +'''' END
  												FROM CmnSearchParameterProcess DP 
  												WHERE DP.SessionID = @IN_SessionID 
  												ORDER BY DP.ColumnName FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'),6, 4000000000), '')  

				SET @Query = ' ;WITH GridFill AS (SELECT ROW_NUMBER() OVER (ORDER BY ' + CASE WHEN @IN_SortValues <> '' THEN @SortColumn + ' ' + @SortType  
									ELSE CASE WHEN @FkOrder = 3 THEN ' MT.OrderBy '+ @OrderBy ELSE @KeyColumn + ' '+ @OrderBy END END  + ') AS row_number, ' 											
								    + @KeyColumn + ' AS KeyValue FROM ' + @TableName + ' MT '+
									CASE WHEN @FilterTable <> '' AND @FilterBy <> '' THEN (' JOIN '+@FilterTable + ' JT ON JT.'+@FilterUniqueKey + ' = CONVERT(VARCHAR(MAX), MT.'+@FilterKey+ ') AND JT.'+@FilterBy + ' = '+CONVERT(VARCHAR(MAX), @FilterValue) + ' ') ELSE '' END +
									'WHERE MT.IsDeleted = 0 ' +
									CASE WHEN @IN_DataValue <> '' THEN ' AND ' + @TextColumn + ' LIKE ''%' + ISNULL(@IN_DataValue, '') + '%'''  ELSE ' ' END +
									CASE WHEN @FilterBy <> '' AND ISNULL(@FilterValue, '') <> '' AND ISNULL(@FilterTable, '') = '' THEN ' AND MT.'+ @FilterBy+ ' = '+ CONVERT(VARCHAR(MAX), @FilterValue)+ ' ' ELSE ' ' END +
									CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND MT.'  END + @AdditionalCondition+
									CASE WHEN @AdditionalCondition <> '' AND @IN_DataID <> '' THEN ' IN (''' + @IN_DataID + ''')' ELSE ''  END +
									CASE WHEN @DataTreeCondition = '' THEN '' ELSE ' AND MT.'  END + @DataTreeCondition+
									CASE WHEN @DataTreeCondition <> '' AND @IN_DataTreeValue <> '' THEN ' IN (''' + @IN_DataTreeValue + ''')' ELSE ''  END +
									CASE WHEN ISNULL(@FkDelete, 0) = 0 THEN '' ELSE ' ' END +
									CASE WHEN @ConditionColumns = '' THEN '' ELSE ' AND ' END + @ConditionColumns +
									CASE WHEN ISNULL(@FkNotActive, 0) = 0 THEN '' ELSE ' AND MT.NotActive = 0 ' END + ')' +
							' SELECT @KeyVal = CAST(KeyValue AS NVARCHAR(150)) FROM GridFill Where row_number = ' + CAST(@IN_SwapIndex AS VARCHAR(10))
			END	

			EXEC sp_executesql @Query, N'@KeyVal NVARCHAR(150) OUTPUT', @KeyValue OUTPUT
			SET @IN_KeyValue1 = @KeyValue	
		END

		SET @valid = 1;
		IF @IN_ControlTypeId = 19 AND @KeyColumn <> @IN_KeyColumn 
			SET @valid = 0;
		
		IF @FkOrder = 3 AND @IN_KeyValue1 <> ''  AND @valid = 1
		BEGIN
			SET @Query = 'SET @OrderByValue1 = (SELECT OrderBy FROM ' + @TableName + ' WHERE ' + @KeyColumn + ' = ' + @IN_KeyValue1 + ')';			
			EXEC sp_executesql @Query, N'@OrderByValue1 INT OUTPUT', @OrderByValue1 OUTPUT
	
			SET @Query = 'SET @OrderByValue2 = (SELECT OrderBy FROM ' + @TableName + ' WHERE ' + @KeyColumn + ' = ' + @IN_KeyValue2 + ')';
			EXEC sp_executesql @Query, N'@OrderByValue2 INT OUTPUT', @OrderByValue2 OUTPUT
	
			SET @Query = 'Update ' + @TableName + ' SET OrderBy = ' + CAST(@OrderByValue2 AS VARCHAR(10)) + ' WHERE ' + @KeyColumn + ' = ' + @IN_KeyValue1;
			EXEC sp_executesql @Query

			SET @Query = 'Update ' + @TableName + ' SET OrderBy = ' + CAST(@OrderByValue1 AS VARCHAR(10)) + ' WHERE ' + @KeyColumn + ' = ' + @IN_KeyValue2;
			EXEC sp_executesql @Query
			SELECT 'success' AS Message
		END
		ELSE 
		BEGIN			
			IF @FkOrder <> 3 
				SELECT 'FkOrder must be set to 3' AS Message;
			ELSE
				SELECT 'key column/ key value is invalid' AS Message;						
		END
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);		
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnChangePassword]'
GO

CREATE PROCEDURE [dbo].[spCmnChangePassword](
	@IN_USERID INT, 
	@IN_USERNAME NVARCHAR(100), 
	@IN_PASSWORD NVARCHAR(200), 
	@IN_OLDPASSWORD NVARCHAR(200), 
	@IN_REASONID INT,
	@IN_SESSIONID VARCHAR(500))
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY
	
	  BEGIN TRANSACTION tran_CmnChangePassword

	  DECLARE @UTCTime DATETIME = GETUTCDATE(),
      @ExistPassword NVARCHAR(100) = '',
      @UserId INT = 0,
			@ErrorMessage NVARCHAR(2000),
			@ErrorSeverity NVARCHAR(50),
			@ErrorState NVARCHAR(50),
			@PrevPwdRetrieveCount SMALLINT = 0,
			@Count SMALLINT = 0
        
		IF @IN_USERID = 0 
			SELECT @UserId = UD.UserID FROM CmnUserDetails UD WHERE UD.Username = @IN_USERNAME
		ELSE 
			SELECT @UserId = UD.UserID FROM CmnUserDetails UD WHERE UD.UserID = @IN_USERID

		IF @UserId <> 0 
		BEGIN
			SELECT @ExistPassword = UD.[Password] FROM CmnUserDetails UD WHERE UD.UserID = @UserId
    
			IF @IN_OLDPASSWORD <> @ExistPassword
			BEGIN
				SELECT 'W0001'
			END
			ELSE
			BEGIN
				SELECT @PrevPwdRetrieveCount = COALESCE(PrevPwdRetrieveCount, 0) FROM CmnPasswordPolicy
				
				IF OBJECT_ID('tempdb..#tmpPrevPwdRetrieve') IS NOT NULL
					DROP TABLE #tmpPrevPwdRetrieve

				CREATE TABLE #tmpPrevPwdRetrieve(				
					PreviousPassword NVARCHAR(200) NOT NULL
				)

				INSERT INTO #tmpPrevPwdRetrieve
				SELECT TOP (@PrevPwdRetrieveCount) OldPassword FROM CmnPasswordHistory	WHERE UserID = @UserId ORDER BY	ModifiedDate DESC	 	
				
				SELECT @Count = COUNT(1) FROM #tmpPrevPwdRetrieve WHERE PreviousPassword = @IN_PASSWORD

				IF @Count > 0 
				BEGIN
					SELECT 'W0029';
				END 
				ELSE
				BEGIN
					INSERT INTO CmnPasswordHistory (UserID, OldPassword, NewPassword, ChangeReasonID, ModifiedDate)
					SELECT UD.UserID, UD. [Password], @IN_PASSWORD, @IN_REASONID, @UTCTime 
					FROM CmnUserDetails UD
					WHERE UD.UserID = @UserId
  
					UPDATE CmnUserDetails 
					SET [Password] = @IN_PASSWORD, ModifiedBy = @UserId, ModifiedDate = @UTCTime, ResetPassword = 0, PasswordUpdatedDate = GETDATE()
					WHERE UserID = @UserId;

					UPDATE CmnLoginHistory SET UserStatusID = 2, LogoutTypeID = 4, LogoutTime = @UTCTime, Remarks = 'Password changed'
					WHERE UserID = @IN_USERID AND UserStatusID = 1;

					SELECT 'S0004'; 
				END				 
			END      
		END

		COMMIT TRANSACTION tran_CmnChangePassword

	END TRY
	BEGIN CATCH

		ROLLBACK TRANSACTION tran_CmnChangePassword

		--EXEC [Fn_ErrorFetch] @@SPID

		--INSERT INTO tbl_StoredProcedure_Error(MenuID, App_User, SQL_User, Server_Name, [Procedure_Name],
		--	Error_Code, Line_Number, [Error_Message], [Error_State], Logged_Date, [INPUT_PARAMS]) 
		--SELECT @IN_FormID, @IN_UserID, USER_NAME(), @@SERVERNAME, ERROR_PROCEDURE(), ERROR_NUMBER(),
		--	ERROR_LINE(), ERROR_MESSAGE(), ERROR_STATE(), GETUTCDATE(), (SELECT PIN FROM TBL_ERRORFETCH);

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END;
GO
PRINT N'Creating [dbo].[spCmnChartFill]'
GO

CREATE PROCEDURE [dbo].[spCmnChartFill](
	@IN_Event VARCHAR(50), 
	@IN_FormID INT, 
	@IN_UserID INT,
	@IN_SessionID VARCHAR(255))
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY   

	DECLARE @Min INT = 0,
			@Max INT = 0,
			@ControlID INT = 0,
			@ChartData NVARCHAR(MAX) = '',
			@CurChartData NVARCHAR(MAX) = '',
			@ConditionColumns VARCHAR(1000) = '',
			@ColumnID INT = 0,
			@ResultType VARCHAR(100) = '',
			@ChartType VARCHAR(100) = '',
			@CurControlID INT = 0,
			@ValueColumn VARCHAR(255) = '',
			@BarColumn VARCHAR(255) = '',
			@ChartName VARCHAR(500) = '',
			@TextColumn VARCHAR(255) = '',
			@OrderByClause VARCHAR(500) = '',
			@MainTable SYSNAME = '',
			@MainCondition VARCHAR(1000) = '',
			@MainAddiCondition VARCHAR(1000) = '',
			@DeleteCondition VARCHAR(500) = '',
			@ActiveCondition VARCHAR(500) = '',
			@VersionCondition VARCHAR(500) = '',
			@SubTable SYSNAME = '',
			@SubCondition VARCHAR(1000) = '',
			@SubAddiCondition VARCHAR(1000) = '',
			@SubDeleteCondition VARCHAR(500) = '',
			@SubActiveCondition VARCHAR(500) = '',
			@SubVersionCondition VARCHAR(500) = '',
			@JoinCondition VARCHAR(500) = '',
			@ColumnTable VARCHAR(255)  = '',
			@StackedColumn VARCHAR(255)  = '',
			@ColumnName VARCHAR(255)  = '',
			@ColumnValue VARCHAR(255)  = '',
			@ColumnCondition VARCHAR(1000)  = '',
			@ColumnAddiCondition VARCHAR(1000)  = '',
			@ColumnDeleteCondition VARCHAR(500)  = '',
			@ColumnActiveCondition VARCHAR(500)  = '',
			@ColumnVersionCondition VARCHAR(500)  = '',
			@ColumnJoinCondition VARCHAR(500)  = '',
			@ResultColumn VARCHAR(MAX) = '',
			@TempQuery NVARCHAR(MAX) = '',
			@ErrorMessage NVARCHAR(2000),
			@ErrorSeverity NVARCHAR(50),
			@ErrorState NVARCHAR(50),
			@DashboardID BIGINT = 0,
			@DashboardTitle NVARCHAR(1000) = '',
			@TableName VARCHAR(255) = '',
			@Source INT = 0,
			@SpName VARCHAR(225) = '',
			@View VARCHAR(225) = '',
			@Table VARCHAR(225) = '',
			@OpenQuery NVARCHAR(MAX) = '',
			@RQuery NVARCHAR(MAX) = '',
			@ColumnQuery NVARCHAR(MAX) = '',
			@ColumnMin INT = 0,
			@ColumnMax INT = 0,
			@StackedName VARCHAR(255)  = '',
			@StackedValue VARCHAR(255)  = '',
			@ActiveCount INT = 0,
			@AllBarReq VARCHAR(100) = ''

		SELECT @DashboardID = RC.ReferenceID, @Source = RC.Source, @SpName = RC.SpName, @Table = RC.TableName, @View = RC.ViewName, @OpenQuery = RC.Query
		FROM DashboardConfiguration RC 
		WHERE RC.FormID = @IN_FormID 
			AND RC.IsDeleted = 0 AND RC.NotActive = 0 AND RC.IsCurrentVersion = 1;

		IF @Source = 1 
		BEGIN
			SET @TableName = '##tempDashboardDataSpTable';

			IF OBJECT_ID('tempdb..##tempDashboardDataSpTable') IS NOT NULL DROP TABLE ##tempDashboardDataSpTable
			SET @RQuery = 'EXEC ' + @SpName + ' 0, ' + @TableName + ''
			
			EXEC (@RQuery)
		END
		ELSE IF @Source = 2
			SET @TableName = @View;
		ELSE IF @Source = 3
			SET @TableName = @Table;
		ELSE IF @Source = 4 
		BEGIN
			SET @TableName = '##tempDashboardDataTable';

			IF OBJECT_ID('tempdb..##tempDashboardDataTable') IS NOT NULL DROP TABLE ##tempDashboardDataTable
			SET @RQuery = ('SELECT * INTO ##tempDashboardDataTable FROM (' + @OpenQuery + ') TE')
			
			EXEC (@RQuery)
		END
	
	  IF OBJECT_ID('tempdb..#tempChartControls') IS NOT NULL
			DROP TABLE #tempChartControls

		CREATE TABLE #tempChartControls (
			RowNum INT NOT NULL IDENTITY(1, 1),
			ControlID INT NOT NULL,
			ColumnID INT NOT NULL,
			ChartName NVARCHAR(500) NULL,
			ValueColumn SYSNAME NULL,
			ResultColumn SYSNAME NULL,
			BarColumn SYSNAME NULL,
			TextColumn SYSNAME NULL,
			OrderByClause VARCHAR(500) NULL,
			MainTable SYSNAME NULL,
			MainCondition VARCHAR(1000) NULL,
			MainAddiCondition VARCHAR(1000) NULL,
			DeleteCondition VARCHAR(500) NULL,
			ActiveCondition VARCHAR(500) NULL,
			VersionCondition VARCHAR(500) NULL,
			SubTable SYSNAME NULL,
			SubCondition VARCHAR(1000) NULL,
			SubAddiCondition VARCHAR(1000) NULL,
			SubDeleteCondition VARCHAR(500) NULL,
			SubActiveCondition VARCHAR(500) NULL,
			SubVersionCondition VARCHAR(500) NULL,
			JoinCondition VARCHAR(500) NULL,
			ColumnTable VARCHAR(255) NULL,
			StackedColumn VARCHAR(255) NULL,
			ColumnName VARCHAR(255) NULL,
			ColumnValue VARCHAR(255) NULL,
			ColumnCondition VARCHAR(1000) NULL,
			ColumnAddiCondition VARCHAR(1000) NULL,
			ColumnDeleteCondition VARCHAR(500) NULL,
			ColumnActiveCondition VARCHAR(500) NULL,
			ColumnVersionCondition VARCHAR(500) NULL,
			ColumnJoinCondition VARCHAR(500) NULL,
			CONSTRAINT [PK_tempChartControls] PRIMARY KEY ([RowNum] ASC))
			
		INSERT INTO #tempChartControls (ControlID, ColumnID, ChartName, ValueColumn, BarColumn, ResultColumn, TextColumn, OrderByClause, MainTable, MainCondition, MainAddiCondition, DeleteCondition, 
			ActiveCondition, VersionCondition, SubTable, SubCondition, SubAddiCondition, SubDeleteCondition, SubActiveCondition, SubVersionCondition, JoinCondition,
			ColumnTable, StackedColumn, ColumnName, ColumnValue, ColumnCondition, ColumnAddiCondition, ColumnDeleteCondition, ColumnActiveCondition, ColumnVersionCondition, ColumnJoinCondition)
		SELECT FC.ControlID, ISNULL(CC.ColumnID, 0), FC.Name, 'MT.' + FC.TableColumn, FC.TableColumn,
			CASE WHEN ISNULL(CP.Value, '') <> '' THEN 'MT.' + CP.Value ELSE 'MT.' + FC.TableColumn END,
			CASE WHEN ISNULL(FC.SearchApplicable, 0) <> 1 THEN 'ST.' + FC.FkData ELSE 'ST.' + CC.FkData END,
			CASE WHEN ISNULL(FC.SearchApplicable, 0) <> 1 THEN 
				CASE WHEN ISNULL(FC.FkOrder, 1) = 1 THEN ' ORDER BY ST.' + FC.FkData + ' ASC' 
					 WHEN ISNULL(FC.FkOrder, 1) = 2 THEN ' ORDER BY ST.' + FC.FkData + ' DESC'
					 WHEN ISNULL(FC.FkOrder, 1) = 3 THEN ' ORDER BY ST.Orderby ASC' 
					 WHEN ISNULL(FC.FkOrder, 1) = 4 THEN ' ORDER BY ST.' + FC.FKColumn + ' ASC' ELSE '' END
				ELSE CASE WHEN ISNULL(CC.FkOrder, 1) = 1 THEN ' ORDER BY ST.' + CC.FkData + ' ASC' 
					 WHEN ISNULL(CC.FkOrder, 1) = 2 THEN ' ORDER BY ST.' + CC.FkData + ' DESC'
					 WHEN ISNULL(CC.FkOrder, 1) = 3 THEN ' ORDER BY ST.Orderby ASC' 
					 WHEN ISNULL(CC.FkOrder, 1) = 4 THEN ' ORDER BY ST.' + CC.FKColumn + ' ASC' ELSE '' END END, 
			CASE WHEN ISNULL(FC.SearchApplicable, 0) <> 1 THEN @TableName 
				ELSE  CASE WHEN ISNULL(FC.FkType, 1) = 1 THEN 'CmnCodeMaster' WHEN ISNULL(FC.FkType, 1) = 3 THEN 'CmnFileUpload' ELSE FC.FkTable END END,
			CASE WHEN ISNULL(FC.FkType, 1) IN (1, 3) AND ISNULL(FC.SearchApplicable, 0) = 1 THEN 'MT.Type=''' + FC.FkTable + '''' ELSE '' END, 
			CASE WHEN ISNULL(FC.SearchApplicable, 0) = 1 THEN ISNULL(FC.AdditionalConditions, '') ELSE '' END,
			CASE WHEN FC.FkDelete = 0 OR ISNULL(FC.SearchApplicable, 0) <> 1 THEN '' ELSE ' ISNULL(MT.IsDeleted, 0) = 0 ' END, 
			CASE WHEN FC.FkNotActive = 0 OR ISNULL(FC.SearchApplicable, 0) <> 1 THEN '' ELSE ' ISNULL(MT.NotActive, 0) = 0 ' END, 
			CASE WHEN FC.FkVersion = 0 OR ISNULL(FC.SearchApplicable, 0) <> 1 THEN '' ELSE ' ISNULL(MT.IsCurrentVersion, 1) = 1 ' END, 

			CASE WHEN ISNULL(FC.SearchApplicable, 0) <> 1 THEN 
				CASE WHEN ISNULL(FC.FkType, 1) = 1 THEN 'CmnCodeMaster' WHEN ISNULL(FC.FkType, 1) = 3 THEN 'CmnFileUpload' ELSE FC.FkTable END
				ELSE CASE WHEN ISNULL(CC.FkType, 1) = 1 THEN 'CmnCodeMaster' WHEN ISNULL(CC.FkType, 1) = 3 THEN 'CmnFileUpload' ELSE CC.FkTable END END,
			CASE WHEN ISNULL(FC.SearchApplicable, 0) <> 1 THEN 
				CASE WHEN ISNULL(FC.FkType, 1) IN (1, 3) THEN 'ST.Type=''' + FC.FkTable + '''' ELSE '' END
				ELSE CASE WHEN ISNULL(CC.FkType, 1) IN (1, 3) THEN 'ST.Type=''' + CC.FkTable + '''' ELSE '' END END, 
			CASE WHEN ISNULL(FC.SearchApplicable, 0) <> 1 THEN ISNULL(FC.AdditionalConditions, '') ELSE ISNULL(CC.AdditionalConditions, '') END,
			CASE WHEN ISNULL(FC.SearchApplicable, 0) <> 1 THEN 
				CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' ISNULL(ST.IsDeleted, 0) = 0 ' END
				ELSE CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' ISNULL(ST.IsDeleted, 0) = 0 ' END END,
			CASE WHEN ISNULL(FC.SearchApplicable, 0) <> 1 THEN 
				CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' ISNULL(ST.NotActive, 0) = 0 ' END
				ELSE CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' ISNULL(ST.NotActive, 0) = 0 ' END END, 
			CASE WHEN ISNULL(FC.SearchApplicable, 0) <> 1 THEN 
				CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' ISNULL(ST.IsCurrentVersion, 1) = 1 ' END
				ELSE CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' ISNULL(ST.IsCurrentVersion, 1) = 1 ' END END,
			CASE WHEN ISNULL(FC.SearchApplicable, 0) <> 1 THEN 'ST.' + FC.FkColumn + ' = MT.' +  FC.TableColumn
				ELSE 'ST.' + CC.FkColumn + ' = MT.' + CC.ColumnName END,

			CASE WHEN ISNULL(FC.SearchApplicable, 0) = 1 OR ISNULL(CC.ColumnID, 0) = 0 THEN  ''
				ELSE CASE WHEN ISNULL(CC.FkType, 1) = 1 THEN 'CmnCodeMaster' WHEN ISNULL(CC.FkType, 1) = 3 THEN 'CmnFileUpload' ELSE CC.FkTable END END,
			CASE WHEN ISNULL(FC.SearchApplicable, 0) = 1 OR ISNULL(CC.ColumnID, 0) = 0 THEN  '' ELSE CC.ColumnName END,
			CASE WHEN ISNULL(FC.SearchApplicable, 0) = 1 OR ISNULL(CC.ColumnID, 0) = 0 THEN  '' ELSE CC.FkData END,
			CASE WHEN ISNULL(FC.SearchApplicable, 0) = 1 OR ISNULL(CC.ColumnID, 0) = 0 THEN  '' ELSE CC.FkColumn END,
			CASE WHEN ISNULL(FC.SearchApplicable, 0) = 1 OR ISNULL(CC.ColumnID, 0) = 0 THEN ''
				ELSE CASE WHEN ISNULL(CC.FkType, 1) IN (1, 3) THEN 'Type=''' + CC.FkTable + '''' ELSE '' END END, 
			CASE WHEN ISNULL(FC.SearchApplicable, 0) = 1 OR ISNULL(CC.ColumnID, 0) = 0 THEN '' ELSE ISNULL(CC.AdditionalConditions, '') END,
			CASE WHEN ISNULL(FC.SearchApplicable, 0) = 1 OR ISNULL(CC.ColumnID, 0) = 0 THEN ''
				ELSE CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' ISNULL(IsDeleted, 0) = 0 ' END END,
			CASE WHEN ISNULL(FC.SearchApplicable, 0) = 1 OR ISNULL(CC.ColumnID, 0) = 0 THEN ''
				ELSE CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' ISNULL(NotActive, 0) = 0 ' END END, 
			CASE WHEN ISNULL(FC.SearchApplicable, 0) = 1 OR ISNULL(CC.ColumnID, 0) = 0 THEN ''
				ELSE CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' ISNULL(IsCurrentVersion, 1) = 1 ' END END,
			CASE WHEN ISNULL(FC.SearchApplicable, 0) = 1 OR ISNULL(CC.ColumnID, 0) = 0 THEN ''
				ELSE 'CT.' + CC.FkColumn + ' = MT.' + CC.ColumnName END
		FROM CmnFormDetails FD
			JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
			JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
			JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0
			LEFT JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0
			LEFT JOIN CmnControlProperty CP ON CP.Name = 'Result Column' AND CP.ControlID = FC.ControlID AND CP.IsDeleted = 0
		WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0
		ORDER BY FC.ControlOrder, CC.ColumnOrder
		
    SELECT @Min = MIN(RowNum), @Max = MAX(RowNum) FROM #tempChartControls WHERE RowNum <> 0
  
    WHILE (@Min <> 0 AND @Min <= @Max) 
		BEGIN
			SET @CurChartData  = '';
			SET @ConditionColumns = '';
			SET @ColumnID = 0;
			SET @ResultType = '';
			SET @ChartType = '';
			SET @AllBarReq = '';

			SELECT @CurControlID = ControlID, @ColumnID = ColumnID, @ChartName = ChartName, @ValueColumn = ValueColumn, @BarColumn = BarColumn, 
					@TextColumn = TextColumn, @OrderByClause = OrderByClause, @MainTable = MainTable, @ResultColumn = ResultColumn,
			    @MainCondition = MainCondition, @MainAddiCondition = MainAddiCondition, @DeleteCondition = DeleteCondition, @ActiveCondition = ActiveCondition, @VersionCondition = VersionCondition, 
				   @SubTable = SubTable, @SubCondition = SubCondition, @SubAddiCondition = SubAddiCondition, @SubDeleteCondition = SubDeleteCondition, @SubActiveCondition = SubActiveCondition, 
				   @SubVersionCondition = SubVersionCondition, @JoinCondition = JoinCondition, @ColumnTable = ColumnTable, @StackedColumn = StackedColumn, @ColumnName = ColumnName, 
					 @ColumnValue = ColumnValue, @ColumnCondition = ColumnCondition, @ColumnAddiCondition = ColumnAddiCondition, @ColumnDeleteCondition = ColumnDeleteCondition, 
					 @ColumnActiveCondition = ColumnActiveCondition, @ColumnVersionCondition = ColumnVersionCondition, @ColumnJoinCondition = ColumnJoinCondition
			FROM #tempChartControls WHERE RowNum = @Min
			
			SET @ResultColumn = 'ISNULL(' + @ResultColumn + ', 0)'
			SET @ResultType = ISNULL((SELECT Value FROM CmnControlProperty WHERE ControlID = @CurControlID AND Name = 'ResultType'), 'COUNT');
			SET @ChartType = ISNULL((SELECT Value FROM CmnControlProperty WHERE ControlID = @CurControlID AND Name = 'ChartType'), 'column');
			SET @AllBarReq = ISNULL((SELECT Value FROM CmnControlProperty WHERE ControlID = @CurControlID AND Name = 'All Bar'), '');
			SET @ResultType = ISNULL((SELECT Value FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'ResultType'), @ResultType);
			SET @ChartType = ISNULL((SELECT Value FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'ChartType'), @ChartType);

			IF ISNULL(@SubTable, '') IN ('', '0')
			BEGIN
				--SET @SubTable = @MainTable;
				SET @SubCondition = '';
				SET @SubAddiCondition = '';
				SET @SubDeleteCondition = '';
				SET @SubActiveCondition = '';
				SET @SubVersionCondition = '';
				SET @TextColumn = REPLACE(@TextColumn, 'ST.', '');
				SET @OrderByClause = REPLACE(@OrderByClause, 'ST.', '');
			END
			
			IF @ResultType = 'COUNT'
			BEGIN
				SET @ResultColumn = 'SUM(CASE WHEN ' + @ResultColumn + ' NOT IN ('''', ''0'') THEN 1 ELSE 0 END)'
			END
			ELSE IF @ResultType = 'AVG'
			BEGIN
				SET @ResultColumn = 'AVG(' + @ResultColumn + ')'
			END
			ELSE IF @ResultType = 'SUM'
			BEGIN
				SET @ResultColumn = 'SUM(' + @ResultColumn + ')'
			END
			ELSE IF @ResultType = 'MAX'
			BEGIN
				SET @ResultColumn = 'MAX(' + @ResultColumn + ')'
			END
			ELSE IF @ResultType = 'MIN'
			BEGIN
				SET @ResultColumn = 'MIN(' + @ResultColumn + ')'
			END

			SELECT @ActiveCount = COUNT(1) FROM CmnSearchParameterProcess WHERE SessionID = @IN_SessionID AND TableColumn = 'MT.NotActive';
			SET @ConditionColumns = ISNULL(SUBSTRING((SELECT ' AND ' + CASE WHEN DP.ControlType = 'Textbox' OR DP.ControlType = 'Multiline Textbox' 
																				THEN DP.ColumnName + ' LIKE ''%' + ISNULL(DP.ColumnValue, '') + '%''' 
																		WHEN DP.ControlType = 'Check Listbox' THEN
																				'(PATINDEX(''%,'' + CONVERT(VARCHAR(MAX), ' + DP.ColumnName + ')' + '+'',%'', '','' +  
																					ISNULL(CONVERT(VARCHAR(MAX), ''' + DP.ColumnValue + '''), '''') + '','') > 0)'
																		WHEN DP.ControlType IN ('Checklist Grid') THEN
																			'('''' + CAST(' + DP.ColumnName + ' AS VARCHAR(2000)) + '''' IN ('+ ISNULL(DP.ColumnValue, '') + '))'
																		WHEN DP.ControlType IN ('Radiolist Grid') THEN
																			'(PATINDEX(''%,'' + CAST(' + ISNULL(DP.ColumnValue, '') + ' AS VARCHAR(2000)) + '',%'', '',''+'+ ISNULL(DP.ColumnName, '') + '+'','') > 0)'
																		WHEN DP.ControlType = 'Date' OR DP.ControlType = 'DateTime' THEN 
																			CASE WHEN CHARINDEX('AND', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn+ ' BETWEEN '+ ISNULL(DP.ColumnValue, '')+ ')') 
																				WHEN CHARINDEX('>=', DP.ColumnValue) > 0 OR CHARINDEX('<=', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn+ ISNULL(DP.ColumnValue, '')+ ')')
																			ELSE ('('+DP.TableColumn+ ' = '+ ISNULL(DP.ColumnValue, '')+ ')') END 
																		WHEN DP.ControlType = 'Checkbox' THEN (DP.ColumnName+ ' = '+ ISNULL(DP.ColumnValue, 0))
																		ELSE DP.ColumnName + ' = ''' + ISNULL(DP.ColumnValue, '') + '''' END 
													FROM CmnSearchParameterProcess DP WITH (NOLOCK)
													WHERE DP.SessionID = @IN_SessionID 
													ORDER BY DP.ColumnName
													FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 1, 4000000000), '') 

			IF @ActiveCount > 0
			BEGIN
			   SET @ActiveCondition = '';
			END

			IF OBJECT_ID('tempdb..#tempChartColumnData') IS NOT NULL DROP TABLE #tempChartColumnData
			CREATE TABLE #tempChartColumnData (
				RowNum INT NOT NULL IDENTITY(1, 1),
				ColumnName VARCHAR(500) NULL,
				ColumnValue VARCHAR(255) NULL,
				CONSTRAINT [PK_tempChartColumnData] PRIMARY KEY ([RowNum] ASC))

			IF ISNULL(@ColumnTable, '') <> '' 
			BEGIN
				SET @ColumnQuery = 'INSERT INTO #tempChartColumnData (ColumnName, ColumnValue) SELECT ' + 
					@ColumnName + ',' + @ColumnValue + ' FROM ' + @ColumnTable +
					' WHERE 1=1' + CASE WHEN @ColumnCondition = '' THEN '' ELSE ' AND ' END + @ColumnCondition +
					CASE WHEN @ColumnAddiCondition = '' THEN '' ELSE ' AND ' END + @ColumnAddiCondition +
					CASE WHEN @ColumnDeleteCondition = '' THEN '' ELSE ' AND ' END + @ColumnDeleteCondition + CASE WHEN @ColumnActiveCondition = '' THEN '' ELSE ' AND ' END +
					@ColumnActiveCondition + CASE WHEN @ColumnVersionCondition = '' THEN '' ELSE ' AND ' END + @ColumnVersionCondition; 

    		EXEC(@ColumnQuery)
			END;

			SET @ColumnMin = 0;
			SET @ColumnMax = 0;
			SELECT @ColumnMin = MIN(RowNum), @ColumnMax = MAX(RowNum) FROM #tempChartColumnData WHERE RowNum <> 0;

			SET @ColumnMin = CASE WHEN @ColumnMin IS NULL THEN 0 ELSE @ColumnMin END;
			SET @ColumnMax = CASE WHEN @ColumnMax IS NULL THEN 0 ELSE @ColumnMax END;

			WHILE (@ColumnMin <= @ColumnMax)
			BEGIN
				SET @CurChartData  = '';
				SET @StackedName = '';
				SET @StackedValue = '';
				SELECT @StackedName = ColumnName, @StackedValue = ColumnValue
				FROM #tempChartColumnData WHERE RowNum = @ColumnMin;

				IF OBJECT_ID('tempdb..#tempChartResult') IS NOT NULL DROP TABLE #tempChartResult
				CREATE TABLE #tempChartResult (
					RowNum INT NOT NULL IDENTITY(1, 1),
					ChartName NVARCHAR(500) NULL,
					ChartValue VARCHAR(255) NULL,
					ChartLabel NVARCHAR(500) NULL,
					BarColumn VARCHAR(255) NULL,
					BarData VARCHAR(500) NULL,
					StackedColumn VARCHAR(255) NULL,
					StackedBarData VARCHAR(500) NULL,
					CONSTRAINT [PK_tempChartResult] PRIMARY KEY ([RowNum] ASC))

				IF OBJECT_ID('tempdb..#tempChartFinalResult') IS NOT NULL DROP TABLE #tempChartFinalResult
				CREATE TABLE #tempChartFinalResult (
					RowNum INT NOT NULL IDENTITY(1, 1),
					ChartName NVARCHAR(500) NULL,
					ChartValue VARCHAR(255) NULL,
					ChartLabel NVARCHAR(500) NULL,
					BarColumn VARCHAR(255) NULL,
					BarData VARCHAR(500) NULL,
					StackedColumn VARCHAR(255) NULL,
					StackedBarData VARCHAR(500) NULL,
					CONSTRAINT [PK_tempChartFinalResult] PRIMARY KEY ([RowNum] ASC))
	
				IF ISNULL(@SubTable, '') IN ('', '0')
				BEGIN
					SET @TempQuery = 'INSERT INTO #tempChartResult (ChartName, ChartValue, ChartLabel, BarColumn, BarData, StackedColumn, StackedBarData) SELECT ''' + 
						CASE WHEN ISNULL(@StackedName, '') = '' THEN @ChartName ELSE @StackedName END + ''',' + @ResultColumn + ', ISNULL(' + @TextColumn + ', ''NONE'')'
						+ ',''' + @BarColumn + ''',' + CONVERT(VARCHAR(50), ISNULL(@ValueColumn, 0))  + ', ''' +  @StackedColumn + ''',' 
						+ CASE WHEN ISNULL(@StackedName, '') = '' THEN '0' ELSE ('MT.' + CONVERT(VARCHAR(50), ISNULL(@StackedColumn, 0))) END

						+ ' FROM ' + @MainTable + ' MT  WHERE 1=1' +

						CASE WHEN @StackedColumn = '' THEN '' ELSE ' AND MT.' END + CASE WHEN @StackedColumn = '' THEN '' ELSE @StackedColumn END + 
						CASE WHEN @StackedColumn = '' THEN '' ELSE ' = ''' END + CASE WHEN @StackedColumn = '' THEN '' ELSE @StackedValue END + CASE WHEN @StackedColumn = '' THEN '' ELSE '''' END +

						CASE WHEN @MainAddiCondition = '' THEN '' ELSE ' AND ' END + @MainAddiCondition +
						CASE WHEN @ConditionColumns = '' OR @TableName <> @MainTable THEN '' ELSE @ConditionColumns END +
						CASE WHEN @DeleteCondition = '' THEN '' ELSE ' AND ' END + @DeleteCondition + CASE WHEN @ActiveCondition = '' THEN '' ELSE ' AND ' END +
						@ActiveCondition + CASE WHEN @VersionCondition = '' THEN '' ELSE ' AND ' END + @VersionCondition +
        
						'' + CASE WHEN @MainCondition = '' THEN '' ELSE ' AND ' END + @MainCondition +
						' GROUP BY ' + @ValueColumn + ',' + @TextColumn + CASE WHEN ISNULL(@StackedColumn, '') = '' THEN '' ELSE (',' + @StackedColumn) END + @OrderByClause;
				END
				ELSE
				BEGIN
					SET @TempQuery = 'INSERT INTO #tempChartResult (ChartName, ChartValue, ChartLabel, BarColumn, BarData, StackedColumn, StackedBarData) SELECT ''' + 
						CASE WHEN ISNULL(@StackedName, '') = '' THEN @ChartName ELSE @StackedName END + ''',' + @ResultColumn + ', ISNULL(' + @TextColumn + ', ''NONE'')'
						+ ',''' + @BarColumn + ''',' + CONVERT(VARCHAR(50), ISNULL(@ValueColumn, 0))  + ', ''' +  @StackedColumn + ''',' 
						+ CASE WHEN ISNULL(@StackedName, '') = '' THEN '0' ELSE ('MT.' + CONVERT(VARCHAR(50), ISNULL(@StackedColumn, 0))) END

						+ ' FROM ' + @SubTable + ' ST LEFT JOIN ' + @MainTable + ' MT ON ' + @JoinCondition +

						CASE WHEN @StackedColumn = '' THEN '' ELSE ' AND MT.' END + CASE WHEN @StackedColumn = '' THEN '' ELSE @StackedColumn END + 
						CASE WHEN @StackedColumn = '' THEN '' ELSE ' = ''' END + CASE WHEN @StackedColumn = '' THEN '' ELSE @StackedValue END + CASE WHEN @StackedColumn = '' THEN '' ELSE '''' END +

						CASE WHEN @MainAddiCondition = '' THEN '' ELSE ' AND ' END + @MainAddiCondition +
						CASE WHEN @ConditionColumns = '' OR @TableName <> @MainTable THEN '' ELSE @ConditionColumns END +
						CASE WHEN @DeleteCondition = '' THEN '' ELSE ' AND ' END + @DeleteCondition + CASE WHEN @ActiveCondition = '' THEN '' ELSE ' AND ' END +
						@ActiveCondition + CASE WHEN @VersionCondition = '' THEN '' ELSE ' AND ' END + @VersionCondition +
        
						' WHERE 1=1' + CASE WHEN @MainCondition = '' THEN '' ELSE ' AND ' END + @MainCondition + CASE WHEN @SubCondition = '' THEN '' ELSE ' AND ' END + @SubCondition +

						CASE WHEN @SubAddiCondition = '' THEN '' ELSE ' AND ' END + @SubAddiCondition +
						CASE WHEN @SubDeleteCondition = '' THEN '' ELSE ' AND ' END + @SubDeleteCondition + CASE WHEN @SubActiveCondition = '' THEN '' ELSE ' AND ' END +
						@SubActiveCondition + CASE WHEN @SubVersionCondition = '' THEN '' ELSE ' AND ' END + @SubVersionCondition +
        
						' GROUP BY ' + @ValueColumn + ',' + @TextColumn + CASE WHEN ISNULL(@StackedColumn, '') = '' THEN '' ELSE (',' + @StackedColumn) END + @OrderByClause; 
				END
				EXEC(@TempQuery)

				IF @AllBarReq = 'TRUE' 
				BEGIN
					INSERT INTO #tempChartFinalResult (ChartName, ChartValue, ChartLabel, BarColumn, BarData, StackedColumn, StackedBarData)
					SELECT ChartName, SUM(ChartValue), 'All', ISNULL(BarColumn, ''), 0, ISNULL(StackedColumn, ''), 0
					FROM #tempChartResult
					GROUP BY ChartName,BarColumn,StackedColumn;
				END
      
				INSERT INTO #tempChartFinalResult (ChartName, ChartValue, ChartLabel, BarColumn, BarData, StackedColumn, StackedBarData)
				SELECT ChartName, ISNULL(ChartValue, 0), ISNULL(ChartLabel, ''), ISNULL(BarColumn, ''), ISNULL(BarData, 0), ISNULL(StackedColumn, ''), ISNULL(StackedBarData, 0)
				FROM #tempChartResult;

				SELECT @CurChartData = @CurChartData  + CASE WHEN @CurChartData <> '' THEN ',' ELSE '' END 
					+ '{"y":' + ChartValue + ',"indexLabel":"' + ChartValue + '","label":"' + ChartLabel + '","name":"' + CASE WHEN ISNULL(@StackedName, '') = '' THEN ChartLabel ELSE ChartName END
					+ '","barColumn":"' + BarColumn + '","barValue":"' + BarData + '","stackedBarColumn":"' + StackedColumn + '","stackedBarValue":"' + StackedBarData +'"}'			
				FROM #tempChartFinalResult WHERE (@ResultType <> 'COUNT' OR ChartValue <> 0)
				ORDER BY RowNum

				SET @CurChartData = ISNULL(@CurChartData, '');

				SET @CurChartData = '"name": "' + CASE WHEN ISNULL(@StackedName, '') = '' THEN @ChartName ELSE @StackedName END + '"' + ',"type": "' + @ChartType + '"' + ',"dataPoints": [' + @CurChartData + ']'
  
				IF @ControlID <> @CurControlID AND @ChartData <> ''
				BEGIN
					SET @ChartData = @ChartData + ']'
				END 

				IF @ColumnMin > 1
				BEGIN
					SET @ChartData = @ChartData + ','
				END 

				IF @ControlID <> 0 AND @ControlID <> @CurControlID
				BEGIN
					SET @ChartData = @ChartData + ','
				END 

				IF @ControlID <> @CurControlID
				BEGIN
					SET @ChartData = @ChartData + '['
					SET @ControlID = @CurControlID
				END 

				SET @ChartData = @ChartData + '{' + @CurChartData + '}'
				SET @ColumnMin = @ColumnMin + 1;
			END;
			SET @Min = @Min + 1;
		END

		IF @ChartData <> ''
		  SET @ChartData = @ChartData + ']'

		SELECT @ChartData;

	END TRY
	BEGIN CATCH

		--EXEC [Fn_ErrorFetch] @@SPID

		--INSERT INTO tbl_StoredProcedure_Error(MenuID, App_User, SQL_User, Server_Name, [Procedure_Name],
		--	Error_Code, Line_Number, [Error_Message], [Error_State], Logged_Date, [INPUT_PARAMS]) 
		--SELECT @IN_FormID, @IN_UserID, USER_NAME(), @@SERVERNAME, ERROR_PROCEDURE(), ERROR_NUMBER(),
		--	ERROR_LINE(), ERROR_MESSAGE(), ERROR_STATE(), GETUTCDATE(), (SELECT PIN FROM TBL_ERRORFETCH);

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END;
GO
PRINT N'Creating [dbo].[spCmnChkUserAuditValidate]'
GO

CREATE PROCEDURE [dbo].[spCmnChkUserAuditValidate] (
	@IN_UserID INT,
	@IN_Password NVARCHAR(100) 
)
  
AS
BEGIN
	SET NOCOUNT ON
  
	DECLARE @userID INT, @Password NVARCHAR(100), @PasswordMatch BIT;
  
	SELECT  @userID = ISNULL(UD.UserID, 0), @Password = ISNULL(UD.Password, '')
	FROM CmnUserDetails UD
	WHERE UD.UserID = @IN_UserID;

	IF @Password = @IN_Password 
	BEGIN
		SET @PasswordMatch = 1;
	END
	
	SELECT @PasswordMatch;

END			
GO
PRINT N'Creating [dbo].[spCmnClearFormConfiguration]'
GO


CREATE PROCEDURE [dbo].[spCmnClearFormConfiguration](@IN_FormID INT) AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY 
		DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
				@DeleteFormID INT = @IN_FormID;

		DELETE FROM CmnRBSPermission WHERE FormID = @DeleteFormID;
  
		DELETE FROM CmnRolePermission WHERE FormID = @DeleteFormID;

		IF ISNULL(@DeleteFormID, '' ) <> '' AND ISNULL(@DeleteFormID, 0) <> 0
		BEGIN
			DELETE FROM CmnCodeMaster WHERE MenuID = @DeleteFormID;
		END
		DELETE FROM CmnFormButtonProperties WHERE FormID = @DeleteFormID;

		DELETE FROM CmnControlCodeAutoConfig WHERE FormID = @DeleteFormID;

		DELETE FROM CmnControlAutoGenerateConfig WHERE FormID = @DeleteFormID;
  
		DELETE FROM CmnRememberSearchControl WHERE FormID = @DeleteFormID;
  
		DELETE SCM FROM CmnSearchColumnsMultiLingual SCM JOIN CmnSearchControlColumns SCC ON SCC.ColumnID = SCM.ColumnID 
		JOIN CmnFormSearchControl SC ON SC.SearchID = SCC.SearchID WHERE SC.FormID = @DeleteFormID;
  
		DELETE SCC FROM CmnSearchControlColumns SCC JOIN CmnFormSearchControl SC ON SC.SearchID = SCC.SearchID WHERE SC.FormID = @DeleteFormID;
  
		DELETE SM FROM CmnSearchMultiLingual SM JOIN CmnFormSearchControl SC ON SC.SearchID = SM.SearchID WHERE SC.FormID = @DeleteFormID;
  
		DELETE FROM CmnFormSearchControl WHERE FormID = @DeleteFormID;
  
		DELETE CM FROM CmnColumnsMultiLingual CM JOIN CmnControlColumns CC ON CC.ColumnID = CM.ColumnID JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID 
		JOIN CmnGroupBoxes GB ON FC.GroupID = GB.GroupID JOIN CmnFormTabs FT ON FT.TabID = GB.TabID WHERE FT.FormID = @DeleteFormID;
  
		DELETE CP FROM CmnColumnProperty CP JOIN CmnControlColumns CC ON CC.ColumnID = CP.ColumnID JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID 
		JOIN CmnGroupBoxes GB ON FC.GroupID = GB.GroupID JOIN CmnFormTabs FT ON FT.TabID = GB.TabID WHERE FT.FormID = @DeleteFormID;

		DELETE GC FROM CmnGridControlColumns GC JOIN CmnControlColumns CC ON CC.ColumnID = GC.ControlID JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID AND FC.ControlType = 19 JOIN CmnGroupBoxes GB ON FC.GroupID = GB.GroupID 
		JOIN CmnFormTabs FT ON FT.TabID = GB.TabID WHERE FT.FormID = @DeleteFormID;
  
		DELETE CC FROM CmnControlColumns CC JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID JOIN CmnGroupBoxes GB ON FC.GroupID = GB.GroupID 
		JOIN CmnFormTabs FT ON FT.TabID = GB.TabID WHERE FT.FormID = @DeleteFormID;
  
		-- DELETE CPM FROM CmnControlPropertyMultiLingual CPM JOIN CmnControlProperty CP ON CP.ControlID = CPM.ControlID JOIN CmnFormControls FC ON FC.ControlID = CP.ControlID 
		-- JOIN CmnGroupBoxes GB ON FC.GroupID = GB.GroupID JOIN CmnFormTabs FT ON FT.TabID = GB.TabID WHERE FT.FormID = @DeleteFormID;
  
		DELETE CM FROM CmnControlsMultiLingual CM JOIN CmnFormControls FC ON FC.ControlID = CM.ControlID JOIN CmnGroupBoxes GB ON FC.GroupID = GB.GroupID 
		JOIN CmnFormTabs FT ON FT.TabID = GB.TabID WHERE FT.FormID = @DeleteFormID;
  
		DELETE CP FROM CmnControlProperty CP JOIN CmnFormControls FC ON FC.ControlID = CP.ControlID JOIN CmnGroupBoxes GB ON FC.GroupID = GB.GroupID 
		JOIN CmnFormTabs FT ON FT.TabID = GB.TabID WHERE FT.FormID = @DeleteFormID;
  
		DELETE FC FROM CmnFormControls FC JOIN CmnGroupBoxes GB ON FC.GroupID = GB.GroupID JOIN CmnFormTabs FT ON FT.TabID = GB.TabID WHERE FT.FormID = @DeleteFormID;
  
		DELETE GM FROM CmnGroupMultiLingual GM JOIN CmnGroupBoxes GB ON GM.GroupID = GB.GroupID JOIN CmnFormTabs FT ON FT.TabID = GB.TabID WHERE FT.FormID = @DeleteFormID;

		DELETE GP FROM CmnGeneralProperty GP JOIN CmnGroupBoxes GB ON GP.Type = 'Groupbox' AND GP.TypeID = GB.GroupID 
		JOIN CmnFormTabs FT ON FT.TabID = GB.TabID WHERE FT.FormID = @DeleteFormID;
  
		DELETE GB FROM CmnGroupBoxes GB JOIN CmnFormTabs FT ON FT.TabID = GB.TabID WHERE FT.FormID = @DeleteFormID;
  
		DELETE TM FROM CmnTabsMultiLingual TM JOIN CmnFormTabs FT ON FT.TabID = TM.TabID WHERE FT.FormID = @DeleteFormID;
  
		DELETE FROM CmnFormTabs WHERE FormID = @DeleteFormID;
  
		DELETE FROM CmnFormMultiLingual WHERE FormID = @DeleteFormID;

		DELETE FROM CmnGeneralProperty WHERE Type = 'Form' AND TypeID = @DeleteFormID;
  
		DELETE FROM CmnFormDetails WHERE FormID = @DeleteFormID;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END;
GO
PRINT N'Creating [dbo].[spCmnCodeMasterInsertImport]'
GO

CREATE PROCEDURE [dbo].[spCmnCodeMasterInsertImport](@IN_Type VARCHAR(100), @IN_TypeValues VARCHAR(100), @IN_UserID INT, @OUT_CodeMasterID INT OUT)
AS
BEGIN
	DECLARE @GMTTime DATETIME = dbo.fn_GMTCalculation(1),
		@UTCTime DATETIME = GETUTCDATE(),
		@CodemasterID INT = 0,
		@UserAccess INT = 0 ;

			IF NOT EXISTS (SELECT TOP 1 CodemasterID FROM CmnCodeMaster WHERE Type = @IN_Type AND Typevalues = @IN_TypeValues AND IsDeleted = 0)
			BEGIN 

				SET @CodemasterID = ISNULL((SELECT MAX(CodemasterID) FROM CmnCodeMaster WHERE Type = @IN_Type), 0) + 1;
				SET @UserAccess = ISNULL((SELECT TOP 1 UserAccess FROM CmnCodeMaster WHERE Type = @IN_Type), 0);

				INSERT INTO CmnCodeMaster (Type, CodemasterID, DisplayType, TypeValues, UserAccess, OrderBy, Version, IsCurrentVersion, NotActive, IsDeleted, 
					CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT)
				SELECT @IN_Type, @CodemasterID, @IN_Type, @IN_TypeValues, @UserAccess, @CodemasterID, 1, 1, 0, 0, @IN_UserID, @UTCTime, @GMTTime, @IN_UserID, @UTCTime, @GMTTime;

			END

			SET @OUT_CodeMasterID = ISNULL((SELECT TOP 1 CodemasterID FROM CmnCodeMaster WHERE Type = @IN_Type AND Typevalues = @IN_TypeValues AND IsDeleted = 0 ), 0);
END
GO
PRINT N'Creating [dbo].[fn_IsDebugMode]'
GO

CREATE FUNCTION [dbo].[fn_IsDebugMode]()        
RETURNS INT
AS
BEGIN        
  RETURN 1;       
END
GO
PRINT N'Creating [dbo].[spCmnHandleException]'
GO

CREATE PROCEDURE [dbo].[spCmnHandleException](@IN_FormID INT, @IN_SPName VARCHAR(255), @IN_Query NVARCHAR(MAX), @IN_Parameter NVARCHAR(2000), 
									  @IN_ErrorMessage NVARCHAR(2000), @IN_ErrorSeverity NVARCHAR(50), @IN_ErrorState NVARCHAR(50))
AS
BEGIN
  SET NOCOUNT ON
    IF dbo.fn_IsDebugMode() = 1
	BEGIN
        INSERT INTO CmnFormErrors (FormID, SPName, INParameters, Query, ErrorMessage, CreatedDate) 
               SELECT @IN_FormID, @IN_SPName, @IN_Parameter, @IN_Query, @IN_ErrorMessage, GETUTCDATE();
	END

    RAISERROR (@IN_ErrorMessage, @IN_ErrorSeverity, @IN_ErrorState);
END;
GO
PRINT N'Creating [dbo].[spCmnDMLParameterProcess]'
GO

CREATE PROCEDURE [dbo].[spCmnDMLParameterProcess](
	@IN_Event VARCHAR(20),
	@IN_ControlName NVARCHAR(255),
	@IN_ColumnName SYSNAME,
	@IN_ColumnValue NVARCHAR(MAX), 
	@IN_ControlType NVARCHAR(255),
	@IN_DataType NVARCHAR(255),
	@IN_IsIdentity BIT,
	@IN_IsMandatory BIT,
	@IN_IsDmlControl BIT,
	@IN_UniqueGroup VARCHAR(100),
	@IN_IsFKTable BIT, 
	@IN_TableFrom SYSNAME,
	@IN_TableID INT,
	@IN_IsNoAdd BIT,
	@IN_IsNoUpdate BIT,
	@IN_PreviousValue NVARCHAR(MAX),
	@IN_ControlID INT,
	@IN_IsParent BIT,
	@IN_FormID INT,
	@IN_UserID INT,
	@IN_SessionID VARCHAR(500))
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
			  @TableName SYSNAME = '',
			  @VersionCheck BIT = 0    
        
		IF @IN_Event = 'Clear' 
			DELETE FROM CmnDMLParameterProcess WHERE UserID = @IN_UserID AND SessionID = @IN_SessionID;
		ELSE
		BEGIN
			SET @TableName = '';

			IF @IN_TableFrom = 'Form' 
				SELECT @TableName = TableName FROM CmnFormDetails WHERE FormID = @IN_FormID AND IsDeleted = 0;
			ELSE IF @IN_TableFrom = 'Tab'
				SELECT @TableName = TableName FROM CmnFormTabs WHERE FormID = @IN_FormID AND TabID = @IN_TableID AND IsDeleted = 0;
			ELSE
				SELECT @TableName = GB.TableName 
				FROM CmnGroupBoxes GB
					JOIN CmnFormTabs FT ON FT.FormID = @IN_FormID AND FT.IsDeleted = 0
				WHERE GB.TabID = FT.TabID AND GB.GroupID = @IN_TableID AND GB.IsDeleted = 0

			SELECT @VersionCheck = VersionCheck FROM CmnFormControls WHERE ControlID = @IN_ControlID;
    
			INSERT INTO CmnDMLParameterProcess (ControlName, ColumnName, ColumnValue, ControlType, DataType, IsIdentity, IsMandatory, IsDmlControl, 
				UniqueGroup, IsFKTable, IsNoAdd, IsNoUpdate, TableName, UserID, PreviousValue, ControlID, IsParent, VersionCheck, SessionID) 
			SELECT @IN_ControlName, @IN_ColumnName, @IN_ColumnValue, @IN_ControlType, @IN_DataType, @IN_IsIdentity, @IN_IsMandatory, @IN_IsDmlControl, 
				@IN_UniqueGroup, @IN_IsFKTable, @IN_IsNoAdd, @IN_IsNoUpdate, @TableName, @IN_UserID, @IN_PreviousValue, @IN_ControlID, @IN_IsParent, @VersionCheck, @IN_SessionID
		END

	END TRY
	BEGIN CATCH

		--EXEC [Fn_ErrorFetch] @@SPID

		--INSERT INTO tbl_StoredProcedure_Error(MenuID, App_User, SQL_User, Server_Name, [Procedure_Name],
		--	Error_Code, Line_Number, [Error_Message], [Error_State], Logged_Date, [INPUT_PARAMS]) 
		--SELECT @IN_FormID, @IN_UserID, USER_NAME(), @@SERVERNAME, ERROR_PROCEDURE(), ERROR_NUMBER(),
		--	ERROR_LINE(), ERROR_MESSAGE(), ERROR_STATE(), GETUTCDATE(), (SELECT PIN FROM TBL_ERRORFETCH);

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnFileUpload]'
GO

CREATE PROCEDURE [dbo].[spCmnFileUpload](
	@IN_Event VARCHAR(20),
	@IN_FormID INT,
	@IN_UserID INT,
	@IN_Guid NVARCHAR(500),
	@IN_OriginalFileName NVARCHAR(1000),
	@IN_CheckSum NVARCHAR(MAX),
	@IN_FileName NVARCHAR(1000),
	@IN_Type VARCHAR(100),
	@IN_FileID INT,
	@IN_FilePath VARCHAR(255), 
	@IN_FileExtension VARCHAR(255),
	@IN_UploadedPath NVARCHAR(500))
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY
	
	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
			  @UTCTime DATETIME = GETUTCDATE(),
			  @Count INT = 0,
			  @Max INT = 0,
			  @TableName SYSNAME = '',
			  @KeyColumn SYSNAME = '',
			  @KeyQuery NVARCHAR(MAX) = '',
			  @KeyValue NVARCHAR(MAX) = '',
			  @ID BIGINT = 0,
			  @VersionCheck BIT = 0,
			  @Type NVARCHAR(MAX) = '',
			  @Version INT = 0
  
		IF @IN_Event = 'Clear'
		BEGIN 
			IF @IN_Guid <> ''
				UPDATE CmnFileUpload 
				SET GUIID = '', IsDeleted = 1, DeletedBy = @IN_UserID, DeletedDate = @UTCTime, DeletedReason = 'Unsaved File' 
				WHERE GUIID = @IN_Guid AND IsDeleted = 0
		END
		ELSE IF @IN_Event = 'Delete'
		BEGIN
			SELECT ISNULL(FU.FilePath, ''), ISNULL(FU.FileName, ''),
				ISNULL(FU.Checksum, ''), ISNULL(FU.FileExtension, ''), ISNULL(FU.FullPath, '')
			FROM CmnFileUpload FU
			JOIN CmnUserDetails UD ON UD.UserID = FU.CreatedBy
			WHERE ISNULL(FU.ReferenceID, 0) = @IN_FileID;

			UPDATE CmnFileUpload 
			SET GUIID = '', IsDeleted = 1, DeletedBy = @IN_UserID, DeletedDate = @UTCTime, DeletedReason = 'Deleted' 
			WHERE ReferenceID = @IN_FileID;
		END
		ELSE IF @IN_Event = 'View' OR @IN_Event = 'Download' 
			SELECT FU.CreatedDate, UD.Username, FU.FilePath, FU.FileName,
				FU.Checksum, FU.FileExtension, FU.FullPath
			FROM CmnFileUpload FU
			JOIN CmnUserDetails UD ON UD.UserID = FU.CreatedBy
			WHERE ReferenceID = @IN_FileID
		ELSE IF @IN_Event = 'add' OR @IN_Event = 'update' BEGIN
    
			SET @Count = (SELECT COUNT(1) FROM CmnFileUpload WHERE FormID = @IN_FormID AND GUIID = @IN_Guid AND IsDeleted = 0);
			SET @Max = 0;
   
			WHILE (@Count > @Max) BEGIN     
				SELECT @TableName = '', @KeyColumn = '', @KeyValue = ''

				SELECT TOP 1 @TableName = FU.TableName, 
				  @KeyColumn = CASE WHEN LEN(GB.TableName) > 0 THEN GB.KeyColumn
					                  WHEN LEN(FT.TableName) > 0 THEN FT.KeyColumn 
														WHEN LEN(FD.TableName) > 0 THEN FD.KeyColumn END,
					@VersionCheck = FC.VersionCheck, @Type = FC.TableColumn
				FROM CmnFileUpload FU
					JOIN CmnFormDetails FD ON FD.FormID = @IN_FormID AND FD.IsDeleted = 0
					JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
					JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
					JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.TableColumn = FU.Type AND FC.IsDeleted = 0     
				WHERE FU.FormID = @IN_FormID AND FU.GUIID = @IN_Guid AND FU.IsDeleted = 0
				        
				IF @IN_Event = 'add' BEGIN
				  SET @KeyQuery = 'SELECT TOP 1 @ColumnValue = ' + @KeyColumn + ', @Type = ' + @Type+ ', @Version = Version FROM ' + @TableName + ' WHERE IsDeleted = 0 ORDER BY ' + @KeyColumn + ' DESC'
					
				  EXEC sp_executesql @KeyQuery, N'@ColumnValue NVARCHAR(MAX) OUTPUT, @Type NVARCHAR(MAX) OUTPUT, @Version INT OUTPUT', @KeyValue OUTPUT, @Type OUTPUT,  @Version OUTPUT  	
				END
				ELSE IF @VersionCheck = 1
				BEGIN
					SET @KeyQuery = 'SELECT TOP 1 @Type = ' + @Type+ ', @Version = Version FROM ' + @TableName + ' WHERE IsDeleted = 0 AND ' + @KeyColumn + ' = '+ @IN_FileID;
					
					EXEC sp_executesql @KeyQuery, N'@Type NVARCHAR(MAX) OUTPUT, @Version INT OUTPUT',  @Type OUTPUT,  @Version OUTPUT	
					SET @KeyValue = @IN_FileID; 				
				END			
				ELSE
				BEGIN
					SET @KeyValue = @IN_FileID 
				END
				
				IF @VersionCheck = 1
				BEGIN
					UPDATE CmnFileUpload SET IsDeleted = 1 WHERE FormID = @IN_FormID AND GUIID = '' AND FileRefID = @KeyValue AND ReferenceID <> @Type;
				END		  
        
				SET ROWCOUNT 1
				UPDATE CmnFileUpload 
				SET FileRefID = @KeyValue, GUIID = '', Version = @Version
				WHERE GUIID = @IN_Guid AND IsDeleted = 0
				SET ROWCOUNT 0
     
				SET @Max = @Max + 1;
			END
		END
		ELSE IF @IN_Event = 'GridDML'
		BEGIN
			SET @Count = ISNULL((SELECT COUNT(1) FROM CmnFileUpload WHERE FormID = @IN_FormID AND GUIID = @IN_Guid AND IsDeleted = 0), 0);
			IF @Count > 0
			BEGIN
				SET @KeyValue = dbo.fn_SplitString(@IN_CheckSum, ',', 1);
				IF ISNULL(@KeyValue, '') <> '' AND ISNUMERIC(@KeyValue) = 1
				BEGIN
					UPDATE CmnFileUpload 
					SET FileRefID = @KeyValue
					WHERE FormID = @IN_FormID AND GUIID = @IN_Guid AND IsDeleted = 0;

					INSERT INTO CmnFileUpload (FileRefID, FormID, TableName, OriginalFileName, FileName, FilePath, FileExtension, Checksum, 
						FullPath, GUIID, Type, CreatedBy, CreatedDate, IsDeleted)
					SELECT RI.items, FU.FormID, FU.TableName, FU.OriginalFileName, FU.FileName, FU.FilePath, FU.FileExtension, FU.Checksum, 
						FU.FullPath, FU.GUIID, FU.Type, FU.CreatedBy, FU.CreatedDate, FU.IsDeleted
					FROM CmnFileUpload FU
						JOIN dbo.fn_RevolSpliter(@IN_CheckSum, ',') RI ON RI.ID > 1
							AND ISNULL(RI.items, '') <> '' AND ISNUMERIC(RI.items) = 1
					WHERE FU.FormID = @IN_FormID AND FU.GUIID = @IN_Guid AND FU.IsDeleted = 0;
				END

				UPDATE CmnFileUpload 
				SET GUIID = ''
				WHERE GUIID = @IN_Guid AND IsDeleted = 0;
			END
		END
		ELSE 
		BEGIN
			SET @Count = (SELECT COUNT(1) FROM CmnFileUpload WHERE ReferenceID = (CASE WHEN @IN_FileID = '' OR @IN_FileID = Null THEN 0 ELSE @IN_FileID END) AND FormID = @IN_FormID AND GUIID = @IN_Guid);
  
   			IF @Count = 0
			BEGIN
				SET @TableName = '';  

				SELECT TOP 1 @TableName = CASE WHEN LEN(GB.TableName) > 0 THEN GB.TableName
				                         WHEN LEN(FT.TableName) > 0 THEN FT.TableName
														     WHEN LEN(FD.TableName) > 0 THEN FD.TableName END				
				FROM CmnFormControls FC
					JOIN CmnFormDetails FD ON FD.FormID = @IN_FormID AND FD.IsDeleted = 0
					JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
					JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
				WHERE FC.GroupID = GB.GroupID AND FC.TableColumn = @IN_Type AND FC.IsDeleted = 0;         

  				INSERT INTO CmnFileUpload (FileRefID, FormID, TableName, OriginalFileName, FileName,FilePath, FileExtension, [Checksum], FullPath, GUIID, Type, CreatedBy, CreatedDate, IsDeleted)
    			SELECT 0, @IN_FormID, @TableName, @IN_OriginalFileName, @IN_FileName,@IN_FilePath, @IN_FileExtension, @IN_CheckSum, @IN_UploadedPath, @IN_Guid, @IN_Type, @IN_UserID, @UTCTime, 0
  				WHERE NOT EXISTS (SELECT 1 FROM CmnFileUpload WHERE GUIID = @IN_Guid AND FormID = @IN_FormID AND [Checksum] = @IN_CheckSum AND Type = @IN_Type 
							AND IsDeleted = 0 AND OriginalFileName = @IN_OriginalFileName);

				IF @@ROWCOUNT > 0
				BEGIN
  				  SET @ID = IDENT_CURRENT('CmnFileUpload');
  				  SELECT 'S0005', @ID
				END
				ELSE
				  SELECT 'E0045', @ID 

			END    
			ELSE 
  				UPDATE CmnFileUpload SET OriginalFileName = @IN_OriginalFileName, FileName = @IN_FileName, [Checksum] = @IN_CheckSum WHERE ReferenceID = @IN_FileID
		END	

	END TRY
	BEGIN CATCH

		--EXEC [Fn_ErrorFetch] @@SPID

		--INSERT INTO tbl_StoredProcedure_Error(MenuID, App_User, SQL_User, Server_Name, [Procedure_Name],
		--	Error_Code, Line_Number, [Error_Message], [Error_State], Logged_Date, [INPUT_PARAMS]) 
		--SELECT @IN_FormID, @IN_UserID, USER_NAME(), @@SERVERNAME, ERROR_PROCEDURE(), ERROR_NUMBER(),
		--	ERROR_LINE(), ERROR_MESSAGE(), ERROR_STATE(), GETUTCDATE(), (SELECT PIN FROM TBL_ERRORFETCH);

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[fn_DataSplit]'
GO

CREATE FUNCTION [dbo].[fn_DataSplit](@String NVARCHAR(MAX), @Delimiter VARCHAR(10))        
RETURNS @temptable TABLE (items NVARCHAR(MAX))        
AS        
BEGIN        
  DECLARE @idx INT        
  DECLARE @slice NVARCHAR(MAX)  
  
  SELECT @idx = 1, @Delimiter = LTRIM(RTRIM(@Delimiter)), @String = RTRIM(@String)      
        
  IF LEN(@String) < 1 OR @String IS NULL RETURN        
       
  WHILE @idx != 0        
  BEGIN        
    SET @idx = PATINDEX('%' + @Delimiter + '%', @String)
          
    IF @idx != 0        
      SET @slice = LEFT(@String, @idx - 1)        
    ELSE        
      SET @slice = @String        
           
    IF (LEN(@slice) > 0)   
      INSERT INTO @temptable(Items) VALUES(@slice)        
  
    IF LEN(@String) >= LEN(@Delimiter)
      SET @String = RIGHT(@String, LEN(@String) - (@idx + LEN(@Delimiter) - 1))  
            
    IF LEN(@String) = 0 BREAK        
  END    
RETURN        
END
GO
PRINT N'Creating [dbo].[spCmnControlsDML]'
GO

CREATE PROCEDURE [dbo].[spCmnControlsDML](
	@IN_Event VARCHAR(20),
	@IN_IdentityValue INT,
	@IN_Type VARCHAR(50),
	@IN_IPAddress VARCHAR(100),
	@IN_FormID INT, 
	@IN_UserID INT,
	@IN_GUIID NVARCHAR(1000),
	@IN_SessionID VARCHAR(500))
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY
	
	  BEGIN TRANSACTION tran_CmnControlsDML

	  DECLARE @GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
			  @UTCTime DATETIME = GETUTCDATE(),
			  @TableMin INT = 0,
			  @TableCount INT = 0,
			  @TableName SYSNAME = '',
			  @Query NVARCHAR(MAX) = '',
			  @InsertedCount INT = 0,
			  @LastDataID NVARCHAR(MAX) = 0,
			  @IdentityColumn SYSNAME = '',
			  @KeyColumn SYSNAME = '',
			  @KeyTable SYSNAME = '',
			  @TableKey SYSNAME = '',
			  @DCount INT = 0,
			  @InsertColumns VARCHAR(MAX) = '',
			  @InsertValues NVARCHAR(MAX) = '',
			  @OrderBy BIGINT = 0,
			  @OrderQuery NVARCHAR(MAX) = '',
			  @ID NVARCHAR(MAX),
			  @UniQuery NVARCHAR(MAX) = '',
			  @ResponseMsg NVARCHAR(100) = '',
			  @IdentityValue NVARCHAR(MAX) = '',
			  @UpdateColumns NVARCHAR(MAX) = '',
			  @IDQuery NVARCHAR(MAX),
			  @UniqueID BIGINT = 0,
			  @UploadCount INT = 0,
			  @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
			  @FormType INT = 0,
			  @DataCount INT = 0,
			  @CntQuery NVARCHAR(MAX) = '',
			  @ButtonPerm VARCHAR(200) = '',
			  @ControlBased INT = 0,
			  @DataFrom VARCHAR(200) = '',
			  @FillType INT = 0,
			  @Count INT = 0,
			  @ControlID INT = 0,
			  @PropCount INT = 0,
			  @GroupID INT = 0,
			  @TabID INT = 0,
			  @FormID INT = @IN_FormID,
			  @ColumnCount INT = 0,
			  @KeyValue INT = 0,
			  @DefaultColumns NVARCHAR(MAX) = '',
			  @DefaultValues NVARCHAR(MAX) = '',
			  @UpdatedColumns NVARCHAR(MAX) = '',
			  @DmlEvent NVARCHAR(20) = @IN_Event,
			  @ParentValue INT = 0, 
			  @ButtonCount INT = 0,
			  @VersionCount INT = 0,
			  @VersionCheckID NVARCHAR(MAX) = '',
			  @MainTableName VARCHAR(100) = '',
			  @MainKeyColumn VARCHAR(100) = '',
			  @IQuery NVARCHAR(MAX) = '',
			  @MainID INT = 0,
			  @AuditIdentity INT = 0,
			  @ProcessDmlType INT = 0,
			  @DataQuery NVARCHAR(MAX) = '',
			  @RecordCount BIGINT = 0,
			  @ParentColumn VARCHAR(100) = '',
			  @ParentID INT = 0,
			  @CompanyID INT = 0,
			  @AfterSaveEventType INT = 0,
			  @AfterSaveSPName VARCHAR(255) = '',
			  @AfterSaveKeyColumn VARCHAR(255) = '',
			  @AfterSaveKeyColumns VARCHAR(MAX) = '',
			  @TempValue VARCHAR(MAX) = '',
			  @AfterSaveKeyValues VARCHAR(MAX) = '',
			  @AfterSaveKeyColumnsCount INT = 0,
			  @RecID INT = 0,
			  @AfterSaveQuery NVARCHAR(MAX) = '',
			  @AfterSaveQueryColumns NVARCHAR(MAX) = '',
			  @INParameters NVARCHAR(MAX),
			  @FormIDValue VARCHAR(100) = '',
			  @UserType INT = 0;

		SELECT @CompanyID = ISNULL(ED.CompanyID, UD.CompanyID), @UserType = ISNULL(UD.Type, 0)
		FROM CmnUserDetails UD
			LEFT JOIN MstEmployeeDetails ED ON UD.[Type] = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
		WHERE UD.UserID = @IN_UserID;

		IF @CompanyID = 0
			SET @CompanyID = ISNULL((SELECT TOP 1 ReferenceID FROM MstCompanyDetails WHERE IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1), 0);

		IF ISNULL(@UserType, 0) = 0
			SET @CompanyID = 0;

		SELECT @FormType = FormType, @MainTableName = TableName, @MainKeyColumn = KeyColumn FROM CmnFormDetails WHERE FormID = @IN_FormID AND IsDeleted = 0
		SET @ButtonPerm = (SELECT Buttons FROM CmnRBSPermission WHERE FormID = @IN_FormID and UserID = @IN_UserID AND IsDeleted = 0)
		
		IF OBJECT_ID('tempdb..#tempDMLRBSButton') IS NOT NULL
				DROP TABLE #tempDMLRBSButton

		CREATE TABLE #tempDMLRBSButton (Buttons VARCHAR(100) NOT NULL)

		INSERT INTO #tempDMLRBSButton
		SELECT TypeValues from CmnCodeMaster CM			 
		WHERE Type = 'MenuButton' AND MenuID = @IN_FormID AND CodemasterID IN (SELECT * FROM dbo.[fn_DataSplit] (@ButtonPerm, ','))
		
		IF @FormType = 5
		BEGIN
			SELECT TOP 1 @FormID = ISNULL(CP.Value, @IN_FormID)
  			FROM CmnFormDetails FD
  				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
  				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
  				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FC.SearchApplicable = 1
				JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0
				JOIN CmnColumnProperty CP ON CP.ColumnID = CC.ColumnID AND CP.Name = 'Form ID' AND CP.IsDeleted = 0
			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0; 
		  END

		SELECT @ButtonCount = COUNT(1) 
		FROM CmnCodeMaster CM
			JOIN #tempDMLRBSButton RBS ON RBS.Buttons = CM.TypeValues
		WHERE CM.Type = 'MenuButton' AND CM.MenuID = @FormID 
			--AND CM.ButtonType = CASE WHEN @IN_Event = 'delete' THEN 3 WHEN @IN_Event = 'add' THEN 1 ELSE 2 END;
		IF EXISTS(SELECT 1 FROM #tempDMLRBSButton WHERE LOWER(Buttons) = @IN_Event) OR @ButtonCount > 0
		BEGIN
			IF @IN_Event = 'delete'
			BEGIN     
				SELECT @TableName = TableName, @IdentityColumn = KeyColumn FROM CmnFormDetails WHERE FormID = @FormID AND IsDeleted = 0

				SET @AfterSaveKeyValues = '';

				SELECT @AfterSaveSPName = ISNULL(SPName, ''), @AfterSaveKeyColumns = ISNULL(KeyColumns, ''), @AfterSaveEventType = ISNULL(SaveEventType, 0) 
				FROM CmnAfterSaveDML WHERE FormID = @IN_FormID AND TableName = @TableName AND DeleteFlag = 1 AND IsDeleted = 0;

				IF @AfterSaveEventType = 2 AND @AfterSaveKeyColumns <> ''
				BEGIN
				
					SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, ' ', '');
					IF (RIGHT(@AfterSaveKeyColumns, 1) = ',')
						SET @AfterSaveKeyColumns = SUBSTRING(@AfterSaveKeyColumns, 1, LEN(@AfterSaveKeyColumns) - 1);

					IF (CHARINDEX('@FormID', @AfterSaveKeyColumns) > 0)
					BEGIN
						SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, '@FormID', CAST(@IN_FormID AS VARCHAR(50)));
					END

					IF (CHARINDEX('@IPAddress', @AfterSaveKeyColumns) > 0)
					BEGIN
						SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, '@IPAddress', CONCAT('''', CAST(@IN_IPAddress AS VARCHAR(100)), ''''));
					END

					SELECT @AfterSaveQueryColumns = 'ISNULL(CAST(' + REPLACE(@AfterSaveKeyColumns, ',', ' AS VARCHAR(MAX)), '''') + ''@!$'' + ISNULL(CAST(') + ' AS VARCHAR(MAX)), '''')';
				
					IF (@AfterSaveQueryColumns <> '')
					BEGIN
						SET @TempValue = '';
						SET @AfterSaveQuery = 'SELECT @TempValue = ' + @AfterSaveQueryColumns + ' FROM ' + @TableName + ' WHERE ' + @IdentityColumn + ' = ' + CAST(@IN_IdentityValue AS VARCHAR(50));

						EXEC SP_EXECUTESQL @AfterSaveQuery, N'@TempValue VARCHAR(MAX) OUT', @TempValue OUT;

						SET @AfterSaveKeyValues = ',''' + REPLACE(@TempValue, '@!$', ''',''') + '''';
					END
				END
				SET @Query = 'UPDATE ' + @TableName + ' SET IsDeleted = 1, DeletedBy = ' + CAST(@IN_UserID AS VARCHAR(50)) + ', DeletedDate = ''' + CONVERT(VARCHAR(50), @UTCTime, 9) 
					+ ''', DeletedDateGMT = ''' + CAST(@GMTTime AS VARCHAR(50)) + ''', DeleteReason = '''' WHERE ' + @IdentityColumn + ' = ' + CAST(@IN_IdentityValue AS VARCHAR(50))
    
				EXEC(@Query)

				IF (@AfterSaveSPName <> '') AND (@Query <> '') AND (@IN_IdentityValue > 0)
				BEGIN
					SET @Query = @AfterSaveSPName + ' ' + CAST(@IN_UserID AS VARCHAR(50)) + ',' + CAST(@IN_IdentityValue AS VARCHAR(50)) + ',''' + @IN_Event  + '''' + @AfterSaveKeyValues;
					EXEC SP_EXECUTESQL @Query;
				END

				EXEC spCmnAuditTrackingEntry 'DELETE', '', @TableName, @IdentityColumn, @IN_IdentityValue, @IN_IPAddress, '', @IN_FormID, @IN_UserID, @IN_SessionID, @CompanyID

				SET @ResponseMsg =  'S0001'

				SELECT @ResponseMsg, @IN_IdentityValue, 0
			END
			ELSE
			BEGIN
				IF OBJECT_ID('tempdb..#tempDMLTableNameProcess') IS NOT NULL
					DROP TABLE #tempDMLTableNameProcess

				CREATE TABLE #tempDMLTableNameProcess (TableNum INT NULL, TableName SYSNAME NOT NULL)
    
				INSERT INTO #tempDMLTableNameProcess (TableName)
				SELECT DISTINCT(TableName) FROM CmnDMLParameterProcess WHERE UserID = @IN_UserID AND ISNULL(TableName, '') <> '' AND ControlType <> 'Grid' AND IsIdentity = 0 AND SessionID = @IN_SessionID

				IF OBJECT_ID('tempdb..#tempDMLTableNameSort') IS NOT NULL
					DROP TABLE #tempDMLTableNameSort

				CREATE TABLE #tempDMLTableNameSort (TableNum INT NOT NULL IDENTITY(1, 1), TableName SYSNAME NOT NULL, TabID SYSNAME NOT NULL, GroupID SYSNAME NOT NULL)

				INSERT INTO #tempDMLTableNameSort (TableName, TabID, GroupID)
				SELECT DISTINCT CASE WHEN LEN(GB.TableName) > 0 THEN GB.TableName WHEN LEN(FT.TableName) > 0 THEN FT.TableName ELSE FD.TableName END, GB.TabID, GB.GroupID 
				FROM CmnFormDetails FD
					JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
					JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID 
					JOIN CmnRBSPermission RBS ON (PATINDEX('%,' + CAST(FT.TabID AS VARCHAR(50)) + ',%' , ',' + RBS.Tabs + ',') > 0) AND RBS.FormID = @IN_FormID AND RBS.UserID = @IN_UserID
				WHERE FD.FormID = @IN_FormID 
				ORDER BY GB.TabID ASC, GB.GroupID ASC

				UPDATE TMP
				SET TMP.TableNum = TMP1.TableNum
				FROM #tempDMLTableNameProcess TMP
					JOIN #tempDMLTableNameSort TMP1 ON TMP1.TableName = TMP.TableName

				IF OBJECT_ID('tempdb..#tempDMLTableName') IS NOT NULL
					DROP TABLE #tempDMLTableName

				CREATE TABLE #tempDMLTableName (TableNum  INT NOT NULL IDENTITY(1, 1), TableName SYSNAME NOT NULL)

				INSERT INTO #tempDMLTableName 
				SELECT TableName FROM #tempDMLTableNameProcess AS tbl
				WHERE ISNULL(tbl.TableNum, '') <> ''
				ORDER BY tbl.TableNum

				IF @FormType = 5
				BEGIN
					SELECT TOP 1 @ControlBased = (CASE WHEN ISNULL(CP.Value, '') = '' THEN 0 ELSE CP.Value END),
						@DataFrom = (CASE WHEN ISNULL(CD.Value, '') = '' THEN '' ELSE CD.Value END),
						@FillType = (CASE WHEN ISNULL(CF.Value, '') = '' THEN 0 ELSE CF.Value END)
      				FROM CmnFormDetails FD
      					JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
      					JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
      					JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FC.SearchApplicable = 1
						JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0
						JOIN CmnColumnProperty CP ON CP.ColumnID = CC.ColumnID AND CP.IsDeleted = 0 AND CP.Name = 'Control Based' 
						INNER JOIN CmnColumnProperty CD ON CD.ColumnID = CC.ColumnID AND CD.IsDeleted = 0 AND CD.Name = 'Data From'
						INNER JOIN CmnColumnProperty CF ON CF.ColumnID = CF.ColumnID AND CF.IsDeleted = 0 AND CF.Name = 'Fill Type'
      				WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;
				END
			
				SELECT @TableCount = COUNT(1) FROM #tempDMLTableName;
				WHILE (@TableMin < @TableCount)
				BEGIN
					SET @KeyColumn = ''; 
					SET @TableName = '';  
					SET @KeyTable = '';  
					SET @TableKey = '';  
					SET @TableMin = @TableMin + 1;
					SET @Count = 0;
					SET @ControlID = 0;
					SET @PropCount = 0;
					SET @GroupID = 0;
					SET @TabID = 0;
					SET @InsertedCount = @InsertedCount + 1;
					SET @IN_Event = @DmlEvent;
					SET @ParentValue = 0;

					SELECT @TableName = TableName FROM #tempDMLTableName WHERE TableNum = @TableMin;    
					
					SET @Count = (SELECT COUNT(1) FROM CmnDMLParameterProcess WHERE TableName = @TableName AND IsDmlControl = 1 AND SessionID = @IN_SessionID); 
					IF @Count > 0 					
					BEGIN
						SET @IdentityColumn = ISNULL((SELECT TOP 1 DP.ColumnName FROM CmnDMLParameterProcess DP 
																					WHERE DP.UserID = @IN_UserID AND DP.IsIdentity = 1 AND DP.TableName = @TableName AND DP.SessionID = @IN_SessionID), '');
  
						SET @IdentityValue = ISNULL((SELECT TOP 1 ISNULL(DP.ColumnValue, '') FROM CmnDMLParameterProcess DP 
																					WHERE DP.UserID = @IN_UserID AND DP.IsIdentity = 1 AND DP.TableName = @TableName AND DP.SessionID = @IN_SessionID), '');

						SET @ControlID = ISNULL((SELECT TOP 1 DP.ControlID FROM CmnDMLParameterProcess DP 
												  WHERE DP.UserID = @IN_UserID AND DP.IsIdentity = 1 AND DP.TableName = @TableName AND DP.SessionID = @IN_SessionID), '');
						
						SET @ProcessDmlType = ISNULL((SELECT ButtonDmlType FROM CmnFormControls WHERE ControlID = @ControlID), 0);
    
						IF @FormType = 5 AND @DataFrom <> ''
						BEGIN
							SET @GroupID = ISNULL((SELECT FC.GroupID FROM CmnFormControls FC WHERE FC.ControlID = @ControlID), '');
							SET @PropCount = (SELECT COUNT(1) FROM CmnGeneralProperty WHERE TypeID = @GroupID AND Type = 'Groupbox' AND IsDeleted = 0);
						END

						IF @FormType = 5 AND @ControlBased = 1 AND @PropCount > 0     
						BEGIN
							SELECT @KeyTable = Value FROM CmnGeneralProperty WHERE TypeID = @GroupID AND Name = 'Parent Table' AND IsDeleted = 0;
							SELECT @KeyColumn = Value FROM CmnGeneralProperty WHERE TypeID = @GroupID AND Name = 'Parent Table Key' AND IsDeleted = 0;
							SELECT @TableName = Value FROM CmnGeneralProperty WHERE TypeID = @GroupID AND Name = 'Table' AND IsDeleted = 0;
							SELECT @TableKey = Value FROM CmnGeneralProperty WHERE TypeID = @GroupID  AND Name = 'Table Key' AND IsDeleted = 0;
						END
						ELSE
						BEGIN
							SELECT TOP 1 @KeyTable = CASE WHEN GB.TableName = @TableName THEN (CASE WHEN ISNULL(FT.TableName, '') <> '' AND FT.TableName <> '' THEN FT.TableName ELSE FD.TableName END)
																		WHEN FT.TableName = @TableName THEN FD.TableName ELSE @TableName END,
									@KeyColumn = CASE WHEN GB.TableName = @TableName THEN 
											CASE WHEN ISNULL(FT.TableName, '') <> '' AND FT.TableName <> '' THEN 
												CASE WHEN @IN_Type = 'Process' THEN CASE WHEN @ProcessDmlType IN (4) THEN FT.KeyColumn
													ELSE (SELECT TOP 1 DP.ColumnName FROM CmnDMLParameterProcess DP WHERE DP.UserID = @IN_UserID AND DP.IsIdentity = 1 AND DP.TableName = @TableName AND DP.SessionID = @IN_SessionID) END
												ELSE (SELECT TOP 1 DP.ColumnName FROM CmnDMLParameterProcess DP WHERE DP.UserID = @IN_UserID AND DP.IsIdentity = 1 AND DP.TableName = FT.TableName AND DP.SessionID = @IN_SessionID) END												
											ELSE FD.KeyColumn END
											WHEN FT.TableName = @TableName THEN (SELECT TOP 1 DP.ColumnName FROM CmnDMLParameterProcess DP WHERE DP.UserID = @IN_UserID AND DP.IsIdentity = 1 AND DP.TableName = FD.TableName AND DP.SessionID = @IN_SessionID) 
											ELSE FD.KeyColumn END, 
									@TableKey = CASE WHEN GB.TableName = @TableName THEN CASE WHEN ISNULL(FT.TableName, '') <> '' AND FT.TableName <> '' THEN GB.KeyColumn ELSE FD.KeyColumn END
								WHEN FT.TableName = @TableName THEN FT.KeyColumn ELSE FD.KeyColumn END 
							FROM CmnFormDetails FD
								JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
								JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID 
							WHERE FD.FormID = @FormID AND FD.IsDeleted = 0 AND (GB.TableName = @TableName OR FT.TableName = @TableName OR FD.TableName = @TableName)
						END
					
						/*DML Block*/
						SET @DataCount = 0
						IF @FormType = 2
						BEGIN
			 
							SET @CntQuery = 'SET @DCount = (SELECT COUNT(1) FROM '+ @TableName+ ' WHERE ' + @TableKey + ' = ('+ 'SELECT DP.ColumnValue FROM CmnDMLParameterProcess DP 
								WHERE DP.UserID = '+ CAST(@IN_UserID AS VARCHAR(50))+ ' AND DP.IsDmlControl = 0 AND DP.IsNoUpdate = 0 AND DP.TableName = '''+ @TableName+ ''' AND DP.SessionID = '''+ @IN_SessionID + ''' AND DP.ColumnName = '''+ @TableKey+ '''' + '))'

							EXEC sp_executesql @CntQuery, N'@DCount INT OUTPUT', @DataCount OUTPUT

							IF @DataCount = 0
								SET @IN_Event = 'add'
							ELSE 
								SET @IN_Event = 'update'				
						END 
					
						SET @UpdateColumns = '';
						SET @ColumnCount = 1;
						SET @InsertColumns = '';
						SET @InsertValues = '';
						SET @ColumnCount = (SELECT COUNT(1) FROM CmnDMLParameterProcess WHERE TableName = @TableName AND ColumnName = @TableKey AND SessionID = @IN_SessionID);
						
						IF @FormType = 5
						BEGIN 
							SET @KeyValue = 0;
							SET @KeyValue = ISNULL((SELECT TOP 1 ISNULL(DP.ColumnValue, '') FROM CmnDMLParameterProcess DP 
																					WHERE DP.UserID = @IN_UserID AND DP.IsIdentity = 1 AND DP.TableName = @KeyTable AND DP.SessionID = @IN_SessionID), '');
							IF @KeyValue = ''
							BEGIN
							   IF @PropCount > 0
							   BEGIN
									SET @KeyValue = (SELECT ColumnValue FROM CmnDMLParameterProcess WHERE UserID = @IN_UserID AND ColumnName = @KeyColumn AND SessionID = @IN_SessionID);
							   END
							   IF ISNULL(@KeyValue, '') = ''
							   BEGIN 
									SET @UniQuery = 'SELECT TOP 1 @KeyValue = ' + @KeyColumn + ' FROM ' + @KeyTable + ' ORDER BY ' + @KeyColumn + ' DESC';		
									EXEC sp_executesql @UniQuery, N'@KeyValue NVARCHAR(MAX) OUTPUT', @KeyValue OUTPUT
								END
							END

							IF @ColumnCount = 0
							BEGIN
								SET @InsertColumns = ISNULL(SUBSTRING((SELECT(SELECT ','+ DP.ColumnName 
																FROM CmnDMLParameterProcess DP 
																WHERE DP.UserID = @IN_UserID AND TableName = @TableName AND DP.IsDmlControl = 1 AND DP.IsNoAdd = 0 AND DP.SessionID = @IN_SessionID
																ORDER BY DP.ColumnName FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)')), 2, 200000), '');
								SET @InsertValues = ISNULL(SUBSTRING((SELECT(SELECT ','+ (CASE WHEN DP.ColumnName = @TableKey AND @TableMin <> 1 THEN @LastDataID
																			ELSE (CASE WHEN DP.DataType = 'BIT' AND ISNULL(DP.ColumnValue, '') = 'true' THEN '1'
																				WHEN DP.DataType = 'BIT' AND ISNULL(DP.ColumnValue, '') = 'false' THEN '0'
																				WHEN (DP.DataType LIKE '%DATE%' OR DP.DataType LIKE '%TIME%') AND ISNULL(DP.ColumnValue, '') = '' THEN 'null' 
																				WHEN (DP.DataType LIKE '%INT%' OR DP.DataType LIKE '%DECIMAL%') AND ISNULL(DP.ColumnValue, '') = '' THEN 'null' 
																				ELSE 'N''' + REPLACE(ISNULL(DP.ColumnValue, ''), '''', '''''') + '''' END)
																			END)	
																FROM CmnDMLParameterProcess DP 
																WHERE DP.UserID = @IN_UserID AND TableName = @TableName AND DP.IsDmlControl = 1 AND DP.IsNoAdd = 0 AND DP.SessionID = @IN_SessionID
																ORDER BY DP.ColumnName FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)')), 2, 200000), '');
								SET @InsertColumns = CASE WHEN @InsertColumns <> '' THEN (@InsertColumns + ',' + @TableKey) ELSE @TableKey END;
								SET @InsertValues = CASE WHEN @InsertValues <> '' THEN (@InsertValues + ',' + CONVERT(VARCHAR(MAX), @KeyValue)) ELSE CONVERT(VARCHAR(MAX), @KeyValue) END;
							END
							
							IF @IdentityValue = 0
							BEGIN
							  SET @DefaultColumns = '';
							  SET @DefaultValues = '';
							  SET @DataCount = 0;

							  SELECT @DataCount = COUNT(1) FROM CmnFormControls FC
								JOIN CmnDMLParameterProcess CD ON CD.TableName = @TableName AND ISNULL(CD.ColumnName, '') = FC.TableColumn AND CD.SessionID = @IN_SessionID
								JOIN CmnControlProperty CP ON CP.ControlID = FC.ControlID AND CP.Name = 'Not Empty' AND CP.Value = '1' AND CP.IsDeleted = 0 
							  WHERE FC.GroupID = @GroupID AND FC.IsDeleted = 0 AND ISNULL(FC.DefaultValue, '') <> '';

							  IF @DataCount = 0
							  BEGIN 
								SET @DefaultColumns = ISNULL(SUBSTRING((SELECT(SELECT ','+ FC.TableColumn 
															FROM CmnFormControls FC
															JOIN CmnControlProperty CP ON CP.ControlID = FC.ControlID AND CP.Name = 'Not Empty' AND CP.Value = '1' AND CP.IsDeleted = 0 
															WHERE FC.GroupID = @GroupID AND FC.IsDeleted = 0 AND ISNULL(FC.DefaultValue, '') <> ''                             
															FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)')), 2, 200000), '');
								SET @DefaultValues = ISNULL(SUBSTRING((SELECT(SELECT ','+ FC.DefaultValue 
															FROM CmnFormControls FC
															JOIN CmnControlProperty CP ON CP.ControlID = FC.ControlID AND CP.Name = 'Not Empty' AND CP.Value = '1' AND CP.IsDeleted = 0 
															WHERE FC.GroupID = @GroupID AND FC.IsDeleted = 0 AND ISNULL(FC.DefaultValue, '') <> ''                             
															FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)')), 2, 200000), '');
							  END							
							  IF @DefaultColumns <> ''
							  BEGIN
								SET @InsertColumns = CASE WHEN @InsertColumns <> '' THEN (@InsertColumns + ',' + @DefaultColumns) ELSE @DefaultColumns END;
								SET @InsertValues = CASE WHEN @InsertValues <> '' THEN (@InsertValues + ',' + @DefaultValues) ELSE @DefaultValues END;
							  END
							  SET @IN_Event = 'add';
							END
						END

						IF (@DmlEvent = 'update' AND @IdentityValue = 0) OR @ProcessDmlType = 4 
						BEGIN
							SET @IN_Event = 'add';

							SET @UniQuery = 'SELECT TOP 1 @IDValue = ISNULL(' + @KeyColumn + ', 0) FROM ' + @KeyTable + ' WHERE ' + @KeyColumn + ' = ' + 
											ISNULL((SELECT TOP 1 ISNULL(DP.ColumnValue, '') FROM CmnDMLParameterProcess DP 
												WHERE DP.UserID = @IN_UserID AND DP.IsIdentity = 1 AND DP.SessionID = @IN_SessionID AND DP.TableName = @KeyTable AND DP.ControlType <> 'Tree' AND DP.ControlType <> 'Grid'), 0);
							EXEC sp_executesql @UniQuery, N'@IDValue NVARCHAR(MAX) OUTPUT', @ParentValue OUTPUT	
						END
						ELSE IF @DmlEvent = 'update' AND @IdentityValue <> 0 AND @IdentityValue <> ''
						BEGIN
							SET @DataQuery = 'SELECT @DataCount = COUNT(1) FROM ' + @TableName + ' WHERE ' + @IdentityColumn + ' = '+ @IdentityValue 

							EXEC sp_executesql @DataQuery, N'@DataCount BIGINT OUTPUT', @RecordCount OUTPUT	

							IF @RecordCount = 0
							BEGIN
								SET @IN_Event = 'add';
							END
						END
						ELSE IF (@DmlEvent = 'add' AND @IdentityValue > 0) 
						BEGIN
							SET @IN_Event = 'update';
						END
								
						SELECT @VersionCount = COUNT(1)  FROM CmnDMLParameterProcess WHERE VersionCheck = 1 AND SessionID = @IN_SessionID;

						IF @IN_Event = 'add' 
						BEGIN
							SET @OrderBy = 0;  
							SELECT @ParentColumn = DP.ColumnName, @ParentID = DP.ColumnValue FROM CmnDMLParameterProcess DP WHERE DP.UserID = @IN_UserID AND DP.IsParent = 1 AND DP.SessionID = @IN_SessionID;

							SET @OrderQuery = 'SELECT @Cnt = COUNT(1) + 1 FROM ' + @TableName + ' WHERE 1 = '+ (CASE WHEN ISNULL(@ParentColumn, '') <> '' AND @TableMin = 1 THEN '1 AND '+ @ParentColumn + ' = '+ CAST(@ParentID AS VARCHAR(50)) ELSE '1' END);
							EXEC sp_executesql @OrderQuery, N'@Cnt BIGINT OUTPUT', @OrderBy OUTPUT
        
							SET @ID = 0;
							IF @ParentValue <> 0 
								SET @UniQuery = 'SELECT TOP 1 @IDValue = ' + @KeyColumn + ' FROM ' + @KeyTable + ' WHERE ' + @KeyColumn + ' = ' + 
									ISNULL((SELECT TOP 1 ISNULL(DP.ColumnValue, '') FROM CmnDMLParameterProcess DP 
																					WHERE DP.UserID = @IN_UserID AND DP.IsIdentity = 1 AND DP.SessionID = @IN_SessionID AND DP.TableName = @KeyTable AND DP.ControlType <> 'Tree' AND DP.ControlType <> 'Grid'), '');
							ELSE
								SET @UniQuery = 'SELECT TOP 1 @IDValue = ' + @KeyColumn + ' FROM ' + @KeyTable + ' ORDER BY ' + @KeyColumn + ' DESC';	
							
							EXEC sp_executesql @UniQuery, N'@IDValue NVARCHAR(MAX) OUTPUT', @ID OUTPUT				

							SET @IdentityValue = @ID;
							SET @LastDataID = @IdentityValue;					
							
							IF @ColumnCount <> 0 OR (@TableCount >1 AND @FormType <> 5)
							BEGIN
								SELECT @InsertColumns = @InsertColumns + CASE WHEN @InsertColumns = '' THEN @InsertColumns ELSE ',' END + DP.ColumnName,
									@InsertValues = @InsertValues + CASE WHEN @InsertValues = '' THEN @InsertValues ELSE ',' END +
											CASE WHEN DP.ColumnName = @TableKey AND @TableMin <> 1 THEN @LastDataID
													ELSE (CASE WHEN DP.DataType = 'BIT' AND ISNULL(DP.ColumnValue, '') = 'true' THEN '1'
																			WHEN DP.DataType = 'BIT' AND ISNULL(DP.ColumnValue, '') = 'false' THEN '0'
																			WHEN (DP.DataType LIKE '%DATE%' OR DP.DataType LIKE '%TIME%') AND ISNULL(DP.ColumnValue, '') = '' THEN 'null' 
																			WHEN (DP.DataType LIKE '%INT%' OR DP.DataType LIKE '%DECIMAL%') AND ISNULL(DP.ColumnValue, '') = '' THEN 'null' 
																			ELSE 'N''' + REPLACE(ISNULL(DP.ColumnValue, ''), '''', '''''') + '''' END) END	
								FROM CmnDMLParameterProcess DP 
								WHERE DP.UserID = @IN_UserID AND TableName = @TableName AND DP.SessionID = @IN_SessionID AND DP.IsDmlControl = 1 AND DP.IsNoAdd = 0 AND
									(DP.ColumnName <> 'OrderBy' OR (DP.ColumnName = 'OrderBy' AND ISNULL(DP.ColumnValue, '') NOT IN ('', '0')))
									AND (DP.ColumnName <> 'CompanyID' OR (DP.ColumnName = 'CompanyID' AND ISNULL(DP.ColumnValue, '') NOT IN ('', '0')))
								ORDER BY DP.ColumnName
							END												
							
							IF @InsertColumns <> ''
							BEGIN								
								IF @ColumnCount = 0 AND @FormType <> 5
								BEGIN
									SET @InsertColumns = @InsertColumns + ',' + @TableKey;
									SET @InsertValues = @InsertValues + ',' +  CONVERT(VARCHAR(MAX), @LastDataID);
								END

								IF NOT EXISTS (SELECT 1 FROM CmnDMLParameterProcess WHERE ColumnName = 'OrderBy' AND ColumnValue <> '' AND ColumnValue <> '0' AND SessionID = @IN_SessionID AND TableName = @TableName)
								BEGIN
									SET @InsertColumns = @InsertColumns + ',OrderBy';
									SET @InsertValues = @InsertValues + ',' +  CAST(@OrderBy AS VARCHAR(50));
								END

								IF NOT EXISTS (SELECT 1 FROM CmnDMLParameterProcess WHERE ColumnName = 'CompanyID' AND ColumnValue <> '' AND ColumnValue <> '0' AND SessionID = @IN_SessionID AND TableName = @TableName)
									AND EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND  COLUMN_NAME = 'CompanyID')
								BEGIN
									SET @InsertColumns = @InsertColumns + ',CompanyID';
									SET @InsertValues = @InsertValues + ',' +  CAST(@CompanyID AS VARCHAR(50));
								END

								SET @Query = 'INSERT INTO ' + @TableName + ' (' + @InsertColumns + ',CreatedBy,CreatedDate,CreatedDateGMT,ModifiedBy,ModifiedDate,ModifiedDateGMT) VALUES ('
															+  @InsertValues +  ',' + CAST(@IN_UserID AS VARCHAR(50)) + ',''' + CONVERT(VARCHAR(50), @UTCTime, 9) + ''',''' 
															+ CAST(@GMTTime AS VARCHAR(50)) + ''',' + CAST(@IN_UserID AS VARCHAR(50)) + ',''' + CONVERT(VARCHAR(50), @UTCTime, 9) + ''',''' + CAST(@GMTTime AS VARCHAR(50)) + ''');'
								
							END
							ELSE
							BEGIN
								SET @ResponseMsg = 'I0001';
							END	
						END
						ELSE IF @IN_Event = 'update' 
						BEGIN 
							SET @UpdatedColumns = ''; 
							SELECT @UpdatedColumns = @UpdatedColumns + CASE WHEN @UpdatedColumns = '' THEN @UpdateColumns ELSE ',' END + 
														DP.ColumnName + ' = ' + CASE WHEN DP.DataType = 'BIT' AND ISNULL(DP.ColumnValue, '') = 'true' THEN '1' 
																			WHEN DP.DataType = 'BIT' AND ISNULL(DP.ColumnValue, '') = 'false' THEN '0' 
																			WHEN (DP.DataType LIKE '%DATE%' OR DP.DataType LIKE '%TIME%') AND ISNULL(DP.ColumnValue, '') = '' THEN 'null' 
																			WHEN (DP.DataType LIKE '%INT%' OR DP.DataType LIKE '%DECIMAL%') AND ISNULL(DP.ColumnValue, '') = '' THEN 'null'
																			ELSE 'N''' + REPLACE(ISNULL(DP.ColumnValue, ''), '''', '''''') + '''' END
							FROM CmnDMLParameterProcess DP 
							WHERE DP.UserID = @IN_UserID AND TableName = @TableName AND DP.IsDmlControl = 1 AND DP.IsNoUpdate = 0 AND SessionID = @IN_SessionID; 
							
							IF @UpdateColumns <> ''
							BEGIN            
								SET @UpdateColumns = @UpdateColumns + ',' + @UpdatedColumns;
								IF @ColumnCount = 0 AND @FormType <> 5
								BEGIN
									SET @UpdateColumns = @UpdateColumns+ ','+ @TableKey+ '=' +@LastDataID;
								END
							END
							ELSE
								SET @UpdateColumns = @UpdatedColumns;

							SET @UpdateColumns = ISNULL(@UpdateColumns, '')

							--IF @VersionCount > 0
							--BEGIN
							--	SET @Query = 'SELECT @VersionCheckID = MAX('+ @IdentityColumn+ ') + 1 FROM '+ @TableName+ ';';
							--	EXEC(@Query); 

							--	SET @Query = 'IF OBJECT_ID(''''tempdb..#temp'+ @TableName+''') IS NOT NULL DROP TABLE #temp'+ @TableName+ ';';
							--	EXEC(@Query); 
              
							--	SET @Query = 'CREATE TABLE #temp'+ @TableName+ ' AS SELECT * FROM '+@TableName+ ' LIMIT 0;';
							--	EXEC(@Query); 
              
							--	SET @Query = 'INSERT INTO #temp'+@TableName+ ' SELECT * FROM '+ @TableName+ ' WHERE '+ @IdentityColumn+ ' = '+ @IdentityValue+ ';';
							--	EXEC(@Query); 
              
							--	SET @Query = 'UPDATE #temp'+ @TableName+ ' SET '+ @IdentityColumn+ ' = '+ @VersionCheckID+ ';';
							--	EXEC(@Query);  
            
							--	SET @Query = 'UPDATE '+ @TableName+ ' SET ModifiedBy = '+ @IN_UserID+ ', ModifiedDate = '''+ @UTCTime+ ''', ModifiedDateGMT = '''+ @GMTTime+ ''', NotActive = 1, NotActiveDate = '''+ @UTCTime+ ''' WHERE '+ @IdentityColumn+ ' = '+ @IdentityValue+ ';';      
							--	EXEC(@Query);

							--	SET @Query = 'INSERT INTO '+@TableName+ ' SELECT * FROM #temp'+ @TableName+ ' LIMIT 1;';
							--	EXEC(@Query);

							--	SET @IdentityValue = @VersionCheckID;

							--	SET @Query = 'IF OBJECT_ID(''''tempdb..#temp'+ @TableName+''') IS NOT NULL DROP TABLE #temp'+ @TableName+ ';';              
							--	EXEC(@Query);
							--END

							IF @UpdateColumns <> ''
							BEGIN
								SET @Query = 'UPDATE ' + @TableName + ' SET ' + @UpdateColumns + ', ModifiedBy = ' + CAST(@IN_UserID AS VARCHAR(50)) 
																+ ', ModifiedDate = ''' + CONVERT(VARCHAR(50), @UTCTime, 9) + ''', ModifiedDateGMT = ''' + CAST(@GMTTime AS VARCHAR(50)) 
																+ ''' WHERE ' + @IdentityColumn + ' = ' + @IdentityValue      
							END
							ELSE 
							BEGIN
								SET @ResponseMsg = 'I0001';
							END
						END														
					
						IF @Query <> ''
						BEGIN 
							IF @IN_Event = 'add'
								SET @IdentityValue = 0;
							-- After Save DML
							SET @AfterSaveEventType = 0;
							SET @AfterSaveSPName = '';
							SELECT @AfterSaveEventType = ISNULL(SaveEventType, 0), @AfterSaveSPName = ISNULL(SPName, ''), @AfterSaveKeyColumns = ISNULL(KeyColumns, '') FROM CmnAfterSaveDML 
								WHERE FormID = @IN_FormID AND TableName = @TableName AND IsDeleted = 0;
							SET @AfterSaveKeyValues = '';
							IF @AfterSaveEventType = 2 AND @AfterSaveKeyColumns <> ''
							BEGIN								
								SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, ' ', '');
								IF (RIGHT(@AfterSaveKeyColumns, 1) = ',')
									SET @AfterSaveKeyColumns = SUBSTRING(@AfterSaveKeyColumns, 1, LEN(@AfterSaveKeyColumns) - 1);

								SET @TempValue = '';

								IF (@IdentityValue > 0)
								BEGIN
									IF (CHARINDEX('@FormID', @AfterSaveKeyColumns) > 0)
									BEGIN
										SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, '@FormID', CAST(@IN_FormID AS VARCHAR(50)));
									END

									IF (CHARINDEX('@IPAddress', @AfterSaveKeyColumns) > 0)
									BEGIN
										SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, '@IPAddress', CONCAT('''', CAST(@IN_IPAddress AS VARCHAR(100)), ''''));
									END

									SELECT @AfterSaveQueryColumns = 'ISNULL(CAST(' + REPLACE(@AfterSaveKeyColumns, ',', ' AS VARCHAR(MAX)), '''') + ''@!$'' + ISNULL(CAST(') + ' AS VARCHAR(MAX)), '''')';
				
									SET @AfterSaveQuery = 'SELECT @TempValue = ' + @AfterSaveQueryColumns + ' FROM ' + @TableName + ' WHERE ' + @IdentityColumn + ' = ' + CAST(@IdentityValue AS VARCHAR(50));

									EXEC SP_EXECUTESQL @AfterSaveQuery, N'@TempValue VARCHAR(MAX) OUT', @TempValue OUT;
									SET @AfterSaveKeyValues = ',''' + REPLACE(@TempValue, '@!$', ''',''') + '''';
								END
								ELSE 
								BEGIN
									WITH SplitData AS (SELECT value FROM STRING_SPLIT(@AfterSaveKeyColumns, ','))
									SELECT @TempValue = STRING_AGG(CASE WHEN value = '@FormID' THEN CAST(@IN_FormID AS VARCHAR(50))
																		WHEN value = '@IPAddress' THEN CONCAT('''', @IN_IPAddress, '''')
																		ELSE 'NULL' END, ',') FROM SplitData;
									SET @AfterSaveKeyValues = ',' + @TempValue;
								END
								
							END
		
							EXEC(@Query)
							
							IF @IN_Event = 'add'
							BEGIN
								SET @IdentityValue = IDENT_CURRENT(@TableName);

								EXEC spCmnAutoGenerateColumnUpdate @IN_Event, @TableName, @IdentityColumn, @IdentityValue, @IN_FormID, @IN_UserID, @IN_SessionID
							END
       
							SET @ResponseMsg = '';     
							SET @KeyColumn = COALESCE(@KeyColumn, @IdentityColumn)
      
							IF @KeyColumn = '' 
							BEGIN       
								SET @KeyColumn = @IdentityColumn;
							END                
          
							/*IF @IdentityValue = 0 
							BEGIN 					
								SET @IDQuery = 'SELECT TOP 1 @Id = ' + @KeyColumn + ' FROM ' + @TableName + ' ORDER BY ' + @IdentityColumn + ' DESC '

								EXEC sp_executesql @IDQuery, N'@Id BIGINT OUTPUT', @IdentityValue OUTPUT
							END*/

							IF @IN_Event = 'add' AND @IdentityColumn <> ''
							BEGIN
								/*SET @IDQuery = ('SELECT TOP 1 @AuditColumn = '+ @IdentityColumn+ ' FROM '+ @TableName+ ' ORDER BY '+ @IdentityColumn+ ' DESC;');
								EXEC sp_executesql @IDQuery, N'@AuditColumn BIGINT OUTPUT', @AuditIdentity OUTPUT*/
								
								EXEC spCmnAuditTrackingEntry 'INSERT', '', @TableName, @IdentityColumn, @IdentityValue, @IN_IPAddress, '', @IN_FormID, @IN_UserID, @IN_SessionID, @CompanyID
							END
							ELSE IF @IN_Event = 'update'
								EXEC spCmnAuditTrackingEntry 'UPDATE', '', @TableName, @IdentityColumn, @IdentityValue, @IN_IPAddress, '', @IN_FormID, @IN_UserID, @IN_SessionID, @CompanyID
      
							SET @UniqueID = 0;
							IF @IN_Event = 'add'       
								SET @ResponseMsg = 'S0002';
							ELSE IF @IN_Event = 'update' BEGIN
								SET @ResponseMsg = 'S0003';     
								SET @UniqueID = @IdentityValue;        
							END
   
   							SET @UploadCount = 0;      
							SELECT @UploadCount = COUNT(1) FROM CmnDMLParameterProcess CP WHERE CP.TableName = @TableName AND (CP.ControlType = 'attachment' OR CP.ControlType = 'photo viewer') AND (CP.ColumnValue <> '' AND CP.ColumnValue <> 0)  AND CP.UserID = @IN_UserID AND CP.SessionID = @IN_SessionID;
				
							IF @UploadCount > 0
								EXEC spCmnFileUpload @IN_Event, @IN_FormID, @IN_UserID, @IN_GUIID, '', '', '', '', @UniqueID, '', '',''
					
							IF @FormType = 2
								SET @ResponseMsg = 'S0003'
      
							IF @TableName = @MainTableName
							BEGIN
							  IF @IN_Event = 'add'
								BEGIN
									SET @IQuery = CONCAT('SELECT TOP 1 @TempMainID = ', @MainKeyColumn, ' FROM ', @MainTableName, ' ORDER BY ', @MainKeyColumn, ' DESC;');           
									EXEC SP_EXECUTESQL @IQuery, N'@TempMainID INT OUT', @MainID OUT
								END
								ELSE
									SET @MainID = @IdentityValue;
							END

							-- After Save DML
							IF (@AfterSaveSPName <> '') AND (@IdentityValue > 0)
							BEGIN
								SET @Query = @AfterSaveSPName + ' ' + CAST(@IN_UserID AS VARCHAR(50)) + ',' + CAST(@IdentityValue AS VARCHAR(50)) + ',''' + @IN_Event  + '''' + @AfterSaveKeyValues;
							
								EXEC SP_EXECUTESQL @Query;
								
								IF OBJECT_ID('tempdb..#tempAfterSaveDMLColumns') IS NOT NULL
									DROP TABLE #tempAfterSaveDMLColumns;			
							END

							IF @TableCount = @InsertedCount 
							BEGIN        
								EXEC spCmnDMLParameterProcess 'Clear', '', '', '', '', '', 0, 0, 0, 0, 0, '', 0, 0, 0, '', 0, 0, @IN_FormID, @IN_UserID, @IN_SessionID
								SELECT @ResponseMsg, @IdentityValue, @MainID;
							END
						END
						ELSE IF @ResponseMsg = 'I0001' AND @TableCount = @InsertedCount
						BEGIN
							SELECT @ResponseMsg, 0, @MainID;
						END
					END 
					ELSE IF @TableCount = @InsertedCount 
					BEGIN
						IF @TableName = @MainTableName
						BEGIN
							IF @IN_Event = 'add'
							BEGIN
								SET @IQuery = CONCAT('SELECT TOP 1 @MainID = ', @MainKeyColumn, ' FROM ', @MainTableName, ' ORDER BY ', @MainKeyColumn, ' DESC;');           
								EXEC SP_EXECUTESQL @IQuery, N'@TempMainID INT OUT', @MainID OUT
							END
							ELSE
								SET @MainID = @IdentityValue;
						END

						EXEC spCmnDMLParameterProcess 'Clear', '', '', '', '', '', 0, 0, 0, 0, 0, '', 0, 0, 0, '', 0, 0, @IN_FormID, @IN_UserID, @IN_SessionID
						SELECT @ResponseMsg, @IdentityValue, @MainID;
					END 
				END
			END
		END
		ELSE
		BEGIN
			SET @ResponseMsg = 'I0001';
			SELECT @ResponseMsg, 0, 0;
		END
		COMMIT TRANSACTION tran_CmnControlsDML

	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION tran_CmnControlsDML;

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
		SET @INParameters = '''' + @IN_Event + ''', ' + CAST(@IN_IdentityValue AS VARCHAR(50)) + ', ''' + ISNULL(@IN_Type, '') + ''', ''' + ISNULL(@IN_IPAddress, '') + ''', ' + CAST(@IN_FormID AS VARCHAR(50)) + ', ' +
                            CAST(@IN_UserID AS VARCHAR(50)) + ', ''' + @IN_GUIID + ''', ''' + @IN_SessionID + '''';
		IF @AfterSaveQuery <> ''
			SET @Query = @Query + ' | ' + @AfterSaveQuery;                            
		EXEC spCmnHandleException @IN_FormID, 'spCmnControlsDML', @Query, @INParameters, @ErrorMessage, @ErrorSeverity, @ErrorState;
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[CmnSilentLoginTracking]'
GO
CREATE TABLE [dbo].[CmnSilentLoginTracking]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[UserID] [BIGINT] NOT NULL,
[SessionID] [NVARCHAR] (500) NULL,
[Token] [VARCHAR] (200) NULL,
[Direction] [VARCHAR] (5) NOT NULL,
[ModuleName] [NVARCHAR] (500) NULL,
[InitiatedDate] [DATETIME] NOT NULL,
[ExpiryDate] [DATETIME] NOT NULL,
[IsAuthenticated] [BIT] NOT NULL,
[Status] [VARCHAR] (1) NULL
)
GO
PRINT N'Creating primary key [PK_CmnSilentLoginTracking] on [dbo].[CmnSilentLoginTracking]'
GO
ALTER TABLE [dbo].[CmnSilentLoginTracking] ADD CONSTRAINT [PK_CmnSilentLoginTracking] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnSilentLoginTracking] on [dbo].[CmnSilentLoginTracking]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnSilentLoginTracking] ON [dbo].[CmnSilentLoginTracking] ([UserID], [Token])
GO
PRINT N'Creating [dbo].[spCmnCreateSilentLogin]'
GO

CREATE PROCEDURE [dbo].[spCmnCreateSilentLogin](
 @IN_UserName NVARCHAR(200),
 @IN_ModuleName NVARCHAR(500),
 @IN_Token NVARCHAR(500))
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		DECLARE @ErrorMessage VARCHAR(2000),
						@ErrorSeverity VARCHAR(50),
						@ErrorState	VARCHAR(50),
						@TimeStamp DATETIME = GETUTCDATE(),
						@ExpiryDate DATETIME,
						@Message NVARCHAR(1000) = '',
						@UserID INT = ISNULL((SELECT UserID FROM CmnUserDetails WHERE Username = @IN_UserName AND ISNULL(IsLocked, 0) = 0 AND ISNULL(IsDeleted, 0) = 0), 0)

		SET @ExpiryDate = DATEADD(MI, 1, @TimeStamp)

		IF @UserID <> 0
		BEGIN
			INSERT INTO CmnSilentLoginTracking (UserID, SessionID, Token, Direction, ModuleName, InitiatedDate, ExpiryDate, IsAuthenticated, [Status])
			SELECT UserID, NULL, @IN_Token, 'IN', @IN_ModuleName, @TimeStamp, @ExpiryDate, 0, 'I'
			FROM CmnUserDetails 
			WHERE Username = @IN_UserName AND ISNULL(IsLocked, 0) = 0 AND ISNULL(IsDeleted, 0) = 0
		END
		ELSE
			SET @Message = 'User not available'

		SELECT @Message AS Message

	END TRY
	BEGIN CATCH
	  SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnDeleteMasterData]'
GO

CREATE PROCEDURE [dbo].[spCmnDeleteMasterData](
	@IN_CodemasterID VARCHAR(50),
	@IN_Type VARCHAR(100),
	@IN_IPAddress VARCHAR(100), 
	@IN_FormID INT,
	@IN_UserID INT)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
			  @GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
			  @UTCTime DATETIME = GETUTCDATE(),
			  @Message VARCHAR(100) = '',
				@WhereCondition NVARCHAR(4000) = '',
        @AuditTable VARCHAR(255) = '',
        @AuditQuery NVARCHAR(4000) = ''

		SET @AuditTable = SUBSTRING(('##atD' +  SUBSTRING(CAST(OBJECT_ID('CmnCodeMaster') AS VARCHAR(100)), 1, 32) 
         + RIGHT(ISNULL(FORMAT(GETDATE(), 'HHmmssff'), ''), 10) + CAST(ISNULL(@IN_FormID, 0) AS VARCHAR(50))) , 1, 63);
    SET @WhereCondition = ('WHERE Type = '''+ @IN_Type +''' AND CodeMasterID = '+ CAST(@IN_CodemasterID AS VARCHAR(50)));
    
    SET @AuditQuery = 'IF OBJECT_ID(''tempdb..' + @AuditTable + ''') IS NOT NULL DROP TABLE ' + @AuditTable + ';
    SELECT * INTO ' + @AuditTable + '
    FROM CmnCodeMaster ' + @WhereCondition + ';'

    IF ISNULL(@AuditQuery, '') <> ''
      EXEC (@AuditQuery);

		UPDATE CmnCodeMaster SET IsDeleted = 1, DeletedBy = @IN_UserID, DeletedDate = @UTCTime, DeletedDateGMT = @GMTTime
		WHERE Type = @IN_Type AND CodemasterID = @IN_CodemasterID AND IsDeleted = 0;
		
		EXEC spCmnStaticAuditTracking 'DELETE', '', 'CmnCodeMaster', 'CodeMasterID', @WhereCondition, @AuditTable, '', '', @IN_IPAddress, @IN_FormID, @IN_UserID, '', 0;
    
    SET @AuditQuery = 'IF OBJECT_ID(''tempdb..' + @AuditTable + ''') IS NOT NULL DROP TABLE ' + @AuditTable + ';'

    IF ISNULL(@AuditQuery, '') <> ''
      EXEC (@AuditQuery);

		SELECT 'S0001';

	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnGetFormRBSData]'
GO

CREATE PROCEDURE [dbo].[spCmnGetFormRBSData] (@IN_FormID INT, @IN_UserID INT, @IN_TableName VARCHAR(255))
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@RbsDataQuery NVARCHAR(MAX) = '',
				@RBSCompanyID INT = 0,
				@SelfCompany BIT = 1,
				@FormTableName VARCHAR(255) = '',
				@RBSUserTypeID INT = 0,
				@RBSBranchID INT = 0,
				@RBSUserID INT = @IN_UserID,
				@RBSRoleID VARCHAR(100) = '',
				@RBSDesignationID INT = 0,
				@RBSDepartmentID INT = 0,
				@RBSWorkShiftID INT = 0,
				@ReportingHeadID INT = 0,
				@RBSNationalityID INT = 0,
				@RBSGenderID INT = 0,
				@RBSTitleID INT = 0,
				@RBSEmployeeID INT = 0,
				@RBSClientID BIGINT = 0,
				@UserType INT = 0,
				@RBSSupplierID INT = 0

		SELECT @RBSUserTypeID = ISNULL(UD.Type, 0), @RBSRoleID = ISNULL(UD.RoleID, 0), @RBSCompanyID = ISNULL(ED.CompanyID, UD.CompanyID), @RBSBranchID = ISNULL(ED.BranchID, 0), 
			@RBSDesignationID = ISNULL(ED.DesignationID, 0), @RBSDepartmentID = ISNULL(ED.DepartmentID, 0), @RBSWorkShiftID = ISNULL(ED.WorkshiftID, 0), 
			@ReportingHeadID = ISNULL(ED.ReportingHeadID, 0), @RBSNationalityID = ISNULL(ED.NationalityID, 0), @RBSGenderID = ISNULL(ED.GenderID, 0), 
			@RBSTitleID = ISNULL(ED.TitleID, 0), @RBSEmployeeID = ISNULL(ED.ReferenceID, 0), @UserType = UD.Type,
			@RBSClientID = ISNULL(CC.ClientID, 0), @RBSSupplierID = ISNULL(SC.SupplierID, 0)
		FROM CmnUserDetails UD
			LEFT JOIN MstEmployeeDetails ED ON UD.[Type] = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
			LEFT JOIN MstClientContacts CC ON UD.[Type] = 2 AND UD.TypeID = CC.ReferenceID AND ISNULL(CC.IsDeleted, 0) = 0
			LEFT JOIN MstSupplierContacts SC ON UD.[Type] = 4 AND UD.TypeID = SC.ReferenceID AND ISNULL(SC.IsDeleted, 0) = 0
		WHERE UD.UserID = @IN_UserID AND UD.Type <> 0;

		IF @RBSCompanyID = 0 AND ISNULL(@UserType, 0) <> 0
			SET @RBSCompanyID = ISNULL((SELECT TOP 1 ReferenceID FROM MstCompanyDetails WHERE IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1 AND ParentCompanyID IS NULL), 0);

		IF ISNULL(@RBSCompanyID, 0) <> 0
		BEGIN
			SELECT @SelfCompany = ISNULL(SelfCompany, 1)
			FROM CmnPasswordPolicy WHERE CompanyID = @RBSCompanyID AND IsDeleted = 0;

			IF @SelfCompany = 1 AND EXISTS(SELECT 1 FROM CmnUserDetails WHERE UserID = @IN_UserID AND AccessTypeID = 2)
			BEGIN
				SET @SelfCompany = 0;
			END
		END

		IF OBJECT_ID('tempdb..#temp_CmnGetFormRBSData') IS NOT NULL DROP TABLE #temp_CmnGetFormRBSData

		CREATE TABLE #temp_CmnGetFormRBSData (
			RowNo INT IDENTITY(1, 1) NOT NULL,
			ControlName NVARCHAR(200) NULL,
			TableName VARCHAR(255) NULL,
			TableColumn VARCHAR(255) NULL,
			DataValue NVARCHAR(MAX) NULL,
			SelfData BIT NULL)

		INSERT INTO #temp_CmnGetFormRBSData (ControlName, TableName, TableColumn, DataValue, SelfData)
		SELECT ControlName, TableName, TableColumn, ISNULL(DataValue, ''), ISNULL(SelfData, 0)
		FROM CmnRBSDataVariablePermission WHERE UserID = @IN_UserID AND FormID = @IN_FormID 
			AND (ISNULL(DataValue, '') <> '' OR ISNULL(SelfData, 0) = 1) AND ISNULL(IsDeleted, 0) = 0

		IF @SelfCompany = 1 AND @RBSCompanyID <> 0
		BEGIN
			SET @FormTableName = ISNULL((SELECT ISNULL(TableName, '') FROM CmnFormDetails WHERE FormID = @IN_FormID), '')
			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' THEN ',' ELSE '' END, CONVERT(VARCHAR(50), @RBSCompanyID))
			WHERE TableColumn = 'CompanyID';

			INSERT INTO #temp_CmnGetFormRBSData (ControlName, TableName, TableColumn, DataValue)
			SELECT 'CompanyID', @FormTableName, 'CompanyID', @RBSCompanyID
			WHERE NOT EXISTS (SELECT 1 FROM #temp_CmnGetFormRBSData TD WHERE TD.TableName = @FormTableName AND TD.TableColumn = 'CompanyID');

			INSERT INTO #temp_CmnGetFormRBSData (ControlName, TableName, TableColumn, DataValue)
			SELECT 'CompanyID', ISNULL(TableName, ''), 'CompanyID', @RBSCompanyID
			FROM CmnFormTabs FT WHERE FormID = @IN_FormID AND ISNULL(TableName, '') <> '' AND ISNULL(IsDeleted, 0) = 0
				AND NOT EXISTS (SELECT 1 FROM #temp_CmnGetFormRBSData TD WHERE TD.TableName = FT.TableName AND TD.TableColumn = 'CompanyID');

			INSERT INTO #temp_CmnGetFormRBSData (ControlName, TableName, TableColumn, DataValue)
			SELECT 'CompanyID', ISNULL(GB.TableName, ''), 'CompanyID', @RBSCompanyID
			FROM CmnGroupBoxes GB JOIN CmnFormTabs FT ON FT.TabID = GB.TabID AND ISNULL(FT.IsDeleted, 0) = 0
			WHERE FT.FormID = @IN_FormID AND ISNULL(GB.TableName, '') <> '' AND ISNULL(GB.IsDeleted, 0) = 0
				AND NOT EXISTS (SELECT 1 FROM #temp_CmnGetFormRBSData TD WHERE TD.TableName = GB.TableName AND TD.TableColumn = 'CompanyID');
		END

		IF EXISTS (SELECT 1 FROM #temp_CmnGetFormRBSData WHERE ISNULL(SelfData, 0) = 1) 
		BEGIN
			IF @RBSUserTypeID = 2 AND EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'MstClientContacts')
				SELECT @RBSDepartmentID = ISNULL(ED.DepartmentID, 0)
				FROM CmnUserDetails UD
      				LEFT JOIN MstClientContacts ED ON UD.Type = 2 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
				WHERE UD.UserID = @IN_UserID;
			ELSE IF @RBSUserTypeID = 3 AND EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'MstManufacturerContacts')
				SELECT @RBSDepartmentID = ISNULL(ED.DepartmentID, 0)
				FROM CmnUserDetails UD
      				LEFT JOIN MstManufacturerContacts ED ON UD.Type = 3 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
				WHERE UD.UserID = @IN_UserID;
			ELSE IF @RBSUserTypeID = 4 AND EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'MstSupplierContacts')
				SELECT @RBSDepartmentID = ISNULL(ED.DepartmentID, 0)
				FROM CmnUserDetails UD
      				LEFT JOIN MstSupplierContacts ED ON UD.Type = 4 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
				WHERE UD.UserID = @IN_UserID;

			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' AND ISNULL(@RBSBranchID, 0) <> 0 THEN ',' ELSE '' END, CASE WHEN ISNULL(@RBSBranchID, 0) <> 0 THEN @RBSBranchID ELSE '' END)
			WHERE TableColumn = 'BranchID' AND ISNULL(SelfData, 0) = 1;

			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' AND ISNULL(@RBSUserID, 0) <> 0 THEN ',' ELSE '' END, CASE WHEN ISNULL(@RBSUserID, 0) <> 0 THEN @RBSUserID ELSE '' END)
			WHERE TableColumn = 'UserID' AND ISNULL(SelfData, 0) = 1;

			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' AND ISNULL(@RBSRoleID, '') <> '' THEN ',' ELSE '' END, CASE WHEN ISNULL(@RBSRoleID, '') <> '' THEN @RBSRoleID ELSE '' END)
			WHERE (TableColumn = 'RoleID' OR TableColumn LIKE '%Roles') AND ISNULL(SelfData, 0) = 1;

			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' AND ISNULL(@RBSUserTypeID, 0) <> 0 THEN ',' ELSE '' END, CASE WHEN ISNULL(@RBSUserTypeID, 0) <> 0 THEN @RBSUserTypeID ELSE '' END)
			WHERE TableColumn = 'UserTypeID' AND ISNULL(SelfData, 0) = 1;

			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' AND ISNULL(@RBSDesignationID, 0) <> 0 THEN ',' ELSE '' END, CASE WHEN ISNULL(@RBSDesignationID, 0) <> 0 THEN @RBSDesignationID ELSE '' END)
			WHERE (TableColumn IN ('DesignationID', 'EmployeeDesignations') OR TableColumn LIKE '%Designations') AND ISNULL(SelfData, 0) = 1;

			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' AND ISNULL(@RBSDepartmentID, 0) <> 0 THEN ',' ELSE '' END, CASE WHEN ISNULL(@RBSDepartmentID, 0) <> 0 THEN @RBSDepartmentID ELSE '' END)
			WHERE (TableColumn = 'DepartmentID' OR TableColumn LIKE '%Departments') AND ISNULL(SelfData, 0) = 1;

			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' AND ISNULL(@RBSWorkShiftID, 0) <> 0 THEN ',' ELSE '' END, CASE WHEN ISNULL(@RBSWorkShiftID, 0) <> 0 THEN @RBSWorkShiftID ELSE '' END)
			WHERE TableColumn = 'WorkshiftID' AND ISNULL(SelfData, 0) = 1;

			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' AND ISNULL(@RBSNationalityID, 0) <> 0 THEN ',' ELSE '' END, CASE WHEN ISNULL(@RBSNationalityID, 0) <> 0 THEN @RBSNationalityID ELSE '' END)
			WHERE TableColumn = 'NationalityID' AND ISNULL(SelfData, 0) = 1;

			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' AND ISNULL(@RBSGenderID, 0) <> 0 THEN ',' ELSE '' END, CASE WHEN ISNULL(@RBSGenderID, 0) <> 0 THEN @RBSGenderID ELSE '' END)
			WHERE TableColumn = 'GenderID' AND ISNULL(SelfData, 0) = 1;

			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' AND ISNULL(@RBSTitleID, 0) <> 0 THEN ',' ELSE '' END, CASE WHEN ISNULL(@RBSTitleID, 0) <> 0 THEN @RBSTitleID ELSE '' END)
			WHERE TableColumn = 'TitleID' AND ISNULL(SelfData, 0) = 1;

			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' AND ISNULL(@RBSClientID, 0) <> 0 THEN ',' ELSE '' END, CASE WHEN ISNULL(@RBSClientID, 0) <> 0 THEN @RBSClientID ELSE '' END)
			WHERE TableColumn LIKE '%ClientID' AND ISNULL(SelfData, 0) = 1;

			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' AND ISNULL(@RBSEmployeeID, 0) <> 0 THEN ',' ELSE '' END, CASE WHEN ISNULL(@RBSEmployeeID, 0) <> 0 THEN @RBSEmployeeID ELSE '' END)
			WHERE (TableColumn IN ('EmployeeID', 'ResponsibleID', 'InchargeID', 'Approvers', 'Reviewers', 'ApproverID', 'ReportingHeadID') 
				OR TableColumn LIKE '%ByID' OR TableColumn LIKE '%ToID' OR TableColumn LIKE '%ToIDs' OR TableColumn LIKE '%ByIDs') AND ISNULL(SelfData, 0) = 1;

			UPDATE #temp_CmnGetFormRBSData
			SET DataValue = CONCAT(ISNULL(DataValue, ''), CASE WHEN ISNULL(DataValue, '') <> '' AND ISNULL(@RBSSupplierID, 0) <> 0 THEN ',' ELSE '' END, CASE WHEN ISNULL(@RBSSupplierID, 0) <> 0 THEN @RBSSupplierID ELSE '' END)
			WHERE (TableColumn LIKE '%Supplier' OR TableColumn LIKE '%SupplierID') AND ISNULL(SelfData, 0) = 1;
		END

		SET @RbsDataQuery = 'SELECT RowNo, ControlName, TableName, TableColumn, DataValue FROM #temp_CmnGetFormRBSData WHERE ISNULL(DataValue, '''') <> ''''';

		IF ISNULL(@IN_TableName, '') <> ''
			SET @RbsDataQuery = ('SELECT * INTO ' + @IN_TableName + ' FROM (' + @RbsDataQuery + ') TE')

		EXEC (@RbsDataQuery)
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetFormTableRBSCondition]'
GO

CREATE PROCEDURE [dbo].[spCmnGetFormTableRBSCondition] (@IN_FormID INT, @IN_UserID INT, @IN_MainTableName VARCHAR(255), 
	@IN_TableName VARCHAR(255), @OUT_RBSConditions NVARCHAR(MAX) OUTPUT)
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@RBSIterator INT = 0,
				@RBSDataVariableCount INT = 0,
				@OutputConditions NVARCHAR(4000) = '',
				@DataVariable VARCHAR(225) = '',
				@DataValue VARCHAR(225) = '',
				@RBSTableName VARCHAR(255) = ''

		DECLARE @RBSDataVariable TABLE (
				RowNo INT NOT NULL,
				ControlName NVARCHAR(200) NULL,
				TableName VARCHAR(255) NULL,
				TableColumn VARCHAR(255) NULL,
				DataValue NVARCHAR(MAX) NULL,
				Condition NVARCHAR(4000) NULL)

		INSERT INTO @RBSDataVariable (RowNo, ControlName, TableName, TableColumn, DataValue)
		EXEC spCmnGetFormRBSData @IN_FormID, @IN_UserID, ''

		SELECT @RBSDataVariableCount = COUNT(1) FROM @RBSDataVariable

		WHILE @RBSIterator < @RBSDataVariableCount
		BEGIN
			SET @RBSIterator = @RBSIterator + 1;
			SET @OutputConditions = ''
			SELECT @DataVariable = TableColumn, @DataValue = DataValue, @RBSTableName = TableName FROM @RBSDataVariable WHERE RowNo = @RBSIterator;

			IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @IN_TableName AND COLUMN_NAME = @DataVariable)
			BEGIN
				--IF @OutputConditions <> ''
				--	SET @OutputConditions = @OutputConditions + ' AND '

				IF @DataVariable = 'CompanyID'
					SET @OutputConditions = @OutputConditions + '(ISNULL(' + @DataVariable + ', 0) = 0 OR EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + @DataVariable + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + @DataValue + '''+'','') > 0)))';
				ELSE
					SET @OutputConditions = @OutputConditions + 'EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + @DataVariable + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + @DataValue + '''+'','') > 0))';

			    UPDATE @RBSDataVariable SET Condition = @OutputConditions WHERE RowNo = @RBSIterator; 
			END
		END

		SET @OutputConditions = '';

		SET @OutputConditions = ISNULL(SUBSTRING(((
		    SELECT DISTINCT ' AND ' + Condition   
            FROM @RBSDataVariable      
            FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','nvarchar(max)')), 6, 20000000), '') 

		SET @OUT_RBSConditions = @OutputConditions
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnDMLOnChangeControls]'
GO

CREATE PROCEDURE [dbo].[spCmnDMLOnChangeControls](
	@IN_BindValue NVARCHAR(100),
	@IN_ControlName VARCHAR(100),
	@IN_ControlValues NVARCHAR(1000),
	@IN_FillType NVARCHAR(50),
	@IN_ParentData NVARCHAR(50),
	@IN_FormID INT,
	@IN_UserID INT,
	@IN_ParentID VARCHAR(50))
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY

		DECLARE @ErrorMessage NVARCHAR(2000),
			@ErrorSeverity NVARCHAR(50),
			@ErrorState NVARCHAR(50),
			@SCount INT = 0,
			@DefaultValue NVARCHAR(1000) = '',
			@AdditionalConditions NVARCHAR(2000) = '',
			@ConditionValues NVARCHAR(MAX) = '',
			@Min INT = 0,
			@Max INT = 0,
			@OutString NVARCHAR(MAX) = '',
			@Query NVARCHAR(MAX) = '',
			@FkType INT = 0,
			@TableMin INT = 0,
			@TableCount INT = 0,
			@ColumnID INT = 0,
			@ControlType INT = 0,
			@ConditionStart NVARCHAR(50),
			@ConditionEnd NVARCHAR(50),
			@ButtonID INT = 0,
			@FkTable NVARCHAR(150) = '',
			@IsDatasource BIT = 0,
			@ColumnDefaultValue NVARCHAR(500) = '',
			@CMTypeValues VARCHAR(100) = '',
			@DataType INT = 0,
			@DecimalLength SMALLINT = 0,
			@FkColumn VARCHAR(100),
			@ControlID BIGINT,
			@RBSConditions NVARCHAR(MAX),
			@Limit VARCHAR(100),
			@OrderByColumn VARCHAR(100),
			@qry NVARCHAR(MAX),
			@CountQry NVARCHAR(MAX),
			@TableName VARCHAR(100),
			@CTEColumnnames NVARCHAR(MAX),
			@FkData VARCHAR(100),
			@ColumnControlType INT,
			@DisplayName NVARCHAR(100),
			@ColumnName VARCHAR(100),
			@SelectStmt NVARCHAR(MAX),
			@SelectColumnnames NVARCHAR(MAX),
			@FkDelete BIT,
			@FkNotActive BIT,
			@FkVersion BIT,
			@RBSBranchID INT, 
			@SplittedValue VARCHAR(500) = '',
			@ParentID VARCHAR(50) = '0',
			@OutVString NVARCHAR(MAX) = '',
			@VQuery NVARCHAR(MAX) = ''

		DECLARE @RBSDataVariable TABLE (
			RowNo INT NOT NULL,
			ControlName NVARCHAR(200) NULL,
			TableName VARCHAR(255) NULL,
			TableColumn VARCHAR(255) NULL,
			DataValue NVARCHAR(MAX) NULL)

		SELECT @RBSBranchID = ISNULL(ED.BranchID, '') FROM CmnUserDetails UD
			JOIN MstEmployeeDetails ED ON ED.ReferenceID = UD.TypeID	
		WHERE UD.UserID = @IN_UserID;

		IF @IN_ParentID <> ''
		BEGIN
			IF @IN_ParentID NOT IN ('', 'add', 'update')
			 SET @ParentID = @IN_ParentID;

			SELECT @FkTable = FkTable, @FkColumn = FkColumn, @FkData = FkData, @AdditionalConditions = AdditionalConditions, @DisplayName = DisplayName, @ColumnName = ColumnName, 
					@FkDelete = FkDelete, @FkNotActive = FkNotActive, @FkVersion = FkVersion
			FROM CmnControlColumns WHERE ColumnID = @IN_ControlName;

			SELECT @ControlID = FC.ControlID 
			FROM CmnFormTabs FT
				JOIN CmnGroupboxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.Name = @DisplayName AND FC.TableColumn = @ColumnName AND FC.ControlType = 19 AND FC.IsDeleted = 0
			WHERE FT.FormID = @IN_FormID AND FT.IsDeleted = 0;
			
			EXEC spCmnGetFormTableRBSCondition @IN_FormID, @IN_UserID, @FkTable, @FkTable, @RBSConditions OUTPUT;
			IF @RBSConditions <> ''
			BEGIN
				SET @RBSConditions = REPLACE(@RBSConditions, 'ISNULL(CompanyID', 'ISNULL(MT.CompanyID');
				SET @RBSConditions = REPLACE(@RBSConditions, 'dbo.fn_DataSplit(', 'dbo.fn_DataSplit(MT.');
				SET @RBSConditions = ' AND ' + @RBSConditions;		
			END

			SET @AdditionalConditions = CONCAT(CASE WHEN @AdditionalConditions = '' THEN '' ELSE ' MT.' END, @AdditionalConditions);
			IF CHARINDEX('AND ', @AdditionalConditions) > 0
			BEGIN
				 SET @AdditionalConditions = CONCAT(@AdditionalConditions, ' IN (''', @ParentID, ''')');
			END

			IF CHARINDEX('@1', @AdditionalConditions) > 0
			BEGIN
				 SET @AdditionalConditions = CONCAT('(PATINDEX(''%,'' + CONVERT(NVARCHAR(50), ', REPLACE(@AdditionalConditions, '@1', CONCAT(' )+'',%'', '',', @IN_BindValue, ','') > 0)')));
			END 
			SET @Limit = ''; 

			SELECT @SelectStmt = SUBSTRING((SELECT ',' + '''"' + ColumnName + '":"'' + REPLACE(REPLACE(ISNULL(CAST(' +
								CASE WHEN FC.ControlType = 2 AND ISNULL(SI.Value, '') <> '' AND FC.FkData <> '' THEN 'MT.'+ FC.ColumnName
									WHEN (FC.ControlType = 24 OR FC.ControlType = 25) THEN 
										CASE WHEN FC.FkType = 1 THEN ' SUBSTRING((SELECT '','' '+'+'+'(''{"Value":"'' + CAST(' + FC.FkColumn + ' AS NVARCHAR(MAX)) +''","Text":"''+ CAST('+ FC.FkData + ' AS NVARCHAR(MAX))' +'+''"}'') FROM CmnCodeMaster CM WHERE CM.Type=''' + FC.FkTable + ''' AND
													(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +
													ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0) '+
													' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
										WHEN FC.FkType = 2 THEN ' SUBSTRING((SELECT '','' '+'+'+'(''{"Value":"'' + CAST(' + FC.FkColumn + ' AS NVARCHAR(MAX)) +''","Text":"''+ CAST('+ FC.FkData + ' AS NVARCHAR(MAX))' +'+''"}'') FROM ' + FC.FkTable + ' JT WHERE ' + 
												'(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +							
													ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0)'+
												CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' THEN '' ELSE 
													CASE WHEN ISNULL(FC.AdditionalConditions, '') LIKE '% NULL %' OR ISNULL(FC.AdditionalConditions, '') LIKE '% NOT NULL %'
																OR ISNULL(FC.AdditionalConditions, '') LIKE '% = %' OR ISNULL(FC.AdditionalConditions, '') LIKE '% IN %' 
															THEN ' AND ' + FC.AdditionalConditions 
															ELSE '' END
												END +
												CASE WHEN ISNULL(CP.Value, '') = '' THEN '' ELSE ' AND '+ CP.Value END +
												CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(JT.IsDeleted, 0) = 0 ' END + 
												CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(JT.NotActive, 0) = 0 ' END + 
												CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(JT.IsCurrentVersion, 1) = 1 ' END +
												' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000)' 
										END 
									WHEN FC.FkType = 1 AND FC.ControlType <> 8 THEN ' SUBSTRING((SELECT '','' '+'+'+' REPLACE(REPLACE(CAST(' + FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') FROM CmnCodeMaster CM WHERE CM.Type=''' + FC.FkTable + ''' AND 																					
										(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +
										ISNULL( CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0) ' +
										' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) ' 
										WHEN FC.FkType = 2 AND FC.ControlType <> 8 THEN ' (SELECT TOP 1 REPLACE(REPLACE(CAST(' + FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') FROM ' + FC.FkTable + ' JT WHERE ' + 
											'(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +
											ISNULL(CONVERT(NVARCHAR(MAX), MT.' + CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' OR ISNULL(FC.AdditionalConditions, '') LIKE '% NULL%' OR ISNULL(FC.AdditionalConditions, '') LIKE '% NOT NULL%'
														OR ISNULL(FC.AdditionalConditions, '') LIKE '% = %' OR ISNULL(FC.AdditionalConditions, '') LIKE '% IN%' 
													THEN FC.ColumnName 
													ELSE FC.AdditionalConditions END + '), '''') + '','') > 0)'+ 
												CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' THEN '' 
												ELSE CASE WHEN ISNULL(FC.AdditionalConditions, '') LIKE '% NULL%' OR ISNULL(FC.AdditionalConditions, '') LIKE '% NOT NULL%'
														OR ISNULL(FC.AdditionalConditions, '') LIKE '% = %' OR ISNULL(FC.AdditionalConditions, '') LIKE '% IN%' 
													THEN ' AND ' + FC.AdditionalConditions 
													ELSE '' END END +' ' + CASE WHEN ISNULL(CP.Value, '') = '' THEN '' ELSE ' AND '+ CP.Value END + ')' 
										WHEN FC.FkType = 3 THEN ' SUBSTRING((SELECT '','' + CAST(' + FC.FkColumn + ' AS NVARCHAR(MAX)) + ''|''+' + FC.FkData + '+''|'' + CF.FileName
																FROM CmnFileUpload CF WHERE ' + FC.FkColumn + ' = MT.' + ColumnName + 
																' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
									WHEN FC.FkType = 0 AND FC.FkData <> '' THEN 
											'CASE WHEN CONVERT(NVARCHAR(50), MT.' + FC.FkData +', 105)= ''01-01-1900'' THEN ''''
													ELSE '+(CASE WHEN FC.DataType = 4 OR FC.DataType = 5 THEN 'CONVERT(NVARCHAR(MAX), MT.' + FC.FkData + ', 127)' ELSE 'CONVERT(NVARCHAR(MAX), MT.' + FC.FkData + ')' END)+' END'
										ELSE (CASE WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') <> '' THEN ' CAST('+ 'MT.' + ColumnName+' AS DECIMAL(32, '+ CAST((CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE DL.VALUE END) AS VARCHAR(5)) +'))' 
												WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') = '' THEN ' CAST('+ 'MT.' + ColumnName+ ' AS DECIMAL(32, '+ CAST((CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE 4 END) AS VARCHAR(5)) +'))'
												 ELSE 'CASE WHEN CONVERT(NVARCHAR(MAX), MT.' + ColumnName +', 105)= ''01-01-1900'' THEN ''''
														ELSE '+(CASE WHEN FC.DataType = 4 OR FC.DataType = 5 THEN 'CONVERT(NVARCHAR(MAX), MT.' + ColumnName + ', 127)' ELSE 'CONVERT(NVARCHAR(MAX), MT.' + ColumnName + ')' END)+' END' END) END + ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'') + ''"'''
			FROM CmnControlColumns FC 
				LEFT JOIN CmnColumnProperty CP ON CP.ColumnID = FC.ColumnID AND CP.Name = 'Condition' AND CP.IsDeleted = 0
				LEFT JOIN CmnColumnProperty DL ON DL.ColumnID = FC.ColumnID AND DL.Name = 'Decimal Length' AND DL.IsDeleted = 0
				LEFT JOIN CmnColumnProperty DDC ON DDC.ColumnID = FC.ColumnID AND DDC.Name = 'Decimal Currency' AND DDC.IsDeleted = 0
				LEFT JOIN CmnColumnProperty DCC ON DCC.ColumnID = FC.ColumnID AND DCC.Name = 'Currency Column' AND DCC.IsDeleted = 0
				LEFT JOIN CmnColumnProperty SI ON SI.ColumnID = FC.ColumnID AND SI.Name = 'Select by ID' AND SI.IsDeleted = 0
			WHERE FC.ControlID = @ControlID AND FC.IsDeleted = 0
			FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000);

			SELECT @CTEColumnnames = SUBSTRING((SELECT ',[' + ColumnName + ']'
										FROM CmnControlColumns FC WHERE FC.ControlID = @ControlID AND FC.IsDeleted = 0
										FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000);
			SELECT @SelectColumnnames = SUBSTRING((SELECT '+ '','' + ISNULL([' + ColumnName + '], '''')'
										FROM CmnControlColumns FC WHERE FC.ControlID = @ControlID AND FC.IsDeleted = 0
										FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 9, 4000000000);
			SET @OrderByColumn = 'MT.'+ @FkColumn + ' ASC';
			
			SET @qry = ';WITH GridFill ([Limit],' + @CTEColumnnames + ') AS (
							SELECT ROW_NUMBER() OVER (ORDER BY ' + @OrderByColumn + '), ' 
							+ @SelectStmt + ' FROM ' + @FkTable + ' MT '
							+ 'WHERE 1=1 '
							+ CASE WHEN @AdditionalConditions = '' THEN '' ELSE ' AND ' END + @AdditionalConditions
							+ CASE WHEN ISNULL(@FkDelete, 0) = 0 THEN '' ELSE ' AND MT.IsDeleted = 0 ' END
							+ CASE WHEN ISNULL(@FkNotActive, 0) = 0 THEN '' ELSE ' AND MT.NotActive = 0 ' END 
							+ CASE WHEN ISNULL(@FkVersion, 0) = 0 THEN '' ELSE ' AND MT.IsCurrentVersion = 1 ' END + @RBSConditions+ 
							CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @FkTable AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
									WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END+')
								SELECT ' + @SelectColumnnames + ' FROM GridFill '
							+ @Limit;
			EXEC (@qry);
	
			SET @CountQry = 'SELECT COUNT(1) FROM ' + @FkTable + ' MT '
								+ 'WHERE 1=1 '
								+ CASE WHEN @AdditionalConditions = '' THEN '' ELSE ' AND ' END + @AdditionalConditions
								+ CASE WHEN ISNULL(@FkDelete, 0) = 0 THEN '' ELSE ' AND MT.IsDeleted = 0 ' END
								+ CASE WHEN ISNULL(@FkNotActive, 0) = 0 THEN '' ELSE ' AND MT.NotActive = 0 ' END
								+ CASE WHEN ISNULL(@FkVersion, 0) = 0 THEN '' ELSE ' AND MT.IsCurrentVersion = 1 ' END + @RBSConditions+
								CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @FkTable AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
										WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END;
			EXEC (@CountQry);

		END
		ELSE
		BEGIN
			INSERT INTO @RBSDataVariable (RowNo, ControlName, TableName, TableColumn, DataValue)
			EXEC spCmnGetFormRBSData @IN_FormID, @IN_UserID, ''

			IF OBJECT_ID('tempdb..#tempControlBindValues') IS NOT NULL
				DROP TABLE #tempControlBindValues

			CREATE TABLE #tempControlBindValues (
				SNum INT NULL,
				ColumnName SYSNAME NULL,
				ControlName NVARCHAR(100) NULL,
				GroupBoxName NVARCHAR(200) NULL,
				ControlType VARCHAR(100) NULL, 
				DataType VARCHAR(100) NULL,
				ControlValue NVARCHAR(MAX) NULL,
				SQuery NVARCHAR(MAX) NULL,
				VQuery NVARCHAR(MAX) NULL,
				DataSource NVARCHAR(MAX) NULL,
				Visibility BIT NULL,
				[Readonly] BIT NULL,
				FKType INT NULL,
				IsDatasource INT NULL,
				Mandatory BIT NULL,
				DependentType SMALLINT NULL,
				ColumnID BIGINT NULL,
				ParentColumn VARCHAR(255) NULL,
				AdditionalConditions NVARCHAR(2000),
				ColumnOrder INT NULL,
				IsSelectAll BIT NULL)

			IF @IN_FillType <> '' 
			BEGIN
				SET @ButtonID = (SELECT CodemasterID FROM CmnCodemaster WHERE Typevalues = @IN_FillType AND MenuID = @IN_FormID AND Type = 'Menubutton' AND IsDeleted = 0);
			END

			SET @DecimalLength = ISNULL((SELECT TOP 1 CD.DecimalLength FROM MstCompanyDetails MC JOIN MstCountryDetails CD ON CD.ReferenceID = MC.CurrencyID WHERE MC.ParentCompanyID IS NULL ORDER BY MC.ReferenceID DESC), 4);

			IF OBJECT_ID('tempdb..#tempControlProcess') IS NOT NULL
						DROP TABLE #tempControlProcess

			CREATE TABLE #tempControlProcess (TableNum INT NOT NULL IDENTITY(1, 1), FkType SYSNAME NULL,
				FkTable SYSNAME NULL, DefaultValue NVARCHAR(MAX) NULL, AdditionalConditions NVARCHAR(4000) NULL,
				ColumnID INT NOT NULL, ControlType INT NOT NULL, CMTypeValues VARCHAR(255) NULL, DataType INT NULL, ColumnControlType INT NOT NULL)

			INSERT INTO #tempControlProcess (FkType, FkTable, DefaultValue, AdditionalConditions, ColumnID, ControlType, CMTypeValues, DataType, ColumnControlType)
			SELECT CASE WHEN ISNULL(FC.FkType, 0) = 0 AND FC.ControlType IN (2,8,24,25) THEN 1 ELSE FC.FkType END, FC.FkTable, @IN_BindValue, CC.AdditionalConditions, CC.ColumnID, FC.ControlType, CC.DefaultValue, FC.DataType, CC.ControlType
			FROM CmnFormDetails FD
				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.SearchApplicable = 0 AND FC.IsDeleted = 0 AND FC.TableColumn = @IN_ControlName
					AND ((@IN_FillType = '' AND FC.ButtonID = 0) OR (@IN_FillType <> '' AND FC.ButtonID = @ButtonID))
				JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.DependentFlag = 1 AND CC.IsDeleted = 0 
			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0
			ORDER BY CC.ColumnID ASC; 
		
			SELECT @TableCount = COUNT(1) FROM #tempControlProcess; 
			WHILE (@TableMin < @TableCount)
			BEGIN
				SET @DefaultValue = '';
				SET @AdditionalConditions = '';
				SET @ConditionValues = '';
				SET @TableMin = @TableMin + 1;
				SET @ConditionStart = '';
				SET @ConditionEnd = '';
				SET @DataType = 0;

				SELECT @FkType = FkType, @FkTable = FkTable, @DefaultValue = DefaultValue, @AdditionalConditions = AdditionalConditions, @ColumnID = ColumnID, 
						@ControlType = ControlType, @CMTypeValues = CMTypeValues, @DataType = DataType, @ColumnControlType = ColumnControlType
				FROM #tempControlProcess WHERE TableNum = @TableMin;
			
				IF @FkType = 1 AND ISNULL(@DefaultValue, '') = ''
					SET @DefaultValue = '0';

				IF @FkTable = 'Module'
					SET @DefaultValue = '';

				IF (@ControlType = 8 AND @IN_ControlValues <> '') OR CHARINDEX(',', @IN_ControlValues) > 0
				BEGIN
					SET @ConditionStart = ' IN(';
					SET @ConditionEnd = ')';
				END
				ELSE
				BEGIN
					SET @ConditionStart = ' = N''';
					SET @ConditionEnd = '''';
				END

				SELECT @ColumnDefaultValue = CC.DefaultValue, @ConditionValues = CASE WHEN CC.AdditionalConditions = '' THEN '' 
					ELSE dbo.fn_ConstractDependentConditions(CC.AdditionalConditions, @IN_ControlValues, @ControlType, '', '') END
				FROM CmnFormDetails FD
					JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
					JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
					JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.SearchApplicable = 0 AND FC.IsDeleted = 0 AND FC.TableColumn = @IN_ControlName
						AND ((@IN_FillType = '' AND FC.ButtonID = 0) OR (@IN_FillType <> '' AND FC.ButtonID = @ButtonID))
					JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0 AND CC.ColumnID = @ColumnID
				WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;
			
				IF ISNULL(@ConditionValues, '') = '' OR @ColumnControlType = 19
				BEGIN
					SET @ConditionValues = '';
				END
				ELSE IF ISNULL(@ColumnDefaultValue, '') = ''
				BEGIN
					SET @ConditionValues = @ConditionValues+ (CASE WHEN @IN_ParentData <> '' THEN (' = '+ @IN_BindValue) ELSE '' END);
				END
				
				IF @CMTypeValues = '' AND ISNULL(@AdditionalConditions, '') <> ''
				BEGIN
					SET @DefaultValue = '';
				END

				SET @SplittedValue = '';
				IF @DefaultValue <> '' AND @ControlType = 8
				BEGIN
					SET @SplittedValue = dbo.fn_SplitString(@DefaultValue, ',', 1);
				END
			
				INSERT INTO #tempControlBindValues
				SELECT 0 AS SNum, CC.ColumnName, CC.DisplayName, GB.Name, CC.ControlType, DT.TypeValues AS DataType, '',
					CASE WHEN CC.ControlType IN (2, 8) AND (ISNULL(CP.Value, 1) = 1 OR ISNULL(CC.DependentType, 0) IN (1, 3, 6)) AND ISNULL(CC.DependentType, 0) NOT IN (2, 4, 5, 7) THEN
						CASE WHEN CC.FkType = 1 THEN
							'SET @Dout = SUBSTRING((SELECT '','' + (''{"Value":"'' + REPLACE(REPLACE(CAST(CM.' + CC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(CM.' + CC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"}'')
																		FROM CmnCodeMaster CM WHERE CM.Type=''' + CC.FkTable + '''' +
																			CASE WHEN @ConditionValues = '' THEN (CASE WHEN ISNULL(CC.AdditionalConditions, '') = '' THEN '' ELSE ' AND ' + CC.AdditionalConditions END) ELSE @ConditionValues END +
																			CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + CC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
																			dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, 'CmnCodeMaster', CC.FkType) +
																			CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND + ISNULL(CM.IsDeleted, 0) = 0 ' END +
																			CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(CM.NotActive, 0) = 0 ' END + 
																			CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(CM.IsCurrentVersion, 1) = 1 ' END +
																			' ORDER BY ' + CASE WHEN ISNULL(CC.FkOrder, 0) = 1 THEN CC.FkData + ' ASC '
																													WHEN ISNULL(CC.FkOrder, 0) = 2 THEN CC.FkData + ' DESC ' 
																													WHEN ISNULL(CC.FkOrder, 0) = 3 THEN 'CM.OrderBy' 
																													WHEN ISNULL(CC.FkOrder, 0) = 4 THEN CC.FkColumn + ' ASC' 
																													ELSE 'CM.OrderBy' END + 
																		' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
						 WHEN CC.FkType = 2 THEN
							 ' SET @Dout = SUBSTRING((SELECT '','' + (''{"Value":"''+ REPLACE(REPLACE(CAST(MT.' + CC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(MT.' + CC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"}'')
																		FROM ' + CC.FkTable + ' MT WHERE 1=1 ' + 
																			CASE WHEN @ConditionValues = '' THEN (CASE WHEN ISNULL(CC.AdditionalConditions, '') = '' THEN '' ELSE ' AND ' + CC.AdditionalConditions END) ELSE @ConditionValues END+
																			CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + CC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
																			dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, CC.FkTable, CC.FkType) +
																			CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(MT.IsDeleted, 0) = 0 ' END + 
																			CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(MT.NotActive, 0) = 0 ' END + 
																			CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(MT.IsCurrentVersion, 1) = 1 ' END +
																		' ORDER BY ' + CASE WHEN ISNULL(CC.FkOrder, 0) = 1 THEN 'MT.'+ CC.FkData + ' ASC'
																												WHEN ISNULL(CC.FkOrder, 0) = 2 THEN 'MT.' + CC.FkData + ' DESC'
																												WHEN ISNULL(CC.FkOrder, 0) = 3 THEN 'MT.OrderBy'
																												WHEN ISNULL(CC.FkOrder, 0) = 4 THEN CC.FkColumn + ' ASC'
																												ELSE 'MT.' + CC.FkData END +
																		' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
							ELSE '' END					 
					ELSE (CASE WHEN ((CC.FkType = 0 AND ISNULL(CC.DependentType, 0) <> 7) OR CC.DependentType IN (3, 4)) THEN ''
							ELSE CASE WHEN CC.DependentType = 2 AND CC.ControlType IN (25) THEN 
									CASE WHEN CC.FkType = 1 THEN
										'SET @Dout = (SELECT ISNULL(SUBSTRING(((SELECT '','' + (''{"Text":"''+ REPLACE(REPLACE(CAST(' + CC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Value":"''+ REPLACE(REPLACE(CAST(' + CC.FkColumn+ ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"}'')
															FROM CmnCodeMaster WHERE Type = ''' + CC.FkTable + ''' ' + 
															CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
															CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
															CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues +
															' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)'')), 2, 20000000), ''''))'
									WHEN CC.FkType = 2 THEN
										'SET @Dout = (SELECT ISNULL(SUBSTRING(((SELECT '','' + (''{"Text":"''+ REPLACE(REPLACE(CAST(' + CC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Value":"''+ REPLACE(REPLACE(CAST(' + CC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"}'') 
															FROM ' + CC.FkTable + ' WHERE 1=1 ' + 
															CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
															CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
															CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues + 
															' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''nvarchar(max)'')), 2, 20000000), ''''))'
									END
								WHEN CC.DependentType = 2 AND CC.ControlType IN (24) THEN 
									CASE WHEN CC.FkType = 1 THEN
										'SET @Dout = (SELECT ISNULL(SUBSTRING(((SELECT '','' + CAST(' + CC.FkData + ' AS NVARCHAR(MAX))
															FROM CmnCodeMaster WHERE Type = ''' + CC.FkTable + ''' ' + 
															CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
															CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
															CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues +
															' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)'')), 2, 20000000), ''''))' 
									WHEN CC.FkType = 2 THEN
										'SET @Dout = (SELECT ISNULL(SUBSTRING(((SELECT '','' + CAST(' + CC.FkData + ' AS NVARCHAR(MAX))
															FROM ' + CC.FkTable + ' WHERE 1=1 ' + 
															CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
															CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
															CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues + 
															' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''nvarchar(max)'')), 2, 20000000), ''''))'
									END
								WHEN ISNULL(CC.DependentType, 0) = 7 THEN
									CASE WHEN CC.FkType = 1 THEN 
										'SELECT TOP(1) @Dout = ' + CC.FkData + ' FROM CmnCodeMaster WHERE Type = ''' + CC.FkTable + ''' ' + ' AND ' + CC.FkColumn + ' = ' + @IN_ControlValues +
											CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
											CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
											CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END
									WHEN CC.FkType = 2 THEN 
										'SET @Dout = (SELECT  ' + (CASE WHEN CC.DataType = 8 AND ISNULL(DL.VALUE, '') <> '' THEN 'CAST('+ CC.FkData+' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE DL.VALUE END AS VARCHAR(5))+'))' 
																					WHEN CC.DataType = 8 AND ISNULL(DL.VALUE, '') = '' THEN 'CAST('+ CC.FkData+ ' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE 4 END AS VARCHAR(5))+'))' ELSE CC.FkData END)
														+ ' FROM ' + CC.FkTable + ' WHERE ' + CC.FkColumn + ' = ' + @IN_ControlValues +
															CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
															CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
															CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + ')'
									WHEN CC.FkType = 0 AND (CC.DefaultValue <> '' AND PATINDEX(CONCAT('%,', CAST(@IN_ControlValues AS VARCHAR(50)), ',%'), CONCAT(',', CC.DefaultValue, ',')) > 0) THEN 
										'SELECT TOP(1) @Dout = AdditionalConditions FROM CmnControlColumns WHERE ControlID = ' + CAST(CC.ControlID AS NVARCHAR) + 'AND ColumnID = ' + CAST(@ColumnID AS NVARCHAR) + 
											CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END
									END	
								WHEN CC.FkType = 1 THEN 'SELECT TOP(1) @Dout = ' + CC.FkData + ' FROM CmnCodeMaster WHERE Type = ''' + CC.FkTable + ''' ' + 
										CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
										CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
										CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues 
								ELSE 'SELECT TOP(1) @Dout = ' + (CASE WHEN CC.DataType = 8 AND ISNULL(DL.VALUE, '') <> '' THEN 'CAST('+ CC.FkData+' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE DL.VALUE END AS VARCHAR(5))+'))' 
																			WHEN CC.DataType = 8 AND ISNULL(DL.VALUE, '') = '' THEN 'CAST('+ CC.FkData+ ' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE 4 END AS VARCHAR(5))+'))' 
																			WHEN CC.ControlType IN (5, 15, 20) AND CC.DataType IN (4, 5) THEN 'FORMAT(' + CC.FkData + ', ''ddd, dd MMM yyyy HH:mm:ss'')'
																			WHEN CC.ControlType IN (4, 14) AND CC.DataType IN (4, 5) THEN 'CASE WHEN CONVERT(VARCHAR(10),' + CC.FkData +', 105)= ''01-01-1900'' THEN ''''
																																			ELSE CONVERT(VARCHAR(10),' + CC.FkData + ', 105)END'
																			ELSE CC.FkData END)
												+ ' FROM ' + CC.FkTable + ' WHERE 1=1 ' + 
													CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
													CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
													CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues  END
							END)
						END as SQuery,
						CASE WHEN CC.DependentType = 2 AND CC.ControlType IN (24) THEN 
								CASE WHEN CC.FkType = 1 THEN
									'SET @Vout = (SELECT ISNULL(SUBSTRING(((SELECT '','' + CAST(' + CC.FkColumn + ' AS NVARCHAR(MAX))
														FROM CmnCodeMaster WHERE Type = ''' + CC.FkTable + ''' ' + 
														CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
														CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
														CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues +
														' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)'')), 2, 20000000), ''''))' 
								WHEN CC.FkType = 2 THEN
									'SET @Vout = (SELECT ISNULL(SUBSTRING(((SELECT '','' + CAST(' + CC.FkColumn + ' AS NVARCHAR(MAX))
														FROM ' + CC.FkTable + ' WHERE 1=1 ' + 
														CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
														CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
														CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues + 
														' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''nvarchar(max)'')), 2, 20000000), ''''))'
								END
					ELSE ''	END AS VQuery, 
					'' AS DataSource, CC.Visibility, CC.Readonly, CC.FkType, CASE WHEN (ISNULL(CP.Value, 1) = 1 OR ISNULL(CC.DependentType, 0) IN (1, 3, 6)) AND ISNULL(CC.DependentType, 0) NOT IN (2, 4, 5, 7) THEN 1 ELSE 0 END, 
					CC.IsMandatory, CC.DependentType, CC.ColumnID,
					CASE WHEN PATINDEX('%@1%', CASE WHEN ISNULL(CC.DependentType, 0) = 7 THEN '' ELSE @AdditionalConditions END) > 0 THEN dbo.fn_SplitString(CASE WHEN ISNULL(CC.DependentType, 0) = 7 THEN '' ELSE @AdditionalConditions END, '@1', 1) ELSE '' END,
					@AdditionalConditions, CC.ColumnOrder, ISNULL(CC.IsSelectAll, 0)
				FROM CmnFormDetails FD
					JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
					JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
					JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.SearchApplicable = 0 AND FC.IsDeleted = 0 AND FC.TableColumn = @IN_ControlName AND (@IN_FillType = '' OR (@IN_FillType <> '' AND FC.ButtonID = @ButtonID))
					JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0 AND CC.ColumnID = @ColumnID 
						AND ((ISNULL(CC.DependentType, 0) <> 7 AND ((PATINDEX('%!=%', ISNULL(CC.DefaultValue, '')) > 0 AND 
							(PATINDEX('%,' + CAST((ISNULL(CONVERT(NVARCHAR(MAX), CASE WHEN @FkType = 1 OR @DataType = 3 OR CC.ControlType = 19 
									OR (CC.DefaultValue <> '' AND (@FkType = 2 OR @FkType = 3) AND @IN_ParentData = '') THEN (CASE WHEN @SplittedValue <> '' THEN @SplittedValue ELSE @DefaultValue END)
								ELSE (CASE WHEN @IN_ParentData <> '' THEN @IN_ParentData ELSE '' END) END), '')) AS VARCHAR(50)) + ',%', ',' + REPLACE(ISNULL(CC.DefaultValue, ''), '!=', '') + ',') = 0))
						OR (PATINDEX('%!=%', ISNULL(CC.DefaultValue, '')) = 0 AND (PATINDEX('%,' + CAST((ISNULL(CONVERT(NVARCHAR(MAX), CASE WHEN @FkType = 1 OR @DataType = 3 OR CC.ControlType = 19 
									OR (CC.DefaultValue <> '' AND (@FkType = 2 OR @FkType = 3) AND @IN_ParentData = '') THEN (CASE WHEN @SplittedValue <> '' THEN @SplittedValue ELSE @DefaultValue END)
								ELSE (CASE WHEN @IN_ParentData <> '' THEN @IN_ParentData ELSE '' END) END), '')) AS VARCHAR(50)) + ',%', ',' + REPLACE(ISNULL(CC.DefaultValue, ''), '!=', '') + ',') > 0)))) OR (ISNULL(CC.DependentType, 0) = 7))
					JOIN CmnCodeMaster CT ON CT.Type = 'Control Type' AND CT.CodemasterID = CC.ControlType AND CT.IsDeleted = 0
					JOIN CmnCodeMaster DT ON DT.Type = 'Data Type' AND DT.CodemasterID = CC.DataType AND DT.IsDeleted = 0
						LEFT JOIN CmnColumnProperty CP ON CP.ColumnID = CC.ColumnID AND CP.IsDeleted = 0 AND CP.Name = 'Datasource'
						LEFT JOIN CmnColumnProperty DL ON DL.ColumnID = CC.ColumnID AND DL.Name = 'Decimal Length' AND DL.IsDeleted = 0
						LEFT JOIN CmnColumnProperty DDC ON DDC.ColumnID = CC.ColumnID AND DDC.Name = 'Decimal Currency' AND DDC.IsDeleted = 0
						LEFT JOIN CmnColumnProperty DCC ON DCC.ColumnID = CC.ColumnID AND DCC.Name = 'Currency Column' AND DCC.IsDeleted = 0
						LEFT JOIN @RBSDataVariable RBS ON RBS.TableName = CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
																							WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') 
																								ELSE ISNULL(FD.TableName, '') END AND RBS.TableColumn = CC.ColumnName
				WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;	
			END
			
			UPDATE #tempControlBindValues
			SET @SCount = SNum = @SCount + 1
			WHERE SQuery <> ''

			SELECT @Min = MIN(SNum), @Max = MAX(SNum) FROM #tempControlBindValues WHERE SNum <> 0;

			WHILE (@Min <> 0 AND @Min <= @Max) 
			BEGIN
				SELECT @OutString = '', @Query = '', @OutVString = '', @VQuery = ''
				IF @DefaultValue <> '0' OR @DefaultValue = '' OR @DataType = 3 
				BEGIN
					SELECT @Query = SQuery, @VQuery = VQuery, @IsDatasource = IsDatasource, @ControlType = ControlType FROM #tempControlBindValues WHERE SNum = @Min;
					EXEC sp_executesql @Query, N'@Dout NVARCHAR(MAX) OUTPUT', @OutString OUTPUT
					IF @ControlType = 24
					BEGIN
						EXEC sp_executesql @VQuery, N'@Vout NVARCHAR(MAX) OUTPUT', @OutVString OUTPUT
						SET @OutString = ('{"Text":"'+ @OutString+ '","Value":"'+ @OutVString+ '"}');
					END 
				END			

				UPDATE #tempControlBindValues
				SET DataSource = CASE WHEN (ControlType = 2 OR ControlType = 8) AND @IsDatasource = 1 THEN @OutString
								ELSE '' END,
						ControlValue = CASE WHEN (ControlType <> 2 AND ControlType <> 8) OR @IsDatasource = 0 OR DependentType = 7 THEN @OutString 
								ELSE '' END
				WHERE SNum = @Min;

				SET @Min = @Min + 1;
			END

			SELECT ColumnName, ControlName, GroupBoxName, ControlType, DataType, '[' + ISNULL(DataSource, '') + ']' AS DataSource, ControlValue, 
				Visibility, Readonly, IsDatasource, Mandatory, DependentType, ColumnID, ISNULL(ParentColumn, '') AS ParentColumn, 
				AdditionalConditions, IsSelectAll
			FROM #tempControlBindValues ORDER BY ColumnOrder;
		END

	END TRY
	BEGIN CATCH
	
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnFileDownload]'
GO

CREATE PROCEDURE [dbo].[spCmnFileDownload](
	@IN_FormID INT,
	@IN_FileID INT
)
AS
BEGIN
  SET NOCOUNT ON

	BEGIN TRY	
		DECLARE @ErrorMessage NVARCHAR(2000), @ErrorSeverity NVARCHAR(50), @ErrorState NVARCHAR(50);
	  
		SELECT FU.CreatedDate, UD.Username, FU.FilePath, FU.FileName, FU.Checksum, FU.FileExtension
		FROM CmnFileUpload FU
			JOIN CmnUserDetails UD ON UD.UserID = FU.CreatedBy
		WHERE ReferenceID = @IN_FileID;
	
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnFillControl]'
GO

CREATE PROCEDURE [dbo].[spCmnFillControl](
	@IN_MainID INT,
	@IN_FormID INT,
	@IN_UserID INT, 
	@IN_GUIID NVARCHAR(500), 
	@IN_Type VARCHAR(500), 
	@IN_SubDataID INT,
	@IN_FillType VARCHAR(50))
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY

		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@FormType INT = ISNULL((SELECT FD.FormType FROM CmnFormDetails FD WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0), 0),
				@AdditionalCondition NVARCHAR(MAX) = '',
				@TableName SYSNAME = '',
				@ControlID BIGINT = 0,
				@ColumnID INT = 0,
				@PropertyCount INT = 0,
				@IsControlBased BIT = 0,
				@IdentityColumn SYSNAME = '',
				@SCount INT = 0,
				@Min INT = 0,
				@Max INT = 0,
				@OutString NVARCHAR(MAX),
				@Query NVARCHAR(MAX),
				@IsReturnFill BIT = 0,
				@FkShowActive BIT = 0,
				@ControlType VARCHAR(100) = '',
				@ControlTypeID INT = 0,
				@DQuery NVARCHAR(MAX) = '',
				@FileString NVARCHAR(MAX),
				@DSCount INT = 0,
				@PQuery NVARCHAR(MAX),
				@POutString NVARCHAR(MAX),
				@ButtonID INT = 0,
				@MQuery NVARCHAR(MAX),
				@PropString NVARCHAR(MAX) = '',
				@BQuery NVARCHAR(MAX) = '',
				@BString NVARCHAR(MAX) = '',
				@UserProfileID INT = 0,
				@FormID INT = @IN_FormID,
				@CheckForm INT = 0,
				@TabID VARCHAR(100) = '',
				@GroupID VARCHAR(100) = '',
				@IsParentFill INT = 0,
				@Mandatory VARCHAR(255) = '',
				@DecimalLength SMALLINT = 0,
				@RBSConditions NVARCHAR(MAX) = '',
				@MainTableName VARCHAR(255) = '',
				@DString NVARCHAR(MAX) = '', 
				@DefaultValue NVARCHAR(MAX) = '',
				@Name NVARCHAR(100) = '',
				@ColumnNames VARCHAR(MAX) = '',
				@TableColumn VARCHAR(100) = '',
				@ColumnName VARCHAR(MAX) = '',
				@ValueQuery NVARCHAR(MAX) = '',
				@VOutString VARCHAR(MAX) = '',
				@FkType INT = 0,
				@VisibleCount INT = 0,
				@HideCount INT = 0,
				@FkColumn VARCHAR(100) = '',
				@FkTable VARCHAR(100) = '',
				@FilterConditions VARCHAR(MAX) = '',
				@TextName NVARCHAR(MAX) = '',
				@ReplacedColumnName NVARCHAR(MAX) = '',
				@TextQuery NVARCHAR(MAX) = '',
				@ControlValue VARCHAR(MAX) = '',
				@ControlAdditionalCondition NVARCHAR(MAX) = '',
				@KeyColumn VARCHAR(255) = ''

		DECLARE @RBSDataVariable TABLE (
			RowNo INT NOT NULL,
			ControlName NVARCHAR(200) NULL,
			TableName VARCHAR(255) NULL,
			TableColumn VARCHAR(255) NULL,
			DataValue NVARCHAR(MAX) NULL)

		INSERT INTO @RBSDataVariable (RowNo, ControlName, TableName, TableColumn, DataValue)
		EXEC spCmnGetFormRBSData @IN_FormID, @IN_UserID, ''
			
		SET @UserProfileID = ISNULL((SELECT UP.ProfileID FROM CmnUserDetails UP WHERE UP.UserID = @IN_UserID), 0);
		SET @DecimalLength = ISNULL((SELECT TOP 1 CD.DecimalLength FROM MstCompanyDetails MC JOIN MstCountryDetails CD ON CD.ReferenceID = MC.CurrencyID WHERE MC.ParentCompanyID IS NULL ORDER BY MC.ReferenceID DESC), 4);

		IF @IN_FillType <> '' 
		BEGIN
			SET @ButtonID = (SELECT CodemasterID FROM CmnCodemaster WHERE Typevalues = @IN_FillType AND MenuID = @IN_FormID AND Type = 'Menubutton' AND IsDeleted = 0);
		END

		SELECT @TableName = TableName , @IdentityColumn = KeyColumn FROM CmnFormDetails WHERE FormID = @IN_FormID AND IsDeleted = 0;

		IF ISNULL(@TableName, '') = ''
		BEGIN
			SELECT TOP 1 @TableName = FT.TableName, @IdentityColumn = FT.KeyColumn
			FROM CmnFormDetails FD
				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
					AND ISNULL(FT.TableName, '') <> ''
			WHERE FD.FormID = @IN_FormID
			ORDER BY FT.TabOrder;
		END
		IF ISNULL(@TableName, '') = ''
		BEGIN
			SELECT TOP 1 @TableName = FG.TableName, @IdentityColumn = FG.KeyColumn
			FROM CmnFormDetails FD
				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
				JOIN CmnGroupBoxes FG ON FG.TabID = FT.TabID AND FG.IsDeleted = 0
					AND ISNULL(FG.TableName, '') <> ''
			WHERE FD.FormID = @IN_FormID
			ORDER BY FT.TabOrder, FG.GroupOrder;
		END

		IF @FormType <> 2
			SET @MQuery = ('SELECT UD.UserName, MT.ModifiedDate FROM '+ @TableName + ' MT JOIN CmnUserDetails UD ON UD.UserID = MT.ModifiedBy'+
						' WHERE MT.' + @IdentityColumn + ' = ' + CONVERT(VARCHAR(50), @IN_MainID))		
		ELSE
			SET @MQuery = ('SELECT TOP 1 UD.UserName, MT.ModifiedDate FROM '+ @TableName + ' MT JOIN CmnUserDetails UD ON UD.UserID = MT.ModifiedBy'+
						' WHERE MT.IsDeleted = 0 ORDER BY ' + @IdentityColumn + ' DESC')	

		EXEC (@MQuery)

		IF @FormType = 5
		BEGIN
			IF @IN_Type = 'Parent' AND @IN_MainID <> 0
				SELECT TOP 1 @TableName = CASE WHEN ISNULL(CC.FkTable, '') = '' THEN FC.FkTable ELSE CC.FkTable END, @ControlID = FC.ControlID, @ColumnID = CC.ColumnID
				FROM CmnFormDetails FD
					JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
					JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
					JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FC.SearchApplicable = 1
						JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0
						JOIN CmnColumnProperty CP ON CP.ColumnID <> CC.ColumnID
				WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0
				ELSE
				SELECT TOP 1 @TableName = CASE WHEN ISNULL(CC.FkTable, '') = '' THEN FC.FkTable ELSE CC.FkTable END, @ControlID = FC.ControlID, @ColumnID = CC.ColumnID
				FROM CmnFormDetails FD
					JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
					JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
					JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FC.SearchApplicable = 1
					JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0
					JOIN CmnColumnProperty CP ON CP.ColumnID = CC.ColumnID AND CP.IsDeleted = 0
				WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0
				
			IF @TableName = 'CmnFormDetails'
				SET @IN_FormID = @IN_MainID
		END
		ELSE IF @FormType = 2
		BEGIN
		SELECT TOP 1 @ControlID = FC.ControlID FROM CmnFormDetails FD
			JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
			JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
 			JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FC.IsIdentity = 1
 		WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0; 
	 END 
		
		SET @PropertyCount = 0;
		SELECT @PropertyCount = COUNT(1) FROM CmnColumnProperty WHERE ColumnID = @ColumnID;

		IF @PropertyCount = 0 AND @FormType = 5
		BEGIN
			SET @IsControlBased = 0;
			SET @IsParentFill = 0;
			SET @AdditionalCondition = '';
		END
		ELSE
		BEGIN 
			SELECT @IsControlBased = Value FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Control Based' AND IsDeleted = 0;
			SELECT @IsParentFill = Value FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Parent Fill' AND IsDeleted = 0;
			SELECT @Mandatory = Value FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Mandatory ID' AND IsDeleted = 0; 
		END

	 IF @TableName = 'CmnGroupBoxes' AND @IsControlBased = 1
		SET @GroupID = @IN_SubDataID;
	 ELSE IF @TableName = 'CmnFormTabs' AND @IsControlBased = 1
		SET @TabID = @IN_SubDataID;	 
		
	 IF @IN_MainID = 0 AND @FormType = 5
	BEGIN 
		 IF @TableName = 'CmnGroupBoxes' AND @IsControlBased = 1
			 SET @GroupID = @Mandatory;
		ELSE IF @TableName = 'CmnFormTabs' AND @IsControlBased = 1
			 SET @TabID = @Mandatory;
		ELSE IF @IsControlBased = 0
			 SELECT @IN_FormID = Value FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Form ID' AND IsDeleted = 0;
	 END 
	 
	 IF @IsControlBased = 1
		 SET @IN_FormID = @FormID;
	 ELSE IF @IsControlBased = 0 AND @IN_SubDataID <> 0
	 BEGIN
		 SELECT @CheckForm = Value FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Form ID' AND IsDeleted = 0;
		 SET @IN_FormID = @CheckForm;
	END

	 IF @IN_Type <> 'Parent' AND @FormType = 5 AND @IsControlBased <> 1
		SET @IN_MainID = @IN_SubDataID; 
	 ELSE IF @IsControlBased = 1
		 SET @IN_MainID = @IN_MainID; 

	IF @FormType = 2
		SELECT @AdditionalCondition= AdditionalConditions FROM CmnFormControls WHERE ControlID = @ControlID;	 
 
	EXEC spCmnFileUpload 'Clear', @IN_FormID, @IN_UserID, @IN_GUIID, '', '', '', '', 0, '', '','' 
 
	SET @IdentityColumn = ISNULL((SELECT FD.KeyColumn FROM CmnFormDetails FD	WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0) , ''); 
	SET @SCount = 0;

	IF OBJECT_ID('tempdb..#tempFormControlsValue') IS NOT NULL
		DROP TABLE #tempFormControlsValue

	CREATE TABLE #tempFormControlsValue (
		SNum INT NOT NULL IDENTITY(1,1),
		SQuery NVARCHAR(MAX) NULL,
		ControlName VARCHAR(255) NULL,
		ControlType VARCHAR(100) NULL,
		ControlTypeId INT NULL,
		DataType VARCHAR(100) NULL,
		TableColumn SYSNAME NULL,
		ControlValue NVARCHAR(MAX) NULL,
		TabOrder INT NULL,
		GroupOrder INT NULL,
		ControlOrder INT NULL,
		DQuery NVARCHAR(MAX) NULL,
		DataSource NVARCHAR(MAX) NULL,
		SelectApplicable BIT NULL,
		IsReturnFill BIT NULL,
		FkShowActive BIT NULL,
		FillEvent VARCHAR(MAX) NULL,
		FillType BIT NULL,
		PreviousValue NVARCHAR(MAX) NULL,
		DateDifference INT NULL,
		PQuery NVARCHAR(MAX) NULL,
		DefaultValue NVARCHAR(255) NULL,
		ReadOnly BIT NULL,
		IsEncrypt BIT NULL,
		GroupboxName VARCHAR(255) NULL,
		ControlID INT NULL,
		TableName VARCHAR(100) NULL,
		AdditionalCondition NVARCHAR(MAX),
		KeyColumn VARCHAR(255) NULL)

	IF OBJECT_ID('tempdb..#tempAllTableValues') IS NOT NULL
		DROP TABLE #tempAllTableValues

	CREATE TABLE #tempAllTableValues ( 
		TableName SYSNAME NULL,
		IdentityColumn SYSNAME NULL)

	INSERT INTO #tempAllTableValues
	SELECT CASE WHEN @IN_FillType <> '' AND FC.ButtonID = @ButtonID AND (FC.ButtonDmlType = 0 OR FC.ButtonDmlType = 1) THEN FD.TableName 
		ELSE CASE WHEN LEN(GB.TableName) > 0 THEN GB.TableName
				WHEN LEN(FT.TableName) > 0 THEN FT.TableName
				WHEN LEN(FD.TableName) > 0 THEN FD.TableName END END,
		FC.TableColumn AS IdentityColumn
	FROM CmnFormDetails FD
		JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
		JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0 
 		JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsIdentity = 1 AND FC.IsDeleted = 0 AND FC.IsDeleted = 0 AND 
													(@IN_FillType = '' OR (@IN_FillType <> '' AND FC.ButtonID = @ButtonID)) AND FC.DefaultValue <> 'Parent ID' 
	WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0 ORDER BY GB.GroupOrder;
		
	IF OBJECT_ID('tempdb..#tempTableValues') IS NOT NULL
		DROP TABLE #tempTableValues 

	CREATE TABLE #tempTableValues ( 
		TableName SYSNAME NULL,
		IdentityColumn SYSNAME NULL)

	INSERT INTO #tempTableValues SELECT DISTINCT(TableName), IdentityColumn FROM #tempAllTableValues;

	SET @MainTableName = ISNULL((SELECT ISNULL(TableName, '') FROM CmnFormDetails WHERE FormID = @IN_FormID), '')

	EXEC spCmnGetFormTableRBSCondition @IN_FormID, @IN_UserID, @MainTableName, @MainTableName, @RBSConditions OUTPUT

	IF ISNULL(@RBSConditions, '') <> ''
	BEGIN
		SET @RBSConditions = REPLACE(@RBSConditions, 'ISNULL(CompanyID', 'ISNULL(PCT.CompanyID');
		SET @RBSConditions = REPLACE(@RBSConditions, 'dbo.fn_DataSplit(', 'dbo.fn_DataSplit(PCT.');	
	END
		
	INSERT INTO #tempFormControlsValue(SQuery, ControlName, ControlType, ControlTypeId, DataType, TableColumn, ControlValue, 
		TabOrder, GroupOrder, ControlOrder, DQuery, DataSource, SelectApplicable, IsReturnFill, FkShowActive, FillEvent, FillType, 
		PQuery, PreviousValue, DateDifference, DefaultValue, ReadOnly, IsEncrypt, GroupboxName, ControlID, TableName, AdditionalCondition, KeyColumn)
	SELECT 'SET @SQOut = ISNULL((SELECT TOP 1 ' + 
							CASE WHEN FC.DefaultValue = 'Parent ID' THEN (CASE WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') <> '' THEN 'CAST('+ FC.FkData+' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE DL.VALUE END AS VARCHAR(5))+'))' 
																			WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') = '' THEN 'CAST('+ FC.FkData+ ' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE 4 END AS VARCHAR(5))+'))' ELSE FC.FkData END) +' FROM '+FC.FkTable+' WHERE '+
								CASE WHEN @FormType = 2 THEN ' IsDeleted = 0 '+ CASE WHEN @AdditionalCondition <> '' THEN 'AND '+ @AdditionalCondition ELSE '' END +' ORDER BY '+FC.FkColumn+' DESC'
								ELSE FC.FkColumn+' = '+CONVERT(VARCHAR, @IN_MainID) END
							ELSE 
								CASE WHEN FC.ControlType IN (5, 15, 20) AND FC.DataType IN (4, 5) THEN 'FORMAT(' + FC.TableColumn + ', ''ddd, dd MMM yyyy HH:mm:ss'')'
								WHEN FC.ControlType IN (4, 14) AND FC.DataType IN (4, 5) THEN 'CASE WHEN CONVERT(VARCHAR(10),' + FC.TableColumn +', 105)= ''01-01-1900'' THEN ''''
																																										ELSE CONVERT(VARCHAR(10),' + FC.TableColumn + ', 105)END'
								WHEN FC.ControlType IN (16) AND FC.DataType IN (1,2) THEN 
														'(SELECT '+CASE WHEN @FormType = 2 THEN ' TOP 1 ' ELSE '' END+'''{''''Text'''':'' + FU.OriginalFileName + '',''''Value'''':'' + CAST(FU.ReferenceID AS VARCHAR(50)) + ''}'' FROM ' +
																CASE WHEN LEN(GB.TableName) > 0 THEN GB.TableName
																		WHEN LEN(FT.TableName) > 0 THEN FT.TableName
																		WHEN LEN(FD.TableName) > 0 THEN FD.TableName END +
																				' MT JOIN CmnFileUpload FU ON FU.ReferenceID = MT.' + FC.TableColumn + ' WHERE MT.IsDeleted = 0 '+
																				CASE WHEN @FormType = 2 THEN CASE WHEN @AdditionalCondition <> '' THEN 'AND MT.'+ @AdditionalCondition ELSE ' AND 1=1 ' END +' ORDER BY MT.'+FC.FkColumn+' DESC' ELSE ' AND MT.' + @IdentityColumn + ' = ' + CAST(@IN_MainID AS VARCHAR(50)) + CASE WHEN @AdditionalCondition <> '' THEN @AdditionalCondition ELSE '' END END+ ')' 
							WHEN FC.ControlType IN (17) AND FC.DataType IN (1,2) THEN 
													'(SELECT '+CASE WHEN @FormType = 2 THEN ' TOP 1 ' ELSE '' END+'''{''''Text'''':'' + FU.OriginalFileName + '',''''Value'''':'' + CAST(FU.ReferenceID AS VARCHAR(50)) + '',''''File'''':'' + FU.FileName + ''}'' FROM ' +
															CASE WHEN LEN(GB.TableName) > 0 THEN GB.TableName
																		WHEN LEN(FT.TableName) > 0 THEN FT.TableName
																		WHEN LEN(FD.TableName) > 0 THEN FD.TableName END +
																				' MT JOIN CmnFileUpload FU ON FU.ReferenceID = MT.' + FC.TableColumn + ' WHERE MT.IsDeleted = 0 '+
																				CASE WHEN @FormType = 2 THEN CASE WHEN @AdditionalCondition <> '' THEN ' AND MT.'+ @AdditionalCondition ELSE ' AND 1=1 ' END +' ORDER BY MT.'+FC.FkColumn+' DESC' ELSE ' AND MT.' + @IdentityColumn + ' = ' + CAST(@IN_MainID AS VARCHAR(50)) + CASE WHEN @AdditionalCondition <> '' THEN @AdditionalCondition ELSE '' END END+ ')' 
																				 
								WHEN FC.ControlType IN (24,25) THEN ''
								WHEN FC.FkType = 0 AND FC.FkData <> '' AND FC.DefaultValue = '' THEN (CASE WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') <> '' THEN 'CAST('+ FC.FkData+' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE DL.VALUE END AS VARCHAR(5))+'))' 
																			WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') = '' THEN 'CAST('+ FC.FkData+ ' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE 4 END AS VARCHAR(5))+'))' ELSE FC.FkData END)	
								WHEN FC.FkType = 0 AND FC.FkData <> '' AND FC.DefaultValue <> '' THEN (CASE WHEN FC.DefaultValue = 8 AND ISNULL(DL.VALUE, '') <> '' THEN 'CAST('+ FC.DefaultValue+' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE DL.VALUE END AS VARCHAR(5))+'))' 
																			WHEN FC.DefaultValue = 8 AND ISNULL(DL.VALUE, '') = '' THEN 'CAST('+ FC.DefaultValue+ ' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE 4 END AS VARCHAR(5))+'))' ELSE FC.DefaultValue END) 		
								WHEN FC.ControlType = 20 AND FC.FkTable <> '' THEN ('LCT.'+ FC.FkData)											
								ELSE (CASE WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') <> '' THEN 'CAST('+ FC.TableColumn+' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE DL.VALUE END AS VARCHAR(5))+'))' 
										WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') = '' THEN 'CAST('+ FC.TableColumn+ ' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE 4 END AS VARCHAR(5))+'))' ELSE FC.TableColumn END) 
								END + 
				' FROM ' + CASE WHEN LEN(GB.TableName) > 0 THEN GB.TableName WHEN LEN(FT.TableName) > 0 THEN FT.TableName WHEN LEN(FD.TableName) > 0 THEN FD.TableName END + ' PCT '+
				CASE WHEN FC.ControlType = 20 AND FC.FkTable <> '' THEN
				CASE WHEN FC.FkType = 1 THEN (' LEFT JOIN CmnCodeMaster LCT ON LCT.Type = '''+ FC.FkTable+ ''' AND LCT.CodemasterID = PCT.'+FC.TableColumn)
					WHEN FC.FkType = 2 THEN (' LEFT JOIN '+ FC.FkTable+' LCT ON LCT.'+FC.FkColumn+' = PCT.'+FC.TableColumn)
					WHEN FC.FkType = 3 THEN (' LEFT JOIN '+ FC.FkTable+' LCT ON LCT.'+FC.FkColumn+' = PCT.'+FC.TableColumn)
				ELSE '' END
				ELSE '' END+
				' WHERE ' +
				CASE WHEN @FormType = 2 THEN CASE WHEN @AdditionalCondition <> '' THEN @AdditionalCondition ELSE ' 1=1 ' END 
				+ CASE WHEN @MainTableName = CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '') WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') ELSE ISNULL(FD.TableName, '') END 
						AND @RBSConditions <> '' THEN (' AND ' + @RBSConditions) ELSE '' END
				+' AND PCT.IsDeleted = 0 ORDER BY PCT.'+CASE WHEN LEN(GB.TableName) > 0 THEN GB.KeyColumn WHEN LEN(FT.TableName) > 0 THEN FT.KeyColumn WHEN LEN(FD.TableName) > 0 THEN FD.KeyColumn END+' DESC' ELSE
					'PCT.' + CASE WHEN LEN(GB.TableName) > 0 THEN GB.KeyColumn WHEN LEN(FT.TableName) > 0 THEN FT.KeyColumn WHEN LEN(FD.TableName) > 0 THEN FD.KeyColumn END + ' = ' +
						CASE WHEN ISNULL(GB.TableName, '') <> '' THEN CASE WHEN ISNULL(FT.TableName, '') <> '' THEN 
													'( SELECT TOP 1 KT.' + TT.IdentityColumn + ' FROM ' + FT.TableName + ' KT WHERE KT.' + FT.KeyColumn + ' = ' + CAST(@IN_MainID AS VARCHAR(50)) +
															CASE WHEN @AdditionalCondition <> '' THEN @AdditionalCondition ELSE '' END + ')' ELSE CAST(@IN_MainID AS VARCHAR(50)) END 
									ELSE CAST(@IN_MainID AS VARCHAR(50)) END +
					CASE WHEN @AdditionalCondition <> '' THEN @AdditionalCondition ELSE '' END END
					+ CASE WHEN ISNULL(GP.Value, '') = '' THEN '' ELSE ' AND '+ GP.Value END
					+ CASE WHEN @IN_FillType <> '' AND FC.ButtonID = @ButtonID AND FC.ButtonDmlType = 2 THEN (' ORDER BY PCT.CreatedDate DESC') ELSE '' END +'),' 						
					+CASE WHEN FC.DataType = 8 OR FC.DataType = 1 OR FC.DataType = 2 THEN 'NULL' ELSE '''''' END 
				END + ')' AS SQuery,
		FC.Name AS ControlName, CT.TypeValues AS ControlType, CT.CodemasterID AS ControlTypeId, DT.TypeValues AS DataType, FC.TableColumn, '' AS ControlValue, FT.TabOrder, GB.GroupOrder, FC.ControlOrder, 
		CASE WHEN FC.ControlType IN (18,19,24,25) THEN ''
			WHEN FC.FkType = 1 AND FC.ControlType <> 20 THEN ' SET @DQOut = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"'' + REPLACE(REPLACE(CAST(CM.' + FC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ CONCAT(REPLACE(REPLACE(CAST(CM.' + FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')' + CASE WHEN ISNULL(FC.FkData1, '') <> '' THEN (','' - '',' + 'REPLACE(REPLACE(ISNULL(CAST(CM.'+ FC.FkData1 + ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'')') ELSE ',''''' END+ CASE WHEN ISNULL(FC.FkData2, '') <> '' THEN (','' - '',' + 'REPLACE(REPLACE(ISNULL(CAST(CM.'+FC.FkData2+ ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'')') ELSE ',''''' END+' +''"}''))
																													FROM CmnCodeMaster CM WHERE CM.Type=''' + FC.FkTable + '''' +
																														CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' THEN '' ELSE + ' AND ' + FC.AdditionalConditions END +
																														CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + FC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
																														dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, 'CmnCodeMaster', FC.TableColumn) +
																														--CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' AND + ISNULL(CM.IsDeleted, 0) = 0 ' END +
																														--CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(CM.NotActive, 0) = 0 ' END + 
																														--CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(CM.IsCurrentVersion, 1) = 1 ' END +
																														' ORDER BY ' + CASE WHEN ISNULL(FC.FkOrder, 0) = 1 THEN FC.FkData + ' ASC '
																																								WHEN ISNULL(FC.FkOrder, 0) = 2 THEN FC.FkData + ' DESC ' 
																																								WHEN ISNULL(FC.FkOrder, 0) = 3 THEN 'CM.OrderBy' 
																																								WHEN ISNULL(FC.FkOrder, 0) = 4 THEN FC.FkColumn + ' ASC' 
																																								ELSE 'CM.OrderBy' END + 
																													' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000), '''') '
						WHEN FC.FkType = 2 AND FC.ControlType <> 20 THEN ' SET @DQOut = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"''+ REPLACE(REPLACE(CAST(MT.' + FC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ CONCAT(REPLACE(REPLACE(CAST(MT.' + FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')' + CASE WHEN ISNULL(FC.FkData1, '') <> '' THEN (','' - '',' + 'REPLACE(REPLACE(ISNULL(CAST(MT.'+ FC.FkData1 + ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'')') ELSE ',''''' END+ CASE WHEN ISNULL(FC.FkData2, '') <> '' THEN (','' - '',' + 'REPLACE(REPLACE(ISNULL(CAST(MT.'+FC.FkData2+ ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'')') ELSE ',''''' END+' +''"}''))
														FROM ' + FC.FkTable + ' MT '+
														CASE WHEN ISNULL(CKT.Value, '') <> '' THEN ' JOIN '+CKT.Value+ ' JCT ON JCT.'+ CP.Value+' LIKE ''''%,'''', MT.'+ CK.Value+ ''', '',%' ELSE '' END+
														+'WHERE 1=1 ' + 
															CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' THEN '' ELSE 
																CASE WHEN ISNULL(FC.AdditionalConditions, '') LIKE '%NULL%' OR ISNULL(FC.AdditionalConditions, '') LIKE '%NOT NULL%'
																OR ISNULL(FC.AdditionalConditions, '') LIKE '%=%' OR ISNULL(FC.AdditionalConditions, '') LIKE '% IN%' 
																OR ISNULL(FC.AdditionalConditions, '') LIKE '%<>%' THEN ' AND ' + FC.AdditionalConditions 
																ELSE (' AND ' + FC.AdditionalConditions +' = '+ CAST(@IN_MainID AS NVARCHAR(MAX))) END END +
															CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + FC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
															dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, FC.FkTable, FC.TableColumn) +
															--CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(MT.IsDeleted, 0) = 0 ' END + 
															--CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(MT.NotActive, 0) = 0 ' END + 
															--CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(MT.IsCurrentVersion, 1) = 1 ' END +
														' ORDER BY ' + CASE WHEN ISNULL(FC.FkOrder, 0) = 1 THEN 'MT.'+ FC.FkData + ' ASC'
																								WHEN ISNULL(FC.FkOrder, 0) = 2 THEN 'MT.' + FC.FkData + ' DESC'
																								WHEN ISNULL(FC.FkOrder, 0) = 3 THEN 'MT.OrderBy'
																								WHEN ISNULL(FC.FkOrder, 0) = 4 THEN FC.FkColumn + ' ASC'
																								ELSE 'MT.' + FC.FkData END +
														' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000), '''') '
						WHEN FC.FkType = 3 AND FC.ControlType <> 20 THEN ' SET @DQOut = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"''+ CAST(FU.' + FC.FkColumn + ' AS NVARCHAR(MAX)) +''","Text":"''+ CAST(FU.' + FC.FkData + ' AS NVARCHAR(MAX)) +''","File":"''+ FU.FileName +''"}'')
							FROM CmnFileUpload FU WHERE FU.FilePath = '''+ FC.AttachmentPath+ ''' AND FU.FileRefID = ' +
								CASE WHEN ISNULL(GB.TableName, '') <> '' THEN 																																
										CASE WHEN ISNULL(FT.TableName, '') <> '' THEN 
													' (SELECT TOP 1 KT.' + CASE WHEN ISNULL(FC.AdditionalConditions, '') <> '' THEN ISNULL(FC.AdditionalConditions, '') ELSE TT.IdentityColumn END
														+ ' FROM ' + FT.TableName + ' KT WHERE ' + 
															CASE WHEN @FormType = 2 OR ISNULL(FC.AdditionalConditions, '') <> '' THEN 'KT.IsDeleted = 0 '+ CASE WHEN @AdditionalCondition <> '' THEN 'AND KT.'+ @AdditionalCondition ELSE '' END 
															+ CASE WHEN ISNULL(FC.AdditionalConditions, '') <> '' THEN ' AND KT.' + TT.IdentityColumn + ' = ' + CAST(@IN_MainID AS VARCHAR(50)) END
															+' ORDER BY KT.'+FT.KeyColumn+' DESC'
																ELSE 'KT.' + FT.KeyColumn + ' = ' + CAST(@IN_MainID AS VARCHAR(50)) END + ')'
										ELSE (CASE WHEN @FormType = 2 OR ISNULL(FC.AdditionalConditions, '') <> '' THEN ' (SELECT TOP 1 KT.' + CASE WHEN ISNULL(FC.AdditionalConditions, '') <> '' THEN ISNULL(FC.AdditionalConditions, '') ELSE TT.IdentityColumn END
											+ ' FROM ' + GB.TableName + ' KT WHERE KT.IsDeleted = 0 '+ CASE WHEN @AdditionalCondition <> '' THEN 'AND KT.'+ @AdditionalCondition ELSE '' END 
											+ CASE WHEN ISNULL(FC.AdditionalConditions, '') <> '' THEN ' AND KT.' + TT.IdentityColumn + ' = ' + CAST(@IN_MainID AS VARCHAR(50)) END
											+' ORDER BY KT.'+GB.KeyColumn+' DESC)' ELSE CAST(@IN_MainID AS VARCHAR(50)) END) END 
								ELSE (CASE WHEN @FormType = 2 OR ISNULL(FC.AdditionalConditions, '') <> '' THEN ' (SELECT TOP 1 KT.' + CASE WHEN ISNULL(FC.AdditionalConditions, '') <> '' THEN ISNULL(FC.AdditionalConditions, '') ELSE TT.IdentityColumn END
									+ ' FROM ' + CASE WHEN LEN(GB.TableName) > 0 THEN GB.TableName WHEN LEN(FT.TableName) > 0 THEN FT.TableName 
																		WHEN LEN(FD.TableName) > 0 THEN FD.TableName END + ' KT WHERE KT.IsDeleted = 0 '+ CASE WHEN @AdditionalCondition <> '' THEN 'AND KT.'+ @AdditionalCondition ELSE '' END 
																		+ CASE WHEN ISNULL(FC.AdditionalConditions, '') <> '' THEN ' AND KT.' + TT.IdentityColumn + ' = ' + CAST(@IN_MainID AS VARCHAR(50)) ELSE '' END 
																		+ CASE WHEN @RBSConditions <> '' THEN (' AND ' + REPLACE(@RBSConditions, 'PCT.', 'KT.')) ELSE '' END
																		+' ORDER BY KT.'+CASE WHEN LEN(GB.TableName) > 0 THEN GB.KeyColumn 
																			WHEN LEN(FT.TableName) > 0 THEN FT.KeyColumn WHEN LEN(FD.TableName) > 0 THEN FD.KeyColumn END+' DESC)' ELSE CAST(@IN_MainID AS VARCHAR(50)) END) END + ' AND FU.IsDeleted = 0 
							ORDER BY FU.CreatedDate DESC
							FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000), '''') '
						ELSE '' END AS DQuery, '' AS DataSource, FC.SelectApplicable, FC.IsReturnFill,
						CASE WHEN FC.ControlType = 16 AND ISNULL(FC.AdditionalConditions, '') <> '' THEN 1 ELSE FC.FkShowActive END, FC.FillEvent, FC.FillType,
						CASE WHEN FC.DefaultValue = 'Parent ID' THEN '' 								
						ELSE
							'SET @PQOut = ISNULL((SELECT TOP 1 ' + 
										CASE WHEN FC.FkType = 0 AND FkData <> '' THEN (CASE WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') <> '' THEN 'CAST('+ FC.FkData+' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE DL.VALUE END AS VARCHAR(5))+'))' 
																			WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') = '' THEN 'CAST('+ FC.FkData+ ' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE 4 END AS VARCHAR(5))+'))' ELSE FC.FkData END)
										ELSE (CASE WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') <> '' THEN 'CAST('+ FC.TableColumn+' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE DL.VALUE END AS VARCHAR(5))+'))' 
																			WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') = '' THEN 'CAST('+ FC.TableColumn+ ' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE 4 END AS VARCHAR(5))+'))' ELSE FC.TableColumn END)
										END+
										' FROM ' + CASE WHEN LEN(GB.TableName) > 0 THEN GB.TableName WHEN LEN(FT.TableName) > 0 THEN FT.TableName WHEN LEN(FD.TableName) > 0 THEN FD.TableName END +
										' WHERE ' + CASE WHEN @FormType = 2 THEN 'IsDeleted = 0 '+ CASE WHEN @AdditionalCondition <> '' THEN 'AND '+ @AdditionalCondition ELSE '' END +' ORDER BY '+CASE WHEN LEN(GB.TableName) > 0 THEN GB.KeyColumn WHEN LEN(FT.TableName) > 0 THEN FT.KeyColumn WHEN LEN(FD.TableName) > 0 THEN FD.KeyColumn END+' DESC' ELSE
														CASE WHEN LEN(GB.TableName) > 0 THEN GB.KeyColumn WHEN LEN(FT.TableName) > 0 THEN FT.KeyColumn WHEN LEN(FD.TableName) > 0 THEN FD.KeyColumn END + ' = ' +
															CASE WHEN ISNULL(GB.TableName, '') <> '' THEN CASE WHEN ISNULL(FT.TableName, '') <> '' THEN 
															'( SELECT TOP 1 KT.' + TT.IdentityColumn + ' FROM ' + FT.TableName + ' KT WHERE KT.' + FT.KeyColumn + ' = ' + CAST(@IN_MainID AS VARCHAR(50)) +
															CASE WHEN @AdditionalCondition <> '' THEN @AdditionalCondition ELSE '' END + ')' ELSE CAST(@IN_MainID AS VARCHAR(50)) END 
														ELSE CAST(@IN_MainID AS VARCHAR(50)) END +
															CASE WHEN @AdditionalCondition <> '' THEN @AdditionalCondition ELSE '' END
												END +
												CASE WHEN ISNULL(GP.Value, '') = '' THEN '' ELSE ' AND '+ GP.Value END	+
										CASE WHEN @IN_FillType <> '' AND FC.ButtonID = @ButtonID AND FC.ButtonDmlType = 2 THEN (' ORDER BY CreatedDate DESC') ELSE '' END + '), ' + CASE WHEN FC.DataType = 8 OR FC.DataType = 1 OR FC.DataType = 2 THEN 'NULL' ELSE '''''' END +')'									
						END					
			AS PQuery, '' AS PreviousValue, ISNULL(FC.DateDifference, 0) AS DateDifference,  (CASE WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') <> '' AND FC.DefaultValue <> '' THEN 'SET @COUT = (SELECT CAST('+ FC.DefaultValue+' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE DL.VALUE END AS VARCHAR(5))+')))' 
													WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') = '' AND FC.DefaultValue <> '' THEN 'SET @COUT = (SELECT CAST('+ FC.DefaultValue+ ' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE 4 END AS VARCHAR(5))+')))' ELSE FC.DefaultValue END), FC.ReadOnly, ISNULL(FC.IsEncrypt, 0), GB.Name,
			FC.ControlID, CASE WHEN LEN(GB.TableName) > 0 THEN GB.TableName WHEN LEN(FT.TableName) > 0 THEN FT.TableName WHEN LEN(FD.TableName) > 0 THEN FD.TableName END,
			ISNULL(FC.AdditionalConditions, ''), CASE WHEN LEN(GB.TableName) > 0 THEN GB.KeyColumn WHEN LEN(FT.TableName) > 0 THEN FT.KeyColumn WHEN LEN(FD.TableName) > 0 THEN FD.KeyColumn END
	FROM CmnFormDetails FD
 		JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND ((@TabID <> '' AND FT.TabID = @TabID) OR @TabID = '' ) AND FT.IsDeleted = 0
		JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND ((@GroupID <> '' AND GB.GroupID = @GroupID) OR @GroupID = '') AND GB.IsDeleted = 0	
 		JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND (FC.SearchApplicable = 0 OR (FC.SearchApplicable = 1 AND (FC.ControlType = 24 OR FC.ControlType = 25))) AND FC.IsDeleted = 0 
				-- AND FC.IsReturnFill = 1 
			AND ((@IN_FillType = '' AND ISNULL(FC.ButtonID, 0) = 0) OR (@IN_FillType <> '' AND FC.ButtonID = @ButtonID))
		JOIN #tempTableValues TT ON TT.TableName = CASE WHEN @IN_FillType <> '' AND ISNULL(@ButtonID, 0) <> 0 THEN CASE WHEN (ISNULL(FC.ButtonDmlType, 0) = 0 OR FC.ButtonDmlType = 1) AND LEN(FD.TableName) > 0 THEN FD.TableName ELSE GB.TableName END ELSE CASE WHEN LEN(GB.TableName) > 0 THEN CASE WHEN LEN(FT.TableName) > 0 THEN FT.TableName ELSE GB.TableName END ELSE FD.TableName END END
 		JOIN CmnCodeMaster CT ON CT.Type = 'Control Type' AND CT.CodemasterID = FC.ControlType AND CT.IsDeleted = 0
 		JOIN CmnCodeMaster DT ON DT.Type = 'Data Type' AND DT.CodemasterID = FC.DataType AND DT.IsDeleted = 0	
			LEFT JOIN CmnGeneralProperty GP ON GP.Type = 'Groupbox' AND GP.TypeID = FC.GroupID AND GP.Name = 'Condition' AND GP.IsDeleted = 0
			LEFT JOIN CmnControlProperty CKT ON CKT.ControlID = FC.ControlID AND CKT.Name = 'Child Table' AND CKT.IsDeleted = 0
			LEFT JOIN CmnControlProperty CP ON CP.ControlID = FC.ControlID AND CP.Name = 'Child Parent' AND CP.IsDeleted = 0
			LEFT JOIN CmnControlProperty CK ON CK.ControlID = FC.ControlID AND CK.Name = 'Child Key' AND CK.IsDeleted = 0				
			LEFT JOIN CmnControlProperty DL ON DL.ControlID = FC.ControlID AND DL.Name = 'Decimal Length' AND DL.IsDeleted = 0
			LEFT JOIN CmnControlProperty DDC ON DDC.ControlID = FC.ControlID AND DDC.Name = 'Decimal Currency' AND DDC.IsDeleted = 0
			LEFT JOIN CmnControlProperty DCC ON DCC.ControlID = FC.ControlID AND DCC.Name = 'Currency Column' AND DCC.IsDeleted = 0
			LEFT JOIN @RBSDataVariable RBS ON RBS.TableName = CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
																						WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') 
																							ELSE ISNULL(FD.TableName, '') END AND RBS.TableColumn = FC.TableColumn
	WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;
					
	SET @Min = 0;
	SET @Max = 0;
	SELECT @Min = MIN(SNum), @Max = MAX(SNum) FROM #tempFormControlsValue

	WHILE (@Min <> 0 AND @Min <= @Max)
	BEGIN
		SET @OutString = '';
		SET @POutString = '';
		SET @DQuery = '';
		SET @VOutString = '';
		SET @ControlValue = '';
		SELECT @Query = SQuery, @IsReturnFill = IsReturnFill, @ControlType = ControlType , @ControlTypeID = ControlTypeId, 
			@PQuery = PQuery, @DQuery = DQuery, @DString = DefaultValue, @ControlID = ControlID, @TableName = TableName,
			@FkShowActive = FkShowActive, @ControlAdditionalCondition = AdditionalCondition, @KeyColumn = KeyColumn
		FROM #tempFormControlsValue WHERE SNum = @Min;

		IF @ControlType = 'Checklist Grid' OR @ControlType = 'Radiolist Grid'
		BEGIN
			SELECT @Name = Name, @TableColumn = TableColumn, @FkType = FkType, @FkTable = FkTable, @FkColumn = FkColumn, @FilterConditions = ISNULL(FilterConditions, '') FROM CmnFormControls WHERE ControlID = @ControlID;

			SET @VisibleCount = (SELECT COUNT(1) FROM CmnControlColumns CN 
									JOIN CmnColumnProperty CP ON CP.ColumnID = CN.ColumnID AND LOWER(CP.Name) = 'text visible' AND CP.Value = 1 AND CP.IsDeleted = 0
								WHERE CN.ControlID = @ControlID AND CN.ControlType <> 21 AND CN.ControlType <> 3 AND CN.IsDeleted = 0 AND ISNULL(CN.DependentFlag, 0) = 0);

			SET @HideCount = (SELECT COUNT(1) FROM CmnControlColumns CN 
									JOIN CmnColumnProperty CP ON CP.ColumnID = CN.ColumnID AND LOWER(CP.Name) = 'text visible' AND CP.Value = 0 AND CP.IsDeleted = 0
								WHERE CN.ControlID = @ControlID AND CN.ControlType <> 21 AND CN.ControlType <> 3 AND CN.IsDeleted = 0 AND ISNULL(CN.DependentFlag, 0) = 0);

			SET @ColumnNames = (SELECT ISNULL(CONVERT(NVARCHAR(MAX), SUBSTRING((SELECT(SELECT '+''-'' + CONVERT(VARCHAR(MAX), ISNULL(CAST(FU.' + CAST(CN.ColumnName AS VARCHAR(50)) + ' AS NVARCHAR(MAX))' + ', '''') )' 
								FROM CmnControlColumns CN WHERE CN.ControlID = @ControlID AND CN.ControlType <> 21 AND CN.ControlType <> 3 AND CN.IsIdentity <> 1 AND ISNULL(CN. DependentFlag, 0) = 0 ORDER BY CN.ColumnOrder ASC
								FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)')), 8, 200000)), ''))

			IF @VisibleCount > 0
			BEGIN
				SET @ColumnName = (SELECT ISNULL(CONVERT(VARCHAR(MAX), SUBSTRING((SELECT(SELECT '+''-'' + CONVERT(NVARCHAR(MAX), ISNULL(CAST(FU.' + CAST(CN.ColumnName AS VARCHAR(50)) + ' AS NVARCHAR(MAX))' + ', '''') )' 
								FROM CmnControlColumns CN 
									JOIN CmnColumnProperty CP ON CP.ColumnID = CN.ColumnID AND LOWER(CP.Name) = 'text visible' AND CP.Value = 1 AND CP.IsDeleted = 0
								WHERE CN.ControlID = @ControlID	AND CN.ControlType <> 21 AND CN.ControlType <> 3 AND ISNULL(CN. DependentFlag, 0) = 0 ORDER BY CN.ColumnOrder ASC
								FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)')), 8, 200000)), ''));
			END
			ELSE IF @VisibleCount = 0 AND @HideCount > 0
			BEGIN
				SET @TextName = (SELECT ISNULL(CONVERT(VARCHAR(MAX), SUBSTRING((SELECT(SELECT '+''-'' + CONVERT(NVARCHAR(MAX), ISNULL(CAST(FU.' + CAST(CN.ColumnName AS VARCHAR(50)) + ' AS NVARCHAR(MAX))' + ', '''') )' 
								FROM CmnControlColumns CN 
									JOIN CmnColumnProperty CP ON CP.ColumnID = CN.ColumnID AND LOWER(CP.Name) = 'text visible' AND CP.Value = 0 AND CP.IsDeleted = 0
								WHERE CN.ControlID = @ControlID	AND CN.ControlType <> 21 AND CN.ControlType <> 3 AND CN.IsIdentity <> 1 AND ISNULL(CN. DependentFlag, 0) = 0 ORDER BY CN.ColumnOrder ASC
								FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)')), 8, 200000)), ''));
			 
				SET @ReplacedColumnName = REPLACE(@ColumnNames, (@TextName +'-'), '');
				SET @ColumnName = REPLACE(@ReplacedColumnName, (','+ @TextName), '');
			END
			ELSE 
			BEGIN
				SET @ColumnName = @ColumnNames;
			END
			
			IF @IsReturnFill = 1
			BEGIN
				SET @ValueQuery = ('SELECT TOP 1 @TempControlValue = CAST(MT.'+ @TableColumn+' AS VARCHAR(MAX)) FROM '+ @TableName+' MT WHERE '+CASE WHEN @FormType = 2 THEN ('MT.IsDeleted = 0 '+CASE WHEN @AdditionalCondition <> '' THEN ('AND MT.'+ @AdditionalCondition) ELSE '' END+' ORDER BY MT.'+@FkColumn+' DESC') ELSE ('MT.'+ @IdentityColumn+' = '+CAST(@IN_MainID AS VARCHAR(50))) END);
				EXEC sp_executesql @ValueQuery, N'@TempControlValue VARCHAR(MAX) OUTPUT', @ControlValue OUTPUT

				SET @TextQuery = ('SELECT @TempOutString = SUBSTRING((SELECT DISTINCT '',''+ ' + @ColumnName + ' FROM ' + @TableName +
									' MT JOIN '+CASE WHEN @FkType = 1 THEN 'CmnCodeMaster' ELSE @FkTable END +' FU ON 1=1 AND '
									+ CASE WHEN @ControlType = 'Radiolist Grid' THEN ('FU.' + @FkColumn + ' = ISNULL(MT.' + @TableColumn + ', '''')')
										ELSE ('(PATINDEX(''%,'' + CAST(FU.' + @FkColumn + ' AS VARCHAR(MAX)) + '',%'' , '','' + CAST(ISNULL(MT.'+ @TableColumn + ', '''') AS VARCHAR(MAX))+ '','') > 0)') END	+	
									CASE WHEN ISNULL(@FilterConditions, '') <> '' AND ISNULL(@ControlAdditionalCondition, '') <> ''
									THEN CASE WHEN CHARINDEX('@', ISNULL(@ControlAdditionalCondition, '')) = 0 
										THEN ' AND FU.' + REPLACE(ISNULL(@ControlAdditionalCondition, ''), 'AND ', 'AND FU.') + ' = MT.' + ISNULL(@FilterConditions, '')
										ELSE dbo.fn_ConstractDependentConditions(ISNULL(@ControlAdditionalCondition, ''), ISNULL(@FilterConditions, ''), 0, 'FU', 'MT') END
									ELSE '' END +
									' WHERE ' + CASE WHEN @FormType = 2 THEN 'MT.IsDeleted = 0 '+ CASE WHEN @AdditionalCondition <> '' THEN 'AND MT.'+ @AdditionalCondition ELSE '' END +' ORDER BY MT.'+@IdentityColumn+' DESC' ELSE CASE WHEN @KeyColumn <> '' THEN 'MT.'+ @KeyColumn ELSE 'MT.'+ @IdentityColumn END + ' = ' + 
									CAST(@IN_MainID AS VARCHAR(50)) END + CASE WHEN @FkType = 1 THEN ' AND FU.Type = '''+@FkTable+'''' ELSE '' END + ' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) ' )

				EXEC sp_executesql @TextQuery, N'@TempOutString VARCHAR(MAX) OUTPUT', @OutString OUTPUT

				SET @ValueQuery = ('SELECT @TempVOutString = CAST(MT.' + @TableColumn + ' AS VARCHAR(MAX)) FROM ' + @TableName +																	
									' MT WHERE ' + CASE WHEN @FormType = 2 THEN 'MT.IsDeleted = 0 '+ CASE WHEN @AdditionalCondition <> '' THEN 'AND MT.'+ @AdditionalCondition ELSE '' END
									+' ORDER BY MT.'+@IdentityColumn+' DESC' ELSE CASE WHEN @KeyColumn <> '' THEN 'MT.'+ @KeyColumn ELSE 'MT.'+ @IdentityColumn END + ' = ' + CAST(@IN_MainID AS VARCHAR(50)) END )
		
				EXEC sp_executesql @ValueQuery, N'@TempVOutString VARCHAR(MAX) OUTPUT', @VOutString OUTPUT
			END

			IF @OutString <> ''
			BEGIN
				SET @OutString = REPLACE(@OutString, '"', '\"');
				SET @OutString = ('{"Text":"'+ @OutString+ '","Value":"'+ @VOutString+ '"}'); 
			END 
			IF (@ControlType = 'Checklist Grid' OR @ControlType = 'Radiolist Grid')
			BEGIN
				SET @POutString = @VOutString; 
			END 
		END
		ELSE 
		BEGIN
			IF (@Query <> '' AND @IsReturnFill = 1)
			BEGIN
				EXEC sp_executesql @Query, N'@SQOut NVARCHAR(MAX) OUTPUT', @OutString OUTPUT
			END
			IF (@ControlTypeID IN (4,5,6,11,14,15))
			BEGIN
				SET @POutString = @OutString;
			END
			ELSE IF (@PQuery <> '' AND @IsReturnFill = 1)
			BEGIN
				EXEC sp_executesql @PQuery, N'@PQOut NVARCHAR(MAX) OUTPUT', @POutString OUTPUT
			END
			
		END

		UPDATE #tempFormControlsValue
		SET ControlValue = (CASE WHEN @IsReturnFill = 1 THEN @OutString ELSE 
								(CASE WHEN (@ControlType = 'Combobox' OR @ControlType = 'Checklistbox' OR @ControlType = 'Dual Combobox' OR @ControlType = 'Checkbox'
														OR @ControlType = 'Attachment' OR @ControlType = 'Photo Viewer' OR @ControlType = 'Label') THEN '0' ELSE '' END) 
							END), PreviousValue = @POutString
		WHERE SNum = @Min

		IF @DQuery <> '' AND (@FkShowActive = 1 OR (@ControlTypeID = 16 AND @IsReturnFill = 1))
		BEGIN
			EXEC sp_executesql @DQuery, N'@DQOut NVARCHAR(MAX) OUTPUT', @FileString OUTPUT

			UPDATE #tempFormControlsValue
			SET DataSource = '[' + @FileString + ']'
			WHERE SNum = @Min
		END
		
		IF CHARINDEX('CAST', @DString) > 0 
		BEGIN
			EXEC sp_executesql @DString, N'@COUT NVARCHAR(MAX) OUTPUT', @DefaultValue OUTPUT
			UPDATE #tempFormControlsValue SET DefaultValue = @DefaultValue
		WHERE SNum = @Min 
		END
		SET @Min = @Min + 1; 
	END

	SELECT ControlName, ControlType, ControlTypeId, DataType, TableColumn, ControlValue, DataSource, SelectApplicable, 
		FillEvent, FillType, PreviousValue, DateDifference, DefaultValue, ReadOnly, IsEncrypt, GroupboxName
	FROM #tempFormControlsValue
	ORDER BY TabOrder, GroupOrder, ControlOrder;		

	IF (@FormType = 5 AND @IsControlBased = 1) OR (@FormType = 5 AND @IN_Type = 'Parent') OR @CheckForm <> 0
	BEGIN
		SET @DSCount = 0

		IF OBJECT_ID('tempdb..#tempFormControls') IS NOT NULL DROP TABLE #tempFormControls
		CREATE TABLE #tempFormControls (
			TabName NVARCHAR(100) NULL,
			TabDisplayName NVARCHAR(100) NULL,
			TabOrder INT NULL,
			GroupBoxName NVARCHAR(100) NULL,
			GroupboxDisplayName NVARCHAR(100) NULL,
			GroupOrder INT NULL,
			ControlName NVARCHAR(100) NULL,
			ControlOrder INT NULL,
			TableColumn SYSNAME NULL,
			ControlType NVARCHAR(100) NULL,
			ControlTypeId INT NULL,
			DataType NVARCHAR(100) NULL,
			IsIdentity BIT NULL,
			IsMandatory BIT NULL,
			[Readonly] BIT NULL,
			Visibility BIT NULL,
			IsSelectOption BIT NULL,
			IsDmlControl BIT NULL,
			UniqueGroup INT NULL,
			DSNum INT NULL,
			DSQuery NVARCHAR(MAX) NULL,
			DataSource NVARCHAR(MAX) NULL,
			MaxLength INT NULL,
			ControlEvent NVARCHAR(MAX) NULL,
			AttachmentPath NVARCHAR(MAX) NULL,
			DefaultValue VARCHAR(500) NULL,
			ControlInfo NVARCHAR(255) NULL,
			IsSearchApplicable BIT NULL,
			ValidationEvent NVARCHAR(500) NULL,
			TableFrom SYSNAME NULL,
			TableID INT NULL,
			IsEncrypt BIT NULL,
			IsNoAdd BIT NULL,
			IsNoUpdate BIT NULL,
			FillEvent NVARCHAR(255) NULL,
			FillType BIT NULL,
			FormType INT NULL,
			ControlProperty NVARCHAR(MAX) NULL,
			ControlID INT NULL,
			BQuery NVARCHAR(MAX) NULL,
			ButtonName NVARCHAR(255) NULL)	

		INSERT INTO #tempFormControls		
		SELECT FT.Name AS TabName, CASE WHEN ISNULL(TML.Name, '') = '' THEN ISNULL(FT.DisplayName, '') ELSE ISNULL(TML.Name, '') END AS TabDisplayName , FT.TabOrder, 
			GB.Name AS GroupBoxName, CASE WHEN ISNULL(GML.Name, '') = '' THEN ISNULL(GB.DisplayName, '') ELSE ISNULL(GML.Name, '') END AS GroupboxDisplayName, GB.GroupOrder,
			CASE WHEN ISNULL(CML.Name, '') = '' THEN ISNULL(FC.Name, '') ELSE ISNULL(CML.Name, '') END AS ControlName , FC.ControlOrder, 
			FC.TableColumn,CT.TypeValues AS ControlType, CT.CodemasterID AS ControlTypeId, DT.TypeValues AS DataType, FC.IsIdentity, FC.IsMandatory, FC.[Readonly], FC.Visibility, 
			FC.SelectApplicable,FC.IsDmlControl, FC.UniqueGroup, 0 AS DSNum,
			CASE WHEN FC.FkType = 1 THEN			
				' SET @DOUT = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"'' + REPLACE(REPLACE(CAST(CM.' + FC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(CM.' + FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"}'')
																	FROM CmnCodeMaster CM WHERE CM.Type=''' + FC.FkTable + '''' +
																	CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' THEN '' ELSE + ' AND ' + FC.AdditionalConditions END +
																	CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + FC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
																	dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, 'CmnCodeMaster', FC.TableColumn) +
																	CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' AND + ISNULL(CM.IsDeleted, 0) = 0 ' END +
																	CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(CM.NotActive, 0) = 0 ' END + 
																	CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(CM.IsCurrentVersion, 1) = 1 ' END +
																	' ORDER BY ' + CASE WHEN ISNULL(FC.FkOrder, 0) = 1 THEN FC.FkData + ' ASC '
																											WHEN ISNULL(FC.FkOrder, 0) = 2 THEN FC.FkData + ' DESC ' 
																											WHEN ISNULL(FC.FkOrder, 0) = 3 THEN ' CM.OrderBy' 
																											WHEN ISNULL(FC.FkOrder, 0) = 4 THEN FC.FkColumn + ' ASC' 
																										ELSE 'CM.OrderBy' END + 
																	' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
				WHEN FC.FkType = 2 THEN 
					' SET @DOUT = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"''+ REPLACE(REPLACE(CAST(MT.' + FC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(MT.' + FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"}'')
																		FROM ' + FC.FkTable + ' MT WHERE 1=1 ' + 
																		CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' THEN '' ELSE 																			
																					CASE WHEN ISNULL(FC.AdditionalConditions, '') LIKE '%NULL%' OR ISNULL(FC.AdditionalConditions, '') LIKE '%NOT NULL%'
																										OR ISNULL(FC.AdditionalConditions, '') LIKE '%=%' OR ISNULL(FC.AdditionalConditions, '') LIKE '% IN%' 
																										OR ISNULL(FC.AdditionalConditions, '') LIKE '%<>%' THEN ' AND MT.' + FC.AdditionalConditions 
																										ELSE '' END END +
																		CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + FC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
																		dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, FC.FkTable, FC.TableColumn) +
																		CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(MT.IsDeleted, 0) = 0 ' END + 
																		CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(MT.NotActive, 0) = 0 ' END + 
																		CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(MT.IsCurrentVersion, 1) = 1 ' END +
																		' ORDER BY ' + CASE WHEN ISNULL(FC.FkOrder, 0) = 1 THEN ' MT.'+ FC.FkData + ' ASC'
																												WHEN ISNULL(FC.FkOrder, 0) = 2 THEN ' MT.' + FC.FkData + ' DESC'
																												WHEN ISNULL(FC.FkOrder, 0) = 3 THEN ' MT.OrderBy'
																												WHEN ISNULL(FC.FkOrder, 0) = 4 THEN FC.FkColumn + ' ASC'
																											ELSE 'MT.' + FC.FkData END +
																		' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
				WHEN FC.FkType = 3 THEN 
					' SET @DOUT = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"''+ CAST(FU.' + FC.FkColumn + ' AS NVARCHAR(MAX)) +''","Text":"''+ CAST(FU.' + FC.FkData + ' AS NVARCHAR(MAX)) +''"}'')
																		FROM CmnFileUpload FU 
																		WHERE FU.Type=''' + FC.FkTable + ''' AND FU.IsDeleted = 0 AND FU.FormID = ' + CAST(@IN_FormID AS VARCHAR(50)) + '
																		ORDER BY ' + CASE WHEN ISNULL(FC.FkOrder, 0) = 1 THEN FC.FkData + ' ASC '
																											WHEN ISNULL(FC.FkOrder, 0) = 2 THEN FC.FkData + ' DESC ' 
																											WHEN ISNULL(FC.FkOrder, 0) = 3 THEN ' FU.OrderBy' 
																											WHEN ISNULL(FC.FkOrder, 0) = 4 THEN FC.FkColumn + ' ASC ' 
																										ELSE 'FU.CreatedDate DESC' END +
																		' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
			ELSE '' END AS DSQuery, '' AS DataSource, FC.MaxLength, ISNULL(FC.[Events], ''), FC.AttachmentPath, 
			FC.DefaultValue, FC.FkTable AS ControlInfo, FC.SearchApplicable, FC.ValidationEvent,
			COALESCE (CASE WHEN LEN(GB.TableName) > 0 THEN 'Groupbox' WHEN LEN(FT.TableName) > 0 THEN 'Tab' WHEN LEN(FD.TableName) > 0 THEN 'Form' END, NULL),
			COALESCE (CASE WHEN LEN(GB.TableName) > 0 THEN GB.GroupID WHEN LEN(FT.TableName) > 0 THEN FT.TabID WHEN LEN(FD.TableName) > 0 THEN FD.FormID END, NULL),
			FC.IsEncrypt, FC.IsNoAdd, FC.IsNoUpdate, FC.FillEvent, FC.FillType, FD.FormType AS FormType,
			CASE WHEN (SELECT COUNT(1) FROM CmnControlProperty WHERE ControlID = FC.ControlID) <> 0 THEN
													' SET @DOUTPRP = ISNULL(SUBSTRING((SELECT '','' + (''{"Control":"''+ CP.Name +''","Value":"''+ REPLACE(REPLACE(CP.Value, ''\'', ''\\''),''"'', ''\"'') +''"}'')
																											FROM CmnControlProperty CP 
																											WHERE CP.ControlID = ''' + CAST(FC.ControlID AS VARCHAR(50)) + ''' AND CP.IsDeleted = 0
																											FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
			ELSE '' END AS ControlProperty, FC.ControlID,
			CASE WHEN ISNULL(FC.ButtonID,'') = '' OR FC.ButtonID = 0 THEN '' 
			ELSE 
				'SET @DOUTBQ = SUBSTRING((SELECT '','' '+'+'+' Typevalues FROM CmnCodeMaster CM WHERE CM.Type=''Menubutton'' AND
				(PATINDEX(''%,'' + CONVERT(VARCHAR(50), CM.CodemasterID)' + '+'',%'', '','' + 
				ISNULL(CONVERT(VARCHAR(50), '''+CONVERT(VARCHAR(50), FC.ButtonID)+'''), '''') + '','') > 0) '+
				' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
			END BQuery, '' AS ButtonName
		FROM CmnFormDetails FD WITH (NOLOCK)
			JOIN CmnFormTabs FT WITH (NOLOCK) ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
			JOIN CmnGroupBoxes GB WITH (NOLOCK) ON GB.TabID = FT.TabID AND ((@GroupID <> '' AND GB.GroupID = @GroupID) OR @GroupID = '') AND GB.IsDeleted = 0 
			JOIN CmnFormControls FC WITH (NOLOCK) ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0
			JOIN CmnCodeMaster CT WITH (NOLOCK) ON CT.[Type] = 'Control Type' AND CT.CodemasterID = FC.ControlType AND CT.IsDeleted = 0
			JOIN CmnCodeMaster DT WITH (NOLOCK) ON DT.[Type] = 'Data Type' AND DT.CodemasterID = FC.DataType AND DT.IsDeleted = 0
			LEFT JOIN CmnTabsMultiLingual TML WITH (NOLOCK) ON TML.TabID = FT.TabID AND TML.LanguageID = @UserProfileID AND ISNULL(TML.IsDeleted, 0) = 0
			LEFT JOIN CmnGroupMultiLingual GML WITH (NOLOCK) ON GML.GroupID = GB.GroupID AND GML.LanguageID = @UserProfileID AND ISNULL(GML.IsDeleted, 0) = 0
			LEFT JOIN CmnControlsMultiLingual CML WITH (NOLOCK) ON CML.ControlID = FC.ControlID AND CML.LanguageID = @UserProfileID AND ISNULL(CML.IsDeleted, 0) = 0
			LEFT JOIN @RBSDataVariable RBS ON RBS.TableName = CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
																						WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') 
																							ELSE ISNULL(FD.TableName, '') END AND RBS.TableColumn = FC.TableColumn
		WHERE FD.FormID = @IN_FormID

		UPDATE #tempFormControls SET @DSCount = DSNum = @DSCount + 1 WHERE DSQuery <> '' OR ControlProperty <> '' OR BQuery <> ''
 
		SET @Min = 0;
		SET @Max = 0;
		SELECT @Min = MIN(DSNum), @Max = MAX(DSNum) FROM #tempFormControls WHERE DSNum <> 0
	
		WHILE (@Min <> 0 AND @Min <= @Max) 
		BEGIN
			SET @OutString = ''
			SELECT @Query = DSQuery FROM #tempFormControls WHERE DSNum = @Min 
		
			IF @Query <> '' 
				EXEC sp_executesql @Query, N'@DOUT NVARCHAR(MAX) OUTPUT', @OutString OUTPUT

			SET @PropString = ''
			SELECT @PQuery = ControlProperty FROM #tempFormControls WHERE DSNum = @Min
			
			IF @PQuery <> '' 
				EXEC sp_executesql @PQuery, N'@DOUTPRP NVARCHAR(MAX) OUTPUT', @PropString OUTPUT

			SET @BString = ''			
			SELECT @BQuery = BQuery FROM #tempFormControls WHERE DSNum = @Min 
			
			IF @BQuery <> '' 
				EXEC sp_executesql @BQuery, N'@DOUTBQ NVARCHAR(MAX) OUTPUT', @BString OUTPUT
	
			UPDATE #tempFormControls SET DataSource = @OutString, ControlProperty = @PropString, ButtonName = @BString WHERE DSNum = @Min

			SET @Min = @Min + 1
		END 

		SELECT TabName, TabDisplayName, TabOrder, GroupBoxName, GroupboxDisplayName, GroupOrder, ControlName, ControlOrder, TableColumn, ControlType, ControlTypeId, DataType, IsIdentity, IsMandatory, 
			IsSelectOption, IsDmlControl, UniqueGroup, [Readonly], Visibility, '['+ DataSource + ']' AS DataSource, MaxLength, ControlEvent, 
			AttachmentPath, DefaultValue, ControlInfo, IsSearchApplicable, ValidationEvent, TableFrom, TableID, IsEncrypt, IsNoAdd, IsNoUpdate,
			FillEvent, FillType, FormType, '[' + ControlProperty + ']' AS ControlProperty, ControlID, ButtonName
		FROM #tempFormControls
		ORDER BY TabOrder, TabName, GroupOrder, GroupBoxName, ControlOrder 

	END
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnFillMasterDataControls]'
GO

CREATE PROCEDURE [dbo].[spCmnFillMasterDataControls](
	@IN_CodemasterID INT,
	@IN_Type VARCHAR(50),
	@IN_FormID INT = 0,
	@IN_UserID INT = 0)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50)

		SELECT Code, TypeValues AS Name, Description, Category, Remarks, ImagePath AS Icon, SubType, Details, NotActive, 
			ISNULL(FORMAT(NotActiveDate, 'MM-dd-yyyy HH:mm'), '') AS NotActiveDate, OrderBy
		FROM CmnCodeMaster WHERE Type = @IN_Type AND CodemasterID = @IN_CodemasterID AND IsDeleted = 0 AND IsCurrentVersion = 1;
		
	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnForgotPassword]'
GO

CREATE PROCEDURE [dbo].[spCmnForgotPassword](
	@IN_USERNAME NVARCHAR(1000))
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY

	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
			  @UserID INT = 0,
			  @UserName NVARCHAR(1000) = '',
		      @Password NVARCHAR(200) = '',
			  @IsBlocked BIT = 0,
			  @NotActive BIT = 0,
			  @ErrorMsg NVARCHAR(100) = ''

		SELECT @UserID = UD.UserID, @UserName = UD.Username, @Password = UD.[Password],
			@IsBlocked = UD.IsLocked, @NotActive = ISNULL(MED.NotActive, 0)
		FROM CmnUserDetails UD 
			LEFT JOIN MstEmployeeDetails MED ON UD.[Type] = 1 AND UD.TypeID = MED.ReferenceID AND ISNULL(MED.IsDeleted, 0) = 0
		WHERE UD.Username = @IN_USERNAME;

		IF @UserID = 0 AND @IsBlocked = 0
		BEGIN 
			SET @ErrorMsg = 'W0003';
			SELECT @UserID, @UserName, @ErrorMsg;
		END
		ELSE IF @IsBlocked = 1
		BEGIN
			SET @ErrorMsg = 'W0023';
			SELECT 0, @UserName, @ErrorMsg;
		END
		ELSE
			SELECT @UserID, @UserName, @Password;

		SELECT  CASE WHEN UD.Type = 1 THEN ISNULL(CUC.OfficialEmail, '') WHEN UD.Type = 2 THEN ISNULL(CC.OfficialEmail, '') ELSE '' END, 
				CASE WHEN UD.Type = 1 THEN ISNULL(CUC.Mobile, '') WHEN UD.Type = 2 THEN ISNULL(CC.Mobile, '') ELSE '' END, UD.[Type]
		FROM CmnUserDetails UD
			JOIN CmnUserContacts CUC ON CUC.[Type] = UD.[Type] AND CUC.TypeID = UD.TypeID AND UD.Type = 1
			LEFT JOIN MstClientContacts CC ON UD.Type = 2 AND CC.ReferenceID = UD.TypeID AND CC.IsDeleted = 0 AND CC.NotActive = 0
		WHERE UD.UserID = @UserID;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[CmnOTPTracking]'
GO
CREATE TABLE [dbo].[CmnOTPTracking]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[UserID] [INT] NOT NULL,
[SessionID] [NVARCHAR] (400) NOT NULL,
[LoginIP] [VARCHAR] (100) NULL,
[OTPValue] [VARCHAR] (20) NOT NULL,
[OTPType] [INT] NOT NULL,
[GeneratedTime] [DATETIME] NOT NULL,
[ExpiryTime] [DATETIME] NOT NULL,
[Status] [INT] NOT NULL,
[Comments] [VARCHAR] (1000) NULL
)
GO
PRINT N'Creating primary key [PK_CmnOTPTracking] on [dbo].[CmnOTPTracking]'
GO
ALTER TABLE [dbo].[CmnOTPTracking] ADD CONSTRAINT [PK_CmnOTPTracking] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnOTPTracking] on [dbo].[CmnOTPTracking]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnOTPTracking] ON [dbo].[CmnOTPTracking] ([UserID], [SessionID], [GeneratedTime] DESC, [ExpiryTime] DESC)
GO
PRINT N'Creating [dbo].[spCmnGenerateOTP]'
GO

CREATE PROCEDURE [dbo].[spCmnGenerateOTP] ( 
	@IN_Event NVARCHAR(100),
	@IN_USERID INT,
	@IN_SessionID NVARCHAR(500),
	@IN_IPAddress NVARCHAR(100),
	@IN_OTPValue VARCHAR(20),
	@IN_OTPExpiredMin INT,
	@IN_Status INT,
	@IN_Comments NVARCHAR(1000))
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
	   --BEGIN TRANSACTION tran_CmnGenerateOTP 
	       DECLARE @UTCTime DATETIME = GETUTCDATE(),
				   @OTPExpiredTime DATETIME = NULL,
				   @Status BIGINT= 0,
				   @Comments  NVARCHAR(1000)= '',
				   @ErrorMessage NVARCHAR(2000),  
				   @ErrorSeverity NVARCHAR(50),  
				   @ErrorState NVARCHAR(50),
					@CompanyID INT = 0,
					@OTPRequired BIT = 0,
					@OTPType INT = 0,
					@OTPExpireMin INT = 0,
					@UserType INT = 0
					 
		IF (@IN_Event = 'LoginValidate' OR @IN_Event = 'ResendOTP') AND @IN_USERID <> 0 
		BEGIN
			UPDATE CmnOTPTracking SET [Status] = 3, Comments = 'OTP Cleared' 
			WHERE UserID = @IN_USERID AND SessionID = @IN_SessionID AND [Status] = 1

			INSERT INTO CmnOTPTracking(UserID, SessionID, LoginIP, OTPValue, OTPType, GeneratedTime, ExpiryTime, [Status], Comments)
			VALUES(@IN_USERID, @IN_SessionID, @IN_IPAddress, @IN_OTPValue, 1, @UTCTime, DATEADD(MINUTE, @IN_OTPExpiredMin, @UTCTime), @IN_Status, @IN_Comments)
	    END
		ELSE IF @IN_Event = 'ValidateOTP'  
		BEGIN              
			UPDATE CmnOTPTracking 
			SET OTPValue = @IN_OTPValue, 
					GeneratedTime = @UTCTime, 
					ExpiryTime = DATEADD(MINUTE, @IN_OTPExpiredMin, @UTCTime), 
					[Status] = @IN_Status, Comments = @IN_Comments 
			WHERE UserID = @IN_USERID AND SessionID = @IN_SessionID AND [Status] = 1               
		END

	  IF @IN_Event = 'ResendOTP'
	  BEGIN      
		SELECT COT.ExpiryTime FROM CmnOTPTracking COT
		WHERE COT.UserID = @IN_USERID AND COT.SessionID = @IN_SessionID AND COT.Status = 1;

		SELECT CASE WHEN UD.Type = 1 THEN ISNULL(CUC.OfficialEmail, '') WHEN UD.Type = 2 THEN ISNULL(CC.OfficialEmail, '') ELSE '' END,
			CASE WHEN UD.Type = 1 THEN ISNULL(CUC.Mobile, '') WHEN UD.Type = 2 THEN ISNULL(CC.Mobile, '') ELSE '' END, UD.Type
		FROM CmnUserDetails UD
			LEFT JOIN CmnUserContacts CUC ON CUC.Type = UD.Type AND CUC.TypeID = UD.TypeID AND UD.Type = 1
			LEFT JOIN MstClientContacts CC ON UD.Type = 2 AND CC.ReferenceID = UD.TypeID AND CC.IsDeleted = 0 AND CC.NotActive = 0
		WHERE UD.UserID = @IN_USERID;

		SELECT @CompanyID = COALESCE(MED.CompanyID, UD.CompanyID, 1), @UserType = UD.Type
		FROM CmnUserDetails UD
			LEFT JOIN MstEmployeeDetails MED ON UD.[Type] = 1 AND UD.TypeID = MED.ReferenceID AND ISNULL(MED.IsDeleted, 0) = 0
		WHERE UD.UserID = @IN_USERID;

		SELECT TOP 1 @OTPRequired = ISNULL(CPP.OTPValidation, 0), @OTPType = ISNULL(CPP.OTPType, 0),
			@OTPExpireMin = ISNULL(CPP.OTPExpireMin, 0)
		FROM CmnPasswordPolicy CPP WHERE CPP.CompanyID = @CompanyID AND ISNULL(CPP.IsDeleted,0) = 0;

		IF ISNULL(@UserType, 0) <> 0   
		BEGIN
			SELECT '', @OTPRequired, @OTPType;
		END
		ELSE
			SELECT '', 0, 0;
	  END 

	   --COMMIT TRANSACTION tran_CmnGenerateOTP  
	END TRY
	BEGIN CATCH
	   --ROLLBACK TRANSACTION tran_CmnGenerateOTP  

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[CmnBuildInstallationHistory]'
GO
CREATE TABLE [dbo].[CmnBuildInstallationHistory]
(
[ReferenceID] [INT] NOT NULL IDENTITY(1, 1),
[InstallationDate] [DATETIME] NOT NULL,
[Version] [VARCHAR] (50) NOT NULL,
[Comments] [NVARCHAR] (30) NOT NULL,
[Isdeleted] [BIT] NOT NULL,
[IsCurrentVersion] [BIT] NOT NULL,
[ScriptName] [NVARCHAR] (400) NOT NULL,
[BuildDate] [DATE] NOT NULL
)
GO
PRINT N'Creating primary key [PK_CmnBuildInstallationHistory] on [dbo].[CmnBuildInstallationHistory]'
GO
ALTER TABLE [dbo].[CmnBuildInstallationHistory] ADD CONSTRAINT [PK_CmnBuildInstallationHistory] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating index [IDX_CmnBuildInstallationHistoryDate] on [dbo].[CmnBuildInstallationHistory]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnBuildInstallationHistoryDate] ON [dbo].[CmnBuildInstallationHistory] ([InstallationDate] DESC)
GO
PRINT N'Creating [dbo].[spCmnGetApplicationSettings]'
GO

CREATE PROCEDURE [dbo].[spCmnGetApplicationSettings]
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY

		DECLARE	@CompanyName AS NVARCHAR(500) = '',
				@ErrorMessage VARCHAR(2000),
				@ErrorSeverity VARCHAR(50),
				@ErrorState INT,
				@LicenseKey VARCHAR(50) = '',
				@ImagePath VARCHAR(1000) = '',
				@BuildDate VARCHAR(50) = '',
				@InstallationDate VARCHAR(50) = '',
				@LastBatchDate VARCHAR(50) = '',
				@DBVersion VARCHAR(50) = '',
				@LogoPath NVARCHAR(1000) = '',
				@SmallLogoPath NVARCHAR(1000) = '',
				@BackgroundImgPath NVARCHAR(1000) = '',
				@LoginImgLeftPath NVARCHAR(1000) = '',
				@LoginImgRightPath NVARCHAR(1000) = '',
				@LoginHeader NVARCHAR(500) = '',
				@HeaderDescription NVARCHAR(1000) = '',
				@CompanyEmail NVARCHAR(100) = '',
				@ContactNumber NVARCHAR(100) = '',
				@ContactWebsite NVARCHAR(100) = '';				

		SELECT TOP 1 @LicenseKey = ISNULL(LicenseKey, '')
		FROM LicProductLicense WHERE Status = 2 ORDER BY UploadedDate DESC;

		SELECT TOP 1 @CompanyName = ISNULL(CD.Name, ''), @ImagePath = ISNULL(FU.FullPath, ''), @LogoPath = ISNULL(LI.FullPath, ''),
			@SmallLogoPath = ISNULL(LH.FullPath, ''), @BackgroundImgPath = ISNULL(BI.FullPath, ''), @LoginImgLeftPath = ISNULL(LIO.FullPath, ''), 
			@LoginImgRightPath = ISNULL(LIT.FullPath, ''), @LoginHeader = ISNULL(CD.LoginPageHeader, ''), @HeaderDescription = ISNULL(CD.HeaderDescription, ''),
			@CompanyEmail = ISNULL(CD.PrimaryEmail, ''), @ContactNumber = CONCAT(ISNULL(CD.PrimaryTelephoneExt, ''), ' ', ISNULL(CD.PrimaryTelephone, '')), @ContactWebsite = ISNULL(CD.Website, '')
		FROM MstCompanyDetails CD
			LEFT JOIN CmnFileUpload FU ON FU.ReferenceID = CD.PhotoViewer AND FU.IsDeleted = 0
			LEFT JOIN CmnFileUpload LI ON LI.ReferenceID = CD.Logo AND LI.IsDeleted = 0
			LEFT JOIN CmnFileUpload LH ON LH.ReferenceID = CD.SmallLogoID AND LH.IsDeleted = 0
			LEFT JOIN CmnFileUpload BI ON BI.ReferenceID = CD.BackgroundImgID AND BI.IsDeleted = 0
			LEFT JOIN CmnFileUpload LIO ON LIO.ReferenceID = CD.LoginPageImgLeftID AND LIO.IsDeleted = 0
			LEFT JOIN CmnFileUpload LIT ON LIT.ReferenceID = CD.LoginPageImgRightID AND LIT.IsDeleted = 0					
		WHERE CD.ParentCompanyID IS NULL AND ISNULL(CD.IsDeleted, 0) = 0 ORDER BY CD.ReferenceID DESC;

		SELECT TOP 1 @BuildDate = ISNULL(FORMAT(BuildDate, 'dd-MMM-yyyy'), ''),
			@InstallationDate = ISNULL(FORMAT(InstallationDate, 'dd-MMM-yyyy'), '')
		FROM CmnBuildInstallationHistory WHERE ScriptName LIKE '01_CORE_Database_Scripts%' ORDER BY ReferenceID DESC

		SELECT TOP 1 @LastBatchDate = ISNULL(FORMAT(InstallationDate, 'dd-MMM-yyyy'), ''), @DBVersion = ISNULL(Version, '')
		FROM CmnBuildInstallationHistory ORDER BY ReferenceID DESC

		SELECT TOP 1 ISNULL(CPP.RememberUser, 0) AS RememberUser, ISNULL(CPP.RetrivePassword, 0) AS RetrivePassword, ISNULL(CPP.RetriveType, 0) AS RetriveType, 
			ISNULL(CPP.CaptchaValidation, 0) AS CaptchaValidation, ISNULL(CPP.CaptchaLevel,0) AS CaptchaLevel, ISNULL(CPP.OTPValidation, 0) AS OTPValidation, 
			ISNULL(CPP.OTPType, 0) AS OTPType, ISNULL(CPP.OTPExpireMin, 0) AS OTPExpireMin, ISNULL(CPP.LoginAttempt, 0) AS LoginAttempt, 
			ISNULL(CPP.SessionTimeout, 0) AS SessionTimeout, ISNULL(CPP.MultipleLogin, 0) AS MultipleLogin, ISNULL(CPP.ExpiryDaysNegotiable, 0) AS ExpiryDaysNegotiable,
			ISNULL(CPP.MinimumLength, 0) AS MinimumLength, ISNULL(CPP.MaximumLength, 0) AS MaximumLength, ISNULL(CPP.IsNumeric, 0) AS IsNumeric,
			ISNULL(CPP.IsAlpha, 0) AS IsAlpha, ISNULL(CPP.IsSplCharacter, 0) AS IsSplCharacter, ISNULL(CPP.StartWithID, 0) AS StartWithID,
			ISNULL(CPP.PasswordResetType, 0) AS PasswordResetType, @CompanyName AS CompanyName, @ImagePath AS ProductImage, @BuildDate AS BuildDate,
			@InstallationDate AS InstallationDate, @LastBatchDate AS LastBatchDate, @DBVersion AS DBVersion, @LicenseKey AS LicenseKey,
			@LogoPath AS LogoImage, @SmallLogoPath AS SmallLogoImage, @BackgroundImgPath AS BackgroundImage, @LoginImgLeftPath AS LoginPageImageLeft,
			@LoginImgRightPath AS LoginPageImageRight, @LoginHeader AS LoginPageHeader, @HeaderDescription AS HeaderDescription, @CompanyEmail AS CompanyEmail,
			@ContactNumber AS ContactNumber, @ContactWebsite AS ContactWebSite , ISNULL(CPP.UserRegistration, 0) AS UserRegistration
		FROM CmnPasswordPolicy CPP 
		WHERE ISNULL(CPP.IsDeleted, 0) = 0 AND ISNULL(CPP.NotActive, 0) = 0 AND ISNULL(CPP.IsCurrentVersion, 1) = 1
		ORDER BY ReferenceID;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetAttendanceMasterData]'
GO

CREATE PROCEDURE [dbo].[spCmnGetAttendanceMasterData] (
	@IN_ControlName NVARCHAR(500),
	@IN_Month INT,
	@IN_Year INT,
	@IN_FormID INT, 
	@IN_UserID INT,
	@IN_SessionID VARCHAR(200))
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
				@UTCTime DATETIME = GETUTCDATE(),
				@GroupID BIGINT = 0,
				@TableName VARCHAR(255) = '',
				@KeyColumn VARCHAR(255) = '',
				@MonthColumn VARCHAR(255) = '',
				@YearColumn VARCHAR(255) = '',
				@FkDelete BIT = 0,
				@FkNotActive BIT = 0,
				@FkVersion BIT = 0,
				@SelectFeilds NVARCHAR(MAX) = '',
				@SelectQuery NVARCHAR(MAX) = '',
				@SQLConditionColumns NVARCHAR(MAX) = '',
				@ActiveCount INT = 0;

		SELECT TOP 1 @GroupID = GB.GroupID, @TableName = ISNULL(GB.TableName, ''), @KeyColumn = ISNULL(GB.KeyColumn, '')
		FROM CmnFormTabs FT
			JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
		WHERE FT.FormID = @IN_FormID AND FT.IsDeleted = 0 
			AND GB.Name = @IN_ControlName AND ISNULL(GB.TableName, '') <> '';

		IF ISNULL(@GroupID, 0) <> 0 AND ISNULL(@TableName, '') <> ''
		BEGIN
			SET @SelectFeilds = ISNULL((SUBSTRING((SELECT CONCAT(',"', FC.TableColumn,  '": "''+CAST(', FC.TableColumn, ' AS NVARCHAR(MAX))+''"')
			FROM CmnFormControls FC
			WHERE FC.GroupID = @GroupID AND FC.IsDeleted = 0 FOR XML PATH('')), 2, 200000)), '');

			SELECT TOP 1 @MonthColumn = FC.TableColumn
			FROM CmnControlProperty CLP
				JOIN CmnFormControls FC ON FC.ControlID = CLP.ControlID AND FC.IsDeleted = 0
			WHERE FC.GroupID = @GroupID AND CLP.Name = 'Month Column' AND CLP.Value = '1' AND CLP.IsDeleted = 0;

			SELECT TOP 1 @YearColumn = FC.TableColumn
			FROM CmnControlProperty CLP
				JOIN CmnFormControls FC ON FC.ControlID = CLP.ControlID AND FC.IsDeleted = 0
			WHERE FC.GroupID = @GroupID AND CLP.Name = 'Year Column' AND CLP.Value = '1' AND CLP.IsDeleted = 0;

			IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'IsDeleted')
				SET @FkDelete = 1;

			IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'NotActive')
				SET @FkNotActive = 1;

			IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'IsCurrentVersion')
				SET @FkVersion = 1;

			SELECT @ActiveCount = COUNT(1) FROM CmnSearchParameterProcess WHERE SessionID = @IN_SessionID AND TableColumn = 'MT.NotActive';
			SET @SQLConditionColumns = ISNULL(SUBSTRING((SELECT ' AND ' + CASE WHEN DP.ControlType = 'Textbox' OR DP.ControlType = 'Multiline Textbox' THEN 
																					DP.ColumnName + ' LIKE ''%' + ISNULL(DP.ColumnValue, '') + '%''' 
																			WHEN DP.ControlType = 'Check Listbox' THEN
																				'(' + REPLACE(DP.ColumnValue, '<col>', ''','' + CAST(' + DP.ColumnName  + ' AS VARCHAR(200)) + '',''' + ' LIKE ') + ')'
																			WHEN DP.ControlType = 'Date' THEN 
																			CASE WHEN CHARINDEX('AND', DP.ColumnValue) > 0 THEN ('(CAST('+DP.TableColumn+ ' AS DATE) BETWEEN '+ ISNULL(DP.ColumnValue, '')+ ')') 
																					WHEN CHARINDEX('>=', DP.ColumnValue) > 0 OR CHARINDEX('<=', DP.ColumnValue) > 0 THEN ('(CAST('+DP.TableColumn + ' AS DATE) '+ ISNULL(DP.ColumnValue, '')+ ')')
																				ELSE ('(CAST('+DP.TableColumn+ ' AS DATE) = '+ ISNULL(DP.ColumnValue, '')+ ')') END 
																			WHEN DP.ControlType = 'DateTime' THEN 
																				CASE WHEN CHARINDEX('AND', DP.ColumnValue) > 0 THEN ('(CAST('+DP.TableColumn+ ' AS DATETIME) BETWEEN '+ ISNULL(DP.ColumnValue, '')+ ')') 
																					WHEN CHARINDEX('>=', DP.ColumnValue) > 0 OR CHARINDEX('<=', DP.ColumnValue) > 0 THEN ('(CAST('+DP.TableColumn + ' AS DATETIME) '+ ISNULL(DP.ColumnValue, '')+ ')')
																				ELSE ('(CAST('+DP.TableColumn+ ' AS DATETIME) = '+ ISNULL(DP.ColumnValue, '')+ ')') END
																			WHEN DP.ControlType = 'Checkbox' THEN (DP.ColumnName+ ' = '+ ISNULL(DP.ColumnValue, 0))
																			ELSE DP.ColumnName + ' = ''' + ISNULL(DP.ColumnValue, '') + '''' END 
													FROM CmnSearchParameterProcess DP WITH (NOLOCK)
														JOIN INFORMATION_SCHEMA.COLUMNS TC ON TC.TABLE_NAME = @TableName AND TC.COLUMN_NAME = REPLACE(DP.ColumnName, 'MT.', '')
														JOIN CmnFormControls FC ON FC.GroupID = @GroupID 
															AND FC.TableColumn = REPLACE(DP.TableColumn, 'MT.', '') AND FC.IsDeleted = 0
														JOIN CmnControlProperty CLP ON CLP.ControlID = FC.ControlID 
															AND CLP.Name = 'Condition Column' AND CLP.Value = '1' AND CLP.IsDeleted = 0
													WHERE DP.SessionID = @IN_SessionID 
													ORDER BY DP.ColumnName
													FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '');
			IF @ActiveCount > 0
			BEGIN
				SET @FkNotActive = 0;
			END
			SET @SelectQuery = CONCAT('SELECT TOP 1 ''{', @SelectFeilds, '}'' FROM ', @TableName, ' MT WHERE ', @YearColumn, '=', @IN_Year,
				' AND ', @MonthColumn, '=', @IN_Month, @SQLConditionColumns,
				CASE WHEN @FkDelete = 1 THEN ' AND ISNULL(IsDeleted, 0) = 0' ELSE '' END,
				CASE WHEN @FkNotActive = 1 THEN ' AND ISNULL(NotActive, 0) = 0' ELSE '' END,
				CASE WHEN @FkVersion = 1 THEN ' AND ISNULL(IsCurrentVersion, 1) = 1' ELSE '' END);

			EXEC(@SelectQuery);
		END
		ELSE
		BEGIN
			SELECT '';
		END
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetAuditColumnsByWorkflow]'
GO

CREATE PROCEDURE [dbo].[spCmnGetAuditColumnsByWorkflow] (@IN_Workflow VARCHAR(100), @IN_Type VARCHAR(100),
	@IN_DataValue NVARCHAR(4000), @IN_FormID INT, @IN_UserID INT)
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY

		DECLARE	@ErrorMessage VARCHAR(2000),
						@ErrorSeverity VARCHAR(50),
						@ErrorState INT,
						@TableNameList VARCHAR(4000) = '',
						@MasterFormID INT = 0,
						@IsFormDetails BIT = 1,
						@AuditColumnQuery NVARCHAR(MAX) = '',
						@DetailsTableName VARCHAR(255) = ''

		DECLARE @WorkflowAuditColumns TABLE (Text NVARCHAR(500), Value VARCHAR(255), TextUpdated BIT, IsModified BIT)

		IF @IN_Workflow = 'Sample'
		BEGIN
			IF @IN_Type = 'Result Change' 
			BEGIN
				SET @IsFormDetails = 0;
				SET @TableNameList = 'viewSmrSampleResultAuditDataList';
				SET @MasterFormID = ISNULL((SELECT TOP 1 FormID FROM CmnFormDetails WHERE Name = 'Sample Result Entry'), 0);
			END
			ELSE IF @IN_Type = 'Other Changes' 
			BEGIN
				SET @IsFormDetails = 0;
				SET @TableNameList = 'viewSmrSampleOtherAuditDataList';
				SET @MasterFormID = ISNULL((SELECT TOP 1 FormID FROM CmnFormDetails WHERE Name = 'Sample Registration'), 0);
			END
			ELSE
			BEGIN
				SET @TableNameList = 'SmrSampleDetails';
				SET @DetailsTableName = 'viewSmrSampleAuditDetails';
				SET @MasterFormID = ISNULL((SELECT TOP 1 FormID FROM CmnFormDetails WHERE Name = 'Sample Registration'), 0);
			END
		END

		IF @IsFormDetails = 1
		BEGIN
			INSERT INTO @WorkflowAuditColumns
			SELECT DISTINCT ADT.TableColumn AS Text, ADT.TableColumn AS Value, 0 AS TextUpdated, 
			  CASE WHEN EXISTS(SELECT 1 FROM CmnAuditTracking vAUT
				                   JOIN CmnAuditDataTracking vADT ON vADT.AuditTrackingID = vAUT.ReferenceID
													   AND vADT.TableColumn = ADT.TableColumn
												 WHERE vAUT.TableName = @TableNameList
				                   AND vAUT.IdentityValue = @IN_DataValue
													 AND vAUT.EventName NOT IN ('INSERT') AND ISNULL(vADT.OldData,'') <> ''
													 AND ISNULL(vADT.OldData,'') <> ISNULL(vADT.NewData,'')) THEN 1 ELSE 0 END AS IsModified
			FROM CmnAuditTracking AUT
				JOIN CmnAuditDataTracking ADT ON ADT.AuditTrackingID = AUT.ReferenceID
			WHERE -- (PATINDEX('%,' + AUT.TableName + ',%', ',' + @TableNameList + ',') > 0)
			  AUT.TableName = @TableNameList
				AND AUT.IdentityValue = @IN_DataValue --AND AUT.EventName NOT IN ('INSERT') 
				AND AUT.Status = 'S'
				AND ADT.TableColumn NOT IN ('ReferenceID', 'CreatedBy', 'CreatedDate', 'CreatedDateGMT', 
					'ModifiedBy', 'ModifiedDate', 'ModifiedDateGMT')
				AND (ADT.OldData NOT IN ('0', '') OR ADT.NewData NOT IN ('0', ''))
			ORDER BY ADT.TableColumn;

			IF @MasterFormID <> 0 
			BEGIN
				UPDATE WAC
				SET Text = FC.Name,
					TextUpdated = 1
				FROM @WorkflowAuditColumns WAC
					JOIN CmnFormControls FC ON FC.TableColumn = WAC.Value
					JOIN CmnGroupBoxes GB ON FC.GroupID = GB.GroupID JOIN CmnFormTabs FT ON FT.TabID = GB.TabID
				WHERE FT.FormID = @MasterFormID;

				UPDATE WAC
				SET Text = CC.DisplayName,
					TextUpdated = 1
				FROM @WorkflowAuditColumns WAC
					JOIN CmnControlColumns CC ON CC.ColumnName = WAC.Value
					JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID
					JOIN CmnGroupBoxes GB ON FC.GroupID = GB.GroupID JOIN CmnFormTabs FT ON FT.TabID = GB.TabID
				WHERE WAC.TextUpdated = 0 AND FT.FormID = @MasterFormID;
			END

			SELECT Value, Text, IsModified FROM @WorkflowAuditColumns ORDER BY IsModified DESC, Text ASC;
		END
		ELSE
		BEGIN
		  IF @TableNameList = 'viewSmrSampleOtherAuditDataList' 
			  SELECT Value, Text, MAX(IsModified) AS IsModified FROM (SELECT M.Value, M.Text, 
				  CASE WHEN M.Text IN ('Instrument','Analyst') THEN 1 
					  WHEN EXISTS(SELECT 1 FROM viewSmrSampleOtherAuditDataList V
						            WHERE V.Text = M.Text AND V.ReferenceID = M.ReferenceID
												  AND V.ControlName = M.ControlName AND ISNULL(V.OldValue, '') <> ''
													AND ISNULL(V.OldValue, '') <> ISNULL(V.NewValue, '')) THEN 1 ELSE 0 END AS IsModified 
				FROM viewSmrSampleOtherAuditDataList M 
				WHERE ReferenceID = @IN_DataValue) AS R GROUP BY Value, Text ORDER BY IsModified DESC, Value ASC;
			ELSE 
			BEGIN
			  SET @AuditColumnQuery = CONCAT('SELECT Value, Text, MAX(IsModified) AS IsModified FROM ', @TableNameList, ' WHERE ReferenceID = ''', @IN_DataValue, ''' GROUP BY Value, Text ORDER BY IsModified DESC, Value ASC;');

			  EXEC (@AuditColumnQuery);
			END
		END

		IF ISNULL(@DetailsTableName, '') <> ''
		BEGIN
			SET @AuditColumnQuery = CONCAT('SELECT DISTINCT Value, Text, OrderBy FROM ', @DetailsTableName, ' WHERE ReferenceID = ''', @IN_DataValue, ''' ORDER BY OrderBy;');

			EXEC (@AuditColumnQuery);
		END
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetAuditDataByWorkflow]'
GO

CREATE PROCEDURE [dbo].[spCmnGetAuditDataByWorkflow] (@IN_Workflow VARCHAR(100), @IN_Type VARCHAR(100),
	@IN_DataValue NVARCHAR(4000), @IN_ColumnName VARCHAR(255), @IN_FormID INT, @IN_UserID INT)
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY

		DECLARE	@ErrorMessage VARCHAR(2000),
						@ErrorSeverity VARCHAR(50),
						@ErrorState INT,
						@TableNameList VARCHAR(4000) = '',
						@MasterFormID INT = 0,
						@ControlID BIGINT = 0,
						@ControlType INT = 0,
						@DataType INT = 0,
						@FkType INT = 0,
						@FkTable SYSNAME = '',
						@FkColumn SYSNAME = '',
						@FkData SYSNAME = '',
						@Min INT = 0,
						@Max INT = 0,
						@Query NVARCHAR(MAX) = '',
						@NewData NVARCHAR(4000) = '',
						@OldData NVARCHAR(4000) = '',
						@NewValue NVARCHAR(MAX) = '',
						@OldValue NVARCHAR(MAX) = '',
						@IsFormDetails BIT = 1,
						@AuditColumnQuery NVARCHAR(MAX) = '',
						@COATableNameList VARCHAR(4000) = '',
						@COAAuthorizedTable VARCHAR(4000) = '',
						@COAFormID INT = 0,
						@COAControlID BIGINT = 0,
						@COAControlType INT = 0,
						@COADataType INT = 0,
						@COAFkType INT = 0,
						@COAFkTable SYSNAME = '',
						@COAFkColumn SYSNAME = '',
						@COAFkData SYSNAME = '',
						@AuditType INT = 0,
						@FkTableQuery SYSNAME = '',
						@FkColumnQuery SYSNAME = '',
						@FkDataQuery SYSNAME = '',
						@COAIDs VARCHAR(1000) = '',
						@AuthorizedIDs VARCHAR(1000) = '',
						@ReportNumber NVARCHAR(1000) = '';

		DECLARE @WorkflowAuditData TABLE (RowNum INT IDENTITY(1, 1), AuditType INT, AuditTrackingID BIGINT, AuditDate DATETIME, IpAddress VARCHAR(100), UserID INT,
			UserName NVARCHAR(100), FormID INT, FormName NVARCHAR(100), EventName VARCHAR(50), TableName VARCHAR(255),
			IdentityValue NVARCHAR(4000), TableColumn SYSNAME, OldData NVARCHAR(4000), NewData NVARCHAR(4000),
			OldValue NVARCHAR(4000), NewValue NVARCHAR(4000), DataType INT, ReportNumber NVARCHAR(1000))

		IF @IN_Workflow = 'Sample'
		BEGIN
			IF @IN_Type = 'Result Change' 
			BEGIN
				SET @IsFormDetails = 0;
				SET @TableNameList = 'viewSmrSampleResultAuditDataList';
				SET @MasterFormID = ISNULL((SELECT TOP 1 FormID FROM CmnFormDetails WHERE Name = 'Sample Result Entry'), 0);
			END
			ELSE IF @IN_Type = 'Other Changes' 
			BEGIN
				SET @IsFormDetails = 0;
				SET @TableNameList = 'viewSmrSampleOtherAuditDataList';
				SET @MasterFormID = ISNULL((SELECT TOP 1 FormID FROM CmnFormDetails WHERE Name = 'Sample Registration'), 0);
			END
			ELSE
			BEGIN
				SET @TableNameList = 'SmrSampleDetails';
				SET @MasterFormID = ISNULL((SELECT TOP 1 FormID FROM CmnFormDetails WHERE Name = 'Sample Registration'), 0);
				SET @COATableNameList = 'SmrCoaTrackingDetails';
				SET @COAFormID = ISNULL((SELECT TOP 1 FormID FROM CmnFormDetails WHERE Name = 'COA Generation'), 0);
			END
		END

		IF @IsFormDetails = 1
		BEGIN

			IF @MasterFormID <> 0 
			BEGIN

				SELECT TOP 1 @ControlID = FC.ControlID, @ControlType = FC.ControlType, @DataType = FC.DataType, 
					@FkType = FC.FkType, @FkTable = FC.FkTable, @FkColumn = FC.FkColumn, @FkData = FC.FkData
				FROM CmnFormControls FC
					JOIN CmnGroupBoxes GB ON FC.GroupID = GB.GroupID JOIN CmnFormTabs FT ON FT.TabID = GB.TabID
				WHERE FT.FormID = @MasterFormID AND FC.TableColumn = @IN_ColumnName;

				IF ISNULL(@ControlID, 0) = 0 
				BEGIN

					SELECT TOP 1 @ControlID = CC.ColumnID, @ControlType = CC.ControlType, @DataType = CC.DataType, 
						@FkType = CC.FkType, @FkTable = CC.FkTable, @FkColumn = CC.FkColumn, @FkData = CC.FkData
					FROM CmnControlColumns CC
						JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID
						JOIN CmnGroupBoxes GB ON FC.GroupID = GB.GroupID JOIN CmnFormTabs FT ON FT.TabID = GB.TabID
					WHERE FT.FormID = @MasterFormID AND CC.ColumnName = @IN_ColumnName;
					

				END

				IF @COAFormID <> 0
				BEGIN

					SELECT TOP 1 @COAControlID = FC.ControlID, @COAControlType = FC.ControlType, @COADataType = FC.DataType, 
						@COAFkType = FC.FkType, @COAFkTable = FC.FkTable, @COAFkColumn = FC.FkColumn, @COAFkData = FC.FkData
					FROM CmnFormControls FC
						JOIN CmnGroupBoxes GB ON FC.GroupID = GB.GroupID JOIN CmnFormTabs FT ON FT.TabID = GB.TabID
					WHERE FT.FormID = @COAFormID AND FC.TableColumn = 'COAStatusID';


				END
			END

			IF EXISTS(SELECT 1 FROM SmrCoaTrackingDetails WHERE RequestID = @IN_DataValue AND COAStatusID <> 3 AND IsDeleted = 0)
				AND @IN_ColumnName = 'SampleStatusID'
			BEGIN
				SELECT @COAIDs = (SELECT STRING_AGG(ReferenceID, ',') FROM SmrCoaTrackingDetails 
								WHERE RequestID = @IN_DataValue AND COAStatusID <> 3 AND IsDeleted = 0);

				INSERT INTO @WorkflowAuditData
				SELECT 1, ADT.AuditTrackingID, AUT.AuditDate, AUT.IpAddress, AUT.UserID, UD.UserName, 
					AUT.FormID, AUT.FormName, AUT.EventName, AUT.TableName, AUT.IdentityValue, ADT.TableColumn, 
					ADT.OldData, ADT.NewData, 
					CASE WHEN FC.Datatype = 4 AND ISNULL(ADT.OldDataDisplay, '') <> '' THEN
							CASE WHEN CHARINDEX('-', ADT.OldDataDisplay) = 3 THEN CONVERT(VARCHAR, CONVERT(DATE, ADT.OldDataDisplay, 105), 23)
								ELSE FORMAT(CAST(ADT.OldDataDisplay AS DATE), 'yyyy-MM-dd') END
						 WHEN FC.Datatype = 5 AND ISNULL(ADT.OldDataDisplay, '') <> '' THEN
								 FORMAT( DATEADD(MINUTE, DATEDIFF(MINUTE, GETUTCDATE(), GETDATE()),
								 CAST(SUBSTRING(ADT.OldDataDisplay, CHARINDEX(',', ADT.OldDataDisplay) + 1, LEN(ADT.OldDataDisplay)) AS DATETIME))
								 , 'yyyy-MM-dd hh:mm:ss')
						 ELSE ADT.OldDataDisplay END AS OldValue,
					CASE WHEN FC.Datatype = 4 AND ISNULL(ADT.NewDataDisplay, '') <> '' THEN
							CASE WHEN CHARINDEX('-', ADT.NewDataDisplay) = 3 THEN CONVERT(VARCHAR, CONVERT(DATE, ADT.NewDataDisplay, 105), 23)
								ELSE FORMAT(CAST(ADT.NewDataDisplay AS DATE), 'yyyy-MM-dd') END
						 WHEN FC.Datatype = 5 AND ISNULL(ADT.NewDataDisplay, '') <> '' THEN
								 FORMAT( DATEADD(MINUTE, DATEDIFF(MINUTE, GETUTCDATE(), GETDATE()),
								 CAST(SUBSTRING(ADT.NewDataDisplay, CHARINDEX(',', ADT.NewDataDisplay) + 1, LEN(ADT.NewDataDisplay)) AS DATETIME))
								 , 'yyyy-MM-dd hh:mm:ss')
						 ELSE ADT.NewDataDisplay END AS NewValue,  FC.DataType AS DataType, ''
				FROM CmnAuditTracking AUT
					JOIN CmnAuditDataTracking ADT ON ADT.AuditTrackingID = AUT.ReferenceID
					LEFT JOIN CmnUserDetails UD ON UD.UserID = AUT.UserID
					LEFT JOIN CmnFormControls FC ON FC.ControlID = ADT.ControlID
				WHERE (PATINDEX('%,' + AUT.TableName + ',%', ',' + @TableNameList + ',') > 0) 
					AND AUT.IdentityValue = @IN_DataValue AND ADT.TableColumn = @IN_ColumnName 
					--AND AUT.EventName NOT IN ('INSERT') 
					AND AUT.Status = 'S'
				UNION
				SELECT 2, ADT.AuditTrackingID, AUT.AuditDate, AUT.IpAddress, AUT.UserID, UD.UserName, 
					AUT.FormID, AUT.FormName, AUT.EventName, AUT.TableName, AUT.IdentityValue, ADT.TableColumn, 
					ADT.OldData, ADT.NewData, 
					ISNULL(TD.ReportNumber, '') + ' - COA ' + ISNULL(ADT.OldDataDisplay, '') AS OldValue,
					ISNULL(TD.ReportNumber, '') + ' - COA ' + ISNULL(ADT.NewDataDisplay, '') AS NewValue,  FC.DataType AS DataType, ISNULL(TD.ReportNumber, '')
				FROM CmnAuditTracking AUT
					JOIN CmnAuditDataTracking ADT ON ADT.AuditTrackingID = AUT.ReferenceID  AND ADT.IsDeleted = 0
					LEFT JOIN SmrCoaTrackingDetails TD ON TD.ReferenceID = AUT.IdentityValue
						AND TD.ReferenceID IN (SELECT Value FROM STRING_SPLIT(@COAIDs, ','))
					LEFT JOIN CmnUserDetails UD ON UD.UserID = AUT.UserID
					LEFT JOIN CmnFormControls FC ON FC.ControlID = ADT.ControlID
				WHERE AUT.IsDeleted = 0 AND (PATINDEX('%,' + AUT.TableName + ',%', ',' + @COATableNameList + ',') > 0) 
					AND AUT.IdentityValue IN (SELECT Value FROM STRING_SPLIT(@COAIDs, ',')) AND ADT.TableColumn = 'COAStatusID' 
					AND AUT.Status = 'S' 
				ORDER BY AUT.AuditDate;

				--IF @AuditType = 2 AND @IN_ColumnName = 'SampleStatusID'
				--		UPDATE @WorkflowAuditData SET NewValue = @ReportNumber + ' - COA ' + @NewValue, OldValue = @ReportNumber + ' - COA ' + @OldValue WHERE RowNum = @Min;


			END
			ELSE
			BEGIN

				INSERT INTO @WorkflowAuditData
				SELECT 1, ADT.AuditTrackingID, AUT.AuditDate, AUT.IpAddress, AUT.UserID, UD.UserName, 
					AUT.FormID, AUT.FormName, AUT.EventName, AUT.TableName, AUT.IdentityValue, ADT.TableColumn, 
					ADT.OldData, ADT.NewData,
					CASE WHEN FC.Datatype = 4 AND ISNULL(ADT.OldDataDisplay, '') <> '' THEN
							CASE WHEN CHARINDEX('-', ADT.OldDataDisplay) = 3 THEN CONVERT(VARCHAR, CONVERT(DATE, ADT.OldDataDisplay, 105), 23)
								ELSE FORMAT(CAST(ADT.OldDataDisplay AS DATE), 'yyyy-MM-dd') END
						 WHEN FC.Datatype = 5 AND ISNULL(ADT.OldDataDisplay, '') <> '' THEN
								 FORMAT( CAST(SUBSTRING(ADT.OldDataDisplay, CHARINDEX(',', ADT.OldDataDisplay) + 1, LEN(ADT.OldDataDisplay)) AS DATETIME) , 'yyyy-MM-dd hh:mm:ss')
						 ELSE ADT.OldDataDisplay END AS OldValue,
					CASE WHEN FC.Datatype = 4 AND ISNULL(ADT.NewDataDisplay, '') <> '' THEN
							CASE WHEN CHARINDEX('-', ADT.NewDataDisplay) = 3 THEN CONVERT(VARCHAR, CONVERT(DATE, ADT.NewDataDisplay, 105), 23)
								ELSE FORMAT(CAST(ADT.NewDataDisplay AS DATE), 'yyyy-MM-dd') END
						 WHEN FC.Datatype = 5 AND ISNULL(ADT.NewDataDisplay, '') <> '' THEN
								 FORMAT( CAST(SUBSTRING(ADT.NewDataDisplay, CHARINDEX(',', ADT.NewDataDisplay) + 1, LEN(ADT.NewDataDisplay)) AS DATETIME) , 'yyyy-MM-dd hh:mm:ss')
						 ELSE ADT.NewDataDisplay END AS NewValue, FC.DataType AS DataType, ''
				FROM CmnAuditTracking AUT
					JOIN CmnAuditDataTracking ADT ON ADT.AuditTrackingID = AUT.ReferenceID
					LEFT JOIN CmnUserDetails UD ON UD.UserID = AUT.UserID
					LEFT JOIN CmnFormControls FC ON FC.ControlID = ADT.ControlID
				WHERE (PATINDEX('%,' + AUT.TableName + ',%', ',' + @TableNameList + ',') > 0) 
					AND AUT.IdentityValue = @IN_DataValue AND ADT.TableColumn = @IN_ColumnName 
					--AND AUT.EventName NOT IN ('INSERT') 
					AND AUT.Status = 'S' 
				ORDER BY AUT.AuditDate;

				
			END

			--IF ISNULL(@FkTable, '') <> ''
			--BEGIN
			--	SELECT @Max = ISNULL(MAX(RowNum), 0) FROM @WorkflowAuditData;


				--WHILE @Min < @Max
				--BEGIN
				--	SET @Min = @Min + 1;
				--	SET @NewData = '';
				--	SET @OldData = '';
				--	SET @NewValue = '';
				--	SET @OldValue = '';

				--	SELECT @NewData = ISNULL(NewData, 0), @OldData = ISNULL(OldData, 0),
				--		@AuditType = ISNULL(AuditType, 0), @ReportNumber = ISNULL(ReportNumber, '')
				--	FROM @WorkflowAuditData WHERE RowNum = @Min;
					
				--	IF @AuditType = 2
				--	BEGIN
				--		SELECT @FkDataQuery = @COAFkData, @FkTableQuery = @COAFkTable, @FkColumnQuery = @COAFkColumn;
				--	END
				--	ELSE
				--	BEGIN
				--		SELECT @FkDataQuery = @FkData, @FkTableQuery = @FkTable, @FkColumnQuery = @FkColumn;						
				--	END

				--	IF @FkType = 1
				--	BEGIN

				--		SET @Query = CONCAT('SELECT @NewValue = STRING_AGG(', @FkDataQuery, ', '','') FROM (SELECT DISTINCT ISNULL(', @FkDataQuery, ', '''') AS ', @FkDataQuery, ' FROM CmnCodeMaster WHERE Type = ''', @FkTableQuery, ''' AND (PATINDEX(''%,'' + CAST(', @FkColumnQuery, ' AS VARCHAR(50)) + '',%'', '','' + ISNULL(''', @NewData, ''', '''') + '','') > 0) ) AS DistinctReferences')

				--		EXEC sp_executesql @Query, N'@NewValue NVARCHAR(MAX) OUTPUT', @NewValue OUTPUT

				--		SET @Query = CONCAT('SELECT @OldValue = STRING_AGG(', @FkDataQuery, ', '','') FROM (SELECT DISTINCT ISNULL(', @FkDataQuery, ', '''') AS ', @FkDataQuery, ' FROM CmnCodeMaster WHERE Type = ''', @FkTableQuery, ''' AND (PATINDEX(''%,'' + CAST(', @FkColumnQuery, ' AS VARCHAR(50)) + '',%'', '','' + ISNULL(''', @OldData, ''', '''') + '','') > 0) ) AS DistinctReferences')

				--		EXEC sp_executesql @Query, N'@OldValue NVARCHAR(MAX) OUTPUT', @OldValue OUTPUT
				--	END
				--	ELSE IF @FkType = 2 
				--	BEGIN

				--		SET @Query = CONCAT('SELECT @NewValue = STRING_AGG(', @FkData, ', '','') FROM (SELECT DISTINCT ISNULL(', @FkData, ', '''') AS ', @FkData, ' FROM ', @FkTable, ' WHERE (PATINDEX(''%,'' + CAST(', @FkColumn, ' AS VARCHAR(50)) + '',%'', '','' + ISNULL(''', @NewData, ''', '''') + '','') > 0) ) AS DistinctReferences')

				--		EXEC sp_executesql @Query, N'@NewValue NVARCHAR(MAX) OUTPUT', @NewValue OUTPUT

				--		SET @Query = CONCAT('SELECT @OldValue = STRING_AGG(', @FkData, ', '','') FROM (SELECT DISTINCT ISNULL(', @FkData, ', '''') AS ', @FkData, ' FROM ', @FkTable, ' WHERE (PATINDEX(''%,'' + CAST(', @FkColumn, ' AS VARCHAR(50)) + '',%'', '','' + ISNULL(''', @OldData, ''', '''') + '','') > 0) ) AS DistinctReferences')

				--		EXEC sp_executesql @Query, N'@OldValue NVARCHAR(MAX) OUTPUT', @OldValue OUTPUT
				--	END
				--	ELSE IF @FkType = 3 
				--	BEGIN

				--		SET @Query = CONCAT('SELECT @NewValue = STRING_AGG(', @FkData, ', '','') FROM (SELECT DISTINCT ISNULL(', @FkData, ', '''') AS ', @FkData, ' FROM CmnFileUpload WHERE Type = ''', @IN_ColumnName, ''' AND (PATINDEX(''%,'' + CAST(', @FkColumn, ' AS VARCHAR(50)) + '',%'', '','' + ISNULL(''', @NewData, ''', '''') + '','') > 0) ) AS DistinctReferences')

				--		EXEC sp_executesql @Query, N'@NewValue NVARCHAR(MAX) OUTPUT', @NewValue OUTPUT

				--		SET @Query = CONCAT('SELECT @OldValue = STRING_AGG(', @FkData, ', '','') FROM (SELECT DISTINCT ISNULL(', @FkData, ', '''') AS ', @FkData, ' FROM CmnFileUpload WHERE Type = ''', @IN_ColumnName, ''' AND (PATINDEX(''%,'' + CAST(', @FkColumn, ' AS VARCHAR(50)) + '',%'', '','' + ISNULL(''', @OldData, ''', '''') + '','') > 0) ) AS DistinctReferences')

				--		EXEC sp_executesql @Query, N'@OldValue NVARCHAR(MAX) OUTPUT', @OldValue OUTPUT
				--	END

				--	IF @AuditType = 2 AND @IN_ColumnName = 'SampleStatusID'
				--		UPDATE @WorkflowAuditData SET NewValue = @ReportNumber + ' - COA ' + @NewValue, OldValue = @ReportNumber + ' - COA ' + @OldValue WHERE RowNum = @Min;
				--	ELSE
				--		UPDATE @WorkflowAuditData SET NewValue = @NewValue, OldValue = @OldValue WHERE RowNum = @Min;

				--END
			--END
			--IF @DataType = 4 
			--BEGIN

			--	UPDATE @WorkflowAuditData SET NewValue = CASE WHEN CHARINDEX('-', NewValue) = 3 THEN CONVERT(VARCHAR, CONVERT(DATE, NewValue, 105), 23)
			--												ELSE FORMAT(CAST(NewValue AS DATE), 'yyyy-MM-dd') END WHERE ISNULL(NewValue, '') <> '';
			--	UPDATE @WorkflowAuditData SET OldValue = CASE WHEN CHARINDEX('-', OldValue) = 3 THEN CONVERT(VARCHAR, CONVERT(DATE, OldValue, 105), 23)
			--												ELSE FORMAT(CAST(OldValue AS DATE), 'yyyy-MM-dd') END WHERE ISNULL(OldValue, '') <> '';
			--END
			--ELSE IF @DataType = 5 
			--BEGIN

			---- Calculate time zone offset once to reuse
			--DECLARE @TimeZoneOffset INT = (SELECT DATEDIFF(MINUTE, GETUTCDATE(), GETDATE()));

			---- Update NewValue with adjusted and formatted datetime
			--UPDATE @WorkflowAuditData SET NewValue = FORMAT( DATEADD(MINUTE, @TimeZoneOffset, CAST(SUBSTRING(NewValue, CHARINDEX(',', NewValue) + 1, LEN(NewValue)) AS DATETIME)), 'yyyy-MM-dd hh:mm:ss') WHERE ISNULL(NewValue, '') <> '';

			---- Update OldValue with adjusted and formatted datetime
			--UPDATE @WorkflowAuditData SET OldValue = FORMAT( DATEADD(MINUTE, @TimeZoneOffset, CAST(SUBSTRING(OldValue, CHARINDEX(',', OldValue) + 1, LEN(OldValue)) AS DATETIME)), 'yyyy-MM-dd hh:mm:ss') WHERE ISNULL(OldValue, '') <> '';
		 -- END
			-- Select updated rows where OldValue differs from NewValue
			SELECT * FROM @WorkflowAuditData --WHERE ISNULL(OldValue, '') <> ISNULL(NewValue, '') ORDER BY AuditDate;
		END
		ELSE
	   BEGIN

			SET @AuditColumnQuery = CONCAT('SELECT AuditTrackingID, AuditDate, IpAddress, UserID, UserName,
				FormID, FormName, EventName, TableName, IdentityValue, ControlName AS TableColumn, OldData, NewData, 
				OldValue, NewValue, DataType FROM ', @TableNameList, ' WHERE ReferenceID = ''', @IN_DataValue, ''' AND Value = ''', @IN_ColumnName,
				''' ORDER BY AuditTrackingID, OrderBy;');

			EXEC (@AuditColumnQuery);
		END	
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetConfiguredForms]'
GO

CREATE PROCEDURE [dbo].[spCmnGetConfiguredForms]
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50)

		IF OBJECT_ID('tempdb..#tempFormList') IS NOT NULL
			DROP TABLE #tempFormList

		CREATE TABLE #tempFormList (FormID BIGINT NOT NULL)
		
		INSERT INTO #tempFormList (FormID)
		SELECT FormID FROM FormConfiguration WHERE ISNULL(FormID, '') <> '' AND Status = 4 AND IsDeleted = 0 AND NotActive = 0;

		INSERT INTO #tempFormList (FormID)
		SELECT FormID FROM ReportConfiguration WHERE ISNULL(FormID, '') <> '' AND Status = 4 AND IsDeleted = 0 AND NotActive = 0;

		INSERT INTO #tempFormList (FormID)
		SELECT FormID FROM DashboardConfiguration WHERE ISNULL(FormID, '') <> '' AND Status = 4 AND IsDeleted = 0 AND NotActive = 0;

		INSERT INTO #tempFormList (FormID)
		SELECT FD.FormID FROM CmnFormDetails FD 
			JOIN CmnCodeMaster CM ON CM.Type = 'Module' AND CM.TypeValues = 'Tools' AND CM.CodemasterID = FD.ModuleID
				AND CM.IsDeleted = 0 AND CM.NotActive = 0 AND CM.IsCurrentVersion = 1
		WHERE FD.IsDeleted = 0;

		SELECT DISTINCT FormID FROM #tempFormList;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetControlProperties]'
GO

CREATE PROCEDURE [dbo].[spCmnGetControlProperties](
	@IN_FormID INT, 
	@IN_UserID INT
)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY
	
	  DECLARE @ErrorMessage NVARCHAR(2000),
			@ErrorSeverity NVARCHAR(50),
			@ErrorState NVARCHAR(50),
			@ControlType NVARCHAR(MAX) ='',
			@OrderType NVARCHAR(MAX) ='',
			@FkType NVARCHAR(MAX) =''

		SELECT @OrderType = ISNULL(SUBSTRING((SELECT ',' + ('{"Value":"'+ CAST(ISNULL(CodemasterID, 0) AS NVARCHAR(MAX)) +'","Text":"'+TypeValues+'"}')
		FROM CmnCodeMaster WHERE Type = 'Order Type' AND IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1
		FOR XML PATH(''), ROOT('MyString'), TYPE).value('MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '')

		SELECT @ControlType = ISNULL(SUBSTRING((SELECT ',' + ('{"Value":"'+ CAST(ISNULL(CodemasterID, 0) AS NVARCHAR(MAX)) +'","Text":"'+TypeValues+'"}')
		FROM CmnCodeMaster WHERE Type = 'Control Type' AND CodemasterID IN (1,2,3,4,5,6,7,8, 24, 25) AND IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1
		FOR XML PATH(''), ROOT('MyString'), TYPE).value('MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '')

		SELECT @FkType = ISNULL(SUBSTRING((SELECT ',' + ('{"Value":"'+ CAST(ISNULL(CodemasterID, 0) AS NVARCHAR(MAX)) +'","Text":"'+TypeValues+'"}')
		FROM CmnCodeMaster WHERE Type = 'FK Type' AND IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1
		FOR XML PATH(''), ROOT('MyString'), TYPE).value('MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '')

		SELECT '['+@OrderType+']', '['+@ControlType+']', '['+@FkType+']';
  
	END TRY
	BEGIN CATCH

		--EXEC [Fn_ErrorFetch] @@SPID

		--INSERT INTO tbl_StoredProcedure_Error(MenuID, App_User, SQL_User, Server_Name, [Procedure_Name],
		--	Error_Code, Line_Number, [Error_Message], [Error_State], Logged_Date, [INPUT_PARAMS]) 
		--SELECT @IN_FormID, @IN_UserID, USER_NAME(), @@SERVERNAME, ERROR_PROCEDURE(), ERROR_NUMBER(),
		--	ERROR_LINE(), ERROR_MESSAGE(), ERROR_STATE(), GETUTCDATE(), (SELECT PIN FROM TBL_ERRORFETCH);

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END;
GO
PRINT N'Creating [dbo].[spCmnGetDataSources]'
GO

CREATE PROCEDURE [dbo].[spCmnGetDataSources](
	@IN_Event VARCHAR(10),
	@IN_DataID VARCHAR(100),
	@IN_Header NVARCHAR(500),
	@IN_SearchButtonID INT, 
	@IN_FormID INT,
	@IN_UserID INT)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
				@DSCount INT = 0,
				@OutString NVARCHAR(MAX) = '', 
				@DString NVARCHAR(MAX) = '', 
				@Query NVARCHAR(MAX) = '',
				@Min INT = 0,  
				@Max INT = 0,
				@ControlID BIGINT = 0,
				@TabOrder BIGINT = 0,
				@GroupOrder BIGINT = 0,
				@DecimalLength SMALLINT = 0,
				@UserProfileID INT = ISNULL((SELECT UP.ProfileID FROM CmnUserDetails UP WHERE UP.UserID = @IN_UserID), 0),
				@RememberSearch INT = ISNULL((SELECT UP.RememberSearch FROM CmnUserDetails UP WHERE UP.UserID = @IN_UserID), 0),
				@RBSTableName VARCHAR(255) = '',
				@DefaultValue NVARCHAR(MAX) = '',
				@FkShowActive BIT = 0,
				@ActiveConditions NVARCHAR(MAX) = '',
				@AllDataSource NVARCHAR(MAX) = '',
				@AllDSQuery NVARCHAR(MAX) = '',
				@HasDefaultQuery BIT = 0

		DECLARE @RBSDataVariable TABLE (
			RowNo INT NOT NULL,
			ControlName NVARCHAR(200) NULL,
			TableName VARCHAR(255) NULL,
			TableColumn VARCHAR(255) NULL,
			DataValue NVARCHAR(MAX) NULL)

		INSERT INTO @RBSDataVariable (RowNo, ControlName, TableName, TableColumn, DataValue)
		EXEC spCmnGetFormRBSData @IN_FormID, @IN_UserID, ''

		SET @DecimalLength = ISNULL((SELECT TOP 1 CD.DecimalLength FROM MstCompanyDetails MC JOIN MstCountryDetails CD ON CD.ReferenceID = MC.CurrencyID WHERE MC.ParentCompanyID IS NULL ORDER BY MC.ReferenceID DESC), 4);

		IF OBJECT_ID('tempdb..#tempControls') IS NOT NULL
			DROP TABLE #tempControls
				
		CREATE TABLE #tempControls (
			ControlName NVARCHAR(100) NULL,
			TabOrder INT NULL,
			GroupOrder INT NULL,
			ControlOrder INT NULL,
			TableColumn SYSNAME NULL,
			ControlType NVARCHAR(100) NULL,
			ControlTypeId INT NULL,
			DataType NVARCHAR(100) NULL,
			SelectApplicable BIT NULL,
			DSNum INT NULL,
			DSQuery NVARCHAR(MAX) NULL,
			DataSource NVARCHAR(MAX) NULL,
			DefaultValue NVARCHAR(MAX) NULL,
			DateDifference INT NULL,
			HasDefaultQuery BIT NULL,
			FillEvent VARCHAR(MAX) NULL,
			IsReadonly BIT NULL,
			GroupboxName VARCHAR(255) NULL,
			ButtonID INT NULL,
			FkShowActive BIT NULL,
			IsSelectAll BIT NULL,			
			ActiveConditions NVARCHAR(MAX) NULL,
			AllDataSource NVARCHAR(MAX) NULL)

		IF @IN_Event = 'Form'
		BEGIN
			INSERT INTO #tempControls
			SELECT (CASE WHEN ISNULL(CML.Name, '') = '' THEN ISNULL(FC.Name, '') ELSE ISNULL(CML.Name, '') END ) AS ControlName, 
				FT.TabOrder, GB.GroupOrder, FC.ControlOrder, FC.TableColumn, CT.TypeValues AS ControlType, CT.CodemasterID AS ControlTypeId, DT.TypeValues AS DataType, FC.SelectApplicable, 0 AS DSNum,
				CASE WHEN FC.FkType = 1 AND FC.ControlType NOT IN (18, 19, 24, 25) THEN  			
				' SET @DOUT = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"'' + REPLACE(REPLACE(CAST(CM.' + FC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ CONCAT(REPLACE(REPLACE(CAST(CM.' + FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')' + 
																	CASE WHEN ISNULL(FC.FkData1, '') <> '' THEN (','' - '',' + 'REPLACE(REPLACE(ISNULL(CAST(CM.'+ FC.FkData1 + ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'')') ELSE ',''''' END+ 
																	CASE WHEN ISNULL(FC.FkData2, '') <> '' THEN (','' - '',' + 'REPLACE(REPLACE(ISNULL(CAST(CM.'+FC.FkData2+' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'')') ELSE ',''''' END+'  +''"}''))
																	FROM CmnCodeMaster CM WHERE CM.Type=''' + FC.FkTable + '''' +
																	CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' THEN '' ELSE + ' AND ' + FC.AdditionalConditions END +
																	CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + FC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
																	dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, 'CmnCodeMaster', FC.TableColumn) +
																	'@ActiveConditions@' +
																	' ORDER BY ' + CASE WHEN ISNULL(FC.FkOrder, 0) = 1 THEN FC.FkData + ' ASC '
																											WHEN ISNULL(FC.FkOrder, 0) = 2 THEN FC.FkData + ' DESC ' 
																											WHEN ISNULL(FC.FkOrder, 0) = 3 THEN ' CM.OrderBy' 
																											WHEN ISNULL(FC.FkOrder, 0) = 4 THEN FC.FkColumn + ' ASC' 
																										ELSE 'CM.OrderBy' END + 
																	' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
				WHEN FC.FkType = 2 AND FC.ControlType NOT IN (18, 19, 24, 25) THEN 
					' SET @DOUT = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"''+ REPLACE(REPLACE(CAST(MT.' + FC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ CONCAT(REPLACE(REPLACE(CAST(MT.' + FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')' + 
																		CASE WHEN ISNULL(FC.FkData1, '') <> '' THEN (','' - '',' + 'REPLACE(REPLACE(ISNULL(CAST(MT.'+FC.FkData1+' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'')') ELSE ',''''' END + 
																		CASE WHEN ISNULL(FC.FkData2, '') <> '' THEN (','' - '',' + 'REPLACE(REPLACE(ISNULL(CAST(MT.'+FC.FkData2+' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'')') ELSE ',''''' END+'  +''"}''))
																		FROM ' + FC.FkTable + ' MT WHERE 1=1 ' + 
																		CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' THEN '' ELSE 																			
																					CASE WHEN ISNULL(FC.AdditionalConditions, '') LIKE '%NULL%' OR ISNULL(FC.AdditionalConditions, '') LIKE '%NOT NULL%'
																										OR ISNULL(FC.AdditionalConditions, '') LIKE '%=%' OR ISNULL(FC.AdditionalConditions, '') LIKE '% IN%' 
																										OR ISNULL(FC.AdditionalConditions, '') LIKE '%<>%' THEN ' AND MT.' + FC.AdditionalConditions 
																										ELSE CASE WHEN @IN_DataID <> '' THEN (' AND MT.'+ FC.AdditionalConditions+ ' = '+ @IN_DataID) ELSE '' END END END +
																		CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + FC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
																		dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, FC.FkTable, FC.TableColumn) +
																		'@ActiveConditions@' +
																		' ORDER BY ' + CASE WHEN ISNULL(FC.FkOrder, 0) = 1 THEN ' MT.'+ FC.FkData + ' ASC'
																												WHEN ISNULL(FC.FkOrder, 0) = 2 THEN ' MT.' + FC.FkData + ' DESC'
																												WHEN ISNULL(FC.FkOrder, 0) = 3 THEN ' MT.OrderBy'
																												WHEN ISNULL(FC.FkOrder, 0) = 4 THEN FC.FkColumn + ' ASC'
																											ELSE 'MT.' + FC.FkData END +
																		' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
				WHEN FC.FkType = 3 AND FC.ControlType NOT IN (18, 19, 24, 25) THEN 
					' SET @DOUT = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"''+ CAST(FU.' + FC.FkColumn + ' AS NVARCHAR(MAX)) +''","Text":"''+ CAST(FU.' + FC.FkData + ' AS NVARCHAR(MAX))'+' +''"}'')
																		FROM CmnFileUpload FU 
																		WHERE FU.FilePath = '''+ FC.AttachmentPath+ ''' AND FU.Type=''' + FC.FkTable + ''' AND FU.IsDeleted = 0 '+
																		'ORDER BY ' + CASE WHEN ISNULL(FC.FkOrder, 0) = 1 THEN FC.FkData + ' ASC '  
																											WHEN ISNULL(FC.FkOrder, 0) = 2 THEN FC.FkData + ' DESC ' 
																											WHEN ISNULL(FC.FkOrder, 0) = 3 THEN ' FU.OrderBy' 
																											WHEN ISNULL(FC.FkOrder, 0) = 4 THEN FC.FkColumn  + ' ASC ' 
																										ELSE 'FU.CreatedDate DESC' END  +
																		' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
			ELSE '' END  AS DSQuery,  '' AS DataSource, ISNULL((CASE WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') <> '' AND FC.DefaultValue <> '' THEN 'SET @COUT = (SELECT CAST('+ FC.DefaultValue+' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE DL.VALUE END AS VARCHAR(5))+')))' 
				WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') = '' AND FC.DefaultValue <> '' THEN 'SET @COUT = (SELECT CAST('+ FC.DefaultValue+ ' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE 4 END AS VARCHAR(5))+')))' ELSE FC.DefaultValue END), '') AS DefaultValue,
				ISNULL(FC.DateDifference, 0) AS DateDifference, CASE WHEN FC.DataType = 8 AND FC.DefaultValue <> '' THEN 1 ELSE 0 END AS HasDefaultQuery,
				FC.FillEvent, FC.Readonly, GB.Name, ISNULL(FC.ButtonID, 0), ISNULL(FC.FkShowActive, 0), ISNULL(FC.IsSelectAll, 0),
				CASE WHEN FC.FkType = 1 THEN CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(CM.IsDeleted, 0) = 0 '  END  +
											CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(CM.NotActive, 0) = 0 ' END + 
											CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(CM.IsCurrentVersion, 1) = 1 ' END
					WHEN FC.FkType = 2 THEN CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(MT.IsDeleted, 0) = 0 ' END + 
											CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(MT.NotActive, 0) = 0 ' END + 
											CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(MT.IsCurrentVersion, 1) = 1 ' END ELSE '' END, ''
			FROM CmnFormDetails FD
  				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0  			
				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0
  				JOIN CmnCodeMaster CT ON CT.Type = 'Control Type' AND CT.CodemasterID = FC.ControlType AND CT.IsDeleted = 0
  				JOIN CmnCodeMaster DT ON DT.Type = 'Data Type' AND DT.CodemasterID = FC.DataType AND DT.IsDeleted = 0			
				LEFT JOIN CmnControlsMultiLingual CML WITH (NOLOCK) ON CML.ControlID = FC.ControlID AND CML.LanguageID = @UserProfileID AND CML.IsDeleted = 0				
				LEFT JOIN CmnControlProperty DL ON DL.ControlID = FC.ControlID AND DL.Name = 'Decimal Length' AND DL.IsDeleted = 0
				LEFT JOIN CmnControlProperty DDC ON DDC.ControlID = FC.ControlID AND DDC.Name = 'Decimal Currency' AND DDC.IsDeleted = 0
				LEFT JOIN CmnControlProperty DCC ON DCC.ControlID = FC.ControlID AND DCC.Name = 'Currency Column' AND DCC.IsDeleted = 0
				LEFT JOIN @RBSDataVariable RBS ON RBS.TableName = CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
																						WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') 
																							ELSE ISNULL(FD.TableName, '') END AND RBS.TableColumn = FC.TableColumn
			WHERE FD.FormID = @IN_FormID -- AND FD.IsDeleted = 0;
		END
		ELSE IF @IN_Event = 'Grid'
		BEGIN
			SELECT @ControlID = FC.ControlID, @TabOrder = FT.TabOrder, @GroupOrder = GB.GroupOrder, 
				@RBSTableName = CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
											WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') ELSE ISNULL(FD.TableName, '') END 
			FROM CmnFormDetails FD  		
			  JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
  				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
  				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0	AND FC.ControlType = 19
			  JOIN CmnControlProperty CP ON CP.ControlID = FC.ControlID AND CP.Name = 'Grid Header' AND CP.Value = @IN_Header AND CP.IsDeleted = 0
			WHERE FD.FormID = @IN_FormID -- AND FD.IsDeleted = 0;
    
			INSERT INTO #tempControls
			SELECT ISNULL(CC.DisplayName, ''), @TabOrder, @GroupOrder, CC.ColumnOrder, ISNULL(CC.ColumnName, ''), '', ISNULL(CC.ControlType, 0), '', 0, 0,
			  CASE WHEN CC.FkType = 1 AND CC.ControlType NOT IN (18, 19, 24, 25) THEN  ' SET @DOUT = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"'' + REPLACE(REPLACE(CAST(CM.' + CC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ CONCAT(REPLACE(REPLACE(CAST(CM.' + CC.FkData + '  AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')' + 
															CASE WHEN ISNULL(CC.FkData1, '') <> '' THEN (','' - '',' + 'REPLACE(REPLACE(ISNULL(CAST(CM.'+CC.FkData1+' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'')') ELSE ',''''' END + 
															CASE WHEN ISNULL(CC.FkData2, '') <> '' THEN (','' - '',' + 'REPLACE(REPLACE(ISNULL(CAST(CM.'+CC.FkData2+' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'')') ELSE ',''''' END+'  +''"}''))
															FROM CmnCodeMaster CM WHERE CM.Type=''' + CC.FkTable + '''' +
																CASE WHEN ISNULL(CC.AdditionalConditions, '') = '' THEN '' ELSE + ' AND ' + CC.AdditionalConditions END +
																CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + CC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
																dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, 'CmnCodeMaster', CC.ColumnName) +
																'@ActiveConditions@' +
															' ORDER BY ' + CASE WHEN ISNULL(CC.FkOrder, 0) = 1 THEN CC.FkData + ' ASC '
																				WHEN ISNULL(CC.FkOrder, 0) = 2 THEN CC.FkData + ' DESC ' 
																				WHEN ISNULL(CC.FkOrder, 0) = 3 THEN ' CM.OrderBy' 
																				WHEN ISNULL(CC.FkOrder, 0) = 4 THEN CC.FkColumn + ' ASC' 
																				ELSE ' CM.OrderBy' END + 
															' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
					WHEN CC.FkType = 2 AND CC.ControlType NOT IN (18, 19, 24, 25) THEN ' SET @DOUT = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"''+ REPLACE(REPLACE(CAST(MT.' + CC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ CONCAT(REPLACE(REPLACE(CAST(MT.' + CC.FkData + '  AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')' + 
															CASE WHEN ISNULL(CC.FkData1, '') <> '' THEN (','' - '',' + 'REPLACE(REPLACE(ISNULL(CAST(MT.'+CC.FkData1+' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'')') ELSE ',''''' END + 
															CASE WHEN ISNULL(CC.FkData2, '') <> '' THEN (','' - '',' + 'REPLACE(REPLACE(ISNULL(CAST(MT.'+CC.FkData2+' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'')') ELSE ',''''' END+') +''"'+
															CASE WHEN ISNULL(DSP.Value, '') <> '' THEN ',"Parent":"''+ CAST(MT.' + DSP.Value + ' AS NVARCHAR(MAX)) +''"' ELSE '' END +
															CASE WHEN ISNULL(DSPF.Value, '') <> '' AND ISNULL(DSP.Value, '') <> '' THEN ',"Filter":"''+ CAST(MT.' + DSPF.Value + ' AS NVARCHAR(MAX)) +''"' ELSE '' END +'}'')
															 FROM ' + CC.FkTable + ' MT WHERE 1=1 ' + 
																	CASE WHEN ISNULL(CC.AdditionalConditions, '') = '' THEN '' 
																		ELSE CASE WHEN ISNULL(CC.AdditionalConditions, '') LIKE '% NULL %' OR ISNULL(CC.AdditionalConditions, '') LIKE '% NOT NULL %'
																					OR ISNULL(CC.AdditionalConditions, '') LIKE '% = %' OR ISNULL(CC.AdditionalConditions, '') LIKE '% IN %' 
																				OR ISNULL(CC.AdditionalConditions, '') LIKE '%<>%' THEN ' AND ' + CC.AdditionalConditions 
																				ELSE '' END
																		 END +
																	CASE WHEN (ISNULL(DSF.VALUE, '') LIKE '%@1%' AND @IN_DataID <> '') THEN ' AND MT.' + REPLACE(DSF.VALUE, '@1', '') + ' = ' + @IN_DataID ELSE ''  END +			 
																	CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + CC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
																	dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, CC.FkTable, CC.ColumnName) +
																	'@ActiveConditions@' +
																' ORDER BY ' + CASE WHEN ISNULL(CC.FkOrder, 0) = 1 THEN ' MT.'+ CC.FkData + ' ASC'
																					WHEN ISNULL(CC.FkOrder, 0) = 2 THEN ' MT.' + CC.FkData + ' DESC'
																					WHEN ISNULL(CC.FkOrder, 0) = 3 THEN ' MT.OrderBy'
																					WHEN ISNULL(CC.FkOrder, 0) = 4 THEN CC.FkColumn + ' ASC'
																					ELSE ' MT.' + CC.FkData END +
																' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
					WHEN CC.FkType = 3 OR CC.ControlType IN (16, 17) THEN ' SET @DOUT = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"''+ CAST(FU.ReferenceID AS NVARCHAR(50)) +''","Text":"''+ FU.OriginalFileName+''","attFile":"''+ FU.FileName+''","Parent":"''+ CAST(FU.FileRefID AS NVARCHAR(MAX)) +''"}'')
															 FROM CmnFileUpload FU 
															 WHERE FU.FilePath = '''+ CC.AttachmentPath+ ''' AND FU.IsDeleted = 0 
															 ORDER BY ' + CASE WHEN ISNULL(CC.FkOrder, 0) = 1 THEN CC.FkData + ' ASC ' 
																				 WHEN ISNULL(CC.FkOrder, 0) = 2 THEN CC.FkData + ' DESC ' 
																				 WHEN ISNULL(CC.FkOrder, 0) = 3 THEN ' FU.OrderBy' 
																				 WHEN ISNULL(CC.FkOrder, 0) = 4 THEN CC.FkColumn  + ' ASC ' 
																				 ELSE ' FU.CreatedDate DESC' END  +
																' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
					ELSE '' END  AS DQuery, '' AS DataSource, '', ISNULL(CC.DateDifference, 0) AS DateDifference, 0 AS HasDefaultQuery, '', 0, '', ISNULL(FC.ButtonID, 0), ISNULL(CC.FkShowActive, 0), ISNULL(FC.IsSelectAll, 0),
					CASE WHEN CC.FkType = 1 THEN CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(CM.IsDeleted, 0) = 0 '  END  +
												CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(CM.NotActive, 0) = 0 ' END + 
												CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(CM.IsCurrentVersion, 1) = 1 ' END 
						WHEN CC.FkType = 2 THEN CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(MT.IsDeleted, 0) = 0 ' END + 
													CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(MT.NotActive, 0) = 0 ' END + 
													CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(MT.IsCurrentVersion, 1) = 1 ' END ELSE '' END, ''
			FROM CmnFormControls FC
				JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0			  
				LEFT JOIN CmnColumnProperty DSP ON DSP.ColumnID = CC.ColumnID AND DSP.Name = 'DS ParentColumn' AND DSP.IsDeleted = 0
				LEFT JOIN CmnColumnProperty DSF ON DSF.ColumnID = CC.ColumnID AND DSF.Name = 'DS Filter' AND DSF.IsDeleted = 0
				LEFT JOIN @RBSDataVariable RBS ON RBS.TableName = @RBSTableName AND RBS.TableColumn = CC.ColumnName
				LEFT JOIN CmnControlProperty DSPF ON DSPF.ControlID = FC.ControlID AND DSPF.Name = 'DS Filter' AND DSPF.IsDeleted = 0
  			WHERE FC.ControlID = @ControlID --AND FC.IsDeleted = 0;
		END
		ELSE
	  BEGIN
			SET @RBSTableName  = ISNULL((SELECT ISNULL(TableName, '') FROM CmnFormDetails WHERE FormID = @IN_FormID), '')
			INSERT INTO #tempControls
			SELECT (CASE WHEN ISNULL(SML.Name, '') = '' THEN ISNULL(FS.Name, '') ELSE ISNULL(SML.Name, '') END ) AS ControlName, 
				0, 0, FS.SearchOrder, FS.TableColumn, CT.TypeValues AS ControlType, CT.CodemasterID AS ControlTypeId, DT.TypeValues AS DataType, FS.SelectApplicable, 0 AS DSNum,
				CASE WHEN FS.FkType = 1 AND FS.ControlType NOT IN (18, 19, 24, 25) THEN  
					' SET @DOUT = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"'' + REPLACE(REPLACE(CAST(CM.' + FS.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(CM.' + FS.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"}'')
																					FROM CmnCodeMaster CM WHERE CM.Type=''' + FS.FkTable + '''' +
																						CASE WHEN ISNULL(FS.AdditionalConditions, '') = '' THEN '' ELSE + ' AND ' + FS.AdditionalConditions END +
																						CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + FS.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
																						dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, 'CmnCodeMaster', FS.TableColumn) +
																						CASE WHEN FS.FkDelete = 0 THEN '' ELSE ' AND  + ISNULL(CM.IsDeleted, 0) = 0 '  END  +
																						CASE WHEN FS.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(CM.NotActive, 0) = 0 ' END + 
																						CASE WHEN FS.FkVersion = 0 THEN '' ELSE ' AND ISNULL(CM.IsCurrentVersion, 1) = 1 ' END +
																						' ORDER BY ' + CASE WHEN ISNULL(FS.FkOrder, 0) = 1 THEN FS.FkData + ' ASC '
																																WHEN ISNULL(FS.FkOrder, 0) = 2 THEN FS.FkData + ' DESC ' 
																																WHEN ISNULL(FS.FkOrder, 0) = 3 THEN ' CM.OrderBy' 
																																WHEN ISNULL(FS.FkOrder, 0) = 4 THEN FS.FkColumn + ' ASC' 
																														ELSE ' CM.OrderBy' END + 
																					' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
							WHEN FS.FkType = 2 AND FS.ControlType NOT IN (18, 19, 24, 25) THEN 
								' SET @DOUT = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"''+ REPLACE(REPLACE(CAST(MT.' + FS.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(MT.' + FS.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"}'')
																							 FROM ' + FS.FkTable + ' MT WHERE 1=1 ' + 
																									CASE WHEN ISNULL(FS.AdditionalConditions, '') = '' THEN '' ELSE ' AND ' + FS.AdditionalConditions END +
																									CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + FS.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
																									dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, FS.FkTable, FS.TableColumn) +
																									CASE WHEN FS.FkDelete = 0 THEN '' ELSE ' AND ISNULL(MT.IsDeleted, 0) = 0 ' END + 
																									CASE WHEN FS.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(MT.NotActive, 0) = 0 ' END + 
																									CASE WHEN FS.FkVersion = 0 THEN '' ELSE ' AND ISNULL(MT.IsCurrentVersion, 1) = 1 ' END +
																									' ORDER BY ' + CASE WHEN ISNULL(FS.FkOrder, 0) = 1 THEN ' MT.'+ FS.FkData + ' ASC'
																																			WHEN ISNULL(FS.FkOrder, 0) = 2 THEN ' MT.' + FS.FkData + ' DESC'
																																			WHEN ISNULL(FS.FkOrder, 0) = 3 THEN ' MT.OrderBy'
																																			WHEN ISNULL(FS.FkOrder, 0) = 4 THEN FS.FkColumn + ' ASC'
																																	ELSE ' MT.' + FS.FkData END +
																								' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
				ELSE '' END as DSQuery, '' AS DataSource, (SELECT CASE WHEN @RememberSearch = 1 THEN CASE WHEN ISNULL(@IN_SearchButtonID, 0) <> 0 AND ISNULL(FS.DefaultValue, '') <> '' THEN FS.DefaultValue WHEN ISNULL(FS.DefaultValue, '') = '' AND ISNULL(RSC.ControlValues, '') <> '' 
						THEN CASE WHEN FS.ControlType = 4 OR FS.ControlType = 5 THEN CONVERT(VARCHAR(MAX), RSC.ControlValues, 105) ELSE ISNULL(RSC.ControlValues, '') END ELSE ISNULL(FS.DefaultValue, '') END ELSE ISNULL(FS.DefaultValue, '') END) AS DefaultValue,
				ISNULL(FS.DateDifference, 0) AS DateDifference, 0 AS HasDefaultQuery, FS.FillEvent, FS.Readonly, '', ISNULL(FS.ButtonID, 0), 0, 0, '', ''
			FROM CmnFormSearchControl FS
				JOIN CmnCodeMaster CT ON CT.Type = 'Control Type' AND CT.CodemasterID = FS.ControlType AND CT.IsDeleted = 0
				JOIN CmnCodeMaster DT ON DT.Type = 'Data Type' AND DT.CodemasterID = FS.DataType AND DT.IsDeleted = 0
				LEFT JOIN CmnRememberSearchControl RSC ON RSC.UserID = @IN_UserID AND RSC.SearchID = FS.SearchID AND RSC.ColumnName = FS.Name
				LEFT JOIN CmnSearchMultiLingual SML WITH (NOLOCK) ON SML.SearchID = FS.SearchID AND SML.LanguageID = @UserProfileID AND ISNULL(SML.IsDeleted, 0) = 0
				LEFT JOIN @RBSDataVariable RBS ON RBS.TableName = @RBSTableName AND RBS.TableColumn = FS.TableColumn
			WHERE FS.FormID = @IN_FormID AND FS.IsDeleted = 0 AND ISNULL(FS.ButtonID, 0) = ISNULL(@IN_SearchButtonID, 0);
		END

		UPDATE #tempControls SET @DSCount = DSNum = @DSCount + 1 WHERE DSQuery <> '' OR DefaultValue <> ''
	  
		SET @Min = 0
		SET @Max = 0
		SELECT @Min = MIN(DSNum), @Max = MAX(DSNum) FROM #tempControls WHERE DSNum <> 0
	
		WHILE (@Min <> 0 AND @Min <= @Max) 
		BEGIN
			SET @OutString = ''
			SET @DefaultValue = ''
			SET @AllDataSource = '';
			SET @HasDefaultQuery = 0;
			SELECT @Query = DSQuery, @DString = DefaultValue, @ActiveConditions = ActiveConditions, @FkShowActive = FkShowActive,
				@HasDefaultQuery = HasDefaultQuery
			FROM #tempControls WHERE DSNum = @Min
			
			IF @Query <> ''
			BEGIN
				IF @FkShowActive = 1
				BEGIN
					SET @AllDSQuery = REPLACE(@Query, '@ActiveConditions@', '');
					EXEC sp_executesql @AllDSQuery, N'@DOUT NVARCHAR(MAX) OUTPUT', @AllDataSource OUTPUT
				END

				SET @Query = REPLACE(@Query, '@ActiveConditions@', @ActiveConditions);
				EXEC sp_executesql @Query, N'@DOUT NVARCHAR(MAX) OUTPUT', @OutString OUTPUT
			END
	  	  
			IF ISNULL(@HasDefaultQuery, 0) = 1 AND CHARINDEX('SET @COUT = ', @DString) > 0 
			BEGIN
				 EXEC sp_executesql @DString, N'@COUT NVARCHAR(MAX) OUTPUT', @DefaultValue OUTPUT
			END
			ELSE 
			BEGIN
				SET @DefaultValue = @DString;
			END

			UPDATE #tempControls SET DataSource = @OutString, DefaultValue = @DefaultValue, AllDataSource = @AllDataSource WHERE DSNum = @Min
	  
			SET @Min = @Min + 1
		END
	  
		SELECT ControlName, TableColumn, ControlType, ControlTypeId, SelectApplicable, '['+ DataSource + ']' AS DataSource,
			DefaultValue, DateDifference, FillEvent, IsReadonly, GroupboxName, ButtonID, FkShowActive,
			'['+ AllDataSource + ']' AS AllDataSource, IsSelectAll
		FROM #tempControls
		ORDER BY TabOrder, GroupOrder, ControlOrder 

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnGetFormButtons]'
GO

CREATE PROCEDURE [dbo].[spCmnGetFormButtons] (
	@IN_FormID INT,
	@IN_Language VARCHAR(50),
	@IN_Device VARCHAR(50),
	@IN_UserID INT)

AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY 	
		DECLARE @ErrorSeverity NVARCHAR(50) = '',
				@ErrorMessage NVARCHAR(2000) = '',
				@ErrorState NVARCHAR(50) = '',
				@UserProfileID INT = 0,
				@IdentifyColumn VARCHAR(255) = '',
				@OldRefColumn VARCHAR(255) = '',
				@ButtonList NVARCHAR(500),
				@UserType INT = 0

		SET @UserType = ISNULL((SELECT UP.Type FROM CmnUserDetails UP WHERE UP.UserID = @IN_UserID), 0);

		IF ISNULL(@IN_Language, '') <> ''
			SET @UserProfileID =  ISNULL((SELECT TOP 1 CodemasterID FROM CmnCodeMaster WHERE Type = 'Languages' AND Description = @IN_Language AND ISNULL(IsDeleted, 0) = 0), 0);

		SELECT TOP 1 @IdentifyColumn = TableColumn
		FROM CmnFormControls FC 
			JOIN CmnGroupBoxes GB ON GB.GroupID = FC.GroupID AND GB.IsDeleted = 0
			JOIN CmnFormTabs TB ON TB.TabID = GB.TabID AND TB.IsDeleted = 0
		WHERE TB.FormID = @IN_FormID AND FC.IsIdentity = 1 AND ISNULL(FC.ButtonID, 0) = 0 AND FC.IsDeleted = 0
		ORDER BY TB.TabOrder, GB.GroupOrder, FC.ControlOrder;

		SELECT TOP 1 @OldRefColumn = TableColumn
		FROM CmnFormControls FC 
			JOIN CmnGroupBoxes GB ON GB.GroupID = FC.GroupID AND GB.IsDeleted = 0
			JOIN CmnFormTabs TB ON TB.TabID = GB.TabID AND TB.IsDeleted = 0
		WHERE TB.FormID = @IN_FormID AND FC.IsOldRefColumn = 1 AND FC.IsDeleted = 0;

		IF (ISNULL(@UserType, 0) = 0)
		BEGIN
			SET @ButtonList = ISNULL(SUBSTRING((SELECT ',' + CAST(CodemasterID AS VARCHAR(MAX)) FROM CmnCodeMaster WHERE MenuID = @IN_FormID AND Type = 'Menubutton' AND IsDeleted = 0 AND NotActive = 0
							FOR XML PATH(''), ROOT('MyString'), TYPE).value('MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '');

			SELECT MB.CodemasterID AS ButtonID, CASE WHEN ISNULL(CMM.Name, '') = '' THEN ISNULL(MB.TypeValues, '') ELSE ISNULL(CMM.Name, '') END AS ButtonName,
				 ISNULL(MB.TypeValues, '') AS Description, MB.ImagePath AS ButtonIcon, MB.Details AS ButtonEvent, MB.MenuCategory AS ButtonType, ISNULL(MB.AvailableStatus, '') AS ButtonStatus, 
				 ISNULL(MB.ButtonKeyColumn, '') AS ButtonKey, ISNULL(MB.ButtonCategory, 0) AS ButtonCategory, ISNULL(MB.ButtonType, 0) AS FormButtonType, 
				 ISNULL(MB.VisibleTabs, '') AS VisibleTabs, ISNULL(MB.DisableTabs, '') AS DisableTabs, ISNULL(MB.ButtonTriggerEvent, '') AS ButtonTriggerEvent, 
				 ISNULL(MB.IsMultipleApproval, 0) AS IsMultipleApproval, ISNULL(MB.IsDml, 0) AS IsDml, ISNULL(BP.ReqOldRefID, 0) AS ReqOldRefID,
				 CASE WHEN ISNULL(BP.ReqOldRefID, 0) = 1 THEN @IdentifyColumn ELSE '' END AS IdentifyColumn,
				 CASE WHEN ISNULL(BP.ReqOldRefID, 0) = 1 THEN @OldRefColumn ELSE '' END AS OldRefColumn,
				 ISNULL((SUBSTRING((SELECT DISTINCT ',' + CONVERT(VARCHAR(50), FC.TableColumn)
					FROM CmnFormControls FC CROSS APPLY STRING_SPLIT(BP.ClearControls, ',') AS S WHERE FC.ControlID = S.value
														--PATINDEX('%,' +  CAST(FC.ControlID AS VARCHAR(50)) + ',%' , ',' + ISNULL(BP.ClearControls, '') + ',') > 0
					FOR XML PATH(''), ROOT('MyString'),TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 2000000000)), '') AS ClearControls,
				ISNULL((SUBSTRING((SELECT DISTINCT ',' + CONVERT(VARCHAR(50), FC.Name) + '::' + CONVERT(VARCHAR(50), CC.ColumnName)
					FROM CmnControlColumns CC JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID 
					  CROSS APPLY STRING_SPLIT(BP.ClearColumns, ',') AS S WHERE CC.ColumnID = S.value
					--WHERE PATINDEX('%,' +  CAST(CC.ColumnID AS VARCHAR(50)) + ',%' , ',' + ISNULL(BP.ClearColumns, '') + ',') > 0
					FOR XML PATH(''), ROOT('MyString'),TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 2000000000)), '') AS ClearColumns,
				ISNULL(BP.AutoClose, 1) AS AutoClose, ISNULL(BP.IsAudit, 0) AS IsAudit
			FROM CmnCodeMaster MB WITH (NOLOCK)
				LEFT JOIN CmnCodeMasterMultiLingual CMM WITH (NOLOCK) ON CMM.CodeMasterID = MB.CodemasterID AND CMM.Type = 'Menubutton'
					AND CMM.TypeValues = MB.TypeValues AND CMM.LanguageID = @UserProfileID AND CMM.IsDeleted = 0
				LEFT JOIN CmnCodeMaster CM WITH (NOLOCK) ON CM.Type = 'Status' AND CM.CodemasterID = MB.Category
				LEFT JOIN CmnFormButtonProperties BP ON BP.FormID = MB.MenuID AND BP.ButtonID = MB.ReferenceID				
					AND BP.IsDeleted = 0 -- AND BP.NotActive = 0 AND BP.IsCurrentVersion = 1
			WHERE MB.[Type] = 'Menubutton'
			  AND MB.MenuID = @IN_FormID
				AND (PATINDEX('%,' + CAST(MB.CodemasterID AS VARCHAR(50)) + ',%', ',' + @ButtonList + ',') > 0)
				AND (ISNULL(@IN_Device, '') NOT IN ('Mobile', 'M') OR ISNULL(BP.IsMobile, 1) = 1)
				AND MB.IsDeleted = 0 AND MB.NotActive = 0 AND MB.IsCurrentVersion = 1
			ORDER BY MB.OrderBy
		END
		ELSE
		BEGIN
					SELECT MB.CodemasterID AS ButtonID, CASE WHEN ISNULL(CMM.Name, '') = '' THEN ISNULL(MB.TypeValues, '') ELSE ISNULL(CMM.Name, '') END AS ButtonName,
				 ISNULL(MB.TypeValues, '') AS Description, MB.ImagePath AS ButtonIcon, MB.Details AS ButtonEvent, MB.MenuCategory AS ButtonType, ISNULL(MB.AvailableStatus, '') AS ButtonStatus, 
				 ISNULL(MB.ButtonKeyColumn, '') AS ButtonKey, ISNULL(MB.ButtonCategory, 0) AS ButtonCategory, ISNULL(MB.ButtonType, 0) AS FormButtonType, 
				 ISNULL(MB.VisibleTabs, '') AS VisibleTabs, ISNULL(MB.DisableTabs, '') AS DisableTabs, ISNULL(MB.ButtonTriggerEvent, '') AS ButtonTriggerEvent, 
				 ISNULL(MB.IsMultipleApproval, 0) AS IsMultipleApproval, ISNULL(MB.IsDml, 0) AS IsDml, ISNULL(BP.ReqOldRefID, 0) AS ReqOldRefID,
				 CASE WHEN ISNULL(BP.ReqOldRefID, 0) = 1 THEN @IdentifyColumn ELSE '' END AS IdentifyColumn,
				 CASE WHEN ISNULL(BP.ReqOldRefID, 0) = 1 THEN @OldRefColumn ELSE '' END AS OldRefColumn,
				 ISNULL((SUBSTRING((SELECT DISTINCT ',' + CONVERT(VARCHAR(50), FC.TableColumn)
					FROM CmnFormControls FC CROSS APPLY STRING_SPLIT(BP.ClearControls, ',') AS S WHERE FC.ControlID = S.value
														--PATINDEX('%,' +  CAST(FC.ControlID AS VARCHAR(50)) + ',%' , ',' + ISNULL(BP.ClearControls, '') + ',') > 0
					FOR XML PATH(''), ROOT('MyString'),TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 2000000000)), '') AS ClearControls,
				ISNULL((SUBSTRING((SELECT DISTINCT ',' + CONVERT(VARCHAR(50), FC.Name) + '::' + CONVERT(VARCHAR(50), CC.ColumnName)
					FROM CmnControlColumns CC JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID 
					  CROSS APPLY STRING_SPLIT(BP.ClearColumns, ',') AS S WHERE CC.ColumnID = S.value
					--WHERE PATINDEX('%,' +  CAST(CC.ColumnID AS VARCHAR(50)) + ',%' , ',' + ISNULL(BP.ClearColumns, '') + ',') > 0
					FOR XML PATH(''), ROOT('MyString'),TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 2000000000)), '') AS ClearColumns,
				ISNULL(BP.AutoClose, 1) AS AutoClose, ISNULL(BP.IsAudit, 0) AS IsAudit
			FROM CmnCodeMaster MB WITH (NOLOCK)
				JOIN CmnRBSPermission RBS ON RBS.UserID = @IN_UserID AND RBS.FormID = MB.MenuID AND RBS.IsDeleted = 0
				CROSS APPLY STRING_SPLIT(RBS.Buttons, ',') AS S
				LEFT JOIN CmnCodeMasterMultiLingual CMM WITH (NOLOCK) ON CMM.CodeMasterID = MB.CodemasterID AND CMM.Type = 'Menubutton'
					AND CMM.TypeValues = MB.TypeValues AND CMM.LanguageID = @UserProfileID AND CMM.IsDeleted = 0
				LEFT JOIN CmnCodeMaster CM WITH (NOLOCK) ON CM.Type = 'Status' AND CM.CodemasterID = MB.Category
				LEFT JOIN CmnFormButtonProperties BP ON BP.FormID = MB.MenuID AND BP.ButtonID = MB.ReferenceID				
					AND BP.IsDeleted = 0 -- AND BP.NotActive = 0 AND BP.IsCurrentVersion = 1
			WHERE MB.[Type] = 'Menubutton' AND MB.CodemasterID = S.value
			  AND MB.MenuID = @IN_FormID
				--AND (PATINDEX('%,' + CAST(MB.CodemasterID AS VARCHAR(50)) + ',%', ',' + RBS.Buttons + ',') > 0)
				AND (ISNULL(@IN_Device, '') NOT IN ('Mobile', 'M') OR ISNULL(BP.IsMobile, 1) = 1)
				AND MB.IsDeleted = 0 AND MB.NotActive = 0 AND MB.IsCurrentVersion = 1
			ORDER BY MB.OrderBy
		END
	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE()

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH   
END 
GO
PRINT N'Creating [dbo].[spCmnGetFormDetails]'
GO

CREATE PROCEDURE [dbo].[spCmnGetFormDetails] (
	@IN_FormID INT = 0, 
	@IN_Language VARCHAR(50) = '',
	@IN_Device VARCHAR(50),
	@IN_UserID INT = 0)

AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY 	
		DECLARE @ErrorSeverity NVARCHAR(50) = '',
				@ErrorMessage NVARCHAR(2000) = '',
				@ErrorState NVARCHAR(50) = '',
				@DSCount INT = 0,
				@OutString NVARCHAR(MAX) = '', 
				@PropString NVARCHAR(MAX) = '', 
				@Query NVARCHAR(MAX) = '',
				@PQuery NVARCHAR(MAX) = '',
				@BQuery NVARCHAR(MAX) = '',
				@Min INT = 0,  
				@Max INT = 0,
				@UserProfileID INT = 0,
				@BString NVARCHAR(MAX) = ''
		
		IF ISNULL(@IN_Language, '') <> ''
			SET @UserProfileID =  ISNULL((SELECT TOP 1 CodemasterID FROM CmnCodeMaster WHERE Type = 'Languages' AND Description = @IN_Language AND ISNULL(IsDeleted, 0) = 0), 0);
			
		IF OBJECT_ID('tempdb..#tempFormControls') IS NOT NULL
			DROP TABLE #tempFormControls
		
		CREATE TABLE #tempFormControls (
			TabID INT NULL,
			TabName NVARCHAR(100) NULL,
			TabDisplayName NVARCHAR(100) NULL,
			TabDescription NVARCHAR(MAX) NULL,
			TabOrder INT NULL,
			GroupBoxName NVARCHAR(100) NULL,
			GroupboxDisplayName NVARCHAR(100) NULL,
			GroupBoxDescription NVARCHAR(MAX) NULL,
			GroupOrder INT NULL,
			ControlName NVARCHAR(100) NULL,
			ControlOrder INT NULL,
			TableColumn SYSNAME NULL,
			ControlType NVARCHAR(100) NULL,
			ControlTypeId INT NULL,
			DataType NVARCHAR(100) NULL,
			IsIdentity BIT NULL,
			IsMandatory BIT NULL,
			[Readonly] BIT NULL,
			Visibility BIT NULL,
			IsSelectOption BIT NULL,
			IsDmlControl BIT NULL,
			UniqueGroup NVARCHAR(100) NULL,
			DSNum INT NULL,
			MaxLength INT NULL,
			ControlEvent NVARCHAR(MAX) NULL,
			AttachmentPath NVARCHAR(MAX) NULL,
			AttachmentMaxSize INT,
			DefaultValue VARCHAR(500) NULL,
			MaxRange NVARCHAR(500) NULL,
			ControlInfo NVARCHAR(255) NULL,
			IsSearchApplicable BIT NULL,
			ValidationEvent NVARCHAR(MAX) NULL,
			TableFrom SYSNAME NULL,
			TableID INT NULL,
			IsEncrypt BIT NULL,
			IsNoAdd BIT NULL,
			IsNoUpdate BIT NULL,
			FillEvent NVARCHAR(MAX) NULL,
			FillType BIT NULL,
			ControlProperty NVARCHAR(MAX) NULL,
			ControlID INT NULL,
			BQuery NVARCHAR(MAX) NULL,
			ButtonName NVARCHAR(255) NULL,
			ControlPerRow SMALLINT,
			ColumnWidth VARCHAR(4) NULL,
			DateDifference INT NULL,
			Description NVARCHAR(MAX) NULL,
			IsChildGroupBox BIT NULL,
			ControlCount INT NULL,)

		INSERT INTO #tempFormControls		
		SELECT FT.TabID, FT.Name AS TabName, CASE WHEN ISNULL(TML.Name, '') = '' THEN ISNULL(FT.DisplayName, '') ELSE ISNULL(TML.Name, '') END AS TabDisplayName , ISNULL(FT.Description, '') AS TabDescription, 
			FT.TabOrder, GB.Name AS GroupBoxName, CASE WHEN ISNULL(GML.Name, '') = '' THEN ISNULL(GB.DisplayName, '') ELSE ISNULL(GML.Name, '') END AS GroupboxDisplayName ,
			ISNULL(GB.Description, '') AS  GroupBoxDescription, GB.GroupOrder, CASE WHEN ISNULL(CML.Name, '') = '' THEN ISNULL(FC.Name, '') ELSE ISNULL(CML.Name, '') END AS ControlName ,  FC.ControlOrder, 
			FC.TableColumn,CT.TypeValues AS ControlType, CT.CodemasterID AS ControlTypeId, DT.TypeValues AS DataType, FC.IsIdentity, FC.IsMandatory, FC.[Readonly], FC.Visibility, 
			FC.SelectApplicable,FC.IsDmlControl, FC.UniqueGroup, 0 AS DSNum,FC.MaxLength, ISNULL(FC.[Events], ''), FC.AttachmentPath, FC.AttachmentMaxSize,
			FC.DefaultValue, FC.MaxRange, FC.FkTable AS ControlInfo, FC.SearchApplicable, FC.ValidationEvent,
			COALESCE (CASE WHEN LEN(GB.TableName) > 0 THEN 'Groupbox' WHEN LEN(FT.TableName) > 0 THEN 'Tab' WHEN LEN(FD.TableName) > 0 THEN 'Form' END, NULL),
			COALESCE (CASE WHEN LEN(GB.TableName) > 0 THEN GB.GroupID WHEN LEN(FT.TableName) > 0 THEN FT.TabID WHEN LEN(FD.TableName) > 0 THEN FD.FormID END, NULL),
			FC.IsEncrypt, FC.IsNoAdd, FC.IsNoUpdate, FC.FillEvent, FC.FillType,
			CASE WHEN (SELECT COUNT(1) FROM CmnControlProperty WHERE ControlID = FC.ControlID) <> 0 THEN    
													' SET @DOUTPRP = ISNULL(SUBSTRING((SELECT '','' + (''{"Control":"''+  CP.Name  +''","Value":"''+ REPLACE(REPLACE(CP.Value, ''\'', ''\\''),''"'', ''\"'') +''"}'')
																											FROM CmnControlProperty CP 
																											WHERE CP.ControlID = ''' + CAST(FC.ControlID AS VARCHAR(50)) + ''' AND CP.IsDeleted = 0
																											FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
			ELSE '' END AS ControlProperty, FC.ControlID,
			CASE WHEN ISNULL(FC.ButtonID,'') = '' OR FC.ButtonID = 0 THEN '' 
			ELSE 
				'SET @DOUTBQ =  SUBSTRING((SELECT '','' '+'+'+' Typevalues FROM CmnCodeMaster CM WHERE CM.Type=''Menubutton'' AND                        
				(PATINDEX(''%,'' + CONVERT(VARCHAR(50), CM.CodemasterID)' + '+'',%'', '','' +  
				ISNULL(CONVERT(VARCHAR(50), '''+CONVERT(VARCHAR(50), FC.ButtonID)+'''), '''') + '','') > 0) '+
				' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
			END AS BQuery, '' AS ButtonName, ISNULL(GB.ControlPerRow, 1) AS ControlPerRow, FC.ColumnWidth, ISNULL(FC.DateDifference, 0) AS DateDifference, ISNULL(FC.Description, '') AS Description,
			ISNULL(GB.IsChildGroupBox, 0) AS IsChildGroupBox, ISNULL(GB.ControlCount, 0) AS ControlCount
		FROM CmnFormDetails FD WITH (NOLOCK)
			JOIN CmnFormTabs FT WITH (NOLOCK) ON FT.FormID = FD.FormID AND FT.IsDeleted = 0 AND (ISNULL(@IN_Device, '') <> 'Mobile' OR ISNULL(FT.IsMobile, 1) = 1)
				AND ISNULL(FT.IsStatic, 0) = 0 
			JOIN CmnGroupBoxes GB WITH (NOLOCK) ON GB.TabID = FT.TabID AND GB.IsDeleted = 0 AND (ISNULL(@IN_Device, '') <> 'Mobile' OR ISNULL(GB.IsMobile, 1) = 1)
			JOIN CmnFormControls FC WITH (NOLOCK) ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND (ISNULL(@IN_Device, '') <> 'Mobile' OR FC.IsMobile = 1)
			JOIN CmnCodeMaster CT WITH (NOLOCK) ON CT.[Type] = 'Control Type' AND CT.CodemasterID = FC.ControlType AND CT.IsDeleted = 0
			JOIN CmnCodeMaster DT WITH (NOLOCK) ON DT.[Type] = 'Data Type' AND DT.CodemasterID = FC.DataType AND DT.IsDeleted = 0
			LEFT JOIN CmnTabsMultiLingual TML WITH (NOLOCK) ON TML.TabID = FT.TabID AND TML.LanguageID = @UserProfileID AND ISNULL(TML.IsDeleted, 0) = 0
			LEFT JOIN CmnGroupMultiLingual GML WITH (NOLOCK) ON  GML.GroupID = GB.GroupID AND GML.LanguageID = @UserProfileID AND ISNULL(GML.IsDeleted, 0) = 0
			LEFT JOIN CmnControlsMultiLingual CML WITH (NOLOCK) ON CML.ControlID = FC.ControlID AND CML.LanguageID = @UserProfileID AND ISNULL(CML.IsDeleted, 0) = 0
		WHERE FD.FormID = @IN_FormID
		
		UPDATE #tempFormControls SET @DSCount = DSNum = @DSCount + 1 WHERE ControlProperty <> '' OR BQuery <> ''
 
		SET @Min = 0;
		SET @Max = 0;  
		SELECT @Min = MIN(DSNum), @Max = MAX(DSNum) FROM #tempFormControls WHERE DSNum <> 0
	
		WHILE (@Min <> 0 AND @Min <= @Max) 
		BEGIN
			SET @PropString = ''
			SELECT @PQuery = ControlProperty FROM #tempFormControls WHERE DSNum = @Min  
			
			IF @PQuery <> '' 
				EXEC sp_executesql @PQuery, N'@DOUTPRP NVARCHAR(MAX) OUTPUT', @PropString OUTPUT   

			SET @BString = ''			
			SELECT @BQuery = BQuery FROM #tempFormControls WHERE DSNum = @Min 
				
			IF @BQuery <> '' 
				EXEC sp_executesql @BQuery, N'@DOUTBQ NVARCHAR(MAX) OUTPUT', @BString OUTPUT  
	  
			UPDATE #tempFormControls SET ControlProperty = @PropString, ButtonName = @BString WHERE DSNum = @Min

			SET @Min = @Min + 1
		END 

		SELECT TabID, TabName, TabDisplayName, TabDescription, TabOrder, GroupBoxName, GroupboxDisplayName, GroupBoxDescription, GroupOrder, ControlName, ControlOrder, TableColumn, ControlType, ControlTypeId, DataType, IsIdentity, IsMandatory, 
			IsSelectOption, IsDmlControl, UniqueGroup, [Readonly], Visibility, MaxLength, ControlEvent, 
			AttachmentPath, AttachmentMaxSize, DefaultValue, MaxRange, ControlInfo, IsSearchApplicable, ValidationEvent, TableFrom, TableID, IsEncrypt, IsNoAdd, IsNoUpdate,
			FillEvent, FillType, '[' + ControlProperty + ']' AS ControlProperty, ControlID, ButtonName, ControlPerRow, ColumnWidth, DateDifference, Description, IsChildGroupBox, ControlCount
		FROM #tempFormControls
		ORDER BY TabOrder, TabName, GroupOrder, GroupBoxName, ControlOrder
  
		SELECT (CASE WHEN ISNULL(SML.Name, '') = '' THEN ISNULL(FS.Name, '') ELSE ISNULL(SML.Name, '') END ) AS ControlName, FS.TableColumn AS TableColumn, 
			CT.TypeValues AS ControlType, CT.CodemasterID AS ControlTypeId, DT.TypeValues AS DataType, FS.IsMandatory AS IsMandatory, FS.SearchOrder AS SearchOrder,
			FS.[Readonly] AS [Readonly], FS.Visibility AS Visibility, FS.SelectApplicable AS IsSelectOption, FS.MaxLength AS MaxLength, ISNULL(FS.[Events], '') AS ControlEvent, 
			(SELECT CASE WHEN ISNULL(RSC.ControlValues, '') = '' THEN ISNULL(FS.DefaultValue, '') ELSE ISNULL(RSC.ControlValues, '') END) AS DefaultValue,
			(SELECT CASE WHEN ISNULL(RSC.ControlValues, '') = '' THEN ISNULL(FS.MaxRange, '') ELSE ISNULL(RSC.ControlValues, '') END) AS MaxRange,
			FS.ValidationEvent AS ValidationEvent, FS.FkTable AS ControlInfo, ISNULL(FS.ButtonID, 0) AS ButtonID, ISNULL(FS.Type, '') AS ProcessType, ISNULL(FS.DateFilterType, 0) AS DateFilterType,
			ISNULL(FS.FillEvent, '') AS FillEvent, ISNULL(FS.DateDifference, 0) AS DateDifference, ISNULL(FS.Description,'') AS Description
		FROM CmnFormSearchControl FS
			JOIN CmnCodeMaster CT ON CT.Type = 'Control Type' AND CT.CodemasterID = FS.ControlType AND CT.IsDeleted = 0
			JOIN CmnCodeMaster DT ON DT.Type = 'Data Type' AND DT.CodemasterID = FS.DataType AND DT.IsDeleted = 0
			LEFT JOIN CmnRememberSearchControl RSC ON RSC.FormID = FS.FormID AND RSC.UserID = @IN_UserID AND RSC.SearchID = FS.SearchID 
			LEFT JOIN CmnSearchMultiLingual SML WITH (NOLOCK) ON SML.SearchID = FS.SearchID AND SML.LanguageID = @UserProfileID AND ISNULL(SML.IsDeleted, 0) = 0
		WHERE FS.FormID = @IN_FormID AND FS.IsDeleted = 0 AND (ISNULL(@IN_Device, '') <> 'Mobile' OR FS.IsMobile = 1) ORDER BY FS.SearchOrder
			  
		SELECT CASE WHEN ISNULL(FML.Name, '') = '' THEN ISNULL(FD.DisplayName, '') ELSE ISNULL(FML.Name, '') END AS FormName, 
			FD.FormType,CASE WHEN ISNULL(CMM.Name, '') = '' THEN ISNULL(FM.TypeValues, '') ELSE ISNULL(CMM.Name, '') END AS ModuleName,
			CASE WHEN ISNULL(MFML.Name, '') = '' THEN ISNULL(MFD.Name, '') ELSE ISNULL(MFML.Name, '') END AS MainFormName,
			ISNULL(FD.FormEvents, '') AS FormEvents, ISNULL(FD.IsOfflineSave, 0) AS IsOfflineSave 
		FROM CmnFormDetails FD WITH (NOLOCK)
			JOIN CmnCodeMaster FM WITH (NOLOCK) ON FM.Type = 'Module' AND FM.CodemasterID = FD.ModuleID AND FM.IsDeleted = 0
			LEFT JOIN CmnFormDetails MFD WITH (NOLOCK) ON MFD.FormID = FD.MainMenu1 AND MFD.IsDeleted = 0
			LEFT JOIN CmnFormMultiLingual FML WITH (NOLOCK) ON FML.FormID = FD.FormID AND FML.LanguageID = @UserProfileID AND FML.IsDeleted = 0
			LEFT JOIN CmnFormMultiLingual MFML WITH (NOLOCK) ON MFML.FormID = MFD.FormID AND MFML.LanguageID = @UserProfileID AND MFML.IsDeleted = 0
			LEFT JOIN CmnCodeMasterMultiLingual CMM WITH (NOLOCK) ON CMM.CodeMasterID = FD.ModuleID AND CMM.Type = 'Module' AND CMM.LanguageID = @UserProfileID AND CMM.IsDeleted = 0
		WHERE FD.FormID = @IN_FormID

		SELECT MB.CodemasterID AS ButtonID, CASE WHEN ISNULL(CMM.Name, '') = '' THEN ISNULL(MB.TypeValues, '') ELSE ISNULL(CMM.Name, '') END AS ButtonName,
			 ISNULL(MB.TypeValues, '') AS Description, MB.ImagePath AS ButtonIcon, MB.Details AS ButtonEvent, MB.MenuCategory AS ButtonType, ISNULL(MB.AvailableStatus, '') AS ButtonStatus, 
			 ISNULL(MB.ButtonKeyColumn, '') AS ButtonKey, ISNULL(MB.ButtonCategory, 0) AS ButtonCategory, ISNULL(MB.ButtonType, 0) AS FormButtonType, 
			 ISNULL(MB.VisibleTabs, '') AS VisibleTabs, ISNULL(MB.DisableTabs, '') AS DisableTabs, ISNULL(MB.ButtonTriggerEvent, '') AS ButtonTriggerEvent, ISNULL(MB.IsMultipleApproval, 0) AS IsMultipleApproval
		FROM CmnCodeMaster MB WITH (NOLOCK)
			LEFT JOIN CmnCodeMasterMultiLingual CMM WITH (NOLOCK) ON CMM.CodeMasterID = MB.CodemasterID AND CMM.Type = 'Menubutton' 
				AND CMM.TypeValues = MB.TypeValues AND CMM.LanguageID = @UserProfileID AND CMM.IsDeleted = 0
			LEFT JOIN CmnCodeMaster CM WITH (NOLOCK) ON CM.Type = 'Status'  AND MB.Category = CM.CodemasterID
			LEFT JOIN CmnFormButtonProperties BP ON BP.FormID = MB.MenuID AND BP.ButtonID = MB.ReferenceID
				AND BP.IsDeleted = 0 -- AND BP.NotActive = 0 AND BP.IsCurrentVersion = 1
		WHERE MB.[Type] = 'Menubutton' AND MB.MenuID = @IN_FormID
			AND (ISNULL(@IN_Device, '') <> 'Mobile' OR ISNULL(BP.IsMobile, 1) = 1)
			AND MB.IsDeleted = 0 AND MB.NotActive = 0 AND MB.IsCurrentVersion = 1
		ORDER BY MB.OrderBy
			
		DECLARE @GroupboxProp NVARCHAR(MAX) = ''
				SELECT @GroupboxProp = ISNULL(STUFF((SELECT(SELECT ',{'+ '"Name":"', GP.Name , '"' + ',' + '"Value":"', REPLACE(REPLACE(GP.Value, '\', '\\'),'"', '\"') + '"' + ',' + '"TabName":"', FT.Name ,'"' + ',' + '"GropboxName":"', GB.Name , '"}' 
				FROM CmnGeneralProperty GP
				JOIN CmnGroupBoxes GB WITH (NOLOCK) ON GB.GroupID = GP.TypeID AND GB.IsDeleted = 0
				JOIN CmnFormTabs FT WITH (NOLOCK) ON FT.TabID = GB.TabID AND FT.FormID= @IN_FormID AND FT.IsDeleted = 0
				where GP.Type ='Groupbox' AND GP.TypeID = GB.GroupID AND GP.IsDeleted = 0
				FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)')), 1, 1, ''), ''); 
				
				SELECT '['+ @GroupboxProp + ']' AS GroupboxProperty;
				
		DECLARE @TabProp NVARCHAR(MAX) = ''
				SELECT @TabProp = ISNULL(STUFF((SELECT(SELECT ',{'+ '"Name":"', GP.Name , '"' + ',' + '"Value":"', REPLACE(REPLACE(GP.Value, '\', '\\'),'"', '\"')+'"' + ',' + '"TabName":"', FT.Name , '"}' 
				FROM CmnGeneralProperty GP
				JOIN CmnFormTabs FT WITH (NOLOCK) ON FT.FormID = @IN_FormID AND FT.IsDeleted = 0 AND ISNULL(FT.IsStatic, 0) = 0 
				where GP.Type = 'Tab' AND GP.TypeID = FT.TabID AND GP.IsDeleted = 0
				FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)')), 1, 1, ''), ''); 
				
				SELECT '['+ @TabProp + ']' AS TabProperty;
				
		DECLARE @FormProp NVARCHAR(MAX) = ''
				SELECT @FormProp = ISNULL(STUFF((SELECT(SELECT ',{'+ '"Name":"', Name , '"' + ',' + '"Value":"', REPLACE(REPLACE(Value, '\', '\\'),'"', '\"')+'"}' 
				FROM CmnGeneralProperty where Type ='Form' AND TypeID = @IN_FormID AND IsDeleted = 0 
				FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)')), 1, 1, ''), ''); 
				
				SELECT '['+ @FormProp + ']' AS FormProperty;			
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE()

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH   
END 
GO
PRINT N'Creating [dbo].[spCmnGetFormNavigateDetails]'
GO

CREATE PROCEDURE [dbo].[spCmnGetFormNavigateDetails](@IN_FormName NVARCHAR(200), @IN_ModuleName NVARCHAR(200), @IN_UserID INT)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50)

		SELECT TOP 1 FD.FormID AS FormID, ISNULL(FD.FormPath, '') AS FormPath, ISNULL(FD.ModuleID, 0) AS ModuleID
		FROM CmnFormDetails FD
			JOIN CmnRBSPermission RBS ON FD.FormID = RBS.FormID AND RBS.HasReadPermission = 1 AND RBS.IsDeleted = 0
			LEFT JOIN CmnCodeMaster CM ON CM.Type = 'Module' AND CM.CodemasterID = FD.ModuleID
				AND ISNULL(CM.IsDeleted, 0) = 0 AND ISNULL(CM.NotActive, 0) = 0 AND ISNULL(CM.IsCurrentVersion, 1) =1
		WHERE FD.DisplayName = @IN_FormName AND RBS.UserID = @IN_UserID AND ISNULL(FD.FormType, 0) <> 0 AND ISNULL(FD.IsDeleted, 0) = 0
			AND ( ISNULL(@IN_ModuleName, '') = '' OR CM.TypeValues = @IN_ModuleName)
		ORDER BY FD.FormPath DESC;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnGetFormPermission]'
GO

CREATE PROCEDURE [dbo].[spCmnGetFormPermission](@IN_FormID INT, @IN_FormPath VARCHAR(100), @IN_UserID INT)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
			  @UserType INT = 0,
			  @ButtonList VARCHAR(500),
			  @TabList VARCHAR(500);

		SET @UserType = ISNULL((SELECT UP.Type FROM CmnUserDetails UP WHERE UP.UserID = @IN_UserID), 0);

		IF ISNULL(@UserType, 0) = 0
		BEGIN
			SET @TabList = ISNULL(SUBSTRING((SELECT ',' + CAST(TabID AS VARCHAR(MAX)) FROM CmnFormTabs WHERE FormID = @IN_FormID
							FOR XML PATH(''), ROOT('MyString'), TYPE).value('MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '');

			SET @ButtonList = ISNULL(SUBSTRING((SELECT ',' + CAST(CodemasterID AS VARCHAR(MAX)) FROM CmnCodeMaster WHERE MenuID = @IN_FormID AND Type = 'Menubutton' AND IsDeleted = 0 AND NotActive = 0
							FOR XML PATH(''), ROOT('MyString'), TYPE).value('MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '');

			SELECT 1, 0, 0, 0, @ButtonList, @TabList, 
				ISNULL(FD.PageOrientation, 1) AS PageOrientation, ISNULL(HT.HelpText, '') AS HelpText, 1 AS ConfirmMsg,
				FD.FormID AS FormID, ISNULL(FD.FormPath, '') AS FormPath, ISNULL(FD.ModuleID, 0) AS ModuleID
			FROM CmnFormDetails FD
				LEFT JOIN CmnHelpTemplate HT ON HT.FormID = FD.FormID
					 AND ISNULL(HT.IsDeleted, 0) = 0 AND ISNULL(HT.NotActive, 0) = 0 AND ISNULL(HT.IsCurrentVersion, 1) = 1
			WHERE FD.FormPath = @IN_FormPath AND FD.FormID = @IN_FormID AND ISNULL(FD.IsDeleted, 0) = 0
		END
		ELSE
		BEGIN
			SELECT RBS.HasReadPermission, RBS.Audit, RBS.SubAudit, RBS.ValidateChecksum, RBS.Buttons, RBS.Tabs, 
				ISNULL(FD.PageOrientation, 1) AS PageOrientation, ISNULL(HT.HelpText, '') AS HelpText, ISNULL(RBS.ConfirmMsg, 1) AS ConfirmMsg,
				FD.FormID AS FormID, ISNULL(FD.FormPath, '') AS FormPath, ISNULL(FD.ModuleID, 0) AS ModuleID
			FROM CmnRBSPermission RBS
				JOIN CmnFormDetails FD ON FD.FormID = RBS.FormID
				LEFT JOIN CmnHelpTemplate HT ON HT.FormID = FD.FormID AND RBS.HasReadPermission = 1
					 AND ISNULL(HT.IsDeleted, 0) = 0 AND ISNULL(HT.NotActive, 0) = 0 AND ISNULL(HT.IsCurrentVersion, 1) = 1
			WHERE FD.FormPath = @IN_FormPath AND RBS.FormID = @IN_FormID AND RBS.UserID = @IN_UserID AND ISNULL(RBS.IsDeleted, 0) = 0
		END
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnGetGuiData]'
GO

CREATE PROCEDURE [dbo].[spCmnGetGuiData] (
	@IN_USERID BIGINT,
	@IN_SESSIONID NVARCHAR(500),
	@IN_CompanyCode NVARCHAR(500) = '')
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY

		DECLARE	@ErrorMessage VARCHAR(2000),
				@ErrorSeverity VARCHAR(50),
				@ErrorState INT,
				@UserProfileID INT = ISNULL((SELECT ProfileID FROM CmnUserDetails WHERE UserID = @IN_USERID), 0)

		SELECT ISNULL(STUFF((SELECT(SELECT ',' + '{"KeyCode":"'+ ISNULL(GK.[KeyCode], '') + '","Message":"' + COALESCE(CGM.[Message], GK.[Message], '') + '","Category":"' + ISNULL(TypeValues, '') + '"}'	  
				FROM CmnApplicationMessages GK
					LEFT JOIN CmnCodeMaster CM ON CM.Type = 'Message Category' AND CM.CodemasterID = GK.[Category]
						AND ISNULL(CM.IsDeleted, 0) = 0 AND ISNULL(CM.NotActive, 0) = 0 AND ISNULL(CM.IsCurrentVersion, 1) = 1
					LEFT JOIN CmnMessagesMultiLingual CGM ON CGM.[KeyCode] = GK.[KeyCode] AND CGM.LanguageID = @UserProfileID AND CGM.IsDeleted = 0
				WHERE GK.IsDeleted = 0
				FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)')), 1, 1, ''), '') AS KeyVal

		SELECT '{' + ISNULL(STUFF((SELECT(SELECT ',' + '"' + ISNULL(GK.[KeyCode], '') + '":"' + ISNULL(GK.[KeyValue], '') + '"'		  
			FROM CmnGUIKeywords GK WHERE GK.IsDeleted = 0				
			FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)')), 1, 1, ''), '') + '}' AS KeyVal

		SELECT TOP 1 '{"CompanyID":' + CAST(CD.ReferenceID AS VARCHAR(50)) 
			+ ', "CompanyName":"' + ISNULL(CD.Name, '') + '"}'
		FROM MstCompanyDetails CD
		WHERE ISNULL(CD.ParentCompanyID, 0) = 0 
			AND ISNULL(@IN_CompanyCode, '') <> '' AND ISNULL(CD.Code, '') = ISNULL(@IN_CompanyCode, '')
			AND CD.IsDeleted = 0 AND CD.NotActive = 0 AND CD.IsCurrentVersion = 1;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetKFDetails]'
GO

CREATE PROCEDURE [dbo].[spCmnGetKFDetails](
	@IN_Event VARCHAR(10), 
	@IN_FkTypeID INT, 
	@IN_FkTable NVARCHAR(100),
	@IN_FormID INT, 
	@IN_UserID INT
)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY
	
	  DECLARE @ErrorMessage NVARCHAR(2000),
			@ErrorSeverity NVARCHAR(50),
			@ErrorState NVARCHAR(50),
			@FKTable NVARCHAR(MAX) ='',
			@FKColumn NVARCHAR(MAX) = ''

		IF @IN_Event = 'Table'
		BEGIN
			IF OBJECT_ID ('tempdb..#tempFkTable') IS NOT NULL DROP TABLE #tempFkTable
			CREATE TABLE #tempFkTable(Name NVARCHAR(500) NULL)

			IF @IN_FkTypeID = 1
				INSERT INTO #tempFkTable SELECT DISTINCT(Type) FROM CmnCodeMaster WHERE IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1;

			ELSE IF @IN_FkTypeID = 2
				IF @IN_FormID = 420
				BEGIN
					INSERT INTO #tempFkTable 
					SELECT Name FROM sys.objects WHERE TYPE IN (N'U')
					UNION
					SELECT Name FROM sys.views as v Order BY Name ASC;
				END
				ELSE
				BEGIN
					INSERT INTO #tempFkTable 
					SELECT Name FROM sys.objects WHERE TYPE IN (N'U') AND Name <> 'CmnFileUpload'
					UNION
					SELECT Name FROM sys.views as v Order BY Name ASC;
				END				
						
			SELECT @FKTable = ISNULL(SUBSTRING((SELECT ',' + ('{"Value":"'+ Name +'","Text":"'+Name+'"}')
			FROM #tempFkTable FOR XML PATH(''), ROOT('MyString'), TYPE).value('MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '')

			SELECT '['+@FKTable+']';
	  END
	  ELSE
	  BEGIN
		IF @IN_FkTypeID = 1
		  SET @IN_FkTable = 'CmnCodeMaster';     
		
		SELECT @FKColumn = ISNULL(SUBSTRING((SELECT ',' + ('{"Value":"'+ COLUMN_NAME +'","Text":"'+COLUMN_NAME+'"}')
		FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @IN_FkTable ORDER BY ORDINAL_POSITION
		FOR XML PATH(''), ROOT('MyString'), TYPE).value('MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '');   

		SELECT '['+@FKColumn+']';   
	  END
  
	END TRY
	BEGIN CATCH

		--EXEC [Fn_ErrorFetch] @@SPID

		--INSERT INTO tbl_StoredProcedure_Error(MenuID, App_User, SQL_User, Server_Name, [Procedure_Name],
		--	Error_Code, Line_Number, [Error_Message], [Error_State], Logged_Date, [INPUT_PARAMS]) 
		--SELECT @IN_FormID, @IN_UserID, USER_NAME(), @@SERVERNAME, ERROR_PROCEDURE(), ERROR_NUMBER(),
		--	ERROR_LINE(), ERROR_MESSAGE(), ERROR_STATE(), GETUTCDATE(), (SELECT PIN FROM TBL_ERRORFETCH);

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END;
GO
PRINT N'Creating [dbo].[spCmnGetLanguages]'
GO

CREATE PROCEDURE [dbo].[spCmnGetLanguages] (@IN_USERID BIGINT, @IN_SESSIONID NVARCHAR(500))
AS
BEGIN
	
	SET NOCOUNT ON;
	BEGIN TRY

    DECLARE	@ErrorMessage VARCHAR(2000),
						@ErrorSeverity VARCHAR(50),
						@ErrorState INT

		SELECT CodemasterID AS ProfileID, ISNULL(TypeValues, '') AS Language, ISNULL(Description, '') AS LanguageCode
		FROM CmnCodeMaster
		WHERE Type = 'Languages'
			AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 1) = 1;

	END TRY
	BEGIN CATCH
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetMasterDataButtons]'
GO

CREATE PROCEDURE [dbo].[spCmnGetMasterDataButtons] (@IN_FormID INT, @IN_UserID INT = 0)
AS
BEGIN	
	SET NOCOUNT ON

	BEGIN TRY

		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50)
	
		SELECT CodemasterID AS ButtonID, TypeValues AS ButtonName, Description, ImagePath AS ButtonIcon, Details AS ButtonEvent, MenuCategory AS ButtonType,
			  ISNULL(AvailableStatus, '') AS ButtonStatus, ISNULL(ButtonKeyColumn, '')  AS ButtonKey, ISNULL(ButtonType, 0) AS FormButtonType
		FROM CmnCodeMaster WHERE Type = 'Menubutton' AND MenuID = @IN_FormID AND IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1 ORDER BY OrderBy;   

	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnGetMenuDetails]'
GO

CREATE PROCEDURE [dbo].[spCmnGetMenuDetails] (
	@IN_ModuleID INT = 0,
	@IN_Device VARCHAR(50),
	@IN_UserID INT = 0)
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY 	

		DECLARE @ErrorSeverity NVARCHAR(50) = '',
				@ErrorMessage NVARCHAR(2000) = '',
				@ErrorState NVARCHAR(50) = '',
				@UserProfileID INT = 0,
				@UserType INT = 0

		SET @UserProfileID =  ISNULL((SELECT UP.ProfileID FROM CmnUserDetails UP WHERE UP.UserID = @IN_UserID), 0)

		SET @UserType =  ISNULL((SELECT UP.Type FROM CmnUserDetails UP WHERE UP.UserID = @IN_UserID), 0)
		
		IF ISNULL(@UserType, 0) = 0
		BEGIN
			;WITH CTE AS (
				SELECT ISNULL(CFD.FormID, 0) AS FormID, 
					CASE WHEN ISNULL(MFML.Name, '') = '' THEN ISNULL(CFD.DisplayName, '') ELSE ISNULL(MFML.Name, '') END AS FormName ,
					ISNULL(CFD.FormPath, '') AS FormPath, ISNULL(CFD.ModuleID, 0) AS ModuleID, 
					CASE WHEN ISNULL(CMM.Name, '') = '' THEN ISNULL(M.Typevalues, '') ELSE ISNULL(CMM.Name, '') END AS ModuleName, 
					ISNULL(CFD.FormIcon, '') AS FormIcon,
					ISNULL(SUBSTRING((SELECT  ',' + '{"SubFormID":"' + CONVERT(VARCHAR(50), SFD.FormID) + '","SubFormName":"' + 
					CASE WHEN ISNULL(FML.Name, '') = '' THEN ISNULL(SFD.DisplayName, '') ELSE ISNULL(FML.Name, '') END +
					'","SubFormPath":"' + SFD.FormPath + '","SubFormIcon":"' + SFD.FormIcon + '"}'        
														FROM CmnFormDetails SFD WITH (NOLOCK)
															LEFT JOIN CmnFormMultiLingual FML WITH (NOLOCK) ON FML.FormID = SFD.FormID AND FML.LanguageID = @UserProfileID 
																AND ISNULL(FML.IsDeleted, 0) = 0
														WHERE SFD.MainMenu1 = CFD.FormID AND ISNULL(SFD.IsDeleted, 0) = 0
															AND ((SFD.ModuleID = 2 AND SFD.Name IN ('Company Details', 'Master Data', 'Branch Details', 'Employee', 'Employee Details'))
																OR (SFD.ModuleID = 20 AND SFD.Name IN ('Employee Details')) OR SFD.ModuleID IN (1, 4))
															AND (ISNULL(@IN_Device, '') NOT IN ('Mobile', 'M') OR SFD.IsMobileMenu = 1)
														ORDER BY SFD.SubMenuOrder 
														FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '') AS SubMenu,
					CFD.MainMenuOrder AS OrderBy
				FROM CmnFormDetails CFD WITH (NOLOCK)
					JOIN CmnCodeMaster M WITH (NOLOCK) ON M.[Type] = 'Module' AND M.CodemasterID = CFD.ModuleID
						AND ISNULL(M.IsDeleted, 0) = 0 AND ISNULL(M.NotActive, 0) = 0 AND ISNULL(M.IsCurrentVersion ,1) =1
					LEFT JOIN CmnCodeMasterMultiLingual CMM ON CMM.Type = 'Module' AND CMM.CodeMasterID = CFD.ModuleID 
						AND CMM.LanguageID = @UserProfileID AND CMM.IsDeleted = 0
					LEFT JOIN CmnFormMultiLingual MFML WITH (NOLOCK) ON MFML.FormID = CFD.FormID AND MFML.LanguageID = @UserProfileID AND ISNULL(MFML.IsDeleted, 0) = 0
				WHERE CFD.ModuleID = @IN_ModuleID AND ((@IN_ModuleID IN (2, 20) AND CFD.Name LIKE '%Company Master%' OR CFD.Name IN ('Employee', 'Employee Details')) 
															OR (@IN_ModuleID IN (1, 4)))
					AND ISNULL(CFD.MainMenu1, 0) = 0 AND ISNULL(CFD.IsDeleted, 0) = 0
					AND (ISNULL(@IN_Device, '') NOT IN ('Mobile', 'M') OR CFD.IsMobileMenu = 1)) 

			SELECT * FROM CTE WHERE (FormPath <> '' OR SubMenu <> '') ORDER BY OrderBy;
		END
		ELSE
		BEGIN
			;WITH CTE AS (
				SELECT ISNULL(CFD.FormID, 0) AS FormID, 
					CASE WHEN ISNULL(MFML.Name, '') = '' THEN ISNULL(CFD.DisplayName, '') ELSE ISNULL(MFML.Name, '') END AS FormName ,
					ISNULL(CFD.FormPath, '') AS FormPath, ISNULL(CFD.ModuleID, 0) AS ModuleID, 
					CASE WHEN ISNULL(CMM.Name, '') = '' THEN ISNULL(M.Typevalues, '') ELSE ISNULL(CMM.Name, '') END AS ModuleName, 
					ISNULL(CFD.FormIcon, '') AS FormIcon,
					ISNULL(SUBSTRING((SELECT  ',' + '{"SubFormID":"' + CONVERT(VARCHAR(50), SFD.FormID) + '","SubFormName":"' + 
					CASE WHEN ISNULL(FML.Name, '') = '' THEN ISNULL(SFD.DisplayName, '') ELSE ISNULL(FML.Name, '') END +
					'","SubFormPath":"' + SFD.FormPath + '","SubFormIcon":"' + SFD.FormIcon + '"}'        
														FROM CmnFormDetails SFD WITH (NOLOCK)
															JOIN CmnRBSPermission RBS WITH (NOLOCK) ON RBS.UserID = @IN_UserID AND RBS.FormID = SFD.FormID
																AND RBS.IsDeleted = 0 AND RBS.HasReadPermission = 1
															LEFT JOIN CmnFormMultiLingual FML WITH (NOLOCK) ON FML.FormID = SFD.FormID AND FML.LanguageID = @UserProfileID 
																AND ISNULL(FML.IsDeleted, 0) = 0
														WHERE SFD.MainMenu1 = CFD.FormID AND ISNULL(SFD.IsDeleted, 0) = 0
															AND (ISNULL(@IN_Device, '') NOT IN ('Mobile', 'M') OR SFD.IsMobileMenu = 1)
														ORDER BY SFD.SubMenuOrder 
														FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '') AS SubMenu,
					CFD.MainMenuOrder AS OrderBy
				FROM CmnFormDetails CFD WITH (NOLOCK)
					JOIN CmnCodeMaster M WITH (NOLOCK) ON M.[Type] = 'Module' AND M.CodemasterID = CFD.ModuleID
						AND ISNULL(M.IsDeleted, 0) = 0 AND ISNULL(M.NotActive, 0) = 0 AND ISNULL(M.IsCurrentVersion ,1) =1
					LEFT JOIN CmnCodeMasterMultiLingual CMM ON CMM.Type = 'Module' AND CMM.CodeMasterID = CFD.ModuleID 
						AND CMM.LanguageID = @UserProfileID AND CMM.IsDeleted = 0
					JOIN CmnRBSPermission CRP WITH (NOLOCK) ON CRP.UserID = @IN_UserID AND CRP.FormID = CFD.FormID
						AND CRP.IsDeleted = 0 AND CRP.HasReadPermission = 1 
					LEFT JOIN CmnFormMultiLingual MFML WITH (NOLOCK) ON MFML.FormID = CFD.FormID AND MFML.LanguageID = @UserProfileID AND ISNULL(MFML.IsDeleted, 0) = 0
				WHERE CFD.ModuleID = @IN_ModuleID AND ISNULL(CFD.MainMenu1, 0) = 0 AND ISNULL(CFD.IsDeleted, 0) = 0
					AND (ISNULL(@IN_Device, '') NOT IN ('Mobile', 'M') OR CFD.IsMobileMenu = 1)) 

			SELECT * FROM CTE WHERE (FormPath <> '' OR SubMenu <> '') ORDER BY OrderBy;
		END
	END TRY
	BEGIN CATCH 
	
		SELECT @ErrorMessage = TypeValues, @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() FROM CmnCodeMaster WHERE [Type] = 'Error Message'

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH   
END 
GO
PRINT N'Creating [dbo].[spCmnGetModuleDetails]'
GO

CREATE PROCEDURE [dbo].[spCmnGetModuleDetails](
	@IN_UserID BIGINT,
	@IN_Device VARCHAR(50))
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
		
		DECLARE @ErrorMessage NVARCHAR(2000),
						@ErrorSeverity NVARCHAR(50),
						@ErrorState NVARCHAR(50),
						@UserProfileID INT = 0,
						@TaskFormID INT = 0,
						@TaskFormPath NVARCHAR(500) = '',
						@TaskMaduleID INT = 0,
						@MyTasksCount INT = 0,
						@WorkflowVisibility INT = 0,
						@UserType INT;
 
		SET @UserProfileID =  ISNULL((SELECT UP.ProfileID FROM CmnUserDetails UP WHERE UP.UserID = @IN_UserID), 0);

		SET @UserType = ISNULL((SELECT UP.Type FROM CmnUserDetails UP WHERE UP.UserID = @IN_UserID), 0);

		IF ISNULL(@UserType, 0) = 0
		BEGIN
			IF OBJECT_ID(N'tempdb..#tempUserModulePath') IS NOT NULL
			BEGIN
				DROP TABLE #tempUserModulePath
			END		 		  
			CREATE TABLE #tempUserModulePath ( 
					ModuleID INT NULL,
					FormID INT NULL,
					MainPath VARCHAR(500) NULL,
					MainMenuOrder INT NULL,
					SubMenuOrder INT NULL, 
					MainMenuOrder1 INT NULL,
					SubMenuOrder1 INT NULL,
				); 
			INSERT INTO #tempUserModulePath
			SELECT CMFD.ModuleID As ModuleID, CMFD.FormID
				, (CASE WHEN CMFD.FormPath <> '' THEN CMFD.FormPath ELSE CD.FormPath END) + '-' + CAST((CASE WHEN CMFD.FormPath <> '' THEN CMFD.FormID ELSE CD.FormID END) AS VARCHAR(50)) As MainPath
				, CMFD.MainMenuOrder As MainMenuOrder
				, CMFD.SubMenuOrder AS SubMenuOrder
				, CD.MainMenuOrder As MainMenuOrder1
				, CD.SubMenuOrder As SubMenuOrder1
					 FROM CmnFormDetails CMFD
						 LEFT JOIN CmnFormDetails CD ON CD.MainMenu1 = CMFD.FormID       
					 WHERE COALESCE(CD.FormPath, CMFD.FormPath, '') <> ''
						AND ((CMFD.ModuleID IN (1, 4) OR ((CMFD.ModuleID = 2) AND CMFD.Name IN ('Company Master', 'Company Details', 'Master Data', 'Branch Details', 'Employee', 'Employee Details')))
														OR ((CMFD.ModuleID = 20 AND CMFD.Name IN ('Employee Details', 'Employee'))))
						AND ISNULL(CMFD.IsDeleted, 0) = 0 
						AND ISNULL(CD.IsDeleted, 0) = 0
						AND (ISNULL(@IN_Device, '') NOT IN ('Mobile', 'M') OR CMFD.IsMobileMenu = 1);

			-- Get the first menu form path in each module 
			IF OBJECT_ID(N'tempdb..#tempFirstModulePath') IS NOT NULL
			BEGIN
				DROP TABLE #tempFirstModulePath
			END 		  
			CREATE TABLE #tempFirstModulePath ( 
				ModuleID INT NULL,
				MainPath VARCHAR(500) NULL
			); 
			INSERT INTO  #tempFirstModulePath
				SELECT ModuleID, MainPath FROM 
					(SELECT *, ROW_NUMBER() OVER 
					(PARTITION BY ModuleID ORDER BY ModuleID, MainMenuOrder, SubMenuOrder1, SubMenuOrder, MainMenuOrder1, FormID) 
					AS rank FROM #tempUserModulePath WHERE MainMenuOrder <> 0) AS Ranked Where Ranked.rank = 1    
		
			;WITH CTE AS (
				SELECT DISTINCT CCM.CodemasterID AS ModuleID, 
					CASE WHEN ISNULL(CMM.Name, '') = '' THEN ISNULL(CCM.TypeValues, '') ELSE ISNULL(CMM.Name, '') END AS ModuleName,
					 CCM.ImagePath AS ImagePath,
					 CCM.OrderBy, CCM.Description, CCM.Category, CCM.Details
				FROM CmnFormDetails CFD
					JOIN CmnCodeMaster CCM ON CCM.Type = 'Module' AND CCM.CodemasterID = CFD.ModuleID AND CCM.CodemasterID IN (1, 2, 4, 20)
						AND ISNULL(CCM.IsDeleted, 0) = 0 AND ISNULL(CCM.NotActive, 0) = 0 AND ISNULL(CCM.IsCurrentVersion, 1) = 1
					 LEFT JOIN CmnCodeMasterMultiLingual CMM ON CMM.Type = 'Module' AND CMM.CodeMasterID =  CFD.ModuleID 
						AND CMM.LanguageID = @UserProfileID AND CMM.IsDeleted = 0
				WHERE ISNULL(CFD.MainMenu1, 0) = 0 AND ISNULL(CFD.IsDeleted, 0) = 0 AND (ISNULL(@IN_Device, '') NOT IN ('Mobile', 'M') OR CFD.IsMobileMenu = 1)) 

			SELECT t1.ModuleID, t1.ModuleName, t2.MainPath, t1.ImagePath, t1.OrderBy, t1.Description, t1.Category, t1.Details
			FROM CTE t1 JOIN #tempFirstModulePath t2 ON t1.ModuleID = t2.ModuleID
			ORDER BY t1.OrderBy	
		END
		ELSE
		BEGIN
		-- Get the form paths of all form id's 
			IF OBJECT_ID(N'tempdb..#tempModulePath') IS NOT NULL
			BEGIN
				DROP TABLE #tempModulePath
			END		 		  
			CREATE TABLE #tempModulePath ( 
					ModuleID INT NULL,
					FormID INT NULL,
					MainPath VARCHAR(500) NULL,
					MainMenuOrder INT NULL,
					SubMenuOrder INT NULL, 
					MainMenuOrder1 INT NULL,
					SubMenuOrder1 INT NULL,
				); 
			INSERT INTO #tempModulePath
			SELECT CMFD.ModuleID As ModuleID, CMFD.FormID
				, (CASE WHEN CMFD.FormPath <> '' THEN CMFD.FormPath ELSE CD.FormPath END) + '-' + CAST((CASE WHEN CMFD.FormPath <> '' THEN CMFD.FormID ELSE CD.FormID END) AS VARCHAR(50)) As MainPath
				, CMFD.MainMenuOrder As MainMenuOrder
				, CMFD.SubMenuOrder AS SubMenuOrder
				, CD.MainMenuOrder As MainMenuOrder1
				, CD.SubMenuOrder As SubMenuOrder1
					 FROM CmnFormDetails CMFD
						 JOIN CmnRBSPermission CRBPS WITH (INDEX(IDX_CmnRBSPermission)) ON CRBPS.UserID = @IN_UserID AND CRBPS.FormID = CMFD.FormID  
						   AND CRBPS.IsDeleted = 0 AND CRBPS.HasReadPermission = 1 
						 LEFT JOIN CmnFormDetails CD ON CD.MainMenu1 = CMFD.FormID
						 LEFT JOIN CmnRBSPermission CRBPA WITH (INDEX(IDX_CmnRBSPermission)) ON CRBPA.UserID = @IN_UserID AND CRBPA.FormID = CD.FormID  
						   AND CRBPA.IsDeleted = 0 AND CRBPA.HasReadPermission = 1        
					 WHERE COALESCE(CD.FormPath, CMFD.FormPath, '') <> ''
						 -- AND ISNULL(CRBPS.IsDeleted, 0) = 0 AND ISNULL(CRBPA.IsDeleted, 0) = 0 
						 AND ISNULL(CMFD.IsDeleted, 0) = 0 
						 AND ISNULL(CD.IsDeleted, 0) = 0 
						 AND (CD.FormID IS NULL OR CRBPA.UserID IS NOT NULL)
						 AND (ISNULL(@IN_Device, '') NOT IN ('Mobile', 'M') OR CMFD.IsMobileMenu = 1);				 				

			-- Get the first menu form path in each module 
			IF OBJECT_ID(N'tempdb..#tempTopModulePath') IS NOT NULL
			BEGIN
				DROP TABLE #tempTopModulePath
			END 		  
			CREATE TABLE #tempTopModulePath ( 
				ModuleID INT NULL,
				MainPath VARCHAR(500) NULL
			); 
			INSERT INTO  #tempTopModulePath
				SELECT ModuleID, MainPath FROM 
					(SELECT *, ROW_NUMBER() OVER 
					(PARTITION BY ModuleID ORDER BY ModuleID, MainMenuOrder, SubMenuOrder1, SubMenuOrder, MainMenuOrder1, FormID) 
					AS rank FROM #tempModulePath WHERE MainMenuOrder <> 0) AS Ranked Where Ranked.rank = 1    
		
			;WITH CTE AS (
				SELECT DISTINCT CCM.CodemasterID AS ModuleID, 
					CASE WHEN ISNULL(CMM.Name, '') = '' THEN ISNULL(CCM.TypeValues, '') ELSE ISNULL(CMM.Name, '') END AS ModuleName,
					 CCM.ImagePath AS ImagePath,
					 CCM.OrderBy, CCM.Description, CCM.Category, CCM.Details
				FROM CmnFormDetails CFD
					JOIN CmnCodeMaster CCM ON CCM.Type = 'Module' AND CCM.CodemasterID = CFD.ModuleID
						AND ISNULL(CCM.IsDeleted, 0) = 0 AND ISNULL(CCM.NotActive, 0) = 0 AND ISNULL(CCM.IsCurrentVersion, 1) = 1
					 LEFT JOIN CmnCodeMasterMultiLingual CMM ON CMM.Type = 'Module' AND CMM.CodeMasterID =  CFD.ModuleID 
						AND CMM.LanguageID = @UserProfileID AND CMM.IsDeleted = 0
					JOIN CmnRBSPermission CRP ON CRP.UserID = @IN_UserID AND CRP.FormID = CFD.FormID 
						AND CRP.IsDeleted = 0 AND CRP.HasReadPermission = 1
				WHERE ISNULL(CFD.MainMenu1, 0) = 0 AND ISNULL(CFD.IsDeleted, 0) = 0 AND (ISNULL(@IN_Device, '') NOT IN ('Mobile', 'M') OR CFD.IsMobileMenu = 1)) 

			SELECT t1.ModuleID, t1.ModuleName, t2.MainPath, t1.ImagePath, t1.OrderBy, t1.Description, t1.Category, t1.Details
			FROM CTE t1 JOIN #tempTopModulePath t2 ON t1.ModuleID = t2.ModuleID
			ORDER BY t1.OrderBy		
		END
	
		SELECT CUD.UserID, CUD.Username, ISNULL(MED.NickName, '') AS NickName
		FROM CmnUserDetails CUD
			LEFT JOIN MstEmployeeDetails MED ON MED.ReferenceID = CUD.TypeID AND CUD.Type = 1
		WHERE CUD.IsDeleted = 0;
  
		SELECT CLH.UserID, CLH.UserName, CLH.UserStatusID, MAX(CLH.LoginTime) AS LoginTime, MAX(CLH.LogoutTime) AS LogoutTime 
		FROM CmnLoginHistory CLH WHERE CLH.UserStatusID=1 AND CLH.UserID <> 0 GROUP BY UserID, UserName, UserStatusID;
  
		SELECT CLH.UserID,CLH.UserName,CLH.UserStatusID,CLH.LoginTime,CLH.LogoutTime
		FROM CmnLoginHistory CLH
			INNER JOIN(SELECT UserID, MAX(LogoutTime) AS LATEST FROM CmnLoginHistory GROUP BY UserID) TEMP 
			  ON TEMP.UserID = CLH.UserID AND TEMP.LATEST = CLH.LogoutTime 
		ORDER BY LogoutTime DESC;  

		SELECT CodemasterID, TypeValues, Description, Remarks 
		FROM CmnCodeMaster 
		WHERE Type = 'Theme Details'
			AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 1) = 1
		ORDER BY OrderBy ASC;

		SELECT TypeValues, CodemasterID 
		FROM CmnCodeMaster 
		WHERE Type = 'Menu Type'
			AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 1) = 1;
				
  		SELECT CodemasterID, TypeValues , Category
		FROM CmnCodeMaster 
		WHERE Type = 'Languages'
			AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 1) = 1;

		IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SmrSampleDetails]') AND type in (N'U'))
		BEGIN
			SET @WorkflowVisibility = 1
		END

		SELECT CMT.TypeValues, UD.FontType, UD.ProfileID, ISNULL(LANG.Description, '') AS LanguageCode,
			CASE WHEN ISNULL(UD.ProfileOrientation, 0) = 0 THEN 1 ELSE UD.ProfileOrientation END AS ProfileOrientation, 
			@WorkflowVisibility AS WorkflowVisibility, ISNULL(UD.MainPageID, 0) AS MainPageID, 
			CASE WHEN ISNULL(UD.PageOrientation, 0) = 0 THEN 1 ELSE UD.PageOrientation END AS PageOrientation,
			CASE WHEN ISNULL(UD.ThemeMode, 0) = 0 THEN 1 ELSE UD.ThemeMode END AS ThemeMode,
			ISNULL(ST.TypeValues, '') AS SearchType, 
			ISNULL(MPR.TypeValues, '') AS ModuleBarRequired,
			ISNULL(RS.TypeValues, '') AS RememberSearch
		FROM CmnUserDetails UD 
			LEFT JOIN CmnCodeMaster CMT ON CMT.Type = 'Menu Type' AND CMT.CodemasterID = UD.MenuType
			LEFT JOIN CmnCodeMaster LANG ON LANG.Type = 'Languages' AND LANG.CodemasterID = UD.ProfileID
			LEFT JOIN CmnCodeMaster ST ON ST.Type = 'Search Type' AND ST.CodemasterID = UD.SearchType
			LEFT JOIN CmnCodeMaster MPR ON MPR.Type = 'Yes Or No' AND MPR.CodemasterID = UD.ModuleBarRequired
			LEFT JOIN CmnCodeMaster RS ON RS.Type = 'Yes Or No' AND RS.CodemasterID = UD.RememberSearch
		WHERE UD.UserID = @IN_UserID;

		IF EXISTS (SELECT TOP 1 ISNULL(FUP.FullPath, '') FROM MstCompanyDetails CD LEFT JOIN CmnFileUpload FUP ON FUP.ReferenceID = ISNULL(CD.Logo, 0) AND FUP.IsDeleted = 0 
														WHERE ISNULL(CD.ParentCompanyID, 0) = 0 AND CD.IsDeleted = 0 AND CD.NotActive = 0 AND CD.IsCurrentVersion = 1 ORDER BY CD.ReferenceID DESC)
		BEGIN
			SELECT TOP 1 ISNULL(FUP.FullPath, '') AS Logo
			FROM MstCompanyDetails CD 
				LEFT JOIN CmnFileUpload FUP ON FUP.ReferenceID = ISNULL(CD.Logo, 0) AND FUP.IsDeleted = 0 
			WHERE ISNULL(CD.ParentCompanyID, 0) = 0 AND CD.IsDeleted = 0 AND CD.NotActive = 0 AND CD.IsCurrentVersion = 1 ORDER BY CD.ReferenceID DESC;
		END
		ELSE
		BEGIN
			SELECT ISNULL(CFU.FullPath, '') AS Logo
			FROM CmnUserDetails UD 
				LEFT JOIN CmnCodeMaster CM ON CM.Type = 'Company Type' AND CM.CodemasterID = UD.Type
				LEFT JOIN MstEmployeeDetails MED ON MED.ReferenceID = UD.TypeID AND UD.Type = 1 AND ISNULL(MED.IsDeleted, 0) = 0 AND ISNULL(MED.IsCurrentVersion, 1) = 1 
				JOIN MstCompanyDetails MCD ON MCD.ReferenceID = MED.BranchID AND UD.Type = 1 AND ISNULL(MCD.IsDeleted, 0) = 0 AND ISNULL(MCD.IsCurrentVersion, 1) = 1      
				JOIN CmnFileUpload CFU ON CFU.ReferenceID = (CASE WHEN ISNULL(UD.Type, 0) = 1 THEN MCD.Logo ELSE 0 END)
				--JOIN CmnFormTabs CFB ON CFB.FormID = CFU.FormID
				--JOIN CmnGroupBoxes CGB ON CGB.TabID = CFB.TabID
				--JOIN CmnFormControls CDC ON CDC.GroupID = CGB.GroupID AND CDC.TableColumn = (CASE WHEN ISNULL(UD.Type, 0) = 1 THEN 'Logo' ELSE '0' END)
			WHERE UserID = @IN_UserID AND ISNULL(CFU.IsDeleted, 0) = 0 --AND ISNULL(CFB.IsDeleted, 0) = 0 AND ISNULL(CGB.IsDeleted, 0) = 0 AND ISNULL(CDC.IsDeleted, 0) = 0; 
		END

		IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TskTaskDetails]') AND type in (N'U'))
		BEGIN
			SELECT @TaskFormID = ISNULL(FD.FormID, 0), @TaskFormPath = ISNULL(FD.FormPath, ''), @TaskMaduleID = ISNULL(FD.ModuleID, 0)
			FROM CmnFormDetails FD
				JOIN CmnRBSPermission RBS ON RBS.UserID = @IN_UserID AND RBS.FormID = FD.FormID
					AND RBS.IsDeleted = 0 AND ISNULL(HasReadPermission, 0) = 1
			WHERE FD.Name = 'Task Update' AND ISNULL(FD.FormPath, '') <> '' AND ISNULL(FD.IsDeleted, 0) = 0;

			SELECT @MyTasksCount = COUNT(1)
			FROM TskTaskDetails TD
				JOIN MstEmployeeDetails ED ON ED.ReferenceID = TD.AssignedToID
				JOIN CmnUserDetails UD ON UD.Type = 1 AND UD.TypeID = ED.ReferenceID
			WHERE UD.UserID = @IN_UserID AND TD.StatusID IN (1, 2)
				AND ISNULL(TD.IsDeleted, 0) = 0 AND ISNULL(TD.NotActive, 0) = 0 AND ISNULL(TD.IsCurrentVersion, 1) = 1;
		END

		SELECT @TaskFormID AS FormID, @TaskFormPath AS FormPath, @TaskMaduleID AS ModuleID, @MyTasksCount AS MyTasksCount;

		IF ISNULL(@UserType, 0) = 0
		BEGIN
			SELECT FD.FormID AS FormID, FD.DisplayName AS FormName, ISNULL(FD.FormPath, '') AS FormPath, ISNULL(FD.FormIcon, '') AS FormIcon,
				ISNULL(RBS.FavouriteOrder, 0) AS MenuOrder, ISNULL(CM.TypeValues, '') AS Module, ISNULL(FD.ModuleID, 0) AS ModuleID
			FROM CmnRBSPermission RBS
  				JOIN CmnFormDetails FD ON FD.FormID = RBS.FormID AND ISNULL(FD.FormPath, '') <> '' AND ISNULL(FD.IsDeleted, 0) = 0
					AND (FD.ModuleID IN (1, 4) OR (FD.ModuleID = 2 AND (FD.Name IN ('Company Details', 'Master Data', 'Branch Details', 'Employee', 'Employee Details')))
												OR (FD.ModuleID = 20 AND (FD.Name IN ('Employee Details'))))
  				JOIN CmnCodeMaster CM ON CM.Type = 'Module' AND CM.CodemasterID = FD.ModuleID
  					AND ISNULL(CM.IsDeleted, 0) = 0 AND ISNULL(CM.NotActive, 0) = 0 AND ISNULL(CM.IsCurrentVersion, 1) = 1
			WHERE RBS.UserID = @IN_UserID AND RBS.IsFavourite = 1 AND ISNULL(RBS.IsDeleted, 0) = 0
			ORDER BY RBS.FavouriteOrder;
		END
		ELSE
		BEGIN
			SELECT FD.FormID AS FormID, FD.DisplayName AS FormName, ISNULL(FD.FormPath, '') AS FormPath, ISNULL(FD.FormIcon, '') AS FormIcon,
				ISNULL(RBS.FavouriteOrder, 0) AS MenuOrder, ISNULL(CM.TypeValues, '') AS Module, ISNULL(FD.ModuleID, 0) AS ModuleID
			FROM CmnRBSPermission RBS
  				JOIN CmnFormDetails FD ON FD.FormID = RBS.FormID AND ISNULL(FD.FormPath, '') <> '' AND ISNULL(FD.IsDeleted, 0) = 0
  				JOIN CmnCodeMaster CM ON CM.Type = 'Module' AND CM.CodemasterID = FD.ModuleID
  					AND ISNULL(CM.IsDeleted, 0) = 0 AND ISNULL(CM.NotActive, 0) = 0 AND ISNULL(CM.IsCurrentVersion, 1) = 1
			WHERE RBS.UserID = @IN_UserID AND RBS.HasReadPermission = 1 
				AND RBS.IsFavourite = 1 AND ISNULL(RBS.IsDeleted, 0) = 0
			ORDER BY RBS.FavouriteOrder;
		END
		SELECT CodemasterID, TypeValues 
		FROM CmnCodeMaster 
		WHERE Type = 'Main Page'
			AND (TypeValues <> 'Sample Manager' OR @WorkflowVisibility = 1)
			AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 1) = 1;

		SELECT ISNULL(FD.FormID, 0) AS FormID, ISNULL(FD.Name, '') AS FormName, ISNULL(FD.ModuleID, 0) AS ModuleID, ISNULL(FD.FormPath, '') AS FormPath
		FROM CmnRoleSettings CS
			JOIN CmnUserDetails E ON PATINDEX(CONCAT('%,', CAST(CS.RoleID AS VARCHAR(50)), ',%'), CONCAT(',', CAST(E.RoleID AS VARCHAR(50)), ',')) > 0 
				AND ISNULL(E.IsDeleted, 0) = 0 AND ISNULL(E.NotActive, 0) = 0
			JOIN CmnRBSPermission RR ON RR.UserID = E.UserID AND RR.IsDeleted = 0 AND ISNULL(RR.HasReadPermission, 0) = 1 
			JOIN CmnFormDetails FD ON FD.FormID = RR.FormID AND ISNULL(FD.IsDeleted, 0) = 0
			LEFT JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND ISNULL(FT.IsDeleted, 0) = 0
			LEFT JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND ISNULL(GB.IsDeleted, 0) = 0
		WHERE E.UserID = @IN_UserID AND ISNULL(FD.IsMainPage, 0) = 1 AND FD.FormID = CS.MainDashboardID
			AND ISNULL(CS.IsDeleted, 0) = 0 AND ISNULL(CS.NotActive, 0) = 0 AND ISNULL(CS.IsCurrentVersion, 0) = 1;
			
	END TRY

	BEGIN CATCH 
	
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetRbsGroups]'
GO

CREATE PROCEDURE [dbo].[spCmnGetRbsGroups] (
	@IN_FormID INT, 
	@IN_UserID INT,
	@IN_RoleID INT,
	@IN_IsUserRbs INT
)	
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50);
			
		IF ISNULL(@IN_IsUserRbs, 0) = 0
		BEGIN
			SELECT ISNULL(RG.ReferenceID, 0) AS ReferenceID,
				CASE WHEN EXISTS (SELECT 1 FROM CmnCodeMaster CM WHERE CM.Type = 'Roles' 
					AND CM.CodemasterID = @IN_RoleID  AND PATINDEX(CONCAT('%,', CAST(RG.Name AS VARCHAR(50)), ',%'), CONCAT(',', CM.Details, ',')) > 0
					AND CM.IsDeleted = 0 AND CM.NotActive = 0 AND CM.IsCurrentVersion = 1) THEN 1 ELSE 0 END AS IsRequired,
				ISNULL(RG.ReferenceID, 0) AS RBSGroupID,
				ISNULL(RG.Name, '') AS RBSGroup 
			FROM CmnRbsGroups RG  
			WHERE RG.IsDeleted = 0;
		END
		ELSE IF ISNULL(@IN_IsUserRbs, 0) = 1 
		BEGIN
			SELECT ISNULL(RG.ReferenceID, 0) AS ReferenceID,
				CASE WHEN EXISTS (SELECT 1 FROM CmnUserDetails CM WHERE CM.UserID = @IN_RoleID 
					AND PATINDEX(CONCAT('%,', CAST(RG.ReferenceID AS VARCHAR(50)), ',%'), CONCAT(',', CM.RBSGroupIDs, ',')) > 0
					AND CM.IsDeleted = 0 AND CM.NotActive = 0) THEN 1 ELSE 0 END AS IsRequired,
				ISNULL(RG.ReferenceID, 0) AS RBSGroupID,
				ISNULL(RG.Name, '') AS RBSGroup 
			FROM CmnRbsGroups RG  
			WHERE RG.IsDeleted = 0;
		END
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetRBSModuleDetails]'
GO

CREATE PROCEDURE [dbo].[spCmnGetRBSModuleDetails]
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	DECLARE @ErrorMessage NVARCHAR(2000),
			@ErrorSeverity NVARCHAR(50),
			@ErrorState NVARCHAR(50)     
			 
		SELECT CM.CodemasterID AS Value, CM.TypeValues AS Text FROM CmnCodeMaster CM 
		WHERE CM.Type = 'Module' AND CM.IsDeleted = 0 AND CM.NotActive = 0 AND CM.IsCurrentVersion = 1
		ORDER BY CM.TypeValues;
    
	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnGetRole]'
GO

CREATE PROCEDURE [dbo].[spCmnGetRole](
	@IN_FormID INT, 
	@IN_UserID INT,
	@IN_RoleID INT 
)	
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
			DECLARE @ErrorMessage NVARCHAR(2000),
					@ErrorSeverity NVARCHAR(50),
					@ErrorState NVARCHAR(50),
					@ExceptionState INT = 0,
					@UserFormID INT = 0,
					@RoleFormID INT = 0,
					@RBSGroupFormID INT = 0;

			SET @UserFormID = ISNULL((SELECT FormID FROM CmnFormDetails WHERE Name = 'User Permission' AND IsDeleted = 0), 0);

		    SET @RoleFormID = ISNULL((SELECT FormID FROM CmnFormDetails WHERE Name = 'Role Permission' AND IsDeleted = 0), 0);

			SET @RBSGroupFormID = ISNULL((SELECT FormID FROM CmnFormDetails WHERE Name = 'RBS Group' AND IsDeleted = 0), 0);

			DECLARE @UserDetails TABLE (UserID INT, Username NVARCHAR(200), UserTypeID INT, RoleID VARCHAR(100), BranchID INT, CompanyID INT, NickName NVARCHAR(200))

			DECLARE @RBSDataVariable TABLE (
				RowNo INT NOT NULL,
				ControlName NVARCHAR(200) NULL,
				TableName VARCHAR(255) NULL,
				TableColumn VARCHAR(255) NULL,
				DataValue NVARCHAR(MAX) NULL)

			INSERT INTO @RBSDataVariable (RowNo, ControlName, TableName, TableColumn, DataValue)
			EXEC spCmnGetFormRBSData @IN_FormID, @IN_UserID, ''

			IF (@IN_FormID = @RoleFormID)
			BEGIN
				SELECT 0 AS Flag, CM.TypeValues AS Role, CM.CodemasterID AS RoleID
				FROM CmnCodeMaster CM
				WHERE Type ='Roles' AND CM.CodemasterID <> @IN_RoleID
			END
			ELSE IF (@IN_FormID = @UserFormID)
			BEGIN
				IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MstEmployeeDetails')
				BEGIN
					INSERT INTO @UserDetails (UserID, Username, UserTypeID, RoleID, BranchID, CompanyID, NickName)
					SELECT UD.UserID, ISNULL(UD.Username, ''), UD.Type, UD.RoleID, ED.BranchID, ED.CompanyID, ED.NickName
					FROM CmnUserDetails UD
						JOIN MstEmployeeDetails ED ON ED.ReferenceID = UD.TypeID 
							AND ISNULL(ED.IsDeleted, 0) = 0 AND ISNULL(ED.NotActive, 0) = 0 AND ISNULL(ED.IsCurrentVersion, 1) = 1
					WHERE UD.Type = 1 AND ISNULL(UD.IsDeleted, 0) = 0
					ORDER BY UD.UserID ASC;
				END
		
				IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MstClientContacts')
				BEGIN
					INSERT INTO @UserDetails (UserID, Username, UserTypeID, RoleID, BranchID, CompanyID)
					SELECT UD.UserID, ISNULL(UD.Username, ''), UD.Type, UD.RoleID, 0, 0
					FROM CmnUserDetails UD
						JOIN MstClientContacts CC ON CC.ReferenceID = UD.TypeID 
							AND ISNULL(CC.IsDeleted, 0) = 0 AND ISNULL(CC.NotActive, 0) = 0 AND ISNULL(CC.IsCurrentVersion, 1) = 1
						JOIN MstClientDetails CD ON CD.ReferenceID = CC.ClientID 
							AND ISNULL(CD.IsDeleted, 0) = 0 AND ISNULL(CD.NotActive, 0) = 0 AND ISNULL(CD.IsCurrentVersion, 1) = 1
					WHERE UD.Type = 2 AND ISNULL(UD.IsDeleted, 0) = 0
					ORDER BY UD.UserID ASC;
				END

				IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MstManufacturerContacts')
				BEGIN
					INSERT INTO @UserDetails (UserID, Username, UserTypeID, RoleID, BranchID, CompanyID)
					SELECT UD.UserID, ISNULL(UD.Username, ''), UD.Type, UD.RoleID, 0, 0
					FROM CmnUserDetails UD
						JOIN MstManufacturerContacts CC ON CC.ReferenceID = UD.TypeID 
							AND ISNULL(CC.IsDeleted, 0) = 0 AND ISNULL(CC.NotActive, 0) = 0 AND ISNULL(CC.IsCurrentVersion, 1) = 1
						JOIN MstManufacturerDetails CD ON CD.ReferenceID = CC.ManufacturerID 
							AND ISNULL(CD.IsDeleted, 0) = 0 AND ISNULL(CD.NotActive, 0) = 0 AND ISNULL(CD.IsCurrentVersion, 1) = 1
					WHERE UD.Type = 3 AND ISNULL(UD.IsDeleted, 0) = 0
					ORDER BY UD.UserID ASC;
				END

				IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MstSupplierContacts')
				BEGIN
					INSERT INTO @UserDetails (UserID, Username, UserTypeID, RoleID, BranchID, CompanyID)
					SELECT UD.UserID, ISNULL(UD.Username, ''), UD.Type, UD.RoleID, 0, 0
					FROM CmnUserDetails UD
						JOIN MstSupplierContacts CC ON CC.ReferenceID = UD.TypeID 
							AND ISNULL(CC.IsDeleted, 0) = 0 AND ISNULL(CC.NotActive, 0) = 0 AND ISNULL(CC.IsCurrentVersion, 1) = 1
						JOIN MstSupplierDetails CD ON CD.ReferenceID = CC.SupplierID 
							AND ISNULL(CD.IsDeleted, 0) = 0 AND ISNULL(CD.NotActive, 0) = 0 AND ISNULL(CD.IsCurrentVersion, 1) = 1
					WHERE UD.Type = 4 AND ISNULL(UD.IsDeleted, 0) = 0
					ORDER BY UD.UserID ASC;
				END

				SELECT 1 AS Flag, UD.UserID AS UserID, CONCAT(ISNULL(UD.Username, ''), CASE WHEN ISNULL(UD.NickName, '') <> '' THEN ' - ' ELSE '' END, ISNULL(UD.NickName, '')) AS UserName 
				FROM @UserDetails UD
					LEFT JOIN @RBSDataVariable RBSUSERID ON RBSUSERID.TableName = '' AND RBSUSERID.TableColumn = 'UserID'
					LEFT JOIN @RBSDataVariable RBSBranchID ON RBSBranchID.TableName = '' AND RBSBranchID.TableColumn = 'BranchID'
					LEFT JOIN @RBSDataVariable RBSRoleID ON RBSRoleID.TableName = '' AND RBSRoleID.TableColumn = 'RoleID'
					LEFT JOIN @RBSDataVariable RBSUserTypeID ON RBSUserTypeID.TableName = '' AND RBSUserTypeID.TableColumn = 'UserTypeID'
					LEFT JOIN @RBSDataVariable RBSCompanyID ON RBSCompanyID.TableName = '' AND RBSCompanyID.TableColumn = 'CompanyID'
				WHERE (ISNULL(RBSUSERID.DataValue, '') = '' OR (PATINDEX('%,' + CAST(UD.UserID AS VARCHAR(50)) + ',%', ',' + RBSUSERID.DataValue + ',') > 0))
					AND (ISNULL(RBSBranchID.DataValue, '') = '' OR (PATINDEX('%,' + CAST(UD.BranchID AS VARCHAR(50)) + ',%', ',' + RBSBranchID.DataValue + ',') > 0))
					AND (ISNULL(RBSRoleID.DataValue, '') = '' OR (PATINDEX('%,' + CAST(UD.RoleID AS VARCHAR(50)) + ',%', ',' + RBSRoleID.DataValue + ',') > 0))
					AND (ISNULL(RBSUserTypeID.DataValue, '') = '' OR (PATINDEX('%,' + CAST(UD.UserTypeID AS VARCHAR(50)) + ',%', ',' + RBSUserTypeID.DataValue + ',') > 0))
					AND (ISNULL(RBSCompanyID.DataValue, '') = '' OR (PATINDEX('%,' + CAST(UD.CompanyID AS VARCHAR(50)) + ',%', ',' + RBSCompanyID.DataValue + ',') > 0)) AND UD.UserID <> @IN_RoleID
				ORDER BY UserID ASC;
			END
			ELSE IF (@IN_FormID = @RBSGroupFormID)
			BEGIN
				SELECT 2 AS Flag, ISNULL(CM.Name, '') AS GroupName, ISNULL(CM.ReferenceID, 0) AS GroupID
				FROM CmnRbsGroups CM
				WHERE ISNULL(CM.ReferenceID, 0) <> @IN_RoleID AND ISNULL(CM.IsDeleted, 0) = 0 AND ISNULL(CM.NotActive, 0) = 0 AND ISNULL(CM.IsCurrentVersion, 1) = 1;
			END

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetRoleMenuDetails]'
GO

CREATE PROCEDURE [dbo].[spCmnGetRoleMenuDetails](
	@IN_RoleID INT, 
	@IN_ModuleID INT, 
	@IN_MenuName VARCHAR(100), 
	@IN_FormID INT, 
	@IN_UserID INT)	
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
			DECLARE @ErrorMessage NVARCHAR(2000),
					@ErrorSeverity NVARCHAR(50),
					@ErrorState NVARCHAR(50),
					@ExceptionState INT = 0,
					@ModifiedBy NVARCHAR(255),
					@ModifiedDate DATETIME,
					@Query NVARCHAR(MAX),
					@MenuList NVARCHAR(MAX) = ''
		
			SELECT TOP 1 @ModifiedBy = UD.Username, @ModifiedDate = RBS.ModifiedDate
			FROM CmnRolePermission RBS
				JOIN CmnUserDetails UD ON UD.UserID = RBS.ModifiedBy
			WHERE RBS.RoleID = @IN_RoleID ORDER BY RBS.ModifiedDate DESC;

			IF OBJECT_ID('tempdb..#tempFormDetails') IS NOT NULL
			DROP TABLE #tempFormDetails

			CREATE TABLE #tempFormDetails (
				SNum INT NULL,
				FormID INT NULL,
				Name VARCHAR(255) NULL,
				DisplayName VARCHAR(255) NULL,
				MainMenuName VARCHAR(255) NULL,
				MainMenu1 INT NULL,
				MainMenuOrder INT NULL,
				SubMenuOrder INT NULL,
				FormType INT NULL)

			INSERT INTO #tempFormDetails
			SELECT ROW_NUMBER() OVER (ORDER BY (CASE  WHEN ISNULL(FD.MainMenu1,0) = 0 THEN FD.MainMenuOrder 
					ELSE (SELECT MainMenuOrder FROM CmnFormDetails WHERE FormID = ISNULL(FD.MainMenu1, 0)) END),
					(CASE WHEN ISNULL(FD.MainMenu1, 0) = 0 THEN FD.FormID ELSE FD.MainMenu1 END),
					(CASE WHEN ISNULL(FD.MainMenu1, 0) = 0 THEN 1 ELSE 2 END ), FD.SubMenuOrder) AS SNum, 
				FD.FormID, FD.Name, ISNULL(FD.DisplayName, ''), CASE WHEN ISNULL(FD.MainMenu1,0) <> 0 THEN (SELECT DisplayName FROM CmnFormDetails WHERE FormID = ISNULL(FD.MainMenu1, 0)) ELSE '' END,
				ISNULL(FD.MainMenu1, 0), ISNULL(FD.MainMenuOrder, 0), ISNULL(FD.SubMenuOrder, 0), ISNULL(FD.FormType, 0)
			FROM CmnFormDetails FD
			WHERE FD.ModuleID = @IN_ModuleID AND FD.IsDeleted = 0
				AND (ISNULL(@IN_MenuName, '') = '' OR FD.Name LIKE '%'+ @IN_MenuName+ '%')
				AND (ISNULL(FD.MainMenu1, 0) <> 0 OR ISNULL(FD.FormPath, '') <> '' OR EXISTS(SELECT 1 FROM CmnFormDetails CHD WHERE CHD.MainMenu1 = FD.FormID AND CHD.IsDeleted = 0))
				AND (ISNULL(FD.MainMenu1, 0) = 0 OR EXISTS(SELECT 1 FROM CmnFormDetails CHD WHERE CHD.FormID = FD.MainMenu1 AND CHD.IsDeleted = 0));

			SET @Query = 'SET @Qry = (SELECT ISNULL(SUBSTRING((SELECT '','' + (''{"MenuName":"''+ CASE WHEN ISNULL(FD.MainMenu1, 0) <> 0 THEN REPLACE(REPLACE(''... ''+FD.Name, ''\'', ''\\''), ''"'', ''\"'') ELSE REPLACE(REPLACE(FD.Name, ''\'', ''\\''), ''"'', ''\"'') END +''","DisplayName":"''+REPLACE(REPLACE(FD.DisplayName, ''\'', ''\\''), ''"'', ''\"'')+''","MainMenuName":"''+REPLACE(REPLACE(FD.MainMenuName, ''\'', ''\\''), ''"'', ''\"'')+''","All":"0",'+
							'"Read":"''+ CAST(ISNULL(UP.HasReadPermission, 0) AS NVARCHAR(MAX)) +''","FormType":"''+CAST(FD.FormType AS NVARCHAR(MAX))+''"'+
							',"Audit":"''+CAST(ISNULL(UP.Audit, 0) AS NVARCHAR(MAX))+''","CheckSum":"''+CAST(ISNULL(UP.ValidateCheckSum, 0) AS NVARCHAR(MAX))+''"'+
							',"IsFavourite":"''+CAST(ISNULL(UP.IsFavourite, 0) AS NVARCHAR(MAX))+''","FavouriteOrder":"''+CAST(ISNULL(UP.FavouriteOrder, 0) AS NVARCHAR(MAX))+''",'+
							'"Buttons":"''+ISNULL(UP.Buttons, '''')+''","MainMenu":"''+CAST(ISNULL(FD.MainMenu1, ''0'') AS NVARCHAR(MAX))+''",'+
							'"MenuID":"''+CAST(FD.FormID AS NVARCHAR(MAX))+''","Order":"''+CAST(ISNULL(UP.MainMenuOrder, FD.MainMenuOrder) AS NVARCHAR(MAX))+''","SubOrder":"''+CAST(ISNULL(UP.SubMenuOrder, FD.SubMenuOrder) AS NVARCHAR(MAX))+''"'+
							',"Tabs":"''+ISNULL(UP.Tabs, '''')+''","Data":"''+ISNULL(UP.Tabs, '''')+''"
							,"PermissionFlag":"''+'+'(CASE WHEN((SELECT COUNT(FT.CodeMasterID) FROM CmnCodeMaster FT WHERE FT.MenuID = FD.FormID AND FT.Type = ''Menubutton'' AND FT.IsDeleted = 0) = (CASE WHEN ISNULL(UP.Buttons, '''') IN ('''', ''0'') THEN 0 ELSE (SELECT COUNT(value) FROM STRING_SPLIT(UP.Buttons, '','')) END)) AND 
							((SELECT COUNT(FT.TabID) FROM CmnFormTabs FT WHERE FT.FormID = FD.FormID AND FT.IsDeleted = 0 AND ISNULL(FT.IsStatic, 0) = 0) = (CASE WHEN ISNULL(UP.Tabs, '''') IN ('''', ''0'') THEN 0 ELSE (SELECT COUNT(value) FROM STRING_SPLIT(UP.Tabs, '','')) END)) AND 
							(ISNULL(UP.HasReadPermission, 0) = 1) THEN ''1'' WHEN ISNULL(UP.HasReadPermission, 0) = 0 THEN ''0'' ELSE ''2'' END)' +'+''","ConfirmMsg":"''+CAST(ISNULL(UP.ConfirmMsg, 1) AS NVARCHAR(MAX))+''","MandatoryTab":"''+ '+
							'CASE WHEN (SELECT COUNT(1) FROM CmnFormTabs FT WHERE FT.FormID = FD.FormID AND FT.IsMandatory = 1 AND FT.IsDeleted = 0) > 0 THEN '+
							'(SELECT ISNULL(SUBSTRING((SELECT '','' + CAST(ISNULL(FT.TabID, 0) AS NVARCHAR(MAX)) FROM CmnFormTabs FT WHERE FT.FormID = FD.FormID AND FT.IsMandatory = 1 AND FT.IsDeleted = 0 '+
							'FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000), '''')) ELSE '''' END +''"}'')'+
						 ' FROM #tempFormDetails FD'+
						 ' LEFT JOIN CmnRolePermission UP ON UP.RoleID = ' + CAST(@IN_RoleID AS NVARCHAR(MAX))+ '  AND UP.FormID = FD.FormID AND UP.IsDeleted = 0 ORDER BY FD.SNum'+
						 ' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000), ''''))'		

			EXEC sp_executesql @Query, N'@Qry NVARCHAR(MAX) OUTPUT', @MenuList OUTPUT
		
			SELECT ISNULL('['+ @MenuList+ ']', '') AS MenuList, @ModifiedBy AS ModifiedBy, @ModifiedDate AS ModifiedDate;

			SELECT CFD.FormID AS MenuID, ISNULL(SUBSTRING((SELECT ',' + ('{"Value":"'+ CAST(CM.CodemasterID AS NVARCHAR(MAX)) +'","Text":"'+ REPLACE(REPLACE(CM.TypeValues, '\', '\\'), '"', '\"')+'","Type":"'+ CAST(CCM.CodemasterID AS NVARCHAR(MAX))+'"}')
							FROM CmnCodeMaster CM 
								LEFT JOIN CmnCodeMaster CCM ON CCM.Type = 'Button Type' AND CCM.CodemasterID = CM.ButtonType AND CCM.IsDeleted = 0
							WHERE CM.Type='Menubutton' AND CM.MenuID = CFD.FormID AND CM.IsDeleted = 0 ORDER BY CM.OrderBy
							FOR XML PATH(''), ROOT('MyString'), TYPE).value('MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '') AS ButtonList  
			FROM #tempFormDetails CFD GROUP BY CFD.FormID, CFD.SNum ORDER BY CFD.SNum;

			SELECT CFD.FormID AS MenuID, ISNULL(SUBSTRING((SELECT ',' + ('{"Value":"'+ CAST(FT.TabID AS NVARCHAR(MAX)) +'","Text":"'+ REPLACE(REPLACE(FT.Name, '\', '\\'), '"', '\"')+'"}') 
							FROM CmnFormTabs FT WHERE FT.FormID = CFD.FormID AND FT.IsDeleted = 0 AND ISNULL(FT.IsStatic, 0) = 0
							FOR XML PATH(''), ROOT('MyString'), TYPE).value('MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '') AS TabList
			FROM #tempFormDetails CFD GROUP BY CFD.FormID, CFD.SNum ORDER BY CFD.SNum;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetRolePermission]'
GO

CREATE PROCEDURE [dbo].[spCmnGetRolePermission](
	@IN_FormID INT, 
	@IN_UserID INT)	
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
			DECLARE @ErrorMessage NVARCHAR(2000),
					@ErrorSeverity NVARCHAR(50),
					@ErrorState NVARCHAR(50),
					@ExceptionState INT = 0

			DECLARE @RBSDataVariable TABLE (
					RowNo INT NOT NULL,
					ControlName NVARCHAR(200) NULL,
					TableName VARCHAR(255) NULL,
					TableColumn VARCHAR(255) NULL,
					DataValue NVARCHAR(MAX) NULL)

			INSERT INTO @RBSDataVariable (RowNo, ControlName, TableName, TableColumn, DataValue)
			EXEC spCmnGetFormRBSData @IN_FormID, @IN_UserID, ''
		
			SELECT CodemasterID AS ButtonID, TypeValues AS ButtonName, Description, ImagePath AS ButtonIcon, Details AS ButtonEvent, MenuCategory AS ButtonType,
				  ISNULL(AvailableStatus, '') AS ButtonStatus, ISNULL(ButtonKeyColumn, '')  AS ButtonKey, ISNULL(ButtonType, 0) AS FormButtonType
			FROM CmnCodeMaster WHERE Type = 'Menubutton' AND MenuID = @IN_FormID AND IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1 ORDER BY OrderBy ASC;   
    
			SELECT ROL.CodemasterID AS Value, ROL.TypeValues AS Text 
			FROM CmnCodeMaster ROL
				LEFT JOIN @RBSDataVariable RBSRoleID ON RBSRoleID.TableName = '' AND RBSRoleID.TableColumn = 'RoleID'
			WHERE ROL.Type = 'Roles' AND ISNULL(ROL.IsDeleted, 0) = 0 AND ISNULL(ROL.NotActive, 0) = 0 AND ISNULL(ROL.IsCurrentVersion, 0) = 1
				AND (ISNULL(RBSRoleID.DataValue, '') = '' OR (PATINDEX('%,' + CAST(ROL.CodeMasterID AS VARCHAR(50)) + ',%', ',' + RBSRoleID.DataValue + ',') > 0))
			ORDER BY OrderBy ASC;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetRoleSettings]'
GO

CREATE PROCEDURE [dbo].[spCmnGetRoleSettings] (
	@IN_RoleID INT,
	@IN_FormID INT, 
	@IN_UserID INT)	
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
			DECLARE @ErrorMessage NVARCHAR(2000),
					@ErrorSeverity NVARCHAR(50),
					@ErrorState NVARCHAR(50)

			SELECT ISNULL(FD.FormID, 0) AS Value, ISNULL(FD.Name, '') AS Text 
			FROM CmnFormDetails FD
				LEFT JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
				LEFT JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
			WHERE ISNULL(FD.IsMainPage, 0) = 1 AND ISNULL(FD.IsDeleted, 0) = 0;

			SELECT ISNULL(MainDashboardID, 0) AS SelectedDashboardID
			FROM CmnRoleSettings 
			WHERE ISNULL(RoleID, 0) = @IN_RoleID AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 0) = 1;
			 
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetSilentLoginToken]'
GO

CREATE PROCEDURE [dbo].[spCmnGetSilentLoginToken](
 @IN_UserID BIGINT,
 @IN_ModuleName NVARCHAR(500),
 @IN_SessionID NVARCHAR(500))
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		DECLARE @ErrorMessage VARCHAR(2000),
						@ErrorSeverity VARCHAR(50),
						@ErrorState	VARCHAR(50),
						@TokenID NVARCHAR(500) = NEWID(),
						@TimeStamp DATETIME = GETUTCDATE(),
						@ExpiryDate DATETIME,
						@Message NVARCHAR(1000) = '',
						@Username NVARCHAR(500) = ISNULL((SELECT Username FROM CmnUserDetails WHERE UserID = @IN_UserID), '')

		SET @TokenID = @TokenID + FORMAT(@TimeStamp, 'yyyyMMddHHMMss');
		SET @ExpiryDate = DATEADD(MI, 1, @TimeStamp)

		INSERT INTO CmnSilentLoginTracking (UserID, SessionID, Token, Direction, ModuleName, InitiatedDate, ExpiryDate, IsAuthenticated, [Status])
		VALUES (@IN_UserID, @IN_SessionID, @TokenID, 'OUT', @IN_ModuleName, @TimeStamp, @ExpiryDate, 0, 'I');

		SELECT @TokenID AS Token, @Username AS Username, @Message AS Message

	END TRY
	BEGIN CATCH
	  SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetStoredProcedureByAction]'
GO

CREATE PROCEDURE [dbo].[spCmnGetStoredProcedureByAction] (@IN_ActionName NVARCHAR(500))
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50)

		SELECT ISNULL(Details, '') AS StoredProcedure
		FROM CmnCodeMaster WHERE Type = 'Button Action' AND TypeValues = @IN_ActionName
			AND IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGetUserAuthentication]'
GO

-- =============================================
-- Author:		<Revol Process Solutions>
-- Create date: <21-11-2020>
-- Description:	<Get login Authentication Type for UserName>
-- =============================================
CREATE PROCEDURE [dbo].[spCmnGetUserAuthentication] 
	(@IN_USERNAME NVARCHAR(100))
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
		SELECT UserName, ISNULL(AuthenticationType, 1) AS AuthenticationType FROM CmnUserDetails WHERE UserName = @IN_USERNAME	--1: DB Authentication
	END TRY
	BEGIN CATCH
		SELECT '' AS UserName, 0 AS AuthenticationType
	END CATCH

END

GO
PRINT N'Creating [dbo].[spCmnGetUserMenuDetails]'
GO

CREATE PROCEDURE [dbo].[spCmnGetUserMenuDetails](
	@IN_EmployeeID INT,
	@IN_ModuleID INT,
	@IN_MenuName VARCHAR(255),
	@IN_FormID INT, 
	@IN_UserID INT)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	DECLARE @ErrorMessage NVARCHAR(2000),
			@ErrorSeverity NVARCHAR(50),
			@ErrorState NVARCHAR(50),
			@UserRole NVARCHAR(255),
			@UserName NVARCHAR(255),
			@Type NVARCHAR(255),
			@CompanyName NVARCHAR(255),
			@ModifiedBy NVARCHAR(255),
			@ModifiedDate DATETIME,
			@Query NVARCHAR(MAX),
			@MenuList NVARCHAR(MAX) = '',
			@UTCTime DATETIME = GETUTCDATE(),
			@SNum INT = 0
			 
		SELECT @UserRole = ISNULL((SELECT STRING_AGG(UR.TypeValues, ', ') FROM CmnCodeMaster UR WHERE UR.Type = 'Roles' 
				 AND PATINDEX(CONCAT('%,', CAST(UR.CodemasterID AS VARCHAR(50)), ',%'), CONCAT(',', UD.RoleID, ',')) > 0), ''),
			 @UserName = (CASE WHEN UD.Type = 1 THEN CONCAT(ISNULL(TCM.TypeValues,''), ' ', ED.FirstName, ' ', ISNULL(ED.MiddleName,''), ' ', 
			ISNULL(ED.LastName,'')) WHEN UD.Type = 2 THEN '' WHEN UD.Type = 3 THEN '' WHEN UD.Type = 4 THEN '' ELSE '' END),
			@Type = (CASE WHEN UD.Type = 1 THEN 'Company' WHEN UD.Type = 2 THEN 'Client' WHEN UD.Type = 3 THEN 'Manufacturer' WHEN UD.Type = 4 THEN 'Supplier' ELSE '' END),
			@CompanyName = (CASE WHEN UD.Type = 1 THEN ISNULL(CD.Name, '') WHEN UD.Type = 2 THEN '' WHEN UD.Type = 3 THEN '' WHEN UD.Type = 4 THEN '' ELSE '' END)
		FROM CmnUserDetails UD 
		--JOIN CmnCodeMaster CM ON CM.CodemasterID = UD.RoleID AND CM.Type = 'Roles' AND CM.IsDeleted = 0
		LEFT JOIN MstEmployeeDetails ED ON ED.ReferenceID = UD.TypeID AND ED.IsDeleted = 0
		LEFT JOIN MstCompanyDetails CD ON CD.ReferenceID = ED.CompanyID AND CD.IsDeleted = 0
		LEFT JOIN CmnCodeMaster TCM ON TCM.CodemasterID = (CASE WHEN UD.Type = 1 THEN ED.TitleID WHEN UD.Type = 2 THEN '' 
							WHEN UD.Type = 3 THEN '' WHEN UD.Type = 4 THEN '' ELSE '' END) AND TCM.Type = 'Salutation' AND TCM.IsDeleted = 0    
		WHERE UD.UserID = @IN_EmployeeID;

		SELECT TOP 1 @ModifiedBy = UD.Username, @ModifiedDate = RBS.ModifiedDate
		FROM CmnRBSPermission RBS
		JOIN CmnUserDetails UD ON UD.UserID = RBS.UserID
		WHERE RBS.UserID = @IN_UserID ORDER BY RBS.ModifiedDate DESC;

		IF OBJECT_ID('tempdb..#tempFormDetails') IS NOT NULL
		DROP TABLE #tempFormDetails

		CREATE TABLE #tempFormDetails (
			SNum INT NULL,
			FormID INT NULL,
			Name VARCHAR(255) NULL,
			DisplayName VARCHAR(255) NULL,
			MainMenuName VARCHAR(255) NULL,
			MainMenu1 INT NULL,
			MainMenuOrder INT NULL,
			SubMenuOrder INT NULL,
			FormType INT NULL)

		INSERT INTO #tempFormDetails
		SELECT ROW_NUMBER() OVER (ORDER BY (CASE  WHEN ISNULL(FD.MainMenu1,0) = 0 THEN FD.MainMenuOrder 
				ELSE (SELECT MainMenuOrder FROM CmnFormDetails WHERE FormID = ISNULL(FD.MainMenu1, 0)) END),
				(CASE WHEN ISNULL(FD.MainMenu1, 0) = 0 THEN FD.FormID ELSE FD.MainMenu1 END),
				(CASE WHEN ISNULL(FD.MainMenu1, 0) = 0 THEN 1 ELSE 2 END ), FD.SubMenuOrder) AS SNum, 
			FD.FormID, FD.Name, ISNULL(FD.DisplayName, ''), CASE WHEN ISNULL(FD.MainMenu1,0) <> 0 THEN (SELECT DisplayName FROM CmnFormDetails WHERE FormID = ISNULL(FD.MainMenu1, 0)) ELSE '' END,
			ISNULL(FD.MainMenu1, 0), ISNULL(FD.MainMenuOrder, 0), ISNULL(FD.SubMenuOrder, 0), ISNULL(FD.FormType, 0)
		FROM CmnFormDetails FD
		WHERE FD.ModuleID = @IN_ModuleID AND FD.IsDeleted = 0
			AND (ISNULL(@IN_MenuName, '') = '' OR FD.Name LIKE '%'+ @IN_MenuName+ '%')
			AND (ISNULL(FD.MainMenu1, 0) <> 0 OR ISNULL(FD.FormPath, '') <> '' OR EXISTS(SELECT 1 FROM CmnFormDetails CHD WHERE CHD.MainMenu1 = FD.FormID AND CHD.IsDeleted = 0))
			AND (ISNULL(FD.MainMenu1, 0) = 0 OR EXISTS(SELECT 1 FROM CmnFormDetails CHD WHERE CHD.FormID = FD.MainMenu1 AND CHD.IsDeleted = 0));

		SET @Query = 'SET @Qry = (SELECT ISNULL(SUBSTRING((SELECT '','' + (''{"MenuName":"''+ CASE WHEN ISNULL(FD.MainMenu1, 0) <> 0 THEN REPLACE(REPLACE(''... ''+FD.Name, ''\'', ''\\''), ''"'', ''\"'') ELSE REPLACE(REPLACE(FD.Name, ''\'', ''\\''), ''"'', ''\"'') END +''","DisplayName":"''+REPLACE(REPLACE(FD.DisplayName, ''\'', ''\\''), ''"'', ''\"'')+''","MainMenuName":"''+REPLACE(REPLACE(FD.MainMenuName, ''\'', ''\\''), ''"'', ''\"'')+''","All":"0",'+
						'"Read":"''+ CAST(ISNULL(UP.HasReadPermission, 0) AS NVARCHAR(MAX)) +''","FormType":"''+CAST(FD.FormType AS NVARCHAR(MAX))+''"'+
						',"Audit":"''+CAST(ISNULL(UP.Audit, 0) AS NVARCHAR(MAX))+''","SAudit":"''+CAST(ISNULL(UP.SubAudit,0) AS NVARCHAR(MAX))+''","CheckSum":"''+CAST(ISNULL(UP.ValidateCheckSum, 0) AS NVARCHAR(MAX))+''",'+
						'"Buttons":"''+ISNULL(UP.Buttons, '''')+''","MainMenu":"''+CAST(ISNULL(FD.MainMenu1, ''0'') AS NVARCHAR(MAX))+''",'+
						'"MenuID":"''+CAST(FD.FormID AS NVARCHAR(MAX))+''","Order":"''+CAST(ISNULL(UP.MainMenuOrder, FD.MainMenuOrder) AS NVARCHAR(MAX))+''","SubOrder":"''+CAST(ISNULL(UP.SubMenuOrder, FD.SubMenuOrder) AS NVARCHAR(MAX))+''"'+
						',"Tabs":"''+ISNULL(UP.Tabs, '''')+''","Data":"''+ISNULL(UP.Tabs, '''')+''","ConfirmMsg":"''+CAST(ISNULL(UP.ConfirmMsg, 1) AS NVARCHAR(MAX))+''","MandatoryTab":"''+ '+
						'CASE WHEN (SELECT COUNT(1) FROM CmnFormTabs FT WHERE FT.FormID = FD.FormID AND FT.IsMandatory = 1 AND FT.IsDeleted = 0) > 0 THEN '+
						'(SELECT ISNULL(SUBSTRING((SELECT '','' + CAST(ISNULL(FT.TabID, 0) AS NVARCHAR(MAX)) FROM CmnFormTabs FT WHERE FT.FormID = FD.FormID AND FT.IsMandatory = 1 AND FT.IsDeleted = 0 '+
						'FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000), '''')) ELSE '''' END +''"}'')'+
					' FROM #tempFormDetails FD'+
					' LEFT JOIN CmnRBSPermission UP ON UP.UserID = ' + CAST(@IN_EmployeeID AS NVARCHAR(MAX))+ '  AND UP.FormID = FD.FormID AND UP.IsDeleted = 0 ORDER BY FD.SNum'+
					' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000), ''''))'		

		EXEC sp_executesql @Query, N'@Qry NVARCHAR(MAX) OUTPUT', @MenuList OUTPUT
		
		SELECT ISNULL('['+ @MenuList+ ']', '') AS MenuList, ISNULL(@UserRole, '') AS UserRole, ISNULL(@UserName, '') AS UserName, ISNULL(@Type, '') AS Type, 
        ISNULL(@CompanyName, '') AS CompanyName, @ModifiedBy AS ModifiedBy, @ModifiedDate AS ModifiedDate;

		SELECT CFD.FormID AS MenuID, ISNULL(SUBSTRING(( SELECT ',' + ('{"Value":"'+ CAST(CM.CodemasterID AS NVARCHAR(MAX)) +'","Text":"'+ REPLACE(REPLACE(CM.TypeValues, '\', '\\'), '"', '\"')+'","Type":"'+ CAST(CCM.CodemasterID AS NVARCHAR(MAX))+'"}') 
						FROM CmnCodeMaster CM 
							LEFT JOIN CmnCodeMaster CCM ON CCM.Type = 'Button Type' AND CCM.CodemasterID = CM.ButtonType AND CCM.IsDeleted = 0
						WHERE CM.Type='Menubutton' AND CM.MenuID = CFD.FormID AND CM.IsDeleted = 0 ORDER BY CM.OrderBy
						FOR XML PATH(''), ROOT('MyString'), TYPE).value('MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '') AS ButtonList  
		FROM #tempFormDetails CFD GROUP BY CFD.FormID, CFD.SNum ORDER BY CFD.SNum;

		SELECT CFD.FormID AS MenuID, ISNULL(SUBSTRING(( SELECT ',' + ('{"Value":"'+ CAST(FT.TabID AS NVARCHAR(MAX)) +'","Text":"'+REPLACE(REPLACE( FT.Name, '\', '\\'), '"', '\"')+'"}') 
						FROM CmnFormTabs FT WHERE FT.FormID = CFD.FormID AND FT.IsDeleted = 0 AND ISNULL(FT.IsStatic, 0) = 0
						FOR XML PATH(''), ROOT('MyString'), TYPE).value('MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '') AS TabList
		FROM #tempFormDetails CFD GROUP BY CFD.FormID, CFD.SNum ORDER BY CFD.SNum;
						
	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnGetUserTable]'
GO

CREATE PROCEDURE [dbo].[spCmnGetUserTable](
  @IN_TYPE NVARCHAR(100),
  @IN_FormID INT,
  @IN_TabID INT
)
  
AS
BEGIN
  SET NOCOUNT ON
  
  DECLARE @TableName NVARCHAR(200), @RetValue INT, @PasswordType INT;
	
	SET @TableName = '';
	SET @RetValue = 0;
	SET @PasswordType = 0;
  
	IF @IN_TYPE = 'Form'
		SELECT @TableName = TableName FROM CmnFormDetails WHERE FormID = @IN_FormID AND IsDeleted = 0;
	ELSE IF @IN_TYPE = 'Tab'
		SELECT @TableName = TableName FROM CmnFormTabs WHERE FormID = @IN_FormID AND TabID = @IN_TabID AND IsDeleted = 0;
	ELSE
		SELECT @TableName = GB.TableName FROM CmnGroupBoxes GB
			JOIN CmnFormTabs FT ON FT.FormID = @IN_FormID AND FT.IsDeleted = 0
		WHERE GB.TabID = FT.TabID AND GB.GroupID = @IN_TabID AND GB.IsDeleted = 0  
	
	IF @TableName = 'CmnUserDetails'
	BEGIN		
		SET @RetValue = 1;
		SELECT @PasswordType = PasswordResetType FROM CmnPasswordPolicy;
	END
	
	SELECT @TableName, @RetValue, @PasswordType;

  END
			
GO
PRINT N'Creating [dbo].[spCmnGridControls]'
GO

CREATE PROCEDURE [dbo].[spCmnGridControls](
	@IN_TabName NVARCHAR(100) = '',
	@IN_GroupBoxName NVARCHAR(100) = '',
	@IN_TableColumn NVARCHAR(100) = '',
	@IN_FormID INT = 0,
	@IN_Language VARCHAR(50) = '',
	@IN_Device VARCHAR(50),
	@IN_UserID BIGINT = 0)
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
		
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@GCount INT = 0,
				@OutString NVARCHAR(MAX) = '',
				@Min INT = 0,
				@Max INT = 0,
				@Query  NVARCHAR(MAX) = '',
				@ValueString NVARCHAR(MAX) = '',
				@VQuery NVARCHAR(MAX) = '',
				@UserProfileID INT = 0,
				@CntrlPropString NVARCHAR(MAX) = '',
				@CPQuery NVARCHAR(MAX) = '',
				@DecimalLength SMALLINT = 0

		IF ISNULL(@IN_Language, '') <> ''
			SET @UserProfileID =  ISNULL((SELECT TOP 1 CodemasterID FROM CmnCodeMaster WHERE Type = 'Languages' AND Description = @IN_Language AND ISNULL(IsDeleted, 0) = 0), 0);
	
		SET @DecimalLength = ISNULL((SELECT TOP 1 CD.DecimalLength FROM MstCompanyDetails MC JOIN MstCountryDetails CD ON CD.ReferenceID = MC.CurrencyID WHERE MC.ParentCompanyID IS NULL ORDER BY MC.ReferenceID DESC), 4);
		SET @GCount = 0

		IF OBJECT_ID('tempdb..#tempControls') IS NOT NULL
			DROP TABLE #tempControls

		CREATE TABLE #tempControls (
			GNum INT NULL,
			ControlHeader NVARCHAR(255) NULL,
			ColumnName SYSNAME NULL,
			DisplayName NVARCHAR(255) NULL,
			ControlType NVARCHAR(255) NULL,
			ControlTypeId INT NULL,   
			DataType NVARCHAR(100) NULL,  
			ControlOrder INT NULL,
			IsIdentity BIT NULL,
			IsMandatory BIT NULL,
			[Readonly] BIT NULL,
			Visibility BIT NULL,
			IsSelectOption BIT NULL,
			IsDmlControl BIT NULL,
			UniqueGroup INT NULL,   
			MaxLength INT NULL,
			ControlEvent NVARCHAR(MAX) NULL,      
			DQuery NVARCHAR(MAX) NULL,
			DataSource NVARCHAR(MAX) NULL,
			VQuery NVARCHAR(MAX) NULL,
			ControlValue NVARCHAR(MAX) NULL,
			DefaultValue NVARCHAR(500) NULL,
			MaxRange NVARCHAR(500) NULL,
			ValidationEvent NVARCHAR(500) NULL,
			IsSearchApplicable BIT NULL,
			AttachmentPath NVARCHAR(1000) NULL,
			ControlProperty NVARCHAR(MAX) NULL,
			ColumnWidth VARCHAR(4) NULL,
			ColumnID BIGINT NULL,
			GridParentControl VARCHAR(100) NULL,
			FillEvent NVARCHAR(MAX) NULL,
			DateDifference INT NULL,
			Description NVARCHAR(MAX) NULL,
			IsNoUpdate BIT NULL)	

		IF ISNULL(@IN_TabName, '') = '' AND ISNULL(@IN_GroupBoxName, '') = ''
		BEGIN
			INSERT INTO #tempControls
			SELECT 0 AS GNum, FC.Name AS ControlHeader, CC.ColumnName, CASE WHEN ISNULL(CML.Name, '') = '' THEN CC.DisplayName ELSE CML.Name END, 
				CT.TypeValues AS ControlType, CT.CodemasterID AS ControlTypeId, DT.TypeValues AS DataType, CC.ColumnOrder, CC.IsIdentity,
				CC.IsMandatory, CC.Readonly, CC.Visibility, CC.SelectApplicable, CC.IsDmlControl, CC.UniqueGroup, CC.MaxLength, CC.[Events],      
				'' AS DQuery, '' AS DataSource, '' as VQuery, '' AS ControlValue, CC.DefaultValue, CC.MaxRange, CC.ValidationEvent,
				CASE WHEN CC.Visibility = 1 AND CC.ControlType NOT IN (3, 21) THEN 1 ELSE 0 END AS SearchApplicable, CC.AttachmentPath,
				'' AS ControlProperty, '100' AS ColumnWidth, CC.ColumnID, '' AS GridParentControl, '' AS FillEvent, ISNULL(FC.DateDifference, 0) AS DateDifference,
				ISNULL(FC.Description, '') AS Description, 0 AS IsNoUpdate
			FROM CmnFormDetails FD
  				JOIN CmnFormSearchControl FC ON FC.FormID = FD.FormID AND FC.TableColumn = @IN_TableColumn AND FC.IsDeleted = 0
				JOIN CmnSearchControlColumns CC ON CC.SearchID = FC.SearchID AND CC.IsDeleted = 0
  				JOIN CmnCodeMaster CT ON CT.Type = 'Control Type' AND CT.CodemasterID = CC.ControlType AND CT.IsDeleted = 0
  				JOIN CmnCodeMaster DT ON DT.Type = 'Data Type' AND DT.CodemasterID = CC.DataType AND DT.IsDeleted = 0
				LEFT JOIN CmnColumnsMultiLingual CML ON CML.ColumnID = CC.ColumnID AND CML.LanguageID = @UserProfileID AND ISNULL(CML.IsDeleted, 0) = 0
			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;
		END
		ELSE
		BEGIN
			INSERT INTO #tempControls
			SELECT  0 AS GNum, FC.AttachmentPath AS ControlHeader, CC.ColumnName, CASE WHEN ISNULL(CML.Name, '') = '' THEN CC.DisplayName ELSE CML.Name END, 
				CT.TypeValues AS ControlType, CT.CodemasterID AS ControlTypeId, DT.TypeValues AS DataType, CC.ColumnOrder, CC.IsIdentity, CC.IsMandatory, CC.Readonly, CC.Visibility, CC.SelectApplicable, CC.IsDmlControl, CC.UniqueGroup, CC.MaxLength, CC.[Events],      
				CASE WHEN CC.FkType = 1 THEN  ' SET @DQOut = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"'' + REPLACE(REPLACE(CAST(CM.' + CC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(CM.' + CC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')'+CASE WHEN ISNULL(DC.Name, '') <> '' THEN (','+''' - '''+','+ 'REPLACE(REPLACE(CAST(CM.'+ DC.Value+ ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')') ELSE '' END+ CASE WHEN ISNULL(DCM.Name, '') <> '' THEN (','+''' - '''+','+ 'REPLACE(REPLACE(CAST(CM.'+ DCM.Value+' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')') ELSE '' END+' +''"}'')
																FROM CmnCodeMaster CM WHERE CM.Type=''' + CC.FkTable + '''' +
																	CASE WHEN ISNULL(CC.AdditionalConditions, '') = '' THEN '' ELSE + ' AND ' + CC.AdditionalConditions END +
																	CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND  + ISNULL(CM.IsDeleted, 0) = 0 '  END  +
																	CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(CM.NotActive, 0) = 0 ' END + 
																	CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(CM.IsCurrentVersion, 1) = 1 ' END +
																' ORDER BY ' + CASE WHEN ISNULL(CC.FkOrder, 0) = 1 THEN CC.FkData + ' ASC '
																					WHEN ISNULL(CC.FkOrder, 0) = 2 THEN CC.FkData + ' DESC ' 
																					WHEN ISNULL(CC.FkOrder, 0) = 3 THEN ' CM.OrderBy' 
																					WHEN ISNULL(CC.FkOrder, 0) = 4 THEN CC.FkColumn + ' ASC' 
																					ELSE ' CM.OrderBy' END + 
																' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
						WHEN CC.FkType = 2 THEN ' SET @DQOut = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"''+ REPLACE(REPLACE(CAST(MT.' + CC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(MT.' + CC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')'+CASE WHEN ISNULL(DC.Name, '') <> '' THEN (','+''' - '''+','+ 'REPLACE(REPLACE(CAST(MT.'+ DC.Value+ ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')') ELSE '' END+ CASE WHEN ISNULL(DCM.Name, '') <> '' THEN (','+''' - '''+','+ 'REPLACE(REPLACE(CAST(MT.'+ DCM.Value+' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')') ELSE '' END+' +''"'+
																CASE WHEN ISNULL(DSP.Value, '') <> '' THEN ',"Parent":"''+ CAST(MT.' + DSP.Value + ' AS NVARCHAR(MAX)) +''"' ELSE '' END +'}'')
																 FROM ' + CC.FkTable + ' MT WHERE 1=1 ' + 
																		CASE WHEN ISNULL(CC.AdditionalConditions, '') = '' THEN '' 
																			ELSE CASE WHEN ISNULL(CC.AdditionalConditions, '') LIKE '% NULL %' OR ISNULL(CC.AdditionalConditions, '') LIKE '% NOT NULL %'
																						OR ISNULL(CC.AdditionalConditions, '') LIKE '% = %' OR ISNULL(CC.AdditionalConditions, '') LIKE '% IN %' 
																					THEN ' AND ' + CC.AdditionalConditions 
																					ELSE '' END
																			 END +
																		CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(MT.IsDeleted, 0) = 0 ' END + 
																		CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(MT.NotActive, 0) = 0 ' END + 
																		CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(MT.IsCurrentVersion, 1) = 1 ' END +
																	' ORDER BY ' + CASE WHEN ISNULL(CC.FkOrder, 0) = 1 THEN ' MT.'+ CC.FkData + ' ASC'
																						WHEN ISNULL(CC.FkOrder, 0) = 2 THEN ' MT.' + CC.FkData + ' DESC'
																						WHEN ISNULL(CC.FkOrder, 0) = 3 THEN ' MT.OrderBy'
																						WHEN ISNULL(CC.FkOrder, 0) = 4 THEN CC.FkColumn + ' ASC'
																						ELSE ' MT.' + CC.FkData END +
																	' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
						WHEN CC.FkType = 3 THEN ' SET @DQOut = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"''+ CAST(FU.' + CC.FkColumn + ' AS NVARCHAR(50)) +''","Text":"''+ FU.' + CC.FkData + CASE WHEN ISNULL(DC.Name, '') <> '' THEN (','+''' - '''+','+ 'CAST(MT.'+ DC.Value+ ' AS NVARCHAR(MAX))') ELSE '' END+ CASE WHEN ISNULL(DCM.Name, '') <> '' THEN (','+''' - '''+','+ 'CAST(MT.'+ DCM.Value+' AS NVARCHAR(MAX))') ELSE '' END+'+''"}'')
																 FROM CmnFileUpload FU 
																 WHERE FU.FormID = 4 AND FU.Type=''' + CC.FkTable + ''' AND FU.IsDeleted = 0 
																 ORDER BY ' + CASE WHEN ISNULL(CC.FkOrder, 0) = 1 THEN CC.FkData + ' ASC ' 
																					 WHEN ISNULL(CC.FkOrder, 0) = 2 THEN CC.FkData + ' DESC ' 
																					 WHEN ISNULL(CC.FkOrder, 0) = 3 THEN ' FU.OrderBy' 
																					 WHEN ISNULL(CC.FkOrder, 0) = 4 THEN CC.FkColumn  + ' ASC ' 
																					 ELSE ' FU.CreatedDate DESC' END  +
																	' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
						ELSE '' END  AS DQuery,
				'' AS DataSource, '' as VQuery, '' AS ControlValue, CC.DefaultValue, CC.MaxRange, CC.ValidationEvent, CC.SearchApplicable, CC.AttachmentPath,
				CASE WHEN (SELECT COUNT(1) FROM CmnColumnProperty WHERE ColumnID = CC.ColumnID) <> 0 THEN    
														' SET @DOUTPRP = ISNULL(SUBSTRING((SELECT '','' + (''{"Control":"''+  CP.Name  +''","Value":"''+ REPLACE(REPLACE(CP.Value, ''\'', ''\\''),''"'', ''\"'') +''"}'')
																												FROM CmnColumnProperty CP 
																												WHERE CP.ColumnID = ''' + CAST(CC.ColumnID AS VARCHAR(50)) + ''' AND CP.IsDeleted = 0
																												FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
				ELSE '' END AS ControlProperty, ISNULL(CC.ColumnWidth, '') AS ColumnWidth, CC.ColumnID, CC.GridParentControl,
				CC.FillEvent, ISNULL(CC.DateDifference, 0) AS DateDifference, ISNULL(CC.Description, '') AS Description, ISNULL(CC.IsNoUpdate, 0) AS IsNoUpdate
			FROM CmnFormDetails FD
  				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.Name = @IN_TabName AND FT.IsDeleted = 0
  				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.Name = @IN_GroupBoxName AND GB.IsDeleted = 0
  				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.TableColumn = @IN_TableColumn AND FC.IsDeleted = 0
				JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND (FC.ControlType = 19 OR ISNULL(CC.DependentFlag, 0) = 0) AND CC.IsDeleted = 0 AND (ISNULL(@IN_Device, '') <> 'Mobile' OR CC.IsMobile = 1)
  				JOIN CmnCodeMaster CT ON CT.Type = 'Control Type' AND CT.CodemasterID = CC.ControlType AND CT.IsDeleted = 0
  				JOIN CmnCodeMaster DT ON DT.Type = 'Data Type' AND DT.CodemasterID = CC.DataType AND DT.IsDeleted = 0
				LEFT JOIN CmnColumnsMultiLingual CML ON CML.ColumnID = CC.ColumnID AND CML.LanguageID = @UserProfileID AND ISNULL(CML.IsDeleted, 0) = 0
				LEFT JOIN CmnColumnProperty DC ON DC.ColumnID = CC.ColumnID AND DC.Name = 'DropDown1' AND DC.IsDeleted = 0
				LEFT JOIN CmnColumnProperty DCM ON DCM.ColumnID = CC.ColumnID AND DCM.Name = 'DropDown2' AND DCM.IsDeleted = 0
				LEFT JOIN CmnColumnProperty DSP ON DSP.ColumnID = CC.ColumnID AND DSP.Name = 'DS ParentColumn' AND DSP.IsDeleted = 0
				LEFT JOIN CmnColumnProperty DL ON DL.ColumnID = CC.ColumnID AND DL.Name = 'Decimal Length' AND DL.IsDeleted = 0
				LEFT JOIN CmnColumnProperty DDC ON DDC.ColumnID = CC.ColumnID AND DDC.Name = 'Decimal Currency' AND DDC.IsDeleted = 0
				LEFT JOIN CmnColumnProperty DCC ON DCC.ColumnID = CC.ColumnID AND DCC.Name = 'Currency Column' AND DCC.IsDeleted = 0
			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0; 
		END
	  UPDATE #tempControls
	  SET @GCount = GNum = @GCount + 1
	  WHERE DQuery <> '' OR VQuery <> '' OR ControlProperty <> '';  
	  
	  SET @Min = 0;
	  SET @Max = 0;
	  SELECT @Min = MIN(GNum), @Max = MAX(GNum) FROM #tempControls WHERE GNum <> 0;

	  WHILE (@Min <> 0 AND @Min <= @Max)
		BEGIN
			/*SET @OutString = ''
			SET @Query = ''
			SELECT @Query = DQuery FROM #tempControls WHERE GNum = @Min;
	      			
			IF (@Query <> '')
			BEGIN
				EXEC sp_executesql @Query, N'@DQOut NVARCHAR(MAX) OUTPUT', @OutString OUTPUT
			END

			SET @ValueString = ''
			SET @VQuery = ''
			SELECT @VQuery = VQuery FROM #tempControls WHERE GNum = @Min;
	   
			IF (@VQuery <> '')
			  EXEC (@VQuery)

			UPDATE #tempControls
			SET DataSource = @OutString, ControlValue = @ValueString
			WHERE GNum = @Min;
			*/

			SET @CntrlPropString = ''
			SELECT @CPQuery = ControlProperty FROM #tempControls WHERE GNum = @Min  
			
			IF @CPQuery <> '' 
				EXEC sp_executesql @CPQuery, N'@DOUTPRP NVARCHAR(MAX) OUTPUT', @CntrlPropString OUTPUT   
	  
			UPDATE #tempControls SET ControlProperty = @CntrlPropString WHERE GNum = @Min

			SET @Min = @Min + 1
		END
 
		SELECT ControlHeader, ColumnName, DisplayName, ControlType, ControlTypeId, DataType, IsIdentity, IsMandatory, [Readonly], Visibility, IsSelectOption, IsDmlControl, UniqueGroup, MaxLength, ControlEvent, 
			ControlValue, '[' + ISNULL(DataSource, '') + ']' AS DataSource, DefaultValue, MaxRange, ValidationEvent, IsSearchApplicable, AttachmentPath, ControlOrder, '[' + ISNULL(ControlProperty, '') + ']' AS ControlProperty, 
			ColumnWidth, ColumnID, GridParentControl, FillEvent, DateDifference, Description, IsNoUpdate
		FROM #tempControls ORDER BY ControlOrder;  

	END TRY

	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGridDML]'
GO

CREATE PROCEDURE [dbo].[spCmnGridDML] (
	@IN_Event VARCHAR(50) = '', 
	@IN_JsonString NVARCHAR(MAX) = '', 
	@IN_ColumnCount INT = 0,
	@IN_GridHeader NVARCHAR(100) = '', 
	@IN_FormID INT = 0, 
	@IN_UserID INT = 0, 
	@IN_SessionID NVARCHAR(100) = '',
	@IN_GroupBoxName VARCHAR(100),
	@IN_IPAddress VARCHAR(100),
	@IN_GUID NVARCHAR(500))

AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY 	
		DECLARE @ErrorSeverity NVARCHAR(50) = '',
				@ErrorMessage NVARCHAR(2000) = '',
				@ErrorState NVARCHAR(50) = '',
				@GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
				@UTCTime DATETIME = GETUTCDATE(),
				@DropQuery NVARCHAR(MAX) = '',
				@CreateQuery NVARCHAR(MAX) = '',
				@Query NVARCHAR(MAX) = '',
				@Min INT = 0,
				@ControlID INT = 0,
				@IdentityColumn NVARCHAR(50) = '',
				@TableName NVARCHAR(100) = '',
				@CreateColumns NVARCHAR(MAX) = '',
				@ColumnName NVARCHAR(50) = '',
				@DataType NVARCHAR(20) = '',
				@DmlCount INT = 0,
				@JsonCount INT = 0,
				@DmlEvent VARCHAR(10) = '',
				@IdentityValue INT = 0,
				@Count INT = 0,
				@LocaleControl NVARCHAR(MAX) = '',
				@CharLength NVARCHAR(MAX) = '',
				@JsonData NVARCHAR(MAX) = '',
				@DmlMin INT = 0,
				@DmlColumns NVARCHAR(MAX) = '',
				@DmlValues NVARCHAR(MAX) = '',
				@ColumnValue NVARCHAR(MAX) = '',
				@OrderBy INT = 0,
				@OrderQuery NVARCHAR(MAX) = '',
				@ResponseMsg NVARCHAR(15) = '',
				@CheckOrderBy INT = 0,
				@IsDeleted INT = 0,
				@ButtonPerm VARCHAR(200) = '',
				@ButtonID INT = 0,
				@TableNamePrefix VARCHAR(500) = '',
				@Value NVARCHAR(MAX) = '',
				@CompanyID INT = 0,
				@GroupID INT = 0,
				@HasCompanyID INT = 0,
				@FKParentColumn NVARCHAR(50) = '',
				@FKParentColumnValue VARCHAR(50) = '',
				@AfterSaveEventType INT = 0,
				@AfterSaveSPName VARCHAR(255) = '',
				@AfterSaveKeyColumn VARCHAR(255) = '',
				@AfterSaveKeyColumns VARCHAR(MAX) = '',
				@TempValue VARCHAR(MAX) = '',
				@AfterSaveKeyValues VARCHAR(MAX) = '',
				@AfterSaveKeyColumnsCount INT = 0,
				@RecID INT = 0,
				@AfterSaveQuery NVARCHAR(MAX) = '',
				@AfterSaveQueryColumns NVARCHAR(MAX) = '',
				@INParameters NVARCHAR(MAX),
				@ProcessTableName VARCHAR(100) = '',
				@AuditCondition NVARCHAR(4000) = '',
        @AuditColumnList NVARCHAR(MAX) = '',
				@AuditEvent VARCHAR(100) = '',
				@AuditTable VARCHAR(255) = '',
				@AuditQuery NVARCHAR(4000) = '',
				@ProcessButtonID INT = 0,
				@GroupboxKeyColumn VARCHAR(100) = '',
				@UniqueColumn VARCHAR(100) = '',
				@ProcessTableType SMALLINT = 0,
				@IdentityIDs NVARCHAR(MAX) = '',
				@FormIDValue VARCHAR(100) = '',
				@UserType INT = 0;
				
		--BEGIN TRANSACTION trans_spCmnGridDML;

			SELECT @CompanyID = ISNULL(ED.CompanyID, UD.CompanyID), @UserType = ISNULL(UD.Type, 0)
			FROM CmnUserDetails UD
				LEFT JOIN MstEmployeeDetails ED ON UD.[Type] = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
			WHERE UD.UserID = @IN_UserID;

			IF @CompanyID = 0
				SET @CompanyID = ISNULL((SELECT TOP 1 ReferenceID FROM MstCompanyDetails WHERE IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1), 0);

			IF ISNULL(@UserType, 0) = 0
				SET @CompanyID = 0;
		
			SET @TableNamePrefix = @IN_SessionID + CAST(@IN_UserID AS VARCHAR(50)) + REPLACE(@IN_GridHeader, ' ', '');
			SET @ButtonPerm = ISNULL((SELECT TOP 1 Buttons FROM CmnRBSPermission WHERE FormID = @IN_FormID and UserID = @IN_UserID AND IsDeleted = 0), '');
			
			IF @IN_Event = 'delete'
			BEGIN
				--SET @ButtonID = ISNULL((SELECT TOP 1 CM.CodemasterID FROM CmnCodeMaster CM WHERE Type = 'MenuButton' AND MenuID = @IN_FormID AND CM.TypeValues = 'Delete'), 0);
				--IF (PATINDEX('%,' + CAST(@ButtonID AS VARCHAR(50)) + ',%', ',' + @ButtonPerm + ',') > 0)
				--BEGIN
					SELECT @TableName = CASE WHEN GB.TableName <> '' THEN GB.TableName WHEN FT.TableName <> '' THEN FT.TableName ELSE FD.TableName END  
					FROM CmnFormDetails FD 
						JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
						JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
						JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.ControlType = 19 AND FC.IsDeleted = 0
						JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0 AND CC.IsIdentity = 1
						JOIN CmnControlProperty CP ON CP.ControlID = FC.ControlID AND CP.Value = @IN_GridHeader AND CP.Name = 'Grid Header' AND CP.IsDeleted = 0
					WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0 ORDER BY CC.ColumnOrder;   

					SET @AfterSaveKeyValues = '';
					SET @AfterSaveQueryColumns = '';
					SELECT @AfterSaveSPName = ISNULL(SPName, ''), @AfterSaveKeyColumns = ISNULL(KeyColumns, ''), @AfterSaveEventType = ISNULL(SaveEventType, 0) 
					FROM CmnAfterSaveDML WHERE FormID = @IN_FormID AND TableName = @TableName AND DeleteFlag = 1 AND IsDeleted = 0;

					IF @AfterSaveEventType = 2 AND @AfterSaveKeyColumns <> ''
					BEGIN
						SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, ' ', '');
						IF (RIGHT(@AfterSaveKeyColumns, 1) = ',')
							SET @AfterSaveKeyColumns = SUBSTRING(@AfterSaveKeyColumns, 1, LEN(@AfterSaveKeyColumns) - 1);

						IF (CHARINDEX('@FormID', @AfterSaveKeyColumns) > 0)
						BEGIN
							SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, '@FormID', CAST(@IN_FormID AS VARCHAR(50)));
						END	
						
						IF (CHARINDEX('@IPAddress', @AfterSaveKeyColumns) > 0)
						BEGIN
							SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, '@IPAddress', CONCAT('''', CAST(@IN_IPAddress AS VARCHAR(100)), ''''));
						END

						SELECT @AfterSaveQueryColumns = 'ISNULL(CAST(' + REPLACE(@AfterSaveKeyColumns, ',', ' AS VARCHAR(MAX)), '''') + ''@!$'' + ISNULL(CAST(') + ' AS VARCHAR(MAX)), '''')';

						IF (@AfterSaveQueryColumns <> '')
						BEGIN
							SET @TempValue = '';
							SET @AfterSaveQuery = 'SELECT @TempValue = ' + @AfterSaveQueryColumns + ' FROM ' + @TableName + ' WHERE ' +
													@IdentityColumn + ' = ' + CAST(@IdentityValue AS VARCHAR(50));
							EXEC SP_EXECUTESQL @AfterSaveQuery, N'@TempValue VARCHAR(MAX) OUT', @TempValue OUT;
							SET @AfterSaveKeyValues = ',''' + REPLACE(@TempValue, '@!$', ''',''') + '''';
						END
					END
          
          SET @AuditEvent = 'DELETE';
          SET @AuditTable = SUBSTRING(('##atD' +  SUBSTRING(CAST(OBJECT_ID(@TableName) AS VARCHAR(100)), 1, 32) 
               + RIGHT(ISNULL(@IN_SessionID, ''), 10) + CAST(ISNULL(@IN_FormID, 0) AS VARCHAR(50))) , 1, 63);
          SET @AuditCondition = CONCAT('WHERE ', @UniqueColumn, ' = ', CAST(@IdentityValue AS VARCHAR(50)));

          SET @AuditQuery = 'IF OBJECT_ID(''tempdb..' + @AuditTable + ''') IS NOT NULL DROP TABLE ' + @AuditTable + ';

          SELECT * INTO ' + @AuditTable + '
          FROM ' + @TableName + ' ' + @IN_JsonString + ';'

          IF ISNULL(@AuditQuery, '') <> ''
            EXEC (@AuditQuery);
    
					SET @Query = ('UPDATE '+ @TableName+ ' SET IsDeleted = 1, DeletedBy = '+ CAST(@IN_UserID AS VARCHAR(50))+ ', DeletedDate = '''+ CONVERT(VARCHAR(50), @UTCTime, 9) + ''', DeletedDateGMT = '''+ CAST(@GMTTime AS VARCHAR(50))+ ''', DeleteReason = '''' WHERE '+ @IN_JsonString+ ' = '+ CAST(@IN_ColumnCount AS VARCHAR(50))+ ';');
      
					EXEC (@Query); 

					IF @AfterSaveSPName <> ''
					BEGIN
						SET @Query = @AfterSaveSPName + ' ' + CAST(@IN_UserID AS VARCHAR(50)) + ',' + CAST(@IN_ColumnCount AS VARCHAR(50)) + ',''' + @DmlEvent + '''' + @AfterSaveKeyValues;
						EXEC SP_EXECUTESQL @Query;
					END

					SELECT 'S0001';
				--END
				--ELSE
				--	SELECT 'I0001';
			END
			ELSE IF @IN_Event = 'Dml Columns'
			BEGIN

				SET @DropQuery = 'IF OBJECT_ID (''tempdb..##tempDmlTable' + @TableNamePrefix + ''') IS NOT NULL DROP TABLE ##tempDmlTable' + @TableNamePrefix
				EXEC (@DropQuery);

				SET @CreateQuery = 'CREATE TABLE ##tempDmlTable' + @TableNamePrefix + '(DNo INT IDENTITY(1, 1) NOT NULL PRIMARY KEY,ColumnName VARCHAR(200) NULL, DataType VARCHAR(100) NULL, UniqueColumn INT NULL)'
				EXEC (@CreateQuery) 
			
				SET @ControlID = 0;

				SELECT @ControlID = FC.ControlID
				FROM CmnFormDetails FD 
					JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
					JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
					JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.ControlType = 19 AND FC.IsDeleted = 0
					JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0 AND CC.IsIdentity = 1
					JOIN CmnControlProperty CP ON CP.ControlID = FC.ControlID AND CP.Value = @IN_GridHeader AND CP.Name = 'Grid Header' AND CP.IsDeleted = 0
				WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0 ORDER BY CC.ColumnOrder;
			
				IF @IN_GroupBoxName <> ''
				BEGIN
					 SELECT @GroupID = GB.GroupID, @GroupboxKeyColumn = GB.KeyColumn
					 FROM CmnFormDetails FD 
						 JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
						 JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0 AND GB.Name = @IN_GroupBoxName
					 WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0; 
				END

				SET @CreateColumns = '';
			
				WHILE @IN_ColumnCount > @Min
				BEGIN     			
					SET @DataType = '';
					SET @Min = @Min + 1;
					SET @ColumnName = dbo.fn_SplitString(@IN_JsonString, ',', @IN_ColumnCount -(@IN_ColumnCount - @Min));				
				
					IF @IN_GroupBoxName <> ''
					BEGIN
						SELECT @DataType = DT.TypeValues FROM CmnFormControls CC
							JOIN CmnCodeMaster DT ON DT.Type = 'Data Type' AND DT.CodemasterID = CC.DataType AND DT.IsDeleted = 0 
						WHERE CC.TableColumn = @ColumnName AND CC.GroupID = @GroupID AND CC.IsDeleted = 0;
					END
					ELSE
					BEGIN
						SELECT @DataType = DT.TypeValues FROM CmnControlColumns CC
						JOIN CmnCodeMaster DT ON DT.Type = 'Data Type' AND DT.CodemasterID = CC.DataType AND DT.IsDeleted = 0 
						WHERE CC.ColumnName = @ColumnName AND CC.ControlID = @ControlID AND CC.IsDeleted = 0;
					END

					SET @CreateColumns = @CreateColumns+ ', '+ @ColumnName+ ' '+ @DataType+ ' NULL';
				
					SET @Query = 'INSERT INTO ##tempDmlTable'+ @TableNamePrefix + ' (ColumnName, DataType) VALUES ('''+ @ColumnName+ ''','''+ @DataType+ ''');';        
					EXEC (@Query) 
				END

				SET @DropQuery = 'IF OBJECT_ID (''tempdb..##tempJsonTable' +  @TableNamePrefix + ''') IS NOT NULL DROP TABLE ##tempJsonTable' +  @TableNamePrefix
				EXEC (@DropQuery);

				SET @CreateQuery = 'CREATE TABLE ##tempJsonTable' + @TableNamePrefix + '(JNo INT IDENTITY(1, 1) NOT NULL PRIMARY KEY, JsonData NVARCHAR(MAX) NULL)'
				EXEC (@CreateQuery) 
			END    
			ELSE IF @IN_Event = 'Json Data'
			BEGIN
					SET @IN_JsonString = REPLACE(@IN_JsonString, '''', '''''')
				SET @Query = 'INSERT INTO ##tempJsonTable'+ @TableNamePrefix + ' (JsonData) VALUES (N'''+ @IN_JsonString+ ''');';   
				EXEC (@Query) 
			END    
			ELSE
			BEGIN
      
				SET @ButtonID = ISNULL((SELECT TOP 1 CM.CodemasterID FROM CmnCodeMaster CM WHERE Type = 'MenuButton' AND MenuID = @IN_FormID AND CM.TypeValues = 'Update'), 0);
				--IF (PATINDEX('%,' + CAST(@ButtonID AS VARCHAR(50)) + ',%', ',' + @ButtonPerm + ',') > 0)
				--BEGIN
				SET @Query = 'SELECT @TempCount = COUNT(1) FROM ##tempDmlTable'+ @TableNamePrefix;        
				EXEC SP_EXECUTESQL @Query, N'@TempCount INT OUT', @DmlCount OUT
					
				SET @Query = 'SELECT @TempCount = COUNT(1) FROM ##tempJsonTable'+ @TableNamePrefix;
				EXEC SP_EXECUTESQL @Query, N'@TempCount INT OUT', @JsonCount OUT			

				SET @ControlID = 0;
				SET @IdentityColumn = '';
				SET @TableName = '';
				SET @ProcessTableName = '';

				IF @IN_GroupBoxName <> ''
				BEGIN
					SELECT TOP 1 @ProcessTableName = CASE WHEN GB.TableName <> '' THEN GB.TableName WHEN FT.TableName <> '' THEN FT.TableName ELSE FD.TableName END,
						@GroupboxKeyColumn = GB.KeyColumn, @ProcessButtonID = FC.ButtonID, @ProcessTableType = FC.ButtonDmlType
					FROM CmnFormDetails FD 
					JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
					JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.Name = @IN_GroupBoxName AND GB.IsDeleted = 0
					JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND ISNULL(FC.ButtonID, 0) <> 0 AND FC.IsDeleted = 0
					WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;
				END

				SELECT @ControlID = FC.ControlID, @IdentityColumn = CC.ColumnName, @TableName= (CASE WHEN GB.TableName <> '' THEN GB.TableName WHEN FT.TableName <> '' THEN FT.TableName ELSE FD.TableName END), @FKParentColumn = ISNULL(CP1.Value, '')
				FROM CmnFormDetails FD 
					JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
					JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
					JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.ControlType = 19 AND FC.IsDeleted = 0
					JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0 AND CC.IsIdentity = 1
					JOIN CmnControlProperty CP ON CP.ControlID = FC.ControlID AND CP.Value = @IN_GridHeader AND CP.Name = 'Grid Header' AND CP.IsDeleted = 0
					LEFT JOIN CmnControlProperty CP1 ON CP1.ControlID = FC.ControlID AND CP1.Name = 'Fk Parent Column' AND CP1.IsDeleted = 0
				WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0 ORDER BY CC.ColumnOrder;

				IF @IN_GroupBoxName <> '' AND ISNULL(@ProcessTableName, '') <> ''					
				BEGIN
					SET @TableName = @ProcessTableName;
				END

				-- After Save DML
				SET @AfterSaveEventType = 0;
				SET @AfterSaveSPName = '';
				SET @AfterSaveKeyColumns = '';
				SELECT @AfterSaveEventType = ISNULL(SaveEventType, 0), @AfterSaveSPName = ISNULL(SPName, ''), @AfterSaveKeyColumns = ISNULL(KeyColumns, '') FROM CmnAfterSaveDML 
					WHERE FormID = @IN_FormID AND TableName = @TableName AND IsDeleted = 0;
				SET @AfterSaveKeyValues = '';
				IF @AfterSaveEventType = 2 AND @AfterSaveKeyColumns <> ''
				BEGIN
					SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, ' ', '');
					IF (RIGHT(@AfterSaveKeyColumns, 1) = ',')
						SET @AfterSaveKeyColumns = SUBSTRING(@AfterSaveKeyColumns, 1, LEN(@AfterSaveKeyColumns) - 1);
				END

				SET @UniqueColumn = @IdentityColumn;
				IF ISNULL(@GroupboxKeyColumn, '') <> '' AND ISNULL(@ProcessButtonID, 0) <> 0 AND ISNULL(@ProcessTableType, 0) = 2
				BEGIN
					SET @UniqueColumn = @GroupboxKeyColumn;;
				END
			
				WHILE @JsonCount > @Min
				BEGIN
					SET @Min = @Min + 1;
					SET @IdentityValue = 0;
					SET @Count = 0;
					SET @AuditCondition = '';
					SET @AuditEvent = '';
					SET @AuditTable = '';
					SET @AuditQuery = '';
				
					SET @Query = 'SELECT @TempData = JsonData FROM ##tempJsonTable'+ @TableNamePrefix + ' WHERE JNo = '+ CAST(@Min AS VARCHAR(50));
					EXEC SP_EXECUTESQL @Query, N'@TempData NVARCHAR(MAX) OUT', @JsonData OUT
					
					SET @DmlEvent = 'add';
  
					SET @LocaleControl = '"'+@UniqueColumn+ '":'; 
					SET @CharLength = (SELECT LEN(@UniqueColumn)) + 3;
					
					IF CHARINDEX(@LocaleControl,@JsonData) > 0
					BEGIN
						SET @IdentityValue = (REPLACE(SUBSTRING(@JsonData, CHARINDEX(@LocaleControl,@JsonData)+ @CharLength, CHARINDEX(',"', @JsonData, CHARINDEX(@LocaleControl, @JsonData)) - CHARINDEX(@LocaleControl,@JsonData)-@CharLength), '"', ''));
					
						IF ISNULL(@IdentityValue, '') = ''
						BEGIN
							SET @IdentityValue = 0;
						END

						SET @Query = 'SELECT @TotalCount = COUNT(1) FROM '+ @TableName +' WHERE '+@UniqueColumn +' = '+ CAST(@IdentityValue AS VARCHAR(50)) + ' AND IsDeleted = 0';        
						EXEC SP_EXECUTESQL @Query, N'@TotalCount INT OUT', @Count OUT
					END
					IF @Count > 0
					BEGIN
						SET @DmlEvent = 'update';
					END      
			
					SET @DmlMin = 0;
					SET @DmlColumns = '';
					SET @DmlValues = '';

					SET @LocaleControl = '"Delete":';
					SET @CharLength = (SELECT LEN('Delete')) + 3;
			 
					SET @IsDeleted = (REPLACE(SUBSTRING(@JsonData, CHARINDEX(@LocaleControl,@JsonData)+ @CharLength, CHARINDEX(',"', @JsonData, CHARINDEX(@LocaleControl, @JsonData)) - CHARINDEX(@LocaleControl,@JsonData)-@CharLength), '"', ''));

					IF @IsDeleted = 0
					BEGIN
						SET @CheckOrderBy = 0;
						SET @HasCompanyID = 0;
						SET @FKParentColumnValue = '0';
						WHILE @DmlCount > @DmlMin
						BEGIN
							SET @DmlMin = @DmlMin + 1;  
							SET @ColumnValue = '';
							SET @LocaleControl = '';
							SET @CharLength = '';

							SET @Query = 'SELECT @TempColumn = ColumnName FROM ##tempDmlTable' + @TableNamePrefix + ' WHERE DNo = '+ CAST(@DmlMin AS VARCHAR(50));                
							EXEC SP_EXECUTESQL @Query, N'@TempColumn NVARCHAR(100) OUT', @ColumnName OUT

							SET @Query = 'SELECT @TempType = DataType FROM ##tempDmlTable' + @TableNamePrefix + ' WHERE DNo = '+ CAST(@DmlMin AS VARCHAR(50));        
							EXEC SP_EXECUTESQL @Query, N'@TempType NVARCHAR(15) OUT', @DataType OUT
          
							SET @LocaleControl = '"' + @ColumnName+ '":';
							SET @CharLength = (SELECT LEN(@ColumnName)) + 3;
			 
							SET @ColumnValue = (REPLACE(SUBSTRING(@JsonData, CHARINDEX(@LocaleControl,@JsonData)+ @CharLength, CHARINDEX(',"', @JsonData, CHARINDEX(@LocaleControl, @JsonData)) - CHARINDEX(@LocaleControl,@JsonData)-@CharLength), '"', ''));
							SET @Value = @ColumnValue;

							SET @ColumnValue = CASE WHEN @DataType = 'BIT' AND ISNULL(@ColumnValue, '') = 'true' THEN '1' 
												WHEN @DataType = 'BIT' AND ISNULL(@ColumnValue, '') = 'false' THEN '0' 
												WHEN (@DataType LIKE '%DATE%' OR @DataType LIKE '%TIME%') AND ISNULL(@ColumnValue, '') = '' THEN 'null'
												WHEN (@DataType LIKE '%INT%' OR @DataType LIKE '%DECIMAL%' OR @DataType LIKE '%FLOAT%') AND ISNULL(@ColumnValue, '') = '' THEN 'null'
												ELSE ('''' + REPLACE(REPLACE(ISNULL(@ColumnValue, ''), '''', ''''''), '\n', CHAR(13)) + '''') END;        
			 
							IF @DmlEvent = 'add' AND @IdentityColumn <> @ColumnName AND (@ColumnName <> 'OrderBy' OR (@ColumnName = 'OrderBy' AND @Value <> '' AND @Value <> '0'))
								AND (@ColumnName <> 'CompanyID' OR (@ColumnName = 'CompanyID' AND @Value <> '' AND @Value <> 0))
							BEGIN
								IF @ColumnName = 'OrderBy'
									SET @CheckOrderBy = 1;
								ELSE IF @ColumnName = 'CompanyID'
									SET @HasCompanyID = 1;
								ELSE IF @ColumnName = @FKParentColumn
									SET @FKParentColumnValue = @ColumnValue;
								
								SET @DmlColumns = @DmlColumns+ CASE WHEN @DmlValues <> '' THEN ',' ELSE '' END+ @ColumnName;
								SET @DmlValues = @DmlValues+ CASE WHEN @DmlValues <> '' THEN ',' ELSE '' END+
																			CASE WHEN @DataType <> 'BIT' AND @DataType <> 'DECIMAL' AND @DataType <> 'BIGINT' AND @DataType <> 'INT' 
																			THEN CASE WHEN @ColumnValue <> 'null' THEN ('N'+@ColumnValue+'') ELSE 'null' END
																			ELSE ISNULL(@ColumnValue, '''') END																
							END
							ELSE IF @DmlEvent <> 'add' AND @IdentityColumn <> @ColumnName
							BEGIN
							 SET @DmlColumns = @DmlColumns+ CASE WHEN @DmlColumns <> '' THEN ',' ELSE '' END+
												 @ColumnName + ' = '+ CASE WHEN @DataType <> 'BIT' AND @DataType <> 'DECIMAL' AND @DataType <> 'BIGINT' AND @DataType <> 'INT' 
																		THEN CASE WHEN @ColumnValue <> 'null' THEN ('N'+@ColumnValue+'') ELSE 'null' END
																		ELSE ISNULL(@ColumnValue, '''') END
							END	
						END

						IF @DmlEvent = 'add'
						BEGIN
							SET @OrderBy = 0; 
							IF @CheckOrderBy <> 1
							BEGIN
								IF @FKParentColumn <> '' AND @FKParentColumnValue <> '0'
									SET @OrderQuery = 'SELECT @TempOrder = COUNT(1) + 1 FROM '+ @TableName + ' WHERE ' + @FKParentColumn + ' = ' + @FKParentColumnValue ;			  
								ELSE
									SET @OrderQuery = 'SELECT @TempOrder = COUNT(1) + 1 FROM '+ @TableName;
								EXEC SP_EXECUTESQL @OrderQuery, N'@TempOrder INT OUT', @OrderBy OUT	
							END						

							IF (@HasCompanyID = 0) AND EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND  COLUMN_NAME = 'CompanyID')
							BEGIN
								SET @DmlColumns = @DmlColumns + ',CompanyID';
								SET @DmlValues = @DmlValues + ',' +  CAST(@CompanyID AS VARCHAR(50));
							END
							
							IF @CheckOrderBy = 1
							BEGIN
							SET @Query = 'INSERT INTO '+ @TableName+ ' ('+ @DmlColumns+ ',CreatedBy,CreatedDate,CreatedDateGMT,ModifiedBy,ModifiedDate,ModifiedDateGMT,IsDeleted, NotActive, IsCurrentVersion) VALUES ('+ 
												@DmlValues+ ','+ CAST(@IN_UserID AS VARCHAR(50))+ ','''+ CONVERT(VARCHAR(50), @UTCTime, 9) + ''','''+ CAST(@GMTTime AS VARCHAR(50))+ ''','+ CAST(@IN_UserID AS VARCHAR(50))+ ','''+ CONVERT(VARCHAR(50), @UTCTime, 9) + ''','''+ CAST(@GMTTime AS VARCHAR(50))+ ''', 0,0,1)'; 
							END
							ELSE
							BEGIN
							SET @Query = 'INSERT INTO '+ @TableName+ ' ('+ @DmlColumns+ ',OrderBy,CreatedBy,CreatedDate,CreatedDateGMT,ModifiedBy,ModifiedDate,ModifiedDateGMT,IsDeleted, NotActive, IsCurrentVersion) VALUES ('+ 
												@DmlValues+ ','+ CAST(@OrderBy AS VARCHAR(50))+ ','+ CAST(@IN_UserID AS VARCHAR(50))+ ','''+ CONVERT(VARCHAR(50), @UTCTime, 9) + ''','''+ CAST(@GMTTime AS VARCHAR(50))+ ''','+ CAST(@IN_UserID AS VARCHAR(50))+ ','''+ CONVERT(VARCHAR(50), @UTCTime, 9) + ''','''+ CAST(@GMTTime AS VARCHAR(50))+ ''', 0,0,1)'; 
							END
              
              SET @AuditEvent = 'INSERT';
							SET @AuditCondition = CONCAT('WHERE ', @UniqueColumn, ' = ', CAST(@IdentityValue AS VARCHAR(50)));
						END
						ELSE
						BEGIN
							SET @AuditEvent = 'UPDATE';
							SET @AuditTable = SUBSTRING(('##atU' +  SUBSTRING(CAST(OBJECT_ID(@TableName) AS VARCHAR(100)), 1, 32) 
                   + RIGHT(ISNULL(@IN_SessionID, ''), 10) + CAST(ISNULL(@IN_FormID, 0) AS VARCHAR(50))) , 1, 63);
							SET @AuditCondition = CONCAT('WHERE ', @UniqueColumn, ' = ', CAST(@IdentityValue AS VARCHAR(50)));

							SET @AuditQuery = 'IF OBJECT_ID(''tempdb..' + @AuditTable + ''') IS NOT NULL DROP TABLE ' + @AuditTable + ';

							SELECT * INTO ' + @AuditTable + '
							FROM ' + @TableName + ' ' + @AuditCondition + ';'

							IF ISNULL(@AuditQuery, '') <> ''
								EXEC (@AuditQuery);

							SET @Query = 'UPDATE '+ @TableName+ ' SET '+ @DmlColumns+ ', ModifiedBy = '+ CAST(@IN_UserID AS VARCHAR(50))+ ', ModifiedDate = '''+ CONVERT(VARCHAR(50), @UTCTime, 9) + ''', ModifiedDateGMT = '''+ CAST(@GMTTime AS VARCHAR(50))+ ''' WHERE '+ @UniqueColumn + ' = '+ CAST(@IdentityValue AS VARCHAR(50));
						END
					
						-- After Save DML
						SET @AfterSaveKeyValues = '';
						SET @AfterSaveQueryColumns = '';					
						IF @AfterSaveSPName <> '' AND @AfterSaveEventType = 2 AND @AfterSaveKeyColumns <> ''
						BEGIN
							IF (@IdentityValue > 0)
							BEGIN
								IF (CHARINDEX('@FormID', @AfterSaveKeyColumns) > 0)
								BEGIN
									SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, '@FormID', CAST(@IN_FormID AS VARCHAR(50)));
								END

								IF (CHARINDEX('@IPAddress', @AfterSaveKeyColumns) > 0)
								BEGIN
									SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, '@IPAddress', CONCAT('''', CAST(@IN_IPAddress AS VARCHAR(100)), ''''));
								END

								SELECT @AfterSaveQueryColumns = 'ISNULL(CAST(' + REPLACE(@AfterSaveKeyColumns, ',', ' AS VARCHAR(MAX)), '''') + ''@!$'' + ISNULL(CAST(') + ' AS VARCHAR(MAX)), '''')';

								IF (@AfterSaveQueryColumns <> '')
								BEGIN
									SET @TempValue = '';
									SET @AfterSaveQuery = 'SELECT @TempValue = ' + @AfterSaveQueryColumns + ' FROM ' + @TableName + ' WHERE ' +
														  @IdentityColumn + ' = ' + CAST(@IdentityValue AS VARCHAR(50));
									EXEC SP_EXECUTESQL @AfterSaveQuery, N'@TempValue VARCHAR(MAX) OUT', @TempValue OUT;
									SET @AfterSaveKeyValues = ',''' + REPLACE(@TempValue, '@!$', ''',''') + '''';
								END
							END
							ELSE 
							BEGIN
								WITH SplitData AS (SELECT value FROM STRING_SPLIT(@AfterSaveKeyColumns, ','))
								SELECT @TempValue = STRING_AGG(CASE WHEN value = '@FormID' THEN CAST(@IN_FormID AS VARCHAR(50))
																	WHEN value = '@IPAddress' THEN CONCAT('''', @IN_IPAddress, '''')
																	ELSE 'NULL' END, ',') FROM SplitData;
								SET @AfterSaveKeyValues = ',' + @TempValue;
							END
						END

						EXEC (@Query);
						IF @DmlEvent = 'add'
						BEGIN
							SET @IdentityValue = IDENT_CURRENT(@TableName);

							SET @AuditEvent = 'INSERT';
							SET @AuditCondition = CONCAT('WHERE ', @UniqueColumn, ' = ', CAST(@IdentityValue AS VARCHAR(50)));
						END

						-- After Save DML
						IF (@AfterSaveSPName <> '') AND (@IdentityValue > 0)
						BEGIN
							SET @Query = @AfterSaveSPName + ' ' + CAST(@IN_UserID AS VARCHAR(50)) + ',' + CAST(@IdentityValue AS VARCHAR(50)) + ',''' + @DmlEvent + '''' + @AfterSaveKeyValues;
							EXEC SP_EXECUTESQL @Query;
						END
					END
					ELSE
					BEGIN
						SET @AuditEvent = 'DELETE';
						SET @AuditTable = SUBSTRING(('##atD' +  SUBSTRING(CAST(OBJECT_ID(@TableName) AS VARCHAR(100)), 1, 32) 
                   + RIGHT(ISNULL(@IN_SessionID, ''), 10) + CAST(ISNULL(@IN_FormID, 0) AS VARCHAR(50))) , 1, 63);
						SET @AuditCondition = CONCAT('WHERE ', @IdentityColumn, ' = ', CAST(@IdentityValue AS VARCHAR(50)));

						SET @AuditQuery = 'IF OBJECT_ID(''tempdb..' + @AuditTable + ''') IS NOT NULL DROP TABLE ' + @AuditTable + ';

						SELECT * INTO ' + @AuditTable + '
						FROM ' + @TableName + ' ' + @AuditCondition + ';'

						IF ISNULL(@AuditQuery, '') <> ''
							EXEC (@AuditQuery);

						SET @AfterSaveKeyValues = '';
						SET @AfterSaveQueryColumns = '';
						SELECT @AfterSaveSPName = ISNULL(SPName, ''), @AfterSaveKeyColumns = ISNULL(KeyColumns, ''), @AfterSaveEventType = ISNULL(SaveEventType, 0) 
						FROM CmnAfterSaveDML WHERE FormID = @IN_FormID AND TableName = @TableName AND DeleteFlag = 1 AND IsDeleted = 0;

						IF @AfterSaveEventType = 2 AND @AfterSaveKeyColumns <> ''
						BEGIN
							SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, ' ', '');
							IF (RIGHT(@AfterSaveKeyColumns, 1) = ',')
								SET @AfterSaveKeyColumns = SUBSTRING(@AfterSaveKeyColumns, 1, LEN(@AfterSaveKeyColumns) - 1);

							IF (@IdentityValue > 0)
							BEGIN
								IF (CHARINDEX('@FormID', @AfterSaveKeyColumns) > 0)
								BEGIN
									SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, '@FormID', CAST(@IN_FormID AS VARCHAR(50)));
								END	

								IF (CHARINDEX('@IPAddress', @AfterSaveKeyColumns) > 0)
								BEGIN
									SET @AfterSaveKeyColumns = REPLACE(@AfterSaveKeyColumns, '@IPAddress', CONCAT('''', CAST(@IN_IPAddress AS VARCHAR(100)), ''''));
								END

								SELECT @AfterSaveQueryColumns = 'ISNULL(CAST(' + REPLACE(@AfterSaveKeyColumns, ',', ' AS VARCHAR(MAX)), '''') + ''@!$'' + ISNULL(CAST(') + ' AS VARCHAR(MAX)), '''')';

								IF (@AfterSaveQueryColumns <> '')
								BEGIN
									SET @TempValue = '';
									SET @AfterSaveQuery = 'SELECT @TempValue = ' + @AfterSaveQueryColumns + ' FROM ' + @TableName + ' WHERE ' +
															@IdentityColumn + ' = ' + CAST(@IdentityValue AS VARCHAR(50));
									EXEC SP_EXECUTESQL @AfterSaveQuery, N'@TempValue VARCHAR(MAX) OUT', @TempValue OUT;
									SET @AfterSaveKeyValues = ',''' + REPLACE(@TempValue, '@!$', ''',''') + '''';
								END
							END
							ELSE 
							BEGIN
								WITH SplitData AS (SELECT value FROM STRING_SPLIT(@AfterSaveKeyColumns, ','))
								SELECT @TempValue = STRING_AGG(CASE WHEN value = '@FormID' THEN CAST(@IN_FormID AS VARCHAR(50))
																	WHEN value = '@IPAddress' THEN CONCAT('''', @IN_IPAddress, '''')
																	ELSE 'NULL' END, ',') FROM SplitData;
								SET @AfterSaveKeyValues = ',' + @TempValue;
							END
						END
						
						SET @IN_Event = 'delete';
						SET @Query = 'UPDATE '+ @TableName+ ' SET IsDeleted = 1, DeletedBy = '+ CAST(@IN_UserID AS VARCHAR(50))+ ', DeletedDate = '''+ CONVERT(VARCHAR(50), @UTCTime, 9) + ''', DeletedDateGMT = '''+ CAST(@GMTTime AS VARCHAR(50))+ ''' WHERE '+ @IdentityColumn+ ' = '+ CAST(@IdentityValue AS VARCHAR(50));
						EXEC (@Query); 

						IF (@AfterSaveSPName <> '') AND (@IdentityValue > 0)
						BEGIN
							SET @Query = @AfterSaveSPName + ' ' + CAST(@IN_UserID AS VARCHAR(50)) + ',' + CAST(@IdentityValue AS VARCHAR(50)) + ',''' + @DmlEvent + '''' + @AfterSaveKeyValues;
							EXEC SP_EXECUTESQL @Query;
						END
					END
					IF @DmlEvent = 'add' AND ISNULL(@IdentityValue, 0) > 0
					BEGIN
						EXEC spCmnAutoGenerateColumnUpdate @DmlEvent, @TableName, @IdentityColumn, @IdentityValue, @IN_FormID, @IN_UserID, @IN_SessionID
					END
					IF ISNULL(@IdentityValue, 0) > 0
					BEGIN
            IF @AuditEvent = 'DELETE' 
              SET @AuditColumnList = ''
            ELSE 
              SET @AuditColumnList = @IN_JsonString
              
						SET @IdentityIDs = CONCAT(@IdentityIDs, CASE WHEN @IdentityIDs = '' THEN '' ELSE ',' END, ISNULL(@IdentityValue, 0))
						EXEC spCmnStaticAuditTracking @AuditEvent, '', @TableName, @IdentityColumn, @AuditCondition, @AuditTable, @AuditColumnList, '', @IN_IPAddress, @IN_FormID, @IN_UserID, @IN_SessionID, @ControlID;
					END

					SET @AuditQuery = 'IF OBJECT_ID(''tempdb..' + @AuditTable + ''') IS NOT NULL DROP TABLE ' + @AuditTable + ';'
					IF ISNULL(@AuditTable, '') <> '' AND ISNULL(@AuditQuery, '') <> ''
						EXEC (@AuditQuery);
				END

				IF ISNULL(@IdentityIDs, '') <> ''
					EXEC spCmnFileUpload 'GridDML', @IN_FormID, @IN_UserID, @IN_GUID, '', @IdentityIDs, '', '', 0, '', '',''

				IF @IN_Event = 'add'
					SET @ResponseMsg = 'S0002';
				ELSE
					SET @ResponseMsg = 'S0003';

				SET @DropQuery = 'IF OBJECT_ID (''tempdb..##tempDmlTable' + @TableNamePrefix + ''') IS NOT NULL DROP TABLE ##tempDmlTable' + @TableNamePrefix
				EXEC (@DropQuery);

				SET @DropQuery = 'IF OBJECT_ID (''tempdb..##tempJsonTable' + @TableNamePrefix + ''') IS NOT NULL DROP TABLE ##tempJsonTable' + @TableNamePrefix
				EXEC (@DropQuery);
				SELECT @ResponseMsg;
				--END
				--ELSE
				--	SELECT 'I0001';
			END

			IF OBJECT_ID('tempdb..#tempAfterSaveDMLColumns') IS NOT NULL
				DROP TABLE #tempAfterSaveDMLColumns;
	
		--COMMIT TRANSACTION trans_spCmnGridDML;
	END TRY
	BEGIN CATCH
		--ROLLBACK TRANSACTION trans_spCmnGridDML;
		
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(); 
		SET @INParameters = '''' + @IN_Event + ''', ''' + @IN_JsonString + ''', ' + CAST(@IN_ColumnCount AS VARCHAR(50)) + ', ''' + @IN_GridHeader + ''', ' + CAST(@IN_FormID AS VARCHAR(50)) + ', ' +
                            CAST(@IN_UserID AS VARCHAR(50)) + ', ''' + @IN_SessionID + ''', ''' + @IN_GroupBoxName + '''';
		IF @AfterSaveQuery <> ''
			SET @Query = @Query + ' | ' + @AfterSaveQuery;
		EXEC spCmnHandleException @IN_FormID, 'spCmnGridDML', @Query, @INParameters, @ErrorMessage, @ErrorSeverity, @ErrorState;
	END CATCH   
END 
GO
PRINT N'Creating [dbo].[CmnFormQuery]'
GO
CREATE TABLE [dbo].[CmnFormQuery]
(
[ReferenceID] [int] NOT NULL IDENTITY(1, 1),
[FormID] [int] NOT NULL,
[FormType] [int] NOT NULL,
[ControlID] [int] NOT NULL,
[ControlType] [int] NOT NULL,
[SPName] [NVARCHAR] (500) NOT NULL,
[TableName] [NVARCHAR] (255) NOT NULL,
[MainTableName] [NVARCHAR] (255) NULL,
[DMLType] [int] NOT NULL,
[Query] [NVARCHAR] (max) NOT NULL,
[CountQuery] [NVARCHAR] (max) NULL,
[FilterQuery] [NVARCHAR] (max) NULL,
[SubQuery] [NVARCHAR] (max) NULL,
[FilterBy] [NVARCHAR] (200) NULL,
[FilterTable] [NVARCHAR] (200) NULL,
[FilterKey] [NVARCHAR] (200) NULL,
[FilterUniqueKey] [NVARCHAR] (200) NULL,
[KeyColumn] [NVARCHAR] (200) NULL,
[FKOrder] [int] NOT NULL,
[FKDelete] [BIT] NOT NULL,
[FkNotActive] [BIT] NOT NULL,
[FkVersion] [BIT] NOT NULL,
[AdditionalCondition] [NVARCHAR] (max) NULL,
[DataCondition] [NVARCHAR] (max) NULL,
[FkShowActive] [BIT] NULL,
[CreatedBy] [int] NOT NULL,
[CreatedDate] [datetime] NOT NULL,
[DeleteFlag] [int] NOT NULL
)
GO
PRINT N'Creating primary key [PK_CmnFormQuery] on [dbo].[CmnFormQuery]'
GO
ALTER TABLE [dbo].[CmnFormQuery] ADD CONSTRAINT [PK_CmnFormQuery] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[spCmnGridFillControl]'
GO

CREATE PROCEDURE [dbo].[spCmnGridFillControl](
	@IN_Event VARCHAR(100),
	@IN_FormID INT,
	@IN_UserID INT,
	@IN_SessionID VARCHAR(255) = '',
	@IN_DataValue NVARCHAR(MAX),
	@IN_DataColumn VARCHAR(1000),
	@IN_SortValues VARCHAR(500),
	@IN_PageIndex INT,
	@IN_PageSize INT,
	@IN_DataFillType INT,
	@IN_DataID NVARCHAR(100),
	@IN_GridColumn NVARCHAR(100),
	@IN_DataTreeValue VARCHAR(100),
	@IN_FillValue NVARCHAR(100),
	@IN_MonthValue NVARCHAR(100) = '')
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY

		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@Query NVARCHAR(MAX) = '',
				@AdditionalCondition NVARCHAR(2000) = '',
				@ControlID BIGINT = 0,
				@TableName SYSNAME = '',
				@KeyColumn  SYSNAME = '',
				@Limit NVARCHAR(2000) = '',
				@CountQuery NVARCHAR(MAX) = '',
				@ColumnValues NVARCHAR(2000) = '',
				@SortColumn SYSNAME = '',
				@SortType VARCHAR(50) = '',
				@Cnt INT,
				@qry NVARCHAR(MAX) = '',
				@PageIndex INT = 0,
				@PageLimit INT = 0,
				@total INT = 0,
				@OrderBy VARCHAR(10) = 'ASC',
				@FilterBy VARCHAR(100) = '',
				@FilterValue INT = 0,
				@FilterTable VARCHAR(100) = '',
				@FilterKey VARCHAR(100) = '',
				@FilterUniqueKey VARCHAR(100) = '',
				@FkDelete BIT = 0,
				@FkNotActive BIT = 0,
				@FkOrder INT = 0,
				@DataTreeCondition VARCHAR(100) = '',
				@Mode INT = 0,
				@MainTableName VARCHAR(255) = '',
				@RBSConditions NVARCHAR(MAX) = '',
				@SearchQry NVARCHAR(MAX),
				@CountQry NVARCHAR(MAX),
				@SubQry NVARCHAR(MAX),
				@SQLSortValues NVARCHAR(MAX) = '',
				@SQLDataID NVARCHAR(MAX) = '',
				@SQLDataTreeValue NVARCHAR(MAX) = '',
				@INParameters NVARCHAR(2000),
				@SQLFilterTable NVARCHAR(MAX),
				@SQLFilterBy NVARCHAR(MAX),
				@FkColumn VARCHAR(100),
				@FillValue VARCHAR(100),
				@DataQry NVARCHAR(MAX),
				@InsQry NVARCHAR(MAX),
				@SeltQry NVARCHAR(MAX),
				@FillPageIndex INT,
				@DataCount INT,
				@Min INT,
				@FillDataCnt INT,
				@Flag BIT,
				@ReplQry NVARCHAR(MAX),
				@Count INT,
				@TotCnt INT,
				@FkVersion BIT,
				@FkCondition VARCHAR(100),
				@RBSBranchID INT,
				@ConditionColumn NVARCHAR(500) = '',
				@ConditionIndex INT = 0,
				@ConditionValue NVARCHAR(1000) = '',
				@CMin INT = 0,
				@CMax INT = 0,
				@SQLConditionColumns NVARCHAR(MAX) = '',
				@ActiveCount INT = 0;
						
		SET ANSI_PADDING ON;

		DECLARE @FilterConditions TABLE (RowNum INT IDENTITY NOT NULL, Condition NVARCHAR(1000))
		DECLARE @FilterValues TABLE (RowNum INT IDENTITY NOT NULL, ConditionValue NVARCHAR(1000))

		SELECT @RBSBranchID = ISNULL(ED.BranchID, '') FROM CmnUserDetails UD
          		JOIN MstEmployeeDetails ED ON ED.ReferenceID = UD.TypeID	
        WHERE UD.UserID = @IN_UserID;

		SELECT @ControlID = ControlID, @SearchQry = Query, @CountQry = CountQuery, @SubQry = SubQuery,
			   @FilterBy = ISNULL(FilterBy,''), @FilterTable = ISNULL(FilterTable,''), @FilterKey = ISNULL(FilterKey,''), @FilterUniqueKey = ISNULL(FilterUniqueKey,''),
			   @FkOrder = ISNULL(FkOrder, 0), @KeyColumn = ISNULL(KeyColumn, ''), @AdditionalCondition = ISNULL(AdditionalCondition, ''), @DataTreeCondition = ISNULL(DataCondition, ''),
			   @TableName = ISNULL(TableName, ''), @MainTableName = ISNULL(MainTableName, ''), @FkDelete = ISNULL(FkDelete, 0), @FkNotActive = ISNULL(FkNotActive, 0), @FkVersion = ISNULL(FkVersion, 0)
		FROM CmnFormQuery
		WHERE FormID = @IN_FormID AND SPName = 'spCmnGridFillControl|' + @IN_GridColumn AND DeleteFlag = 0;

		IF (@IN_SortValues <> '')
		BEGIN
			SET @SortColumn = dbo.fn_SplitString(@IN_SortValues,  ',',  1);
			SET @SortType = dbo.fn_SplitString(@IN_SortValues, ',', 2);
		END
		
		SELECT @OrderBy = ISNULL(Value, 'ASC') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Order By' AND IsDeleted = 0;
		IF @FkOrder = 1
		BEGIN
			SET @OrderBy = 'ASC';
		END
		ELSE IF @FkOrder = 2
		BEGIN
			SET @OrderBy = 'DESC';
		END

		SET @FilterValue = 0;
		IF @FilterBy <> ''
		BEGIN
			SELECT @FilterValue = ISNULL(ED.BranchID, 0) FROM CmnUserDetails UD
        			JOIN MstEmployeeDetails ED ON ED.ReferenceID = UD.TypeID	
        	WHERE UD.UserID = @IN_UserID;
		END
		IF ISNULL(@FilterValue, 0) = 0
			SET @FilterBy = '';

		-- @SQLFilterTable@ --
		SET @SQLFilterTable = CASE WHEN @FilterTable <> '' AND @FilterBy <> '' THEN (' JOIN ' + @FilterTable + ' JT ON JT.' + @FilterUniqueKey + ' = CONVERT(VARCHAR(MAX), MT.' + @FilterKey + ') AND JT.' + @FilterBy + ' = ' + CONVERT(VARCHAR(MAX), @FilterValue) + ' ') ELSE '' END;
		-- @SQLFilterBy@ --
		SET @SQLFilterBy = CASE WHEN @FilterBy <> '' AND ISNULL(@FilterValue, '') <> '' AND ISNULL(@FilterTable, '') = '' THEN ' AND MT.' + @FilterBy + ' = ' + CONVERT(VARCHAR(MAX), @FilterValue) + ' ' ELSE ' ' END;
		-- @SQLSortValues@ --
		IF @IN_SortValues <> ''
			SET @SQLSortValues = @SortColumn + ' ' + @SortType;
		ELSE IF @FkOrder = 3
			SET @SQLSortValues = ' MT.OrderBy ' + @OrderBy;
		ELSE
			SET @SQLSortValues = @KeyColumn + ' ' + @OrderBy;
		-- @SQLDataID@
		IF @AdditionalCondition <> '' AND @IN_DataID <> '' 
			SET @SQLDataID = ' IN (''' + @IN_DataID + ''')';
		-- @SQLDataTreeValue@
		IF @DataTreeCondition <> '' AND @IN_DataTreeValue <> ''
			SET @SQLDataTreeValue = ' IN (''' + @IN_DataTreeValue + ''')';
		
		-- @SQLColumnValues@
		SET @ColumnValues = '';
		IF (@IN_DataColumn <> '')
		BEGIN
			IF @IN_Event = 'OnChange'
			BEGIN
				SET @ColumnValues = dbo.fn_ConstractDependentConditions(@IN_DataColumn, @IN_DataValue, 0, 'MT', '');
			END
			ELSE IF @IN_Event = 'GetAttendanceData'
			BEGIN
				SELECT TOP 1 @ConditionColumn = CC.ColumnName
				FROM CmnColumnProperty CLP
					JOIN CmnControlColumns CC ON CC.ColumnID = CLP.ColumnID AND CC.IsDeleted = 0
					JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID
				WHERE FC.ControlID = @ControlID AND CLP.Name = 'Date Column' AND CLP.Value = '1' AND CLP.IsDeleted = 0;
				IF ISNULL(@ConditionColumn, '') <> ''
				BEGIN
					SET @ConditionValue = LTRIM(RTRIM(dbo.fn_SplitString(@IN_DataValue, '-', 1)));
					IF ISNULL(@ConditionValue, '') = ''
						SET @ConditionValue = FORMAT(GETDATE(), 'MM')
					SET @ColumnValues = @ColumnValues + CONCAT(' AND (FORMAT(MT.', @ConditionColumn, ', ''MM'') = ''', @ConditionValue, ''')');

					SET @ConditionValue = LTRIM(RTRIM(dbo.fn_SplitString(@IN_DataValue, '-', 2)));
					IF ISNULL(@ConditionValue, '') = ''
						SET @ConditionValue = FORMAT(GETDATE(), 'yyyy')
					SET @ColumnValues = @ColumnValues + CONCAT(' AND (FORMAT(MT.', @ConditionColumn, ', ''yyyy'') = ''', @ConditionValue, ''')');
				END

				SELECT @ActiveCount = COUNT(1) FROM CmnSearchParameterProcess WHERE SessionID = @IN_SessionID AND TableColumn = 'MT.NotActive';
				SET @SQLConditionColumns = ISNULL(SUBSTRING((SELECT ' AND ' + CASE WHEN DP.ControlType = 'Textbox' OR DP.ControlType = 'Multiline Textbox' THEN 
																					 DP.ColumnName + ' LIKE ''%' + ISNULL(DP.ColumnValue, '') + '%''' 
																				WHEN DP.ControlType = 'Check Listbox' THEN
																					'(' + REPLACE(DP.ColumnValue, '<col>', ''','' + CAST(' + DP.ColumnName  + ' AS VARCHAR(200)) + '',''' + ' LIKE ') + ')'
																				WHEN DP.ControlType = 'Date' THEN 
																				CASE WHEN CHARINDEX('AND', DP.ColumnValue) > 0 THEN ('(CAST('+DP.TableColumn+ ' AS DATE) BETWEEN '+ ISNULL(DP.ColumnValue, '')+ ')') 
																						WHEN CHARINDEX('>=', DP.ColumnValue) > 0 OR CHARINDEX('<=', DP.ColumnValue) > 0 THEN ('(CAST('+DP.TableColumn + ' AS DATE) '+ ISNULL(DP.ColumnValue, '')+ ')')
																					ELSE ('(CAST('+DP.TableColumn+ ' AS DATE) = '+ ISNULL(DP.ColumnValue, '')+ ')') END 
																				WHEN DP.ControlType = 'DateTime' THEN 
																					CASE WHEN CHARINDEX('AND', DP.ColumnValue) > 0 THEN ('(CAST('+DP.TableColumn+ ' AS DATETIME) BETWEEN '+ ISNULL(DP.ColumnValue, '')+ ')') 
																						WHEN CHARINDEX('>=', DP.ColumnValue) > 0 OR CHARINDEX('<=', DP.ColumnValue) > 0 THEN ('(CAST('+DP.TableColumn + ' AS DATETIME) '+ ISNULL(DP.ColumnValue, '')+ ')')
																					ELSE ('(CAST('+DP.TableColumn+ ' AS DATETIME) = '+ ISNULL(DP.ColumnValue, '')+ ')') END
																				WHEN DP.ControlType = 'Checkbox' THEN (DP.ColumnName+ ' = '+ ISNULL(DP.ColumnValue, 0))
																				ELSE DP.ColumnName + ' = ''' + ISNULL(DP.ColumnValue, '') + '''' END 
														FROM CmnSearchParameterProcess DP WITH (NOLOCK)
															JOIN INFORMATION_SCHEMA.COLUMNS TC ON TC.TABLE_NAME = @TableName AND TC.COLUMN_NAME = REPLACE(DP.ColumnName, 'MT.', '')
														WHERE DP.SessionID = @IN_SessionID 
														ORDER BY DP.ColumnName
														FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '');
				IF @ActiveCount > 0
				BEGIN
				   SET @FkNotActive = 0;
				END
				SET @ColumnValues = @ColumnValues + @SQLConditionColumns;
			END
			ELSE
			BEGIN
				SET @ColumnValues = REPLACE(@IN_DataColumn, ',', ' LIKE ' + '''%' +  @IN_DataValue + '%''' + ' OR ');
				SET @ColumnValues = LEFT(@ColumnValues, LEN(@ColumnValues) - 3) + '';
				SET @ColumnValues = ' AND (' + @ColumnValues + ')';
			END
		END

		EXEC spCmnGetFormTableRBSCondition @IN_FormID, @IN_UserID, @MainTableName, @TableName, @RBSConditions OUTPUT;
		IF @RBSConditions <> ''
		BEGIN
			SET @RBSConditions = REPLACE(@RBSConditions, 'ISNULL(CompanyID', 'ISNULL(MT.CompanyID');
			SET @RBSConditions = REPLACE(@RBSConditions, 'dbo.fn_DataSplit(', 'dbo.fn_DataSplit(MT.');	
			SET @RBSConditions = ' AND ' + @RBSConditions;		
		END
	
		SET @Flag = 0;
		IF @IN_Event IN ('OnChange', 'GetAttendanceData')
			SET @Limit = ''; 
		IF (@IN_Event = 'GridFill' OR @IN_Event = 'Clear')
		BEGIN						
			SET @Flag = 1;
			SET @IN_PageIndex = CASE WHEN @IN_PageIndex = 1 THEN 0 ELSE @IN_PageIndex END;
			SET @Limit = ' WHERE LIMIT BETWEEN ' + CAST(@IN_PageIndex + 1 AS VARCHAR(50)) + ' AND ' + CAST(@IN_PageIndex + @IN_PageSize AS VARCHAR(50));
		END
		ELSE
		BEGIN
			IF @IN_DataID <> 0 AND @IN_Event = 'add' AND @OrderBy <> 'DESC'
			BEGIN
				SET @Cnt = 0;
				SET @qry = REPLACE(@SubQry, '@SQLSortValues@', @SQLSortValues);
				SET @qry = REPLACE(@qry, '@SQLFilterTable@', @SQLFilterTable);
				SET @qry = REPLACE(@qry, '@SQLFilterBy@', @SQLFilterBy);
				SET @qry = REPLACE(@qry, '@SQLColumnValues@', @ColumnValues);
				SET @qry = REPLACE(@qry, '@SQLDataID@', @SQLDataID);
				SET @qry = REPLACE(@qry, '@SQLDataTreeValue@', @SQLDataTreeValue);
				SET @qry = REPLACE(@qry, '@SQLRBSConditions@', (@RBSConditions + 
                    CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
						WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END));
				SET @qry = @qry + ')';
				EXEC sp_executesql @qry, N'@TotCnt INT OUTPUT', @Cnt OUTPUT;
				
				SET @PageIndex = @Cnt / @IN_PageSize;
				SET @Mode = @Cnt % @IN_PageSize;
				IF @Mode = 0
					SET @PageLimit = (@PageIndex -1) * @IN_PageSize;
				ELSE
					SET @PageLimit = (@PageIndex * @IN_PageSize) + 1;

				IF @PageLimit < 0
					SET @PageLimit = 0;

				SET @total = @Cnt % @IN_PageSize;
				SET @PageLimit = CASE WHEN @IN_DataFillType = 0 THEN @PageLimit + 1 ELSE @PageLimit END;
				SET @Limit = ' WHERE LIMIT BETWEEN ' + CAST(@PageLimit AS VARCHAR(50)) + ' AND ' + CAST(@PageLimit + @IN_PageSize AS VARCHAR(50));
			END
			ELSE
			BEGIN
				IF @IN_Event = 'Clear'
					SET @Limit = ' WHERE LIMIT BETWEEN 0 AND ' + CAST(@IN_PageSize AS VARCHAR(50));
				ELSE
				BEGIN
					SET @Flag = 1;
					SET @IN_PageIndex = CASE WHEN @IN_PageIndex = 1 THEN 0 ELSE @IN_PageIndex END;
					SET @Limit = ' WHERE LIMIT BETWEEN ' + CAST(@IN_PageIndex + 1 AS VARCHAR(50)) + ' AND ' + CAST(@IN_PageIndex + @IN_PageSize AS VARCHAR(50));
				END
			END       
		END
	
		IF @Flag = 1 AND @IN_FillValue <> '' AND @IN_DataFillType = 1
		BEGIN
			SET @IN_PageIndex = 1;
			SET @Limit = (' LIMIT BETWEEN '+ CASE WHEN @IN_PageIndex = 1 THEN '0' ELSE CAST(@IN_PageIndex AS VARCHAR(50)) END+ ' AND '+ CAST(@IN_PageSize AS VARCHAR(50))); 
			SET @FkColumn = (SELECT FkColumn FROM CmnFormControls WHERE ControlID = @ControlID);  
			SET @FillValue = @IN_FillValue;

			SET @FkCondition = '';
			IF ISNULL(@FkDelete, 0) <> 0
			BEGIN
				SET @FkCondition = ' MT.IsDeleted = 0 ';
			END
			IF ISNULL(@FkNotActive, 0) <> 0
			BEGIN
				SET @FkCondition = CASE WHEN ISNULL(@FkCondition, '') <> '' THEN (@FkCondition+' AND MT.NotActive = 0 ') ELSE ' MT.NotActive = 0 ' END;
			END

			IF ISNULL(@FkVersion, 0) <> 0 
			BEGIN
				SET @FkCondition = CASE WHEN ISNULL(@FkCondition, '') <> '' THEN (@FkCondition+' AND  MT.IsCurrentVersion = 1 ') ELSE '  MT.IsCurrentVersion = 1 ' END;
			END
			IF @FkCondition = ''
			BEGIN
				SET @FkCondition = ' 1=1';
			END

			IF ISNULL(@FkColumn, '') <> ''
			BEGIN
				IF OBJECT_ID('tempdb..#tempTableData') IS NOT NULL
					DROP TABLE #tempTableData;

				CREATE TABLE #tempTableData (
					ParentValue NVARCHAR(255) NULL,
					OrderBy INT NULL
				);
				
				SET @Cnt = 0;
  				SET @qry = REPLACE(@SubQry, '@SQLSortValues@', @SQLSortValues);
				SET @qry = REPLACE(@qry, '@SQLFilterTable@', @SQLFilterTable);
				SET @qry = REPLACE(@qry, '@SQLFilterBy@', @SQLFilterBy);
				SET @qry = REPLACE(@qry, '@SQLColumnValues@', @ColumnValues);
				SET @qry = REPLACE(@qry, '@SQLDataID@', @SQLDataID);
				SET @qry = REPLACE(@qry, '@SQLDataTreeValue@', @SQLDataTreeValue);
				SET @qry = REPLACE(@qry, '@SQLRBSConditions@', (@RBSConditions +
									CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
										WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END));
				SET @DataQry = @qry + ')';				
				EXEC sp_executesql @DataQry, N'@TotCnt INT OUTPUT', @Cnt OUTPUT;
				
				SET @DataQry = (REPLACE(@qry, '@TotCnt', '@FDataCnt')+ ' AND '+ @FkColumn+' = ''''+ @IN_FillValue + '''')');  
				EXEC sp_executesql @DataQry, N'@FDataCnt INT OUTPUT', @FillDataCnt OUTPUT;

				SET @ReplQry = REPLACE(@qry, 'COUNT(1)', @FkColumn);
				IF @FillDataCnt > 0
				BEGIN
					SET @Min = 0;
					SET @ReplQry = REPLACE(@ReplQry, 'INTO @Cnt', '');
					
					WHILE @Cnt > @Min
					BEGIN
						SET @Min = @Min + 1;
						TRUNCATE TABLE #tempTableData;
			
						SET @InsQry = (';WITH GridFill AS (SELECT ROW_NUMBER() OVER ( ORDER BY ' +CASE WHEN @FkOrder = 1 OR @FkOrder = 4 THEN (@FkColumn + ' ASC') WHEN @FkOrder = 2 THEN (@FkColumn + ' DESC') WHEN @FkOrder = 3 THEN 'OrderBy ASC' END+
												') AS LIMIT, '+@FkColumn + ' AS Value FROM '+ @TableName+' MT WHERE  '+ @FkCondition +
												CASE WHEN @RBSConditions = '' THEN '' ELSE ' '+@RBSConditions END+ 
												CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
													WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END
												+ ' AND '+ @AdditionalCondition + ' '+ @SQLDataID + 
												CASE WHEN @FilterBy <> '' AND ISNULL(@FilterValue, '') <> '' AND ISNULL(@FilterTable,'') = '' THEN (' AND MT.'+ @FilterBy+ ' = '+ CONVERT(VARCHAR(50), @FilterValue)) ELSE ' ' END+ ') INSERT INTO #tempTableData(ParentValue,OrderBy) SELECT Value, LIMIT FROM GridFill WHERE '+ @Limit);
						EXEC sp_executesql @InsQry;

						SET @SeltQry = ('SELECT @DCount = COUNT(1) FROM #tempTableData WHERE ParentValue = '''+ @IN_FillValue + ''''); 
						EXEC sp_executesql @SeltQry, N'@DCount INT OUTPUT', @DataCount OUTPUT;
				
						SET @FillPageIndex = @Min;          
						IF @DataCount > 0
						BEGIN
							IF OBJECT_ID('tempdb..#tempTableData') IS NOT NULL
								DROP TABLE #tempTableData;
							BREAK;
						END

						SET @IN_PageIndex = ((CASE WHEN @IN_PageIndex = 0 THEN '1' ELSE @FillPageIndex END) * @IN_PageSize); 
						SET @Limit = (' LIMIT BETWEEN '+ CAST(@IN_PageIndex AS VARCHAR(50))+ ' AND '+ CAST(CAST(@IN_PageIndex AS INT)+CAST(@IN_PageSize AS INT)  AS VARCHAR(50)));      
					END
				END
				ELSE
				BEGIN
					SET @Limit = (' LIMIT BETWEEN 0 AND '+ CAST(@IN_PageSize AS VARCHAR(50)));  
					SET @FillPageIndex = 1;
				END
				SET @Limit = ' WHERE '+ @Limit;
			END
		END

		-- @SQLLimit@ --
		IF @IN_DataFillType = 0
			SET @Limit = '';

		-- Prepare/Execute Data Query
		SET @qry = REPLACE(@SearchQry, '@SQLSortValues@', @SQLSortValues);
		SET @qry = REPLACE(@qry, '@SQLFilterTable@', @SQLFilterTable);
		SET @qry = REPLACE(@qry, '@SQLFilterBy@', @SQLFilterBy);
		SET @qry = REPLACE(@qry, '@SQLColumnValues@', @ColumnValues);
		SET @qry = REPLACE(@qry, '@SQLDataID@', @SQLDataID);
		SET @qry = REPLACE(@qry, '@SQLDataTreeValue@', @SQLDataTreeValue);
		SET @qry = REPLACE(@qry, '@UserID', @IN_UserID);
		SET @qry = REPLACE(@qry, '@SQLRBSConditions@', @RBSConditions + (CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
						WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END));
		SET @qry = REPLACE(@qry, '@SQLLimit@', @Limit);
		EXEC (@qry);

		-- Prepare/Execute Count Query
		SET @qry = REPLACE(@CountQry, '@SQLColumnValues@', @ColumnValues);
		SET @qry = REPLACE(@qry, '@SQLFilterTable@', @SQLFilterTable);
		SET @qry = REPLACE(@qry, '@SQLFilterBy@', @SQLFilterBy);
		SET @qry = REPLACE(@qry, '@SQLDataID@', @SQLDataID);
		SET @qry = REPLACE(@qry, '@SQLDataTreeValue@', @SQLDataTreeValue);
		SET @qry = REPLACE(@qry, '@UserID', @IN_UserID);
		SET @qry = REPLACE(@qry, '@SQLRBSConditions@', @RBSConditions + (CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
						WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END));
		EXEC (@qry);

		SELECT @FillPageIndex, @FillValue

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
		SET @INParameters = '''' + @IN_Event + ''', ' + CAST(@IN_FormID AS VARCHAR(10)) + ', ' + CAST(@IN_UserID AS VARCHAR(10)) + ', ''' + @IN_SessionID + ''', ''' + @IN_DataValue + ''', ''' +
							@IN_DataColumn + ''', ''' + @IN_SortValues + ''', ' + CAST(@IN_PageIndex AS VARCHAR(10)) + ', ' + CAST(@IN_PageSize AS VARCHAR(10)) + ', ' + CAST(@IN_DataFillType AS VARCHAR(10)) + ', ' + 
							CAST(@IN_DataID AS VARCHAR(10)) + ', ' + '''' + @IN_GridColumn + ''', ''' + @IN_DataTreeValue + '''';
		EXEC spCmnHandleException @IN_FormID, 'spCmnGridFillControl', @qry, @INParameters, @ErrorMessage, @ErrorSeverity, @ErrorState;
	END CATCH
END

GO
PRINT N'Creating [dbo].[spCmnGridOnchangeControls]'
GO

CREATE PROCEDURE [dbo].[spCmnGridOnchangeControls](
	@IN_ControlValue NVARCHAR(100),
	@IN_ControlName VARCHAR(100),
	@IN_ParentData NVARCHAR(255),
	@IN_GridHeader NVARCHAR(100),
	@IN_FormID INT,
	@IN_UserID INT)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
			  @SCount INT = 0,
			  @DefaultValue NVARCHAR(1000) = '',
		      @AdditionalConditions NVARCHAR(2000) = '',
			  @ConditionValues NVARCHAR(MAX) = '',
			  @Min INT = 0,
			  @Max INT = 0,
			  @OutString NVARCHAR(MAX) = '',
			  @Query NVARCHAR(MAX) = '',
			  @FkType INT = 0,
			  @TableMin INT = 0,
			  @TableCount INT = 0,
			  @ColumnID INT = 0,
			  @ControlType INT = 0,
			  @ConditionStart NVARCHAR(50),
			  @ConditionEnd NVARCHAR(50),
			  @ButtonID INT = 0,
			  @FkTable NVARCHAR(150) = '',
			  @IsDatasource BIT = 0,
			  @ColumnDefaultValue NVARCHAR(500) = '',
			  @CMTypeValues VARCHAR(100) = '',
			  @GridColumnID BIGINT = 0,
			  @DataType INT = 0,
			  @DecimalLength SMALLINT = 0,
			  @SplittedValue VARCHAR(500) = '',
			  @DependentType SMALLINT,
			  @OutVString NVARCHAR(MAX) = '',
			  @VQuery NVARCHAR(MAX) = '';

		DECLARE @RBSDataVariable TABLE (
			RowNo INT NOT NULL,
			ControlName NVARCHAR(200) NULL,
			TableName VARCHAR(255) NULL,
			TableColumn VARCHAR(255) NULL,
			DataValue NVARCHAR(MAX) NULL)

		INSERT INTO @RBSDataVariable (RowNo, ControlName, TableName, TableColumn, DataValue)
		EXEC spCmnGetFormRBSData @IN_FormID, @IN_UserID, ''

		SET @DecimalLength = ISNULL((SELECT TOP 1 CD.DecimalLength FROM MstCompanyDetails MC JOIN MstCountryDetails CD ON CD.ReferenceID = MC.CurrencyID WHERE MC.ParentCompanyID IS NULL ORDER BY MC.ReferenceID DESC), 4);

		IF OBJECT_ID('tempdb..#tempControlBindValues') IS NOT NULL
			DROP TABLE #tempControlBindValues

		CREATE TABLE #tempControlBindValues (
			SNum INT NULL,
			ColumnName SYSNAME NULL,
			ControlType VARCHAR(100) NULL,   
			DataType VARCHAR(100) NULL,  
			ControlValue NVARCHAR(MAX) NULL,  
			SQuery NVARCHAR(MAX) NULL,
			VQuery NVARCHAR(MAX) NULL,
			DataSource NVARCHAR(MAX) NULL,
			Visibility BIT NULL,
			[Readonly] BIT NULL,
			FKType INT NULL,
			IsDatasource INT NULL,
			Mandatory BIT NULL,
			DependentType SMALLINT NULL)

		IF OBJECT_ID('tempdb..#tempControlProcess') IS NOT NULL
					DROP TABLE #tempControlProcess

		CREATE TABLE #tempControlProcess (TableNum  INT NOT NULL IDENTITY(1, 1), FkType SYSNAME NULL, FkTable SYSNAME NULL, DefaultValue SYSNAME NULL, AdditionalConditions SYSNAME NULL, 
										  ColumnID INT NOT NULL, ControlType INT NOT NULL, CMTypeValues VARCHAR(255) NULL, DataType INT NULL, DependentType SMALLINT NULL);

		SELECT @GridColumnID = CC.ColumnID
		FROM CmnFormDetails FD
			JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
			JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
			JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.ControlType = 19 AND FC.IsDeleted = 0 
			JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.ColumnName = @IN_ControlName AND CC.IsDeleted = 0
			JOIN CmnControlProperty CP ON CP.ControlID = FC.ControlID AND CP.Name = 'Grid Header' AND CP.Value = @IN_GridHeader AND CP.IsDeleted = 0
		WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0; 

		INSERT INTO #tempControlProcess (FkType, FkTable, DefaultValue, AdditionalConditions, ColumnID, ControlType, CMTypeValues, DataType, DependentType)
		SELECT GC.FkType, GC.FkTable, @IN_ControlValue, GC.AdditionalConditions, GC.ColumnID, GC.ControlType, GC.DefaultValue, GC.DataType, GC.DependentType
		FROM CmnFormDetails FD
  			JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
  			JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
  			JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.ControlType = 19 AND FC.IsDeleted = 0 
			JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.ColumnName = @IN_ControlName AND CC.IsDeleted = 0
			JOIN CmnControlProperty CP ON CP.ControlID = FC.ControlID AND CP.Name = 'Grid Header' AND CP.Value = @IN_GridHeader AND CP.IsDeleted = 0
			JOIN CmnGridControlColumns GC ON GC.ControlID = CC.ColumnID AND GC.IsDeleted = 0
  		WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0; 
		
		SELECT @TableCount = COUNT(1) FROM #tempControlProcess; 
		WHILE (@TableMin < @TableCount)
		BEGIN
			SET @DefaultValue = '';
			SET @AdditionalConditions = '';
			SET @ConditionValues = '';
			SET @TableMin = @TableMin + 1;
			SET @ConditionStart = '';
			SET @ConditionEnd = '';

			SELECT @FkType = FkType, @FkTable = FkTable, @DefaultValue = DefaultValue, @AdditionalConditions = AdditionalConditions, @ColumnID = ColumnID, @ControlType = ControlType, 
				   @CMTypeValues = CMTypeValues, @DataType = DataType, @DependentType = ISNULL(DependentType, 0)
			FROM #tempControlProcess WHERE TableNum = @TableMin;
			
			IF @FkType = 1 AND ISNULL(@DefaultValue, '') = ''
				SET @DefaultValue = '0';

			IF @FkTable = 'Module'
				SET @DefaultValue = '';
    
			IF @ControlType = 8 AND @IN_ControlValue <> ''
			BEGIN
				SET @ConditionStart = ' IN(';
				SET @ConditionEnd = ')';
			END
			ELSE
			BEGIN
				SET @ConditionStart = ' = N''';
				SET @ConditionEnd = '''';
			END

			SELECT @ColumnDefaultValue = GC.DefaultValue, @ConditionValues = CASE WHEN GC.AdditionalConditions = '' THEN '' 
					ELSE dbo.fn_ConstractDependentConditions(GC.AdditionalConditions, @IN_ControlValue, @ControlType, '', '') END
			FROM CmnFormDetails FD
  				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
  				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
  				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.ControlType = 19 AND FC.IsDeleted = 0 
				JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.ColumnName = @IN_ControlName AND CC.IsDeleted = 0
				JOIN CmnGridControlColumns GC ON GC.ControlID = CC.ColumnID AND GC.ColumnID = @ColumnID AND GC.IsDeleted = 0
				JOIN CmnControlProperty CP ON CP.ControlID = FC.ControlID AND CP.Name = 'Grid Header' AND CP.Value = @IN_GridHeader AND CP.IsDeleted = 0
  			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;
			
			IF ISNULL(@ConditionValues, '') = ''
			BEGIN
				SET @ConditionValues = '';
			END
			ELSE IF ISNULL(@ColumnDefaultValue, '') = ''
			BEGIN
				SET @ConditionValues = @ConditionValues + (CASE WHEN @IN_ParentData <> '' THEN (' = '+ @IN_ControlValue) ELSE '' END);
			END

			IF @FkType = 1 AND @CMTypeValues = '' AND ISNULL(@AdditionalConditions, '') <> ''
			BEGIN
			  SET @DefaultValue = '';
			END

			SET @SplittedValue = '';
			IF @DefaultValue <> '' AND @ControlType = 8
			BEGIN
				SET @SplittedValue = dbo.fn_SplitString(@DefaultValue, ',', 1);
			END
			
			INSERT INTO #tempControlBindValues
			SELECT 0 AS SNum, GC.ColumnName, GC.ControlType, DT.TypeValues AS DataType, '',
			  CASE WHEN GC.ControlType IN (2, 8) AND (ISNULL(GC.IsDataSource, 1) = 1 OR ISNULL(GC.DependentType, 0) IN (1, 3, 6)) AND ISNULL(GC.DependentType, 0) NOT IN (2, 4, 5) THEN
				  CASE WHEN GC.FkType = 1 THEN
					  'SET @Dout = SUBSTRING((SELECT '','' + (''{"Value":"'' + REPLACE(REPLACE(CAST(CM.' + GC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(CM.' + GC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"}'')
																	FROM CmnCodeMaster CM WHERE CM.Type=''' + GC.FkTable + '''' +
																		CASE WHEN ISNULL(GC.AdditionalConditions, '') = '' THEN '' ELSE + ' AND ' + GC.AdditionalConditions END +
																		CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + GC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
																		dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, 'CmnCodeMaster', GC.ColumnName) +
																		CASE WHEN GC.FkDelete = 0 THEN '' ELSE ' AND  + ISNULL(CM.IsDeleted, 0) = 0 '  END  +
																		CASE WHEN GC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(CM.NotActive, 0) = 0 ' END + 
																		CASE WHEN GC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(CM.IsCurrentVersion, 1) = 1 ' END +
																		' ORDER BY ' + CASE WHEN ISNULL(GC.FkOrder, 0) = 1 THEN GC.FkData + ' ASC '
																												WHEN ISNULL(GC.FkOrder, 0) = 2 THEN CC.FkData + ' DESC ' 
																												WHEN ISNULL(GC.FkOrder, 0) = 3 THEN 'CM.OrderBy' 
																												WHEN ISNULL(GC.FkOrder, 0) = 4 THEN GC.FkColumn + ' ASC' 
																												ELSE 'CM.OrderBy' END + 
																	' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
					  WHEN GC.FkType = 2 THEN
						  ' SET @Dout = SUBSTRING((SELECT '','' + (''{"Value":"''+ REPLACE(REPLACE(CAST(MT.' + GC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(MT.' + GC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"'+CASE WHEN ISNULL(DSP.Value, '') <> '' THEN ',"Parent":"''+ CAST(MT.'+ DSP.Value + ' AS NVARCHAR(MAX)) +''"' ELSE '' END+'}'')						  
																	FROM ' + GC.FkTable + ' MT WHERE 1=1 ' + 
																		CASE WHEN (@DependentType = 6 AND (@IN_ControlValue = '' OR @IN_ControlValue = '0')) THEN '' ELSE	-- DependentType 6: Fill Datasource (All)
																			CASE WHEN @ConditionValues = '' THEN (CASE WHEN ISNULL(GC.AdditionalConditions, '') = '' THEN '' ELSE ' AND ' + GC.AdditionalConditions END) ELSE @ConditionValues END END +
																		CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + GC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
																		dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, GC.FkTable, GC.ColumnName) +
																		CASE WHEN GC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(MT.IsDeleted, 0) = 0 ' END + 
																		CASE WHEN GC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(MT.NotActive, 0) = 0 ' END + 
																		CASE WHEN GC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(MT.IsCurrentVersion, 1) = 1 ' END +
																	' ORDER BY ' + CASE WHEN ISNULL(CC.FkOrder, 0) = 1 THEN 'MT.'+ GC.FkData + ' ASC'
																											WHEN ISNULL(GC.FkOrder, 0) = 2 THEN 'MT.' + CC.FkData + ' DESC'
																											WHEN ISNULL(GC.FkOrder, 0) = 3 THEN 'MT.OrderBy'
																											WHEN ISNULL(GC.FkOrder, 0) = 4 THEN CC.FkColumn + ' ASC'
																											ELSE 'MT.' + GC.FkData END +
																	' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
						ELSE '' END
				ELSE (CASE WHEN GC.FkType = 0 THEN ''
					 	   ELSE CASE WHEN GC.DependentType = 2 AND GC.ControlType IN (25) THEN 
									CASE WHEN GC.FkType = 1 THEN
										'SET @Dout = (SELECT ISNULL(SUBSTRING(((SELECT '','' + (''{"Text":"''+ REPLACE(REPLACE(CAST(' + GC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Value":"''+ REPLACE(REPLACE(CAST(' + GC.FkColumn+ ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"}'')
															FROM CmnCodeMaster WHERE Type = ''' + GC.FkTable + ''' ' + 
															CASE WHEN GC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
															CASE WHEN GC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
															CASE WHEN GC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues +
															' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)'')), 2, 20000000), ''''))'
									WHEN GC.FkType = 2 THEN
										'SET @Dout = (SELECT ISNULL(SUBSTRING(((SELECT '','' + (''{"Text":"''+ REPLACE(REPLACE(CAST(' + GC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Value":"''+ REPLACE(REPLACE(CAST(' + GC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"}'') 
															FROM ' + GC.FkTable + ' WHERE 1=1 ' + 
															CASE WHEN GC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
															CASE WHEN GC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
															CASE WHEN GC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues + 
															' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''nvarchar(max)'')), 2, 20000000), ''''))'
									END
								WHEN GC.DependentType = 2 AND GC.ControlType IN (24) THEN 
									CASE WHEN GC.FkType = 1 THEN
										'SET @Dout = (SELECT ISNULL(SUBSTRING(((SELECT '','' + CAST(' + GC.FkData + ' AS NVARCHAR(MAX))
															FROM CmnCodeMaster WHERE Type = ''' + GC.FkTable + ''' ' + 
															CASE WHEN GC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
															CASE WHEN GC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
															CASE WHEN GC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues +
															' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)'')), 2, 20000000), ''''))' 
									WHEN GC.FkType = 2 THEN
										'SET @Dout = (SELECT ISNULL(SUBSTRING(((SELECT '','' + CAST(' + GC.FkData + ' AS NVARCHAR(MAX))
															FROM ' + GC.FkTable + ' WHERE 1=1 ' + 
															CASE WHEN GC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
															CASE WHEN GC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
															CASE WHEN GC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues + 
															' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''nvarchar(max)'')), 2, 20000000), ''''))'
									END
									WHEN GC.FkType = 1 THEN 
					 					'SET @Dout = (SELECT TOP(1) ' + GC.FkData + ' FROM CmnCodeMaster WHERE Type = ''' + GC.FkTable + ''' ' + 
										CASE WHEN GC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
										CASE WHEN GC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
										CASE WHEN GC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues + ')'
					 				 WHEN GC.ControlType = 8 THEN
					 					'SET @Dout = (SELECT STRING_AGG(' + GC.FkData + ',' + ''',''' + ') FROM ' + GC.FkTable + ' WHERE 1=1 ' + 
										CASE WHEN GC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
										CASE WHEN GC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
										CASE WHEN GC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues + ')'
									 ELSE 'SET @Dout = (SELECT TOP(1) ' + (CASE WHEN CC.DataType = 8 AND ISNULL(GC.DecimalLength, '') <> '' THEN 'CAST('+ GC.FkData+' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(GC.IsCurrency, 0) = 1 THEN @DecimalLength ELSE GC.DecimalLength END AS VARCHAR(5))+'))' 
																				WHEN CC.DataType = 8 AND ISNULL(GC.DecimalLength, '') = '' THEN 'CAST('+ GC.FkData+ ' AS DECIMAL(32, '+ CAST(CASE WHEN ISNULL(GC.IsCurrency, 0) = 1 THEN @DecimalLength ELSE 4 END AS VARCHAR(5))+'))' ELSE GC.FkData END)
												+ ' FROM ' + GC.FkTable + ' WHERE 1=1' + 
										CASE WHEN GC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
										CASE WHEN GC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
										CASE WHEN GC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues + ')' END
						END)
				END as SQuery,
				CASE WHEN GC.DependentType = 2 AND GC.ControlType IN (24) THEN 
								CASE WHEN GC.FkType = 1 THEN
									'SET @Vout = (SELECT ISNULL(SUBSTRING(((SELECT '','' + CAST(' + GC.FkColumn + ' AS NVARCHAR(MAX))
														FROM CmnCodeMaster WHERE Type = ''' + GC.FkTable + ''' ' + 
														CASE WHEN GC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
														CASE WHEN GC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
														CASE WHEN GC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues +
														' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)'')), 2, 20000000), ''''))' 
								WHEN GC.FkType = 2 THEN
									'SET @Vout = (SELECT ISNULL(SUBSTRING(((SELECT '','' + CAST(' + GC.FkColumn + ' AS NVARCHAR(MAX))
														FROM ' + GC.FkTable + ' WHERE 1=1 ' + 
														CASE WHEN GC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
														CASE WHEN GC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
														CASE WHEN GC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues + 
														' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''nvarchar(max)'')), 2, 20000000), ''''))'
								END
					ELSE ''	END AS VQuery,
				'' AS DataSource, GC.Visibility, GC.Readonly, GC.FkType,
				CASE WHEN (ISNULL(GC.IsDataSource, 1) = 1 OR ISNULL(GC.DependentType, 0) IN (1, 3, 6)) AND ISNULL(GC.DependentType, 0) NOT IN (2, 4, 5) THEN 1 ELSE 0 END,
				GC.IsMandatory, GC.DependentType
			FROM CmnFormDetails FD
  				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
  				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
  				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.ControlType = 19 AND FC.IsDeleted = 0 
				JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.ColumnName = @IN_ControlName AND CC.IsDeleted = 0
				JOIN CmnGridControlColumns GC ON GC.ControlID = CC.ColumnID AND GC.IsDeleted = 0 AND GC.ColumnID = @ColumnID AND ISNULL(GC.DependentFlag, 0) = 1
					AND ((PATINDEX('%!=%', ISNULL(GC.DefaultValue, '')) > 0 AND 
							(PATINDEX('%,' + CAST(CASE WHEN @FkType = 1 OR @DataType = 3 OR (GC.DefaultValue <> '' AND @IN_ParentData = '') THEN (CASE WHEN @SplittedValue <> '' THEN @SplittedValue ELSE @DefaultValue END)
												ELSE (CASE WHEN @IN_ParentData <> '' THEN @IN_ParentData ELSE '' END) END  AS VARCHAR(50)) + ',%', ',' + REPLACE(ISNULL(GC.DefaultValue, ''), '!=', '') + ',') = 0))
						OR (PATINDEX('%!=%', ISNULL(GC.DefaultValue, '')) = 0 AND (PATINDEX('%,' + CAST(CASE WHEN @FkType = 1 OR @DataType = 3 OR (GC.DefaultValue <> '' AND @IN_ParentData = '') THEN (CASE WHEN @SplittedValue <> '' THEN @SplittedValue ELSE @DefaultValue END)
												ELSE (CASE WHEN @IN_ParentData <> '' THEN @IN_ParentData ELSE '' END) END  AS VARCHAR(50)) + ',%', ',' + REPLACE(ISNULL(GC.DefaultValue, ''), '!=', '') + ',') > 0)))
  				JOIN CmnCodeMaster CT ON CT.Type = 'Control Type' AND CT.CodemasterID = GC.ControlType AND CT.IsDeleted = 0
  				JOIN CmnCodeMaster DT ON DT.Type = 'Data Type' AND DT.CodemasterID = GC.DataType AND DT.IsDeleted = 0
				JOIN CmnControlProperty CP ON CP.ControlID = FC.ControlID AND CP.Name = 'Grid Header' AND CP.Value = @IN_GridHeader AND CP.IsDeleted = 0
				LEFT JOIN CmnColumnProperty DSP ON DSP.ColumnID = (SELECT TOP 1 ColumnID FROM CmnControlColumns WHERE ControlID = FC.ControlID AND ColumnName = GC.ColumnName AND IsDeleted = 0) AND DSP.Name = 'DS ParentColumn' AND DSP.IsDeleted = 0
				LEFT JOIN @RBSDataVariable RBS ON RBS.TableName = CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
																						WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') 
																							ELSE ISNULL(FD.TableName, '') END AND RBS.TableColumn = GC.ColumnName
  			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;	
		END

		UPDATE #tempControlBindValues
		SET @SCount = SNum = @SCount + 1
    
		SELECT @Min = MIN(SNum), @Max = MAX(SNum) FROM #tempControlBindValues WHERE SNum <> 0;
    
		WHILE (@Min <> 0 AND @Min <= @Max) 
		BEGIN
			SELECT @OutString = '', @Query = '', @OutVString = '', @VQuery = ''
			IF @DefaultValue <> '0' OR @DefaultValue = '' OR @DataType = 3
			BEGIN
				SELECT @Query = SQuery, @VQuery = VQuery, @IsDatasource = IsDatasource, @ControlType = ControlType FROM #tempControlBindValues WHERE SNum = @Min;
				IF @Query <> ''
					EXEC sp_executesql @Query, N'@Dout NVARCHAR(MAX) OUTPUT', @OutString OUTPUT
				IF @ControlType = 24
					BEGIN
						EXEC sp_executesql @VQuery, N'@Vout NVARCHAR(MAX) OUTPUT', @OutVString OUTPUT
						SET @OutString = ('{"Text":"'+ @OutString+ '","Value":"'+ @OutVString+ '"}');
					END
			END			  
    
			UPDATE #tempControlBindValues
			SET DataSource = CASE WHEN (ControlType = 2 OR ControlType = 8) AND @IsDatasource = 1 THEN  @OutString
							ELSE '' END,
					ControlValue = CASE WHEN (ControlType <> 2 AND ControlType <> 8) OR @IsDatasource = 0 THEN @OutString 
							ELSE '' END
			WHERE SNum = @Min;
      
			SET @Min = @Min + 1;
		END

		SELECT ColumnName, ControlType, DataType, '[' + DataSource + ']' AS DataSource, ControlValue, Visibility, Readonly, IsDatasource, Mandatory, DependentType
		FROM #tempControlBindValues;

	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnGridPopupValues]'
GO

CREATE PROCEDURE [dbo].[spCmnGridPopupValues] (
	@IN_Event VARCHAR(100) = '', 
	@IN_FormID INT = 0, 
	@IN_UserID INT = 0, 
	@IN_SessionID VARCHAR(255) = '',
	@IN_DataValue NVARCHAR(300) = '', 
	@IN_DataColumn VARCHAR(1000) = '', 
	@IN_SortValues VARCHAR(300) = '', 
	@IN_PageIndex INT = 0, 
	@IN_PageSize INT = 0, 
	@IN_DataFillType INT = 0, 
	@IN_DataID INT = 0, 
	@IN_GridColumn NVARCHAR(200) = '',
	@IN_ParentGridControl NVARCHAR(255) = '',
	@IN_ParentControl NVARCHAR(MAX) = '')

AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY 	
		DECLARE @ErrorSeverity NVARCHAR(50) = '',
				@ErrorMessage NVARCHAR(2000) = '',
				@ErrorState NVARCHAR(50) = '',
				@TableName SYSNAME = '',
				@ConditionColumns VARCHAR(MAX) = '',
				@AdditionalCondition NVARCHAR(2000) = '',
				@Query NVARCHAR(MAX) = '',
				@CountQuery NVARCHAR(MAX) = '',
				@ColumnValues NVARCHAR(4000) = '',
				@SelectStmt NVARCHAR(MAX) = '',
				@CTEColumnNames NVARCHAR(MAX) = '',
				@SelectColumnNames NVARCHAR(MAX) = '',
				@Count INT = 0,
				@Limit VARCHAR(255) = '',
				@KeyColumn SYSNAME = '',
				@ColumnID INT = 0,
				@SortColumn SYSNAME = '',
				@SortType VARCHAR(20) = '',
				@FKType INT = 0,
				@FKTable SYSNAME = '',
				@OrderByColumn VARCHAR(MAX) = '',
				@OrderBy VARCHAR(10) = 'ASC',
				@FkDelete BIT = 0,
				@FkNotActive BIT = 0,
				@FkCondition NVARCHAR(MAX) = '',
				@FormType INT = 0,
				@FkOrder INT = 0,
				@DecimalLength SMALLINT = 0,
				@RBSConditions NVARCHAR(MAX) = '',
				@MainTableName SYSNAME = '',
				@IsCurrentVersion BIT = 0,
				@RBSBranchID INT,
				@TableColumn SYSNAME = '',
				@ControlType INT = '',
				@GridKeyCol NVARCHAR(MAX) = '',
				@OrderColumns SYSNAME = '',
				@FKOrderColumn1 NVARCHAR(200) = '',
				@FKOrderColumn2 NVARCHAR(200) = '',
				@OrderColumnTextType BIT = 0;

		SELECT @RBSBranchID = ISNULL(ED.BranchID, '') FROM CmnUserDetails UD
			JOIN MstEmployeeDetails ED ON ED.ReferenceID = UD.TypeID	
		WHERE UD.UserID = @IN_UserID;

		SET @DecimalLength = ISNULL((SELECT TOP 1 CD.DecimalLength FROM MstCompanyDetails MC JOIN MstCountryDetails CD ON CD.ReferenceID = MC.CurrencyID WHERE MC.ParentCompanyID IS NULL ORDER BY MC.ReferenceID DESC), 4);

		IF @IN_Event = 'FormControl'
		BEGIN
			SELECT @ColumnID = CC.ControlID, @TableName = CC.FkTable, @KeyColumn = 'MT.' +CC.FkColumn, @FKType = CC.FKType, @FKTable = CC.FKTable,
					@FkDelete = CC.FkDelete, @FkNotActive = CC.FkNotActive, @FormType = FD.FormType, @FkOrder = CC.FkOrder,
					@MainTableName = CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
									   WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') ELSE ISNULL(FD.TableName, '') END,
					@TableColumn = CC.TableColumn, @GridKeyCol = FD.KeyColumn, @OrderColumns = 'MT.' +CC.FkColumn,
					@IsCurrentVersion = CC.FkVersion, @AdditionalCondition = CC.AdditionalConditions, @ControlType = CC.ControlType 
			FROM CmnFormDetails FD WITH (NOLOCK)
				JOIN CmnFormTabs FT WITH (NOLOCK) ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
				JOIN CmnGroupBoxes GB WITH (NOLOCK) ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
				JOIN CmnFormControls CC WITH (NOLOCK) ON CC.GroupID = GB.GroupID
					AND (CC.ControlType = 24 OR CC.ControlType = 25) AND CC.IsDeleted = 0
				JOIN CmnControlProperty CP WITH (NOLOCK) ON CP.ControlID = CC.ControlID AND CP.Name = 'Grid Header'
					AND CP.Value = @IN_GridColumn AND CP.IsDeleted = 0
			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0
		END
		ELSE IF ISNULL(@IN_ParentGridControl, 0) = 0
		BEGIN
			SELECT @ColumnID = CC.SearchID, @TableName = CC.FkTable, @KeyColumn = 'MT.' +CC.FkColumn, @FKType = CC.FKType, @FKTable = CC.FKTable,
					@FkDelete = CC.FkDelete, @FkNotActive = CC.FkNotActive, @FormType = FD.FormType, @FkOrder = CC.FkOrder,
					@MainTableName = CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '') 
									      WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') ELSE ISNULL(FD.TableName, '') END, 
					@TableColumn = CC.TableColumn, @GridKeyCol = FD.KeyColumn, @OrderColumns = 'MT.' +CC.FkColumn,
					@IsCurrentVersion = CC.FkVersion, @AdditionalCondition = CC.AdditionalConditions, @ControlType = CC.ControlType
			FROM CmnFormDetails FD WITH (NOLOCK)
				JOIN CmnFormTabs FT WITH (NOLOCK) ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
				JOIN CmnGroupBoxes GB WITH (NOLOCK) ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
				JOIN CmnFormControls FC WITH (NOLOCK) ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0
				JOIN CmnFormSearchControl CC WITH (NOLOCK) ON CC.ControlID = FC.ControlID AND CC.FormID = FD.FormID AND CC.Name = @IN_GridColumn 
					AND (CC.ControlType = 24 OR CC.ControlType = 25) AND CC.IsDeleted = 0
			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0
		END
		ELSE
		BEGIN
			SELECT @ColumnID = CC.ColumnID, @TableName = CC.FkTable, @KeyColumn = 'MT.' +CC.FkColumn, @FKType = CC.FKType, @FKTable = CC.FKTable, 
					@FkDelete = CC.FkDelete, @FkNotActive = CC.FkNotActive, @FormType = FD.FormType, @FkOrder = CC.FkOrder, @TableColumn = CC.ColumnName,
					@MainTableName = CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
												WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') ELSE ISNULL(FD.TableName, '') END, 
					@IsCurrentVersion = CC.FkVersion, @AdditionalCondition = CC.AdditionalConditions, 
					@ControlType = CC.ControlType, @GridKeyCol = CC.FkColumn, @OrderColumns = 'MT.' +CC.FkColumn
			FROM CmnFormDetails FD WITH (NOLOCK)
				JOIN CmnFormTabs FT WITH (NOLOCK) ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
				JOIN CmnGroupBoxes GB WITH (NOLOCK) ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
				JOIN CmnFormControls FC WITH (NOLOCK) ON FC.GroupID = GB.GroupID AND FC.ControlType = 19 AND FC.ControlID = @IN_ParentGridControl AND FC.IsDeleted = 0
				JOIN CmnControlColumns CC ON CC.ControlID = @IN_ParentGridControl AND (CC.ControlType = 24 OR CC.ControlType = 25) AND CC.IsDeleted = 0
				JOIN CmnColumnProperty CP ON CP.ColumnID = CC.ColumnID AND CP.Value = @IN_GridColumn AND CP.Name = 'Grid Header' AND CP.IsDeleted = 0
			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0
		END
		
		EXEC spCmnGetFormTableRBSCondition @IN_FormID, @IN_UserID, @MainTableName, @TableName, @RBSConditions OUTPUT

		SET @ColumnValues = ''
		IF @IN_DataColumn <> ''
		BEGIN
			SET @ColumnValues = REPLACE(@IN_DataColumn, ',', ' LIKE ' + '''%' + @IN_DataValue + '%''' + ' OR ')
		END
		
		IF @ColumnValues <> ''
		BEGIN
			SET @ColumnValues = LEFT(@ColumnValues, LEN(@ColumnValues) -3) + ''
			SET @ColumnValues = '(' + @ColumnValues + ')';
		END

		IF @FKType = 1
		BEGIN
			SET @TableName = 'CmnCodeMaster';
			SET @AdditionalCondition = 'Type = '''+ @FKTable + '''' + CASE WHEN @AdditionalCondition <> '' THEN ' AND MT.' ELSE '' END + @AdditionalCondition;
		END

		IF @IN_Event = 'FormControl'
		BEGIN
			SELECT @OrderBy = ISNULL(Value, 'ASC') FROM CmnControlProperty WHERE ControlID = @ColumnID AND Name = 'Order By' AND IsDeleted = 0;
		END
		ELSE
		BEGIN
			SELECT @OrderBy = ISNULL(Value, 'ASC') FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Order By' AND IsDeleted = 0;
		END

		IF @FkOrder = 1
		BEGIN
			SET @OrderBy = 'ASC';
		END
		ELSE IF @FkOrder = 2
		BEGIN
			SET @OrderBy = 'DESC';
		END

		IF @IN_DataID <> 0 AND @ControlType IN (24, 25)
		BEGIN
			IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = REPLACE(@OrderColumns, 'MT.', '') AND DATA_TYPE IN ('varchar', 'nvarchar'))
			BEGIN
				SET @OrderColumnTextType = 1;
			END
			IF @OrderBy = 'ASC'
			BEGIN
				SET @FKOrderColumn1 = CASE WHEN @FkOrder = 3 THEN ' MT.OrderBy ' ELSE ' ' + @OrderColumns END;
				SET @FKOrderColumn2 = CASE WHEN @FkOrder = 3 THEN ' MT.OrderBy + 10000000 ' 
										ELSE CASE WHEN @OrderColumnTextType = 1 THEN 'CONCAT(''ZZZ'',' + @OrderColumns + ')' ELSE  '(' + @OrderColumns + ' + 10000000)' END END;
			END
			IF @OrderBy = 'DESC'
			BEGIN
				SET @FKOrderColumn1 = CASE WHEN @FkOrder = 3 THEN ' MT.OrderBy + 10000000'
										ELSE CASE WHEN @OrderColumnTextType = 1 THEN 'CONCAT(''ZZZ'',' + @OrderColumns + ')' ELSE  '(' + @OrderColumns + ' + 10000000)' END END;
				SET @FKOrderColumn2 = CASE WHEN @FkOrder = 3 THEN ' MT.OrderBy ' ELSE ' ' + @OrderColumns END;
			END
		END
		SET @FkCondition = '';
		IF ISNULL(@FkDelete, 0) <> 0 
			SET @FkCondition = ' MT.IsDeleted = 0 ';
	
		IF ISNULL(@FkNotActive, 0) <> 0
			SET @FkCondition = CASE WHEN ISNULL(@FkCondition, '') <> '' THEN @FkCondition+ ' AND MT.NotActive = 0 ' ELSE ' MT.NotActive = 0 ' END;

		IF ISNULL(@IsCurrentVersion, 0) <> 0 
			SET @FkCondition = CASE WHEN ISNULL(@FkCondition, '') <> '' THEN @FkCondition+ ' AND MT.IsCurrentVersion = 1 ' ELSE ' MT.IsCurrentVersion = 1 ' END;

		IF @FkCondition = ''
			SET @FkCondition = ' 1=1';
					
		SET @IN_PageIndex = CASE WHEN @IN_PageIndex = 1 THEN 0 ELSE @IN_PageIndex END 
		SET @Limit = ' WHERE LIMIT BETWEEN ' + CAST(@IN_PageIndex + 1 AS VARCHAR(50)) + ' AND ' + CAST(@IN_PageIndex + @IN_PageSize AS VARCHAR(50)) 

		IF @IN_Event = 'FormControl'
		BEGIN
			SELECT @OrderByColumn = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID= @ColumnID AND Name = 'Order By Column' AND IsDeleted = 0;
		END
		ELSE 
		BEGIN
			SELECT @OrderByColumn = ISNULL(Value, '') FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Order By Column' AND IsDeleted = 0;
		END

		IF @OrderByColumn <> ''
		BEGIN 
			IF @IN_DataID <> 0 AND @ControlType IN (24, 25) AND @FkOrder <> 3
			BEGIN
				SET @OrderColumns = ' MT.' + @OrderByColumn;
				SET @FKOrderColumn1 = CASE WHEN @OrderBy = 'ASC' THEN '0' ELSE '1' END;
				SET @FKOrderColumn2 =  CASE WHEN @OrderBy = 'ASC' THEN '1' ELSE '0' END
			END
			ELSE
		 		SET @OrderColumns = ' MT.'+ @OrderByColumn + ',' + @OrderColumns;
		END		

		 IF @IN_ParentControl <> '' AND @AdditionalCondition <> ''
		 BEGIN
			IF CHARINDEX('@', @AdditionalCondition) > 0
				SET @AdditionalCondition = dbo.fn_ConstractDependentConditions('MT.' + @AdditionalCondition, @IN_ParentControl, 0, '', '');
			ELSE
				SET @AdditionalCondition = ' AND MT.' + (@AdditionalCondition+' IN ('+ @IN_ParentControl+ ')');
		 END
		 ELSE IF @AdditionalCondition <> ''
			SET @AdditionalCondition = ' AND ' + 'MT.' + @AdditionalCondition ;

		IF @IN_Event = 'FormControl'
		BEGIN
		
			SELECT @SelectStmt = SUBSTRING((SELECT ',' + '''"' + ColumnName + '":"'' + REPLACE(REPLACE(ISNULL(CAST(' +
				CASE WHEN (FC.FkType = 1 AND FC.ControlType <> 8) THEN ' SUBSTRING((SELECT '','' '+'+'+' CAST(' + FC.FkData + ' AS NVARCHAR(MAX)) FROM CmnCodeMaster CM WHERE CM.Type=''' + FC.FkTable + ''' AND
								(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' + 
									ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0) '+
									' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) ' 
					 WHEN (FC.FkType = 2 AND FC.ControlType <> 8) THEN ' SUBSTRING((SELECT '','' '+'+'+' CAST(' + FC.FkData + ' AS NVARCHAR(MAX)) FROM ' + FC.FkTable + ' JT WHERE ' + 
								'(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +
							
									ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0)'+ 
								CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' THEN '' ELSE 
									CASE WHEN ISNULL(FC.AdditionalConditions, '') LIKE '% NULL%' OR ISNULL(FC.AdditionalConditions, '') LIKE '% NOT NULL%'
												OR ISNULL(FC.AdditionalConditions, '') LIKE '% = %' OR ISNULL(FC.AdditionalConditions, '') LIKE '% IN%' 
											THEN ' AND ' + FC.AdditionalConditions 
											ELSE '' END 
								END +
								CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(JT.IsDeleted, 0) = 0 ' END + 
								CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(JT.NotActive, 0) = 0 ' END + 
								CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(JT.IsCurrentVersion, 1) = 1 ' END +
								' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000)'
					 WHEN FC.FkType = 3 THEN ' SUBSTRING((SELECT '','' + CAST(' + FC.FkColumn + ' AS NVARCHAR(MAX)) + ''|''+' + FC.FkData + '+''|'' + CF.FileName 
								FROM CmnFileUpload CF WHERE ' + FC.FkColumn + ' = MT.' + ColumnName + 
								' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
					WHEN FC.FkType = 0 AND FC.FkData <> '' THEN 
						'CASE WHEN CONVERT(NVARCHAR(MAX), MT.' + FC.FkData +', 105)= ''01-01-1900'' THEN ''''
								ELSE CONVERT(NVARCHAR(MAX), MT.' + FC.FkData + ', 127)END'
				ELSE ' CONVERT(NVARCHAR(MAX), MT.' + ColumnName + ', 127)'
				END + ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'') + ''"''' 
			FROM CmnControlColumns FC 
			WHERE FC.ControlID = @ColumnID AND ISNULL(FC.DependentFlag, 0) = 0 AND FC.IsDeleted = 0
			FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000)
		END
		ELSE IF ISNULL(@IN_ParentGridControl, 0) = 0
		BEGIN
			SELECT @SelectStmt = SUBSTRING((SELECT ',' + '''"' + ColumnName + '":"'' + REPLACE(REPLACE(ISNULL(CAST(' +
				CASE WHEN (FC.FkType = 1 AND FC.ControlType <> 8) THEN ' SUBSTRING((SELECT '','' '+'+'+' CAST(' + FC.FkData + ' AS NVARCHAR(MAX)) FROM CmnCodeMaster CM WHERE CM.Type=''' + FC.FkTable + ''' AND
								(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +
									ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0) '+
									' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
					 WHEN (FC.FkType = 2 AND FC.ControlType <> 8) THEN ' SUBSTRING((SELECT '','' '+'+'+' CAST(' + FC.FkData + ' AS NVARCHAR(MAX)) FROM ' + FC.FkTable + ' JT WHERE ' + 
								'(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +
							
									ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0)'+
								CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' THEN '' ELSE 
									CASE WHEN ISNULL(FC.AdditionalConditions, '') LIKE '% NULL%' OR ISNULL(FC.AdditionalConditions, '') LIKE '% NOT NULL%'
												OR ISNULL(FC.AdditionalConditions, '') LIKE '% = %' OR ISNULL(FC.AdditionalConditions, '') LIKE '% IN%' 
											THEN ' AND ' + FC.AdditionalConditions 
											ELSE '' END
								END +
								CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(JT.IsDeleted, 0) = 0 ' END + 
								CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(JT.NotActive, 0) = 0 ' END + 
								CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(JT.IsCurrentVersion, 1) = 1 ' END +
								' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000)'
					 WHEN FC.FkType = 3 THEN ' SUBSTRING((SELECT '','' + CAST(' + FC.FkColumn + ' AS NVARCHAR(MAX)) + ''|''+' + FC.FkData + '+''|'' + CF.FileName
								FROM CmnFileUpload CF WHERE ' + FC.FkColumn + ' = MT.' + ColumnName +
								' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
					WHEN FC.FkType = 0 AND FC.FkData <> '' THEN 
						'CASE WHEN CONVERT(NVARCHAR(MAX), MT.' + FC.FkData +', 105)= ''01-01-1900'' THEN ''''
								ELSE CONVERT(NVARCHAR(MAX), MT.' + FC.FkData + ', 127)END'
				ELSE ' CONVERT(NVARCHAR(MAX), MT.' + ColumnName + ', 127)'
				END + ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'') + ''"'''
			FROM CmnSearchControlColumns FC 
			WHERE FC.SearchID = @ColumnID AND FC.IsDeleted = 0
			FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000)
		END
		ELSE
		BEGIN
			SELECT @SelectStmt = SUBSTRING((SELECT ',' + '''"' + ColumnName + '":"'' + REPLACE(REPLACE(ISNULL(CAST(' +
				CASE WHEN (FC.FkType = 1 AND FC.ControlType <> 8) THEN ' SUBSTRING((SELECT '','' '+'+'+' CAST(' + FC.FkData + ' AS NVARCHAR(MAX)) FROM CmnCodeMaster CM WHERE CM.Type=''' + FC.FkTable + ''' AND
								(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +
									ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0) '+
									' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
					 WHEN (FC.FkType = 2 AND FC.ControlType <> 8) THEN ' SUBSTRING((SELECT '','' '+'+'+' CAST(' + FC.FkData + ' AS NVARCHAR(MAX)) FROM ' + FC.FkTable + ' JT WHERE ' + 
								'(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +
							
									ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0)'+
								CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' THEN '' ELSE 
									CASE WHEN ISNULL(FC.AdditionalConditions, '') LIKE '% NULL%' OR ISNULL(FC.AdditionalConditions, '') LIKE '% NOT NULL%'
												OR ISNULL(FC.AdditionalConditions, '') LIKE '% = %' OR ISNULL(FC.AdditionalConditions, '') LIKE '% IN%' 
											THEN ' AND ' + FC.AdditionalConditions 
											ELSE '' END
								END +
								CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(JT.IsDeleted, 0) = 0 ' END + 
								CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(JT.NotActive, 0) = 0 ' END + 
								CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(JT.IsCurrentVersion, 1) = 1 ' END +
								' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000)'
					 WHEN FC.FkType = 3 THEN ' SUBSTRING((SELECT '','' + CAST(' + FC.FkColumn + ' AS NVARCHAR(MAX)) + ''|''+' + FC.FkData + '+''|'' + CF.FileName 
								FROM CmnFileUpload CF WHERE ' + FC.FkColumn + ' = MT.' + ColumnName +
								' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) ' 
					WHEN FC.FkType = 0 AND FC.FkData <> '' THEN 
						'CASE WHEN CONVERT(NVARCHAR(MAX), MT.' + FC.FkData +', 105)= ''01-01-1900'' THEN ''''
								ELSE CONVERT(NVARCHAR(MAX), MT.' + FC.FkData + ', 127)END'
				ELSE ' CONVERT(NVARCHAR(MAX), MT.' + ColumnName + ', 127)'
				END + ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'') + ''"''' 
			FROM CmnGridControlColumns FC 
			WHERE FC.ControlID = @ColumnID AND ISNULL(FC.DependentFlag, 0) = 0 AND FC.IsDeleted = 0
			FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000)
		END
		
		IF @IN_SortValues <> ''
		BEGIN
			SET @SortColumn = DBO.fn_SplitString(@IN_SortValues, ',', 1)
			SET @SortType = DBO.fn_SplitString(@IN_SortValues, ',', 2)
		END
		
		IF @IN_Event = 'FormControl'
		BEGIN

			SELECT @CTEColumnnames = SUBSTRING((SELECT ',[' + ColumnName + ']'
											FROM CmnControlColumns FC WHERE FC.ControlID = @ColumnID AND ISNULL(FC.DependentFlag, 0) = 0 AND FC.IsDeleted = 0
											FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000) 

			SELECT @SelectColumnnames = SUBSTRING((SELECT '+ '','' + ISNULL([' + ColumnName + '], '''')'
											FROM CmnControlColumns FC WHERE ControlID = @ColumnID AND ISNULL(FC.DependentFlag, 0) = 0 AND FC.IsDeleted = 0
											FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 9, 4000000000)
		END
		ELSE IF ISNULL(@IN_ParentGridControl, 0) = 0
		BEGIN
			SELECT @CTEColumnnames = SUBSTRING((SELECT ',[' + ColumnName + ']'
											FROM CmnSearchControlColumns FC WHERE FC.SearchID = @ColumnID AND FC.IsDeleted = 0
											FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000) 

			SELECT @SelectColumnnames = SUBSTRING((SELECT '+ '','' + ISNULL([' + ColumnName + '], '''')'
											FROM CmnSearchControlColumns FC WHERE SearchID = @ColumnID AND FC.IsDeleted = 0
											FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 9, 4000000000)
		END
		ELSE
		BEGIN
			SELECT @CTEColumnnames = SUBSTRING((SELECT ',[' + ColumnName + ']'
											FROM CmnGridControlColumns FC WHERE FC.ControlID = @ColumnID AND ISNULL(FC.DependentFlag, 0) = 0 AND FC.IsDeleted = 0
											FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000) 

			SELECT @SelectColumnnames = SUBSTRING((SELECT '+ '','' + ISNULL([' + ColumnName + '], '''')'
											FROM CmnGridControlColumns FC WHERE ControlID = @ColumnID AND ISNULL(FC.DependentFlag, 0) = 0 AND FC.IsDeleted = 0
											FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 9, 4000000000)
		END

		SET @Query = ' ;WITH GridValues ([Limit],' + @CTEColumnnames + ') AS (
							SELECT ROW_NUMBER() OVER (ORDER BY ' + CASE WHEN @IN_SortValues <> '' THEN @SortColumn + ' ' + @SortType 
									WHEN @IN_DataID <> 0 AND @ControlType = 25 THEN 
										' CASE WHEN ' + @KeyColumn + ' IN ( SELECT TOP 1 ' + @KeyColumn + ' FROM ' + @TableName + ' MT '+ ' JOIN ' + @MainTableName + ' ON ' + @KeyColumn + ' = ' + @MainTableName + '.' + @TableColumn 
												+ ' WHERE ' + @MainTableName + '.' + @GridKeyCol + ' = ' + CAST(@IN_DataID AS VARCHAR(50)) + ') THEN ' + @FKOrderColumn1 + ' ELSE ' + @FKOrderColumn2 + ' END ' + @OrderBy + CASE WHEN @OrderByColumn <> '' THEN + ' , ' + @OrderColumns ELSE '' END
									WHEN @IN_DataID <> 0 AND @ControlType = 24 THEN 
										' CASE WHEN ' + @KeyColumn + ' IN ( SELECT ' + @KeyColumn + ' FROM ' + @TableName + ' MT '+ ' JOIN ' + @MainTableName + 
												' ON PATINDEX(CONCAT(''%,'', CAST(' + @KeyColumn + ' AS VARCHAR(50)), '',%''), CONCAT('','',' + @MainTableName + '.' + @TableColumn + ','','')) > 0 
														WHERE ' + @MainTableName + '.' + @GridKeyCol + ' = ' + CAST(@IN_DataID AS VARCHAR(50)) + ') THEN ' + @FKOrderColumn1 + ' ELSE ' + @FKOrderColumn2 + ' END ' + @OrderBy + CASE WHEN @OrderByColumn <> '' THEN + ' , ' + @OrderColumns ELSE '' END						
									WHEN @FkOrder = 3 THEN ' MT.OrderBy '+ @OrderBy ELSE @OrderColumns + ' '+ @OrderBy END +' ), ' +
											+ @SelectStmt + ' FROM ' + @TableName + ' MT ' + ' WHERE ' +@FkCondition + 
									CASE WHEN @ColumnValues = '' THEN ' ' ELSE ' AND (' + @ColumnValues + ') ' END +		
									CASE WHEN @RBSConditions = '' THEN '' ELSE ' AND ' END + @RBSConditions + (CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
											WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END)+ 
													@AdditionalCondition + ')
							SELECT ' + @SelectColumnnames + ' FROM GridValues ' +
								CASE WHEN @IN_DataFillType = 0 THEN '' ELSE @Limit END +
							' ORDER BY [Limit]'
		EXEC (@Query)	

		SET @CountQuery = 'SELECT COUNT(1) FROM ' + @TableName + ' MT '+
												' WHERE ' + @FkCondition+
												CASE WHEN @ColumnValues = '' THEN ' ' ELSE ' AND (' + @ColumnValues + ')' END +
												@AdditionalCondition + 
												CASE WHEN @RBSConditions = '' THEN '' ELSE ' AND ' END + @RBSConditions + (CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
															WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END);

		EXEC (@CountQuery)
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnGridValues]'
GO


CREATE PROCEDURE [dbo].[spCmnGridValues] (
	@IN_Event VARCHAR(100) = '', 
	@IN_FormID INT = 0, 
	@IN_UserID INT = 0, 
	@IN_SessionID VARCHAR(255) = '',
	@IN_DataValue NVARCHAR(300) = '', 
	@IN_DataColumn VARCHAR(1000) = '', 
	@IN_SortValues VARCHAR(300) = '', 
	@IN_PageIndex INT = 0, 
	@IN_PageSize INT = 0, 
	@IN_DataFillType INT = 0, 
	@IN_DataID INT = 0, 
	@IN_GridColumn NVARCHAR(200) = '',
	@IN_ParentControl NVARCHAR(255) = '',
	@IN_FillValue NVARCHAR(100) = '',
	@IN_MonthValue NVARCHAR(200) = '')

AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY 	
		DECLARE @ErrorSeverity NVARCHAR(50) = '',
				@ErrorMessage NVARCHAR(2000) = '',
				@ErrorState NVARCHAR(50) = '',
				@TableName SYSNAME = '',
				@ConditionColumns VARCHAR(MAX) = '',
				@AdditionalCondition NVARCHAR(2000) = '',
				@qry NVARCHAR(MAX) = '',
				@ColumnValues NVARCHAR(4000) = '',
				@SelectStmt NVARCHAR(MAX) = '',
				@CTEColumnNames NVARCHAR(MAX) = '',
				@SelectColumnNames NVARCHAR(MAX) = '',
				@Count INT = 0,
				@PageIndex INT = 0,
				@Total INT = 0,
				@PageLimit INT = 0,
				@Limit VARCHAR(255) = '',
				@KeyColumn SYSNAME = '',
				@ControlID INT = 0,
				@SortColumn SYSNAME = '',
				@SortType VARCHAR(20) = '',
				@ControlType INT = 0,
				@FKType INT = 0,
				@FKTable SYSNAME = '',
				@OrderByColumn VARCHAR(MAX) = '',
				@OrderBy VARCHAR(10) = 'ASC',
				@FilterBy VARCHAR(100) = '',
				@FilterValue INT = 0,
				@FilterTable VARCHAR(100) = '',
				@FilterKey VARCHAR(100) = '',
				@FilterUniqueKey VARCHAR(100) = '',
				@FkDelete BIT = 0,
				@FkNotActive BIT = 0,
				@FkCondition NVARCHAR(MAX) = '',
				@FormType INT = 0,
				@ReportID BIGINT = 0,
				@Source INT = 0,
				@SpName VARCHAR(225) = '',
				@View VARCHAR(225) = '',
				@Table VARCHAR(225) = '',
				@OpenQuery NVARCHAR(MAX) = '',
				@RQuery NVARCHAR(MAX) = '',
				@ActiveCount INT = 0,
				@FkOrder INT = 0,
				@MainTableName VARCHAR(255) = '',
				@RBSConditions NVARCHAR(MAX) = '',
				@SearchQry NVARCHAR(MAX),
				@CountQry NVARCHAR(MAX),
				@SelectStmtQry1 NVARCHAR(MAX),
				@SelectStmtQry2 NVARCHAR(MAX),
				@INParameters NVARCHAR(2000),
				@SQLSortValues NVARCHAR(MAX),
				@SQLParentControl NVARCHAR(MAX),
				@SQLConditionColumns NVARCHAR(MAX),
				@Mode INT = 0,
				@IsCurrentVersion BIT = 0,
				@FilterConditions NVARCHAR(1000),
				@SQLFilterConditions NVARCHAR(MAX),
				@SQLFilterTable NVARCHAR(MAX),
				@SQLFilterBy NVARCHAR(MAX),
				@FkColumn VARCHAR(100),
				@FillValue VARCHAR(100),
				@DataQry NVARCHAR(MAX),
				@InsQry NVARCHAR(MAX),
				@SeltQry NVARCHAR(MAX),
				@FillPageIndex INT,
				@DataCount INT,
				@Min INT,
				@FillDataCnt INT,
				@IsDeleted BIT,
				@NotActive BIT,
				@RBSBranchID INT,
				@StartDate DATE,
				@EndDate DATE,
				@Year INT,
				@Month INT; 
						
		SET ANSI_PADDING ON;

		SELECT @RBSBranchID = ISNULL(ED.BranchID, '') FROM CmnUserDetails UD
          		JOIN MstEmployeeDetails ED ON ED.ReferenceID = UD.TypeID	
        WHERE UD.UserID = @IN_UserID;

		SELECT @FormType = FormType, @ControlID = ControlID, @ControlType = ControlType, @SearchQry = Query, @CountQry = CountQuery, @SelectStmtQry1 = FilterQuery, @SelectStmtQry2 = SubQuery,
			   @FilterBy = ISNULL(FilterBy,''), @FilterTable = ISNULL(FilterTable,''), @FilterKey = ISNULL(FilterKey,''), @FilterUniqueKey = ISNULL(FilterUniqueKey,''),
			   @FkOrder = ISNULL(FkOrder, 0), @FkDelete = ISNULL(FKDelete, 0), @FkNotActive = ISNULL(FkNotActive, 0), @KeyColumn = ISNULL(KeyColumn, ''), @AdditionalCondition = ISNULL(AdditionalCondition, ''), 
			   @TableName = ISNULL(TableName, ''), @MainTableName = ISNULL(MainTableName, ''), @IsCurrentVersion = ISNULL(FkVersion, 0), @FilterConditions = ISNULL(DataCondition, ''),
			   @IsDeleted = ISNULL(FkDelete, 0), @NotActive = ISNULL(FkNotActive, 0)
		FROM CmnFormQuery
		WHERE FormID = @IN_FormID AND SPName = 'spCmnGridValues|' + @IN_GridColumn  AND DeleteFlag = 0;
		
		IF @FormType = 8 
		BEGIN
			SELECT @ReportID = RC.ReferenceID, @Source = RC.Source, @SpName = RC.SpName, @Table = RC.TableName, @View = RC.ViewName, @OpenQuery = RC.Query
			FROM ReportConfiguration RC 
			WHERE RC.FormID = @IN_FormID 
				AND RC.IsDeleted = 0 AND RC.NotActive = 0 AND RC.IsCurrentVersion = 1;

			IF @Source = 1 
			BEGIN
				SET @TableName = '##tempReportDataSpTable';
				IF OBJECT_ID('tempdb..##tempReportDataSpTable') IS NOT NULL DROP TABLE ##tempReportDataSpTable;
				SET @RQuery = 'EXEC ' + @SpName + ' 0, ' + @TableName + '';
				EXEC (@RQuery);
			END
			ELSE IF @Source = 2
				SET @TableName = @View;
			ELSE IF @Source = 3
				SET @TableName = @Table;
			ELSE IF @Source = 4 
			BEGIN
				SET @TableName = '##tempReportDataTable';
				IF OBJECT_ID('tempdb..##tempReportDataTable') IS NOT NULL DROP TABLE ##tempReportDataTable;
				SET @RQuery = ('SELECT * INTO ##tempReportDataTable FROM (' + @OpenQuery + ') TE');			
				EXEC (@RQuery);
			END
		END;

		IF @FilterBy <> ''
		BEGIN
			SELECT @FilterValue = ISNULL(ED.BranchID, '') FROM CmnUserDetails UD
        			JOIN MstEmployeeDetails ED ON ED.ReferenceID = UD.TypeID	
        	WHERE UD.UserID = @IN_UserID;
		END
		IF ISNULL(@FilterValue, '') = 0 
			SET @FilterBy = ''

		SET @ConditionColumns = '';
		IF @IN_Event <> 'RadioList' AND @IN_Event <> 'CheckList'
		BEGIN
			SELECT @ActiveCount = COUNT(1) FROM CmnSearchParameterProcess WHERE SessionID = @IN_SessionID AND TableColumn = 'MT.NotActive';
			SET @ConditionColumns = ISNULL(SUBSTRING((SELECT ' AND ' + CASE WHEN DP.ControlType = 'Textbox' OR DP.ControlType = 'Multiline Textbox' THEN 
																				 DP.ColumnName + ' LIKE ''%' + ISNULL(DP.ColumnValue, '') + '%''' 
																			WHEN DP.ControlType = 'Check Listbox' THEN
																				'(' + REPLACE(DP.ColumnValue, '<col>', ''','' + CAST(' + DP.ColumnName  + ' AS VARCHAR(200)) + '',''' + ' LIKE ') + ')'
																			WHEN DP.ControlType IN ('Checklist Grid') THEN
																				'EXISTS (SELECT 1 FROM STRING_SPLIT(''' + ISNULL(DP.ColumnValue, '') + ''', '','') AS SplitValues
																						WHERE PATINDEX(''%,'' + SplitValues.value + '',%'', '','' + CAST(' + DP.ColumnName + ' AS VARCHAR(2000)) + '','') > 0)'
																			WHEN DP.ControlType IN ('Radiolist Grid') THEN
																				'(PATINDEX(''%,'' + CAST(' + ISNULL(DP.ColumnValue, '') + ' AS VARCHAR(2000)) + '',%'', '','' + CAST(' + ISNULL(DP.ColumnName, '') + ' AS VARCHAR(2000)) + '','') > 0)'
																			WHEN DP.ControlType = 'Date' THEN 
																			CASE WHEN CHARINDEX('AND', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn+ '  BETWEEN '+ ISNULL(DP.ColumnValue, '')+ ')') 
																					WHEN CHARINDEX('<=', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn + ' '+ SUBSTRING(DP.ColumnValue, 1, LEN(DP.ColumnValue) -1) + ' 23:59:59:999'')')
																					WHEN CHARINDEX('>=', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn + ' '+ DP.ColumnValue+ ')')
																				ELSE ('('+DP.TableColumn+ ' >= '+ ISNULL(DP.ColumnValue, '')+ ') AND ('+DP.TableColumn+ ' <= '+ SUBSTRING(DP.ColumnValue, 1, LEN(DP.ColumnValue) -1) + ' 23:59:59:999'')') END 
																			WHEN DP.ControlType = 'DateTime' THEN 
																				CASE WHEN CHARINDEX('AND', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn+ ' BETWEEN '+ ISNULL(DP.ColumnValue, '')+ ')') 
																					WHEN CHARINDEX('>=', DP.ColumnValue) > 0 OR CHARINDEX('<=', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn + ' '+ ISNULL(DP.ColumnValue, '')+ ')')
																				ELSE ('('+DP.TableColumn+ ' = '+ ISNULL(DP.ColumnValue, '')+ ')') END
																			WHEN DP.ControlType = 'Checkbox' THEN (DP.ColumnName+ ' = '+ ISNULL(DP.ColumnValue, 0))
																			ELSE DP.ColumnName + ' = ''' + ISNULL(DP.ColumnValue, '') + '''' END 
													FROM CmnSearchParameterProcess DP WITH (NOLOCK)
													WHERE DP.SessionID = @IN_SessionID 
													ORDER BY CASE WHEN DP.ControlType IN ('Date','DateTime') THEN 1 
													              WHEN DP.ControlType IN ('Check Listbox','Checklist Grid','Radiolist Grid') THEN 2 
														     ELSE 3 END, DP.TableColumn
													FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '');
			
		    IF @ActiveCount > 0
			BEGIN
			   SET @FkNotActive = 0;
			END
		END
		
		-- Order By		
		SELECT @OrderBy = ISNULL(Value, 'ASC') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Order By' AND IsDeleted = 0;
		IF @FkOrder = 1
		BEGIN
			SET @OrderBy = 'ASC';
		END
		ELSE IF @FkOrder = 2
		BEGIN
			SET @OrderBy = 'DESC';
		END
		IF @FormType = 8
			SET @OrderBy = '';

		-- @SQLFkCondition@ --
		SET @FkCondition = '';
		IF ISNULL(@FkDelete, 0) <> 0 
			SET @FkCondition = ' MT.IsDeleted = 0 ';	
		IF ISNULL(@FkNotActive, 0) <> 0		
			SET @FkCondition = CASE WHEN ISNULL(@FkCondition, '') <> '' THEN @FkCondition + ' AND MT.NotActive = 0 ' ELSE ' MT.NotActive = 0 ' END;
		IF ISNULL(@IsCurrentVersion, 0) <> 0 
			SET @FkCondition = CASE WHEN ISNULL(@FkCondition, '') <> '' THEN @FkCondition + ' AND MT.IsCurrentVersion = 1 ' ELSE ' MT.IsCurrentVersion = 1 ' END;			
		IF @FkCondition = ''
			SET @FkCondition = ' 1=1';

		IF @ControlType = 24 OR @ControlType = 25
		BEGIN
			SET @IN_DataID = 0;
		END
		
		EXEC spCmnGetFormTableRBSCondition @IN_FormID, @IN_UserID, @MainTableName, @TableName, @RBSConditions OUTPUT;
		IF @RBSConditions <> ''
		BEGIN
			SET @RBSConditions = REPLACE(@RBSConditions, 'ISNULL(CompanyID', 'ISNULL(MT.CompanyID');
			SET @RBSConditions = REPLACE(@RBSConditions, 'dbo.fn_DataSplit(', 'dbo.fn_DataSplit(MT.');	
			SET @RBSConditions = ' AND ' + @RBSConditions;
		END
			
		IF @IN_DataID <> 0 AND @OrderBy <> 'DESC'
		BEGIN
			SET @Count = 0;
			SET @qry = 'SELECT @Cont = COUNT(1) FROM ' + @TableName + ' MT WHERE ' + @FkCondition +
											CASE WHEN @ConditionColumns = '' THEN '' ELSE ' ' END + @ConditionColumns + 
											CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND ' END + @AdditionalCondition + @RBSConditions + 
											CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
												WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END+
											CASE WHEN @FilterBy <> '' AND ISNULL(@FilterValue, '') <> '' AND ISNULL(@FilterTable, '') = '' THEN ' AND MT.' + @FilterBy + ' = ' + CONVERT(VARCHAR(MAX), @FilterValue) ELSE ' ' END;
			EXEC sp_executesql @qry, N'@Cont INT OUTPUT', @Count OUTPUT;

			SET @PageIndex = @Count / @IN_PageSize;
			SET @Mode = @Count % @IN_PageSize;			
			IF @Mode = 0 
			BEGIN
				SET @PageLimit = (@PageIndex -1) * @IN_PageSize;
			END
			ELSE
			BEGIN
				SET @PageLimit = (@PageIndex * @IN_PageSize) + 1;
			END	

			IF @PageLimit < 0
			BEGIN
				SET @PageLimit = 0;
			END 

			SET @Total = @Count % @IN_PageSize;
			SET @PageLimit = CASE WHEN @IN_DataFillType = 0 THEN @PageLimit + 1 ELSE @PageLimit END;
			SET @Limit = ' WHERE LIMIT BETWEEN ' + CAST(@PageLimit AS VARCHAR(50)) + ' AND ' + CAST(@PageLimit + @IN_PageSize AS VARCHAR(50));
		END
		ELSE
		BEGIN
			SET @IN_PageIndex = CASE WHEN @IN_PageIndex = 1 THEN 0 ELSE @IN_PageIndex END;
			SET @Limit = ' WHERE LIMIT BETWEEN ' + CAST(@IN_PageIndex + 1 AS VARCHAR(50)) + ' AND ' + CAST(@IN_PageIndex + @IN_PageSize AS VARCHAR(50));

			IF @IN_DataFillType = 1 AND @IN_PageSize <> 0
			BEGIN
				SET @FkColumn = (SELECT FkColumn FROM CmnFormControls WHERE ControlID = @ControlID);  

				IF @IN_FillValue <> '' AND ISNULL(@FkColumn, '') <> ''
				BEGIN
					  SET @IN_PageIndex = 1;
					  SET @Limit = ' LIMIT BETWEEN ' + CAST((CASE WHEN @IN_PageIndex = 1 THEN '0' ELSE @IN_PageIndex END) AS VARCHAR(50)) + ' AND ' + CAST(@IN_PageSize AS VARCHAR(50));
					  SET @FillValue = @IN_FillValue;
					  					  
					  IF OBJECT_ID('tempdb..#tempTableData') IS NOT NULL
							DROP TABLE #tempTableData;

					  CREATE TABLE #tempTableData (
							ParentValue NVARCHAR(255) NULL,
							OrderBy INT NULL
					  );
  
					  SET @qry = ('SELECT @ToCnt = COUNT(1) FROM '+ @TableName+' MT WHERE '+ @FkCondition+ ' '+
									CASE WHEN @ConditionColumns = '' THEN '' ELSE ' ' END+ @ConditionColumns+
									CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND ' END + @AdditionalCondition +
									CASE WHEN @RBSConditions = '' THEN '' ELSE @RBSConditions END+ 
									CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
										WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END+
									CASE WHEN @FilterBy <> '' AND ISNULL(@FilterValue, '') <> '' AND ISNULL(@FilterTable,'') = '' THEN (' AND MT.'+ @FilterBy+ ' = '+ CONVERT(VARCHAR(50), @FilterValue)) ELSE ' ' END);  
					  EXEC sp_executesql @qry, N'@ToCnt INT OUTPUT', @Count OUTPUT;
          
					  SET @DataQry = ('SELECT @FDataCnt = COUNT(1) FROM '+ @TableName+' MT WHERE '+ @FkCondition+ ' '+
									CASE WHEN @ConditionColumns = '' THEN '' ELSE ' ' END+ @ConditionColumns+
									CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND ' END + @AdditionalCondition +
									CASE WHEN @RBSConditions = '' THEN '' ELSE @RBSConditions END+ 
									CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
										WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END+
									CASE WHEN @FilterBy <> '' AND ISNULL(@FilterValue, '') <> '' AND ISNULL(@FilterTable,'') = '' THEN (' AND MT.'+ @FilterBy+ ' = '+ CONVERT(VARCHAR(50), @FilterValue)) ELSE ' ' END+ ' AND '+ @FkColumn +' = '''+ @IN_FillValue + '''');  
						EXEC sp_executesql @DataQry, N'@FDataCnt INT OUTPUT', @FillDataCnt OUTPUT;
          
					  IF @FillDataCnt > 0
					  BEGIN
						SET @Min = 0;
						WHILE @Count > @Min
						BEGIN
							SET @Min = @Min + 1;
							TRUNCATE TABLE #tempTableData;

							SET @InsQry = (';WITH GridFill AS (SELECT ROW_NUMBER() OVER ( ORDER BY ' +CASE WHEN @FkOrder = 1 THEN (@FkColumn + ' ASC') WHEN @FkOrder = 2 THEN (@FkColumn + ' DESC') WHEN @FkOrder = 3 THEN 'OrderBy ASC' 
												WHEN @FkOrder = 4 OR @FkOrder = 5 THEN (@FkColumn + ' ' + @OrderBy) END +
												') AS LIMIT, '+@FkColumn + ' AS Value FROM '+ @TableName+' MT WHERE '+ @FkCondition+ ' '+
												CASE WHEN @ConditionColumns = '' THEN '' ELSE ' ' END+ @ConditionColumns+
												CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND ' END + @AdditionalCondition +
												CASE WHEN @RBSConditions = '' THEN '' ELSE ' ' + @RBSConditions END+ 
												CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
													WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END+
												CASE WHEN @FilterBy <> '' AND ISNULL(@FilterValue, '') <> '' AND ISNULL(@FilterTable,'') = '' THEN (' AND MT.'+ @FilterBy+ ' = '+ CONVERT(VARCHAR(50), @FilterValue)) ELSE ' ' END+ ') INSERT INTO #tempTableData(ParentValue,OrderBy) SELECT Value, LIMIT FROM GridFill WHERE '+ @Limit);
							EXEC sp_executesql @InsQry

							SET @SeltQry = ('SELECT @DCount = COUNT(1) FROM #tempTableData WHERE ParentValue = '''+ @IN_FillValue + ''''); 
							EXEC sp_executesql @SeltQry, N'@DCount INT OUTPUT', @DataCount OUTPUT;

							SET @FillPageIndex = @Min;
          
							IF @DataCount > 0
							BEGIN
								IF OBJECT_ID('tempdb..#tempTableData') IS NOT NULL
									DROP TABLE #tempTableData;
								BREAK;
							END

							SET @IN_PageIndex = ((CASE WHEN @IN_PageIndex = 0 THEN 1 ELSE @FillPageIndex END) * @IN_PageSize);
             
							SET @Limit = (' LIMIT BETWEEN '+ CAST(@IN_PageIndex AS VARCHAR(50))+ ' AND '+ CAST(CAST(@IN_PageIndex AS INT)+CAST(@IN_PageSize AS INT)  AS VARCHAR(50)));                           
						END
					END
				  ELSE
				  BEGIN
					SET @Limit = (' LIMIT BETWEEN 0 AND '+ CAST(@IN_PageSize AS VARCHAR(50)));  
					SET @FillPageIndex = 1;
				  END     
				  SET @Limit = ' WHERE ' + @Limit;  
				END
			  END
		END 		

		SELECT @OrderByColumn = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Order By Column' AND IsDeleted = 0;
		IF @FormType = 8
		BEGIN
			SET @KeyColumn = SUBSTRING((SELECT ',' + 'MT.' + RCC.ColumnName + ' ' + CASE WHEN RCC.OrderType = 1 THEN 'ASC' ELSE 'DESC' END
										FROM ReportResultColumnConfig RCC
										WHERE RCC.ReportID = @ReportID AND ISNULL(RCC.ResultOrder, 0) > 0
											AND RCC.IsDeleted = 0 AND RCC.NotActive = 0 AND RCC.IsCurrentVersion = 1
										ORDER BY RCC.ResultOrder FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000);

			IF ISNULL(@KeyColumn, '') = ''
			BEGIN
				SELECT TOP 1 @KeyColumn = CONCAT('MT.', RCC.ColumnName, ' ') 
				FROM ReportResultColumnConfig RCC
				WHERE RCC.ReportID = @ReportID
					AND RCC.IsDeleted = 0 AND RCC.NotActive = 0 AND RCC.IsCurrentVersion = 1
				ORDER BY RCC.ColumnOrder;
			END
		END
		ELSE IF @OrderByColumn <> ''
		BEGIN 
		 	SET @KeyColumn = 'MT.' + @OrderByColumn + ',' + @KeyColumn;
		END
				
		IF @IN_SortValues <> ''
		BEGIN
			SET @SortColumn = DBO.fn_SplitString(@IN_SortValues, ',', 1);
			SET @SortType = DBO.fn_SplitString(@IN_SortValues, ',', 2);
		END

		-- @SQLFilterTable@ --
		SET @SQLFilterTable = CASE WHEN @FilterTable <> '' AND @FilterBy <> '' THEN (' JOIN '+ @FilterTable + ' JT ON JT.' + @FilterUniqueKey + ' = CONVERT(VARCHAR(MAX), MT.' + @FilterKey + ') AND JT.' + @FilterBy + ' = ' + CONVERT(VARCHAR(MAX), @FilterValue) + ' ') ELSE '' END;
		-- @SQLFilterBy@ --
		SET @SQLFilterBy = CASE WHEN @FilterBy <> '' AND ISNULL(@FilterValue, 0) > 0 AND ISNULL(@FilterTable, '') = '' THEN ' AND MT.' + @FilterBy + ' = '+ CONVERT(VARCHAR(MAX), @FilterValue) + ' ' ELSE ' ' END;
		-- @SQLSortValues@ --
		IF @IN_SortValues <> ''
			SET @SQLSortValues = @SortColumn + ' ' + @SortType;
		ELSE IF @FkOrder = 3
			SET @SQLSortValues = ' MT.OrderBy ' + @OrderBy;
		ELSE
			SET @SQLSortValues = @KeyColumn + ' ' + @OrderBy;
		-- @SQLColumnValues@ --
		SET @ColumnValues = '';
		IF @IN_DataColumn <> '' AND @IN_DataValue <> ''
		BEGIN
			SET @ColumnValues = REPLACE(@IN_DataColumn, ',', ' LIKE ' + '''%' +  @IN_DataValue + '%''' + ' OR ');
			SET @ColumnValues = LEFT(@ColumnValues, LEN(@ColumnValues) - 3) + '';
			SET @ColumnValues = ' AND (' + @ColumnValues + ')';
		END
		-- @SQLParentControl@ --
		IF (@IN_ParentControl <> '') AND (@AdditionalCondition <> '')
			SET @SQLParentControl = ' IN ('+ @IN_ParentControl + ')';
		ELSE
			SET @SQLParentControl = '';
		-- @SQLConditionColumns@ --
		IF @ConditionColumns = ''
			SET @SQLConditionColumns = '';
		ELSE
			SET @SQLConditionColumns = ' ' + @ConditionColumns;		
		-- @SQLFilterCondition@ --
		IF  (@IN_ParentControl <> '') AND (@FilterConditions <> '')
			SET @SQLFilterConditions = ' AND ' + @FilterConditions + ' IN (' + @IN_ParentControl + ') ';
		ELSE 
			SET @SQLFilterConditions = '';
		-- @SQLSelectStmt@ --
		IF @IN_Event <> 'RadioList' AND @IN_Event <> 'CheckList'
			SET @SelectStmt = @SelectStmtQry1;
		ELSE
			SET @SelectStmt = @SelectStmtQry2;
		-- @SQLLimit@ --
		IF @IN_DataFillType = 0
			SET @Limit = '';

		IF (@IN_DataFillType = 1 AND @IN_PageIndex = 0 AND @IN_PageSize = 0)
		BEGIN
			SET @Limit = '';
			IF (@IN_MonthValue <> '')
			BEGIN
				SET @Year = YEAR(CONVERT(DATE, '01 ' + @IN_MonthValue));
				SET @Month = MONTH(CONVERT(DATE, '01 ' + @IN_MonthValue));
				SET @StartDate = DATEADD(MONTH, DATEDIFF(MONTH, 0, DATEFROMPARTS(@Year, @Month, 1)), 0);
				SET @EndDate = EOMONTH(DATEFROMPARTS(@Year, @Month, 1));
			END
			ELSE
			BEGIN
				SET @StartDate  = DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0); 
				SET @EndDate  = EOMONTH(GETDATE());
			END
		END
		ELSE
		BEGIN
			SET @StartDate  = ''; 
			SET @EndDate  = ''; 
		END
		
		-- Prepare/Execute Data Query
		SET @qry = REPLACE(@SearchQry, '@SQLSortValues@', @SQLSortValues);
		SET @qry = REPLACE(@qry, '@SQLSelectStmt@', @SelectStmt);
		SET @qry = REPLACE(@qry, '@SQLFkCondition@', @FkCondition);
		SET @qry = REPLACE(@qry, '@SQLFilterTable@', @SQLFilterTable);
		SET @qry = REPLACE(@qry, '@SQLFilterBy@', @SQLFilterBy);
		SET @qry = REPLACE(@qry, '@SQLColumnValues@', @ColumnValues);
		SET @qry = REPLACE(@qry, '@SQLParentControl@', @SQLParentControl);
		SET @qry = REPLACE(@qry, '@SQLConditionColumns@', @SQLConditionColumns);
		SET @qry = REPLACE(@qry, '@SQLLimit@', @Limit);	
		SET @qry = REPLACE(@qry, '@SQLStartDate@', @StartDate);
		SET @qry = REPLACE(@qry, '@SQLEndDate@', @EndDate);
		SET @qry = REPLACE(@qry, '@SQLEvent@', @IN_Event);
		SET @qry = REPLACE(@qry, '@UserID', @IN_UserID);
		SET @qry = REPLACE(@qry, '@SQLRBSConditions@', @RBSConditions + (CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
						WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END));
		SET @qry = REPLACE(@qry, '@SQLFilterCondition@', @SQLFilterConditions);
		EXEC (@qry);

		-- Prepare/Execute Count Query
		SET @qry = REPLACE(@CountQry, '@SQLFkCondition@', @FkCondition);
		SET @qry = REPLACE(@qry, '@SQLFilterTable@', @SQLFilterTable);
		SET @qry = REPLACE(@qry, '@SQLFilterBy@', @SQLFilterBy);
		SET @qry = REPLACE(@qry, '@SQLColumnValues@', @ColumnValues);
		SET @qry = REPLACE(@qry, '@SQLParentControl@', @SQLParentControl);
		SET @qry = REPLACE(@qry, '@SQLConditionColumns@', @SQLConditionColumns);
		SET @qry = REPLACE(@qry, '@UserID', @IN_UserID);
		SET @qry = REPLACE(@qry, '@SQLRBSConditions@', @RBSConditions + (CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
						WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END));
		SET @qry = REPLACE(@qry, '@SQLFilterCondition@', @SQLFilterConditions);
		EXEC (@qry);

		SELECT @FillPageIndex, @FillValue

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
		SET @INParameters = '''' + @IN_Event + ''', ' + CAST(@IN_FormID AS VARCHAR(10)) + ', ' + CAST(@IN_UserID AS VARCHAR(10)) + ', ''' + @IN_SessionID + ''', ''' + @IN_DataValue + ''', ''' +
							@IN_DataColumn + ''', ''' + @IN_SortValues + ''', ' + CAST(@IN_PageIndex AS VARCHAR(10)) + ', ' + CAST(@IN_PageSize AS VARCHAR(10)) + ', ' + CAST(@IN_DataFillType AS VARCHAR(10)) + ', ' + CAST(@IN_DataID AS VARCHAR(10)) + ', ' +
							'''' + @IN_GridColumn + ''', ''' + @IN_ParentControl + '''';
		EXEC spCmnHandleException @IN_FormID, 'spCmnGridValues', @qry, @INParameters, @ErrorMessage, @ErrorSeverity, @ErrorState;
	END CATCH
END 

GO
PRINT N'Creating [dbo].[spCmnHeartBeat]'
GO

CREATE PROCEDURE [dbo].[spCmnHeartBeat](
	@IN_SessionID NVARCHAR(500),
	@IN_UserID INT,
	@IN_IsExpired BIT
)
AS
BEGIN
SET NOCOUNT ON

	BEGIN TRY
		DECLARE @Message NVARCHAR(50),
				@ErroMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@UTCTime DATETIME = GETUTCDATE(),
				@MultipleLogin BIT = 0
				
		IF @IN_IsExpired = 1
		BEGIN
			UPDATE CmnLoginHistory  
			SET	UserStatusID = 2, 
				LogoutTime = @UTCTime, 
				LogoutTypeID = 1,
				Remarks='W0004' 
			WHERE SessionID = @IN_SessionID AND UserID = @IN_UserID AND UserStatusID = 1
		END

		SELECT @MultipleLogin = CPP.MultipleLogin
		FROM CmnPasswordPolicy CPP WHERE ISNULL(CPP.IsDeleted,0) = 0;	

		IF EXISTS(SELECT SessionID FROM CmnLoginHistory WHERE SessionID = @IN_SessionID AND UserID = @IN_UserID AND UserStatusID = 1)
			SET @Message = 'W0005'
		ELSE
			SET @Message = 'W0004'

		SELECT @Message	

	END TRY
	BEGIN CATCH

		SELECT @ErroMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE()

		RAISERROR (@ErroMessage, @ErrorSeverity, @ErrorState)

	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnIsValidSilentLogin]'
GO

CREATE PROCEDURE [dbo].[spCmnIsValidSilentLogin](
 @IN_UserName NVARCHAR(200),
 @IN_Token NVARCHAR(500))
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		DECLARE @ErrorMessage VARCHAR(2000),
						@ErrorSeverity VARCHAR(50),
						@ErrorState	VARCHAR(50),
						@TimeStamp DATETIME = GETUTCDATE()

		UPDATE SL
		SET [Status] = CASE WHEN SL.ExpiryDate >= @TimeStamp THEN 'S' ELSE 'F' END,
			IsAuthenticated = 1
		FROM CmnSilentLoginTracking SL
		  JOIN CmnUserDetails UD ON UD.UserID = SL.UserID AND ISNULL(UD.IsLocked, 0) = 0 AND ISNULL(UD.IsDeleted, 0) = 0
		WHERE UD.Username = @IN_UserName AND SL.Token = @IN_Token AND SL.IsAuthenticated = 0 AND SL.Direction = 'OUT'

		SELECT Status
		FROM CmnSilentLoginTracking WHERE Token = @IN_Token AND Direction = 'OUT'

	END TRY
	BEGIN CATCH
	  SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnListGridControls]'
GO

CREATE PROCEDURE [dbo].[spCmnListGridControls](
	@IN_ControlID BIGINT, 
	@IN_TableColumn VARCHAR(100), 
	@IN_FormID INT, 
	@IN_Language VARCHAR(50), 
	@IN_Device VARCHAR(50), 
	@IN_UserID INT)
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
		
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@GCount INT = 0,
				@OutString NVARCHAR(MAX) = '',
				@Min INT = 0,
				@Max INT = 0,
				@Query  NVARCHAR(MAX) = '',
				@ValueString NVARCHAR(MAX) = '',
				@VQuery NVARCHAR(MAX) = '',
				@UserProfileID INT = 0,
				@CntrlPropString NVARCHAR(MAX) = '',
				@CPQuery NVARCHAR(MAX) = '',
				@DecimalLength SMALLINT = 0

		IF ISNULL(@IN_Language, '') <> ''
			SET @UserProfileID =  ISNULL((SELECT TOP 1 CodemasterID FROM CmnCodeMaster WHERE Type = 'Languages' AND Description = @IN_Language AND ISNULL(IsDeleted, 0) = 0), 0);
	
		SET @DecimalLength = ISNULL((SELECT TOP 1 CD.DecimalLength FROM MstCompanyDetails MC JOIN MstCountryDetails CD ON CD.ReferenceID = MC.CurrencyID WHERE MC.ParentCompanyID IS NULL ORDER BY MC.ReferenceID DESC), 4);
  SET @GCount = 0

  IF OBJECT_ID('tempdb..#tempControls') IS NOT NULL
		DROP TABLE #tempControls

  CREATE TABLE #tempControls (
    GNum INT NULL,
    ColumnName SYSNAME NULL,
    DisplayName NVARCHAR(255) NULL,
    ControlType NVARCHAR(255) NULL,
	ControlTypeId INT NULL,   
    DataType NVARCHAR(100) NULL,  
    ControlOrder INT NULL,
    IsIdentity BIT NULL,
    IsMandatory BIT NULL,
    [Readonly] BIT NULL,
    Visibility BIT NULL,
    IsSelectOption BIT NULL,
    IsDmlControl BIT NULL,
    UniqueGroup INT NULL,   
    MaxLength INT NULL,
    ControlEvent NVARCHAR(MAX) NULL,      
    DQuery NVARCHAR(MAX) NULL,
    DataSource NVARCHAR(MAX) NULL,
    VQuery NVARCHAR(MAX) NULL,
    ControlValue NVARCHAR(MAX) NULL,
    DefaultValue NVARCHAR(500) NULL,
	MaxRange NVARCHAR(2000) NULL,
    ValidationEvent NVARCHAR(500) NULL,
    IsSearchApplicable BIT NULL,
    AttachmentPath NVARCHAR(1000) NULL,
	ControlProperty NVARCHAR(MAX) NULL,
	ColumnWidth VARCHAR(4) NULL)	

  INSERT INTO #tempControls
    SELECT  0 AS GNum, GC.ColumnName, CASE WHEN ISNULL(GM.Name, '') <> '' THEN GM.Name ELSE GC.DisplayName END,
     CT.TypeValues AS ControlType, CT.CodemasterID AS ControlTypeId, DT.TypeValues AS DataType, GC.ColumnOrder, GC.IsIdentity, GC.IsMandatory, GC.Readonly, GC.Visibility, GC.SelectApplicable, GC.IsDmlControl, GC.UniqueGroup, GC.MaxLength, GC.[Events],      
			'' AS DQuery, '' AS DataSource, '' as VQuery, '' AS ControlValue, GC.DefaultValue, GC.MaxRange, GC.ValidationEvent, GC.SearchApplicable, GC.AttachmentPath, 
			CASE WHEN (SELECT COUNT(1) FROM CmnColumnProperty WHERE ColumnID = GC.ColumnID) <> 0 THEN    
													' SET @DOUTPRP = ISNULL(SUBSTRING((SELECT '','' + (''{"Control":"''+  CP.Name  +''","Value":"''+ REPLACE(REPLACE(CP.Value, ''\'', ''\\''),''"'', ''\"'') +''"}'')
																											FROM CmnColumnProperty CP 
																											WHERE CP.ColumnID = ''' + CAST(CC.ColumnID AS VARCHAR(50)) + ''' AND CP.IsDeleted = 0
																											FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
			ELSE '' END AS ControlProperty, GC.ColumnWidth
    FROM CmnControlColumns CC 
		JOIN CmnGridControlColumns GC ON GC.ControlID = CC.ColumnID AND ISNULL(GC.DependentFlag, 0) = 0 AND GC.IsDeleted = 0
  		JOIN CmnCodeMaster CT ON CT.Type = 'Control Type' AND CT.CodemasterID = GC.ControlType AND CT.IsDeleted = 0
  		JOIN CmnCodeMaster DT ON DT.Type = 'Data Type' AND DT.CodemasterID = GC.DataType AND DT.IsDeleted = 0
		LEFT JOIN CmnGridColumnsMultiLingual GM ON GM.ColumnID = GC.ColumnID AND GM.LanguageID = @UserProfileID AND GM.IsDeleted = 0 
  	WHERE CC.ColumnID = @IN_ControlID AND (CC.ControlType = 24 OR CC.ControlType = 25) AND CC.IsDeleted = 0;

	  UPDATE #tempControls
	  SET @GCount = GNum = @GCount + 1
	  WHERE DQuery <> '' OR VQuery <> '' OR ControlProperty <> '';  
	  
	  SET @Min = 0;
	  SET @Max = 0;
	  SELECT @Min = MIN(GNum), @Max = MAX(GNum) FROM #tempControls WHERE GNum <> 0;

	  WHILE (@Min <> 0 AND @Min <= @Max)
		BEGIN
			SET @OutString = ''
			SET @Query = ''
			SELECT @Query = DQuery FROM #tempControls WHERE GNum = @Min;
	      
			
			IF (@Query <> '')
			BEGIN
				EXEC sp_executesql @Query, N'@DQOut NVARCHAR(MAX) OUTPUT', @OutString OUTPUT
			END

			SET @ValueString = ''
			SET @VQuery = ''
			SELECT @VQuery = VQuery FROM #tempControls WHERE GNum = @Min;
	   
			IF (@VQuery <> '')
			  EXEC (@VQuery)

			UPDATE #tempControls
			SET DataSource = @OutString, ControlValue = @ValueString
			WHERE GNum = @Min;

			SET @CntrlPropString = ''
			SELECT @CPQuery = ControlProperty FROM #tempControls WHERE GNum = @Min  
			
			IF @CPQuery <> '' 
				EXEC sp_executesql @CPQuery, N'@DOUTPRP NVARCHAR(MAX) OUTPUT', @CntrlPropString OUTPUT   
	  
			UPDATE #tempControls SET ControlProperty = @CntrlPropString WHERE GNum = @Min

			SET @Min = @Min + 1
		END
 
		SELECT ColumnName, DisplayName, ControlType, ControlTypeId, DataType, IsIdentity, IsMandatory, [Readonly], Visibility, IsSelectOption, IsDmlControl, UniqueGroup, MaxLength, ControlEvent, 
			ControlValue, '[' + ISNULL(DataSource, '') + ']' AS DataSource, DefaultValue, MaxRange, ValidationEvent, IsSearchApplicable, AttachmentPath, ControlOrder, '[' + ISNULL(ControlProperty, '') + ']' AS ControlProperty, ColumnWidth
		FROM #tempControls ORDER BY ControlOrder;  

	END TRY

	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnLoginRequest]'
GO

CREATE PROCEDURE [dbo].[spCmnLoginRequest] (
	@IN_Event VARCHAR(100),
	@IN_USERNAME NVARCHAR(100),
	@IN_PASSWORD NVARCHAR(200),
	@IN_UserType INT,
	@IN_IPAddress VARCHAR(200),
	@IN_SessionId NVARCHAR(500),
	@IN_OTP VARCHAR(20),
	@IN_LDAPResult INT,
	@IN_CompanyID INT = 0)
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @UTCTime  DATETIME = GETUTCDATE(),
				@UserID INT = 0,
				@FormID INT = 0,
				@ExceptionState INT = 0,
				@ErrorMsg NVARCHAR(MAX)= '',
				@FormPath NVARCHAR(1000) = '',							 
				@UserStatusId  INT = 0,
				@LogoutTypeId INT = 0,
				@UserName NVARCHAR(200) = '',
				@Password  NVARCHAR(1000) = '',
				@LoginAttempt INT = 0,
				@UserLoginAttempt INT = 0,
				@ExpiryDays INT = 0,
				@LastPwdUpdateDate DATETIME = NULL,
				@AuthenticationType NVARCHAR(200) = '',
				@UserAuthenticationType INT = 0,
				@IsBlocked BIT = 0,
				@NotActive BIT = 0,
				@SameUserCount  INT= 0,
				@OTPValidation BIT = 0,
				@OTPRequired BIT = 0,
				@OTPType INT = 0,
				@OTPExpireMin INT = 0,
				@OTPExpiredTime DATETIME = NULL,
				@OfficialEmail NVARCHAR(200)= '',
				@UserMobileNo VARCHAR(50) = '',
				@UserType INT = 0,
				@ErrorMessage NVARCHAR(2000),  
				@ErrorSeverity NVARCHAR(50),  
				@ErrorState NVARCHAR(50),
				@MultipleLogin BIT = 0,
				@PrevPasswordCount INT = 0,
				@EmployeeID INT = 0,
				@LoginTracking BIT = 1,
				@ResetPassword INT = 0,
				@GMTTime DATETIME,
				@CompanyID INT = 0,
				@IsFavoritePage INT = 0;

		SELECT @UserID = UD.UserID, @UserName = UD.Username, @Password = ISNULL(UD.[Password], ''), 
			@LastPwdUpdateDate = UD.PasswordUpdatedDate, @UserAuthenticationType = UD.AuthenticationType, 
			@UserLoginAttempt = UD.LoginAttempt, @IsBlocked = UD.IsLocked, @NotActive = CASE WHEN ISNULL(MED.NotActive, 0) = 1 THEN ISNULL(MED.NotActive, 0) ELSE ISNULL(UD.NotActive, 0) END,
			@EmployeeID = ISNULL(MED.ReferenceID, 0), @UserType = UD.[Type], @CompanyID = COALESCE(MED.CompanyID, UD.CompanyID, 1),
			@ResetPassword = ISNULL(UD.ResetPassword, 0)
		FROM CmnUserDetails UD   
			LEFT JOIN MstEmployeeDetails MED ON UD.[Type] = 1 AND UD.TypeID = MED.ReferenceID AND ISNULL(MED.IsDeleted, 0) = 0
		WHERE UD.Username = @IN_USERNAME AND ISNULL(UD.IsDeleted, 0) = 0
			AND (ISNULL(@IN_UserType, 0) = 0 OR UD.Type = @IN_UserType)
			AND (ISNULL(@IN_CompanyID, 0) = 0 OR UD.CompanyID = @IN_CompanyID);
	
		SELECT @LoginAttempt = ISNULL(CPP.LoginAttempt, 5), @ExpiryDays = ISNULL(CPP.ExpiryDays, 100), @AuthenticationType = ISNULL(CPP.AuthenticationType, ''),
			@MultipleLogin = ISNULL(MultipleLogin, 1), @PrevPasswordCount = ISNULL(PrevPwdRetrieveCount, 2)
		FROM CmnPasswordPolicy CPP WHERE CPP.CompanyID = @CompanyID AND ISNULL(CPP.IsDeleted,0) = 0;

		SET @IsFavoritePage = ISNULL((SELECT TOP 1 ISNULL(FD.FormID, 0)
									  FROM CmnRBSPermission RBS
											JOIN CmnFormDetails FD ON FD.FormID = RBS.FormID AND ISNULL(FD.FormPath, '') <> '' AND ISNULL(FD.IsDeleted, 0) = 0
									  WHERE RBS.UserID = @UserID AND ISNULL(RBS.HasReadPermission, 0) = 1 
											AND ISNULL(RBS.IsFavourite, 0) = 1 AND ISNULL(RBS.IsDeleted, 0) = 0), 0);
	
		IF @UserAuthenticationType = 0 
		BEGIN
			SET @UserAuthenticationType = NULL;
		END
		SET @GMTTime = dbo.fn_GMTCalculation(@UserID);

		IF @UserID = 0 
		BEGIN
			SET @ExceptionState = 1;
			SET @ErrorMsg = 'E0046';
		END
		ELSE IF (@Password <> @IN_PASSWORD AND @IN_LDAPResult = 0) OR (@IN_LDAPResult = 2) 
		BEGIN
			SET @ExceptionState = 2;
			SET @ErrorMsg = 'E0046';
			   
			UPDATE MED
			SET IsLocked = CASE WHEN (ISNULL(MED.LoginAttempt, 0) + 1) >= @LoginAttempt THEN 1 ELSE IsLocked END,
				LoginAttempt = ISNULL(MED.LoginAttempt, 0) + 1,
				ModifiedBy = @UserID,
				ModifiedDate = @UTCTime,
				ModifiedDateGMT = @GMTTime 
			FROM CmnUserDetails MED WHERE MED.UserID = @UserID;
		END
		ELSE IF @NotActive = 1 
		BEGIN 
			SET @ExceptionState = 9;
			SET @ErrorMsg = 'E0053';
		END
		ELSE IF @IsBlocked = 1
		BEGIN 
			SET @ExceptionState = 3;
			SET @ErrorMsg = 'E0047';
		END
		ELSE IF DATEDIFF(HOUR, @LastPwdUpdateDate, GETDATE()) > (@ExpiryDays * 24)
		BEGIN 
			SET @ExceptionState = 6;
			SET @ErrorMsg = 'E0050';
		END
		ELSE IF	(PATINDEX('%,' + CAST(@UserAuthenticationType AS NVARCHAR(50)) + ',%' , ',' + @AuthenticationType + ',') = 0) AND ISNULL(@AuthenticationType, '') <> '' AND ISNULL(@UserAuthenticationType, 0) <> 0
		BEGIN 
			SET @ExceptionState = 8;
			SET @ErrorMsg = 'E0052';
		END
		ELSE IF @ResetPassword = 1 AND ISNULL(@IN_UserType, 0) = 0
		BEGIN
			SET @ExceptionState = 10;
			SET @ErrorMsg = '';
		END
		ELSE IF (@UserType = 1 AND @EmployeeID = 0)
		BEGIN 
			SET @ExceptionState = 11;
			SET @ErrorMsg = 'E0046';
		END	

		IF (@ExceptionState = 0 OR @ExceptionState = 6 OR @ExceptionState = 10)
		BEGIN
			SELECT TOP 1 @FormPath = FD.FormPath, @FormID =  FD.FormID  
			FROM CmnRBSPermission RBS
				JOIN CmnFormDetails FD ON FD.FormID = RBS.FormID AND ISNULL(FD.IsDeleted, 0) = 0 AND ISNULL(FD.FormPath, '') <> ''
			WHERE RBS.UserID = @UserID AND RBS.HasReadPermission = 1 AND ISNULL(RBS.IsDeleted, 0) = 0;
				
			IF ISNULL(@FormPath, '') = '' 
				SET @ExceptionState = 7;
		END
		IF @IN_Event = 'ValidateOTP' 
		BEGIN  
			SELECT @ErrorMsg = [Description] FROM CmnCodeMaster 
			WHERE Type = 'Login Failure Reason' AND CodemasterID = @ExceptionState AND @ExceptionState <> 6;
		END	
		ELSE 
		BEGIN
    		SELECT @ErrorMsg = [Description] FROM CmnCodeMaster 
			WHERE Type = 'Login Failure Reason' AND CodemasterID = @ExceptionState;
		END
		
		-- Reset LoginAttempt flag
		IF (@ExceptionState = 0 OR @ExceptionState = 6 OR @ExceptionState = 10)
		BEGIN
			UPDATE CmnUserDetails 
			SET LoginAttempt = 0,
				ModifiedBy = @UserID,
				ModifiedDate = @UTCTime,
				ModifiedDateGMT = @GMTTime
			WHERE UserID = @UserID;		
		END
		
		IF @ExceptionState = 0 
		BEGIN
			SET @UserStatusId = 1;
			IF @IN_Event = 'ForceLogout' AND @MultipleLogin = 0
			BEGIN
				UPDATE CLH 
				SET UserStatusID = 2,
					LogoutTypeID = 2,
					LogoutTime = @UTCTime,
					Remarks = 'Forced Logout'
				FROM CmnLoginHistory CLH WHERE UserID = @UserID AND SessionID <> @IN_SessionId AND UserStatusID = 1;
				END
			ELSE IF @MultipleLogin = 0
			BEGIN
				SELECT @SameUserCount = COUNT(1) FROM CmnLoginHistory 
				WHERE UserID = @UserID AND SessionID <> @IN_SessionId AND UserStatusID = 1;
			END 			
		END
		ELSE IF (@ExceptionState = 6 OR @ExceptionState = 10)
			SET @UserStatusId = 1;
		ELSE
		BEGIN
			SET @UserID = 0;
			SET @UserName = '';
		END 
      
		SELECT TOP 1 @OTPRequired = ISNULL(CPP.OTPValidation, 0), @OTPType = ISNULL(CPP.OTPType, 0),
			@OTPExpireMin = ISNULL(CPP.OTPExpireMin, 0)
		FROM CmnPasswordPolicy CPP WHERE CPP.CompanyID = @CompanyID AND ISNULL(CPP.IsDeleted,0) = 0;

		SET @OTPValidation = @OTPRequired;
		SELECT @OfficialEmail = CASE WHEN UD.Type = 1 THEN ISNULL(CUC.OfficialEmail, '') WHEN UD.Type = 2 THEN ISNULL(CC.OfficialEmail, '') ELSE '' END, 
			@UserMobileNo = CASE WHEN UD.Type = 1 THEN ISNULL(CUC.Mobile, '') WHEN UD.Type = 2 THEN ISNULL(CC.Mobile, '') ELSE '' END, @UserType = UD.[Type]   
		FROM CmnUserDetails UD
			LEFT JOIN CmnUserContacts CUC ON CUC.[Type] = UD.[Type] AND CUC.TypeID = UD.TypeID AND UD.Type = 1
			LEFT JOIN MstClientContacts CC ON UD.Type = 2 AND CC.ReferenceID = UD.TypeID AND CC.IsDeleted = 0 AND CC.NotActive = 0
		WHERE UD.UserID = @UserID;

		IF @UserType <> 0 
		BEGIN			
			IF @OTPValidation = 1 AND @IN_Event = 'LoginValidate'
			BEGIN
				EXEC spCmnGenerateOTP @IN_Event, @UserID, @IN_SessionId, @IN_IPAddress, @IN_OTP, @OTPExpireMin, 1, N'OTP sent';
				SET @OTPValidation = 0;
			END    
			ELSE IF @IN_Event = 'ValidateOTP' 
			BEGIN
				EXEC spCmnGenerateOTP @IN_Event, @UserID, @IN_SessionId, @IN_IPAddress, @IN_OTP, @OTPExpireMin, 2, N'OTP Verified';
				SET @OTPValidation = 0;      
			END 
			
			SELECT TOP 1 @OTPExpiredTime = ExpiryTime 
			FROM CmnOTPTracking WHERE UserID = @UserID AND OTPValue = @IN_OTP
				AND SessionID = @IN_SessionId AND [Status] = 1 ORDER BY GeneratedTime DESC;
		END
		ELSE
			SET @OTPValidation = 0;
     
		IF @SameUserCount = 0 AND @OTPValidation = 0 AND @UserStatusId = 1
		BEGIN
			SET @LoginTracking = 1;
		END 

		SELECT @UserID, @UserName, @SameUserCount, @PrevPasswordCount;

		SELECT ISNULL(ED.NickName, '') AS EmployeeName, ISNULL(ED.BranchID, 0) AS Branch, @CompanyID AS Company, 
			ISNULL(ED.DesignationID, 0) AS Designation, ISNULL(ED.DepartmentID, 0) AS Department, ISNULL(UD.RoleID, 0) AS UserRole,
			ISNULL(ED.GenderID, 0) AS Gender, ISNULL(UC.OfficialEmail, '') AS EMail, ISNULL(ED.NationalityID, 0) AS Nationality,
			ISNULL(UD.LicenseType, 0) AS LicenseType, @EmployeeID, ISNULL(MP.Description, '') AS MainPage, ISNULL(UD.UserName, '') AS UserName
		FROM CmnUserDetails UD 
			LEFT JOIN MstEmployeeDetails ED ON UD.[Type] = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
			LEFT JOIN CmnUserContacts UC ON UC.[Type] = 1 AND UC.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
			LEFT JOIN CmnCodeMaster MP ON MP.Type = 'Main Page' AND MP.CodemasterID = UD.MainPageID AND (@IsFavoritePage <> 0 OR TypeValues <> 'Favorites')
		WHERE UD.Username = @IN_USERNAME AND ISNULL(UD.Password, '') = ISNULL(@IN_PASSWORD, '')
			AND ISNULL(UD.IsDeleted, 0) = 0
			AND (ISNULL(@IN_UserType, 0) = 0 OR UD.Type = @IN_UserType)
			AND (ISNULL(@IN_CompanyID, 0) = 0 OR UD.CompanyID = @IN_CompanyID);

		SELECT @ErrorMsg, @ExceptionState, @LoginTracking;
		SELECT @FormPath, @FormID;
		SELECT @OfficialEmail, @UserMobileNo, @UserType;

		IF @UserType <> 0   
		BEGIN
			SELECT @OTPExpiredTime, @OTPRequired, @OTPType;
		END
		ELSE
			SELECT '', 0, 0;
		
		SELECT CCM.Remarks AS Description
		FROM CmnUserDetails UD 
			JOIN CmnCodeMaster CCM ON UD.ThemesID = CCM.CodemasterID AND CCM.Type = 'Theme Details' 
		WHERE UD.UserID = @UserID;

		;WITH MultiLinguals AS (
			SELECT STUFF((SELECT(SELECT ',' + '"'+ GK.[KeyCode],'":"'+ CASE WHEN CGM.[KeyValue] IS NULL THEN ISNULL(GK.[KeyValue], '') ELSE ISNULL(CGM.[KeyValue], '') END + '"'	
						FROM CmnGUIKeywords GK 
							JOIN CmnUserDetails UD ON UD.UserID = @UserID
							LEFT JOIN CmnGUIMultiLingual CGM ON CGM.[KeyCode] = GK.[KeyCode] AND CGM.LanguageID = UD.ProfileID
						FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)')), 1, 1, '') AS KeyVal
		)
		SELECT '{' + KeyVal +'}'  AS CommonGUIMultilingual FROM MultiLinguals;

		SELECT TOP 1 CONCAT('{"MinLength":', ISNULL(MinimumLength, 4), ',"MaxLength":', ISNULL(MaximumLength, 16), ',"IsNumeric":', ISNULL(IsNumeric, 0),
			',"IsAlpha":', ISNULL(IsAlpha, 0), ',"IsSplCharacter":', ISNULL(IsSplCharacter, 0), ',"StartWithID":', ISNULL(StartWithID, 0),
			',"Captcha":', ISNULL(CaptchaValidation, 0), ',"OTPValidation":', ISNULL(OTPValidation, 0), ',"OTPType":', ISNULL(OTPType, 0),
			',"OTPExpireMin":', ISNULL(OTPExpireMin, 5), ',"RetrieveType":', ISNULL(RetriveType, 0), ',"MultipleLogin":', ISNULL(MultipleLogin, 0),
			',"ExpiryDaysNegotiable":', ISNULL(ExpiryDaysNegotiable, 0), '}') AS PasswordPolicy
		FROM CmnPasswordPolicy WHERE CompanyID = @CompanyID AND IsDeleted = 0;

	END TRY
	BEGIN CATCH
			
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE()   
  
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnLogout]'
GO

CREATE PROCEDURE [dbo].[spCmnLogout] (
	@IN_USERID INT, 
	@IN_LOGOUTTYPE BIGINT,
	@IN_SESSIONID NVARCHAR(500))
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
		BEGIN TRANSACTION tran_CmnLogoutDML

		DECLARE @UTCTime DATETIME = GETUTCDATE(),
				@ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50)

		UPDATE CmnLoginHistory  
		SET	UserStatusID = 2, 
			LogoutTime = @UTCTime, 
			LogoutTypeID = @IN_LOGOUTTYPE,
			Remarks='Logged Out' 
		WHERE UserID = @IN_USERID AND UserStatusID = 1 AND SessionID = @IN_SESSIONID

		COMMIT TRANSACTION tran_CmnLogoutDML
	
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION tran_CmnLogoutDML
		--EXEC [Fn_ErrorFetch] @@SPID
		
		--INSERT INTO tbl_StoredProcedure_Error (MenuID, App_User, SQL_User, Server_Name, [Procedure_Name],
		--	Error_Code, Line_Number, [Error_Message], [Error_State], Logged_Date, [INPUT_PARAMS]) 
		--SELECT @MenuID, @UserID, USER_NAME(), @@SERVERNAME, ERROR_PROCEDURE(), ERROR_NUMBER(), ERROR_LINE(),
		--	ERROR_MESSAGE(), ERROR_STATE(), GETUTCDATE(), (SELECT PIN FROM TBL_ERRORFETCH);
			
		
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnMasterDataTypes]'
GO

CREATE PROCEDURE [dbo].[spCmnMasterDataTypes] (@IN_FormID INT = 0, @IN_UserID INT = 0)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	DECLARE @ErrorMessage NVARCHAR(2000),
			@ErrorSeverity NVARCHAR(50),
			@ErrorState NVARCHAR(50)     

		SELECT DISTINCT(Type) AS Value, Type AS Text 
		FROM CmnCodeMaster WHERE IsDeleted = 0 AND UserAccess <> 1 ORDER BY Type ASC;  

	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnMasterDataTypeValues]'
GO

CREATE PROCEDURE [dbo].[spCmnMasterDataTypeValues] (
	@IN_Type NVARCHAR(500),
	@IN_FormID INT = 0,
	@IN_UserID INT = 0)
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY

		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@Query NVARCHAR(MAX),
				@TypeValues NVARCHAR(MAX) = '',
				@RBSConditions NVARCHAR(MAX) = ''

		SET @Query = 'SET @Qry = (SELECT ISNULL(SUBSTRING((SELECT '','' + (''{"CodeMasterID":"''+ CAST(ISNULL(CM.CodemasterID, 0) AS NVARCHAR(MAX)) +''",'+
							'"Code":"''+ REPLACE(REPLACE(ISNULL(CM.Code, ''''), ''\'', ''\\''),''"'', ''\"'') +''","Name":"''+ REPLACE(REPLACE(ISNULL(CM.TypeValues, ''''), ''\'', ''\\''),''"'', ''\"'') +''","Description":"''+ REPLACE(REPLACE(ISNULL(CM.Description, ''''), ''\'', ''\\''),''"'', ''\"'') +''"'+
							',"Remarks":"''+ REPLACE(REPLACE(ISNULL(CM.Remarks, ''''), ''\'', ''\\''),''"'', ''\"'') +''","Category":"''+ REPLACE(REPLACE(ISNULL(CM.Category, ''''), ''\'', ''\\''),''"'', ''\"'') +''","Details":"''+ ISNULL(CM.Details, '''') +''",'+
							'"SubType":"''+ CAST(ISNULL(CM.SubType, '''') AS NVARCHAR(MAX)) +''","OrderBy":"''+ CAST(ISNULL(CM.OrderBy, '''') AS NVARCHAR(MAX)) +''","ModifiedBy":"''+ ISNULL(UD.Username, '''') +''",'+
							'"NotActive":"''+ CAST(ISNULL(CM.NotActive, '''') AS NVARCHAR(MAX)) +''","NotActiveDate":"''+ '+
							'CASE WHEN CONVERT(VARCHAR(MAX), CM.NotActiveDate, 105)= ''01-01-1900'' THEN '''' ELSE ISNULL(CONVERT(VARCHAR(MAX), CM.NotActiveDate, 127), '''') END +''",'+
							'"ModifiedDate":"''+ ISNULL(CONVERT(VARCHAR(MAX), CM.ModifiedDate, 127), '''') +''","UserAccess":"''+ CAST(ISNULL(CM.UserAccess, 0) AS NVARCHAR(MAX)) +''",'+
							'"MaxOrderBy":"''+ CAST((SELECT MAX(OB.OrderBy) FROM CmnCodeMaster OB WHERE OB.Type = CM.Type AND OB.IsDeleted = 0) AS NVARCHAR(MAX))+''"}'')'+
						' FROM CmnCodeMaster CM'+
						' LEFT JOIN CmnFormDetails FD ON FD.FormID = CM.MenuID AND FD.IsDeleted = 0'+
						' LEFT JOIN CmnCodeMaster UA ON UA.Type = ''User Access'' AND UA.CodemasterID = CM.UserAccess AND UA.IsDeleted = 0'+
						' LEFT JOIN CmnUserDetails UD ON UD.UserID = CM.ModifiedBy'+
						' WHERE CM.Type = '''+@IN_Type +''' AND CM.IsDeleted = 0 AND CM.IsCurrentVersion = 1 ' + dbo.fn_GetTableCompanyRBSCondition (@IN_UserID, 'CmnCodeMaster', '') +
						' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000), ''''))'

		EXEC sp_executesql @Query, N'@Qry NVARCHAR(MAX) OUTPUT', @TypeValues OUTPUT
		
		SELECT ISNULL('['+ @TypeValues+ ']', '') AS TypeValues
	
	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnPrepareFormQuery]'
GO


CREATE PROCEDURE [dbo].[spCmnPrepareFormQuery] (
	@IN_FormID INT, 
	@IN_UserID INT
)
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
	     DECLARE @ValueColumn NVARCHAR(2000),
				 @TextColumn NVARCHAR(2000), 
				 @DeleteCondition NVARCHAR(MAX),
				 @ActiveCondition NVARCHAR(MAX),
				 @VersionCondition NVARCHAR(MAX), 
				 @OrderByClause NVARCHAR(MAX),
				 @TableName SYSNAME,
				 @TypeCondition NVARCHAR(2000),
				 @AdditionalCondition NVARCHAR(MAX),
				 @OrderByColumn VARCHAR(MAX),
				 @RowCnt INT = 0,
				 @RowIndex INT = 0,
				 @qry NVARCHAR(MAX),
				 @CountQry NVARCHAR(MAX),
				 @FilterQry NVARCHAR(MAX),
				 @SubQry NVARCHAR(MAX),
				 @SelectStmtQry1 NVARCHAR(MAX),
				 @SelectStmtQry2 NVARCHAR(MAX),
				 @ErrorMessage NVARCHAR(2000),
				 @ErrorSeverity NVARCHAR(50),
				 @ErrorState NVARCHAR(50),
				 @FormType INT = 0,
				 @ControlID INT = 0,
				 @ColumnID INT = 0,
				 @FilterBy VARCHAR(100) = '',
				 @FilterTable VARCHAR(100) = '',
				 @FilterKey VARCHAR(100) = '',
				 @FilterUniqueKey VARCHAR(100) = '',
				 @FirstColumnData VARCHAR(100) = '',
				 @SecondColumnData VARCHAR(100) = '',
				 @ThirdColumnData VARCHAR(100) = '',
				 @FirstColumnID VARCHAR(100) = '',
				 @SecondColumnID VARCHAR(100) = '',
				 @ThirdColumnID VARCHAR(100) = '',
				 @FirstColumnTable VARCHAR(100) = '',
				 @SecondColumnTable VARCHAR(100) = '',
				 @ThirdColumnTable VARCHAR(100) = '',
				 @FirstColumnParent VARCHAR(100) = '',
				 @SecondColumnParent VARCHAR(100) = '',
				 @ThirdColumnParent VARCHAR(100) = '',
				 @SPName VARCHAR(200) = '',
				 @QryType INT = 0,
				 @KeyColumn SYSNAME = '',
				 @FKType INT = 0,
				 @FKTable SYSNAME = '',
				 @FkDelete BIT = 0,
				 @FkNotActive BIT = 0,
				 @FkOrder INT = 0,
				 @FkVersion BIT = 0,
				 @FkShowActive BIT = 0,
				 @CTEColumnNames NVARCHAR(MAX) = '',
				 @SelectColumnNames NVARCHAR(MAX) = '',
				 @GridColumnName VARCHAR(200) = '',
				 @SelectStmt NVARCHAR(MAX),
				 @ControlType INT,
				 @DataTreeCondition VARCHAR(100) = '',
				 @DecimalLength SMALLINT = 0,
				 @MainTableName VARCHAR(255) = '',
				 @FilterConditions NVARCHAR(1000),
				 @Index INT,
				 @AdditionalData NVARCHAR(MAX) = '',
				 @StartRangeColumns NVARCHAR(MAX) = '',
				 @EndRangeColumns NVARCHAR(MAX) = '',
				 @GridType INT = 0;

		SET ANSI_PADDING ON;
		DELETE FROM CmnFormQuery WHERE FormID = @IN_FormID;
		SELECT @FormType = FormType FROM CmnFormDetails WHERE FormID = @IN_FormID AND IsDeleted = 0;
		SET @QryType = 4;
		SET @DecimalLength = ISNULL((SELECT TOP 1 CD.DecimalLength FROM MstCompanyDetails MC JOIN MstCountryDetails CD ON CD.ReferenceID = MC.CurrencyID WHERE MC.ParentCompanyID IS NULL ORDER BY MC.ReferenceID DESC), 4);

		-- spCmnSearchControls Query Start --
		IF @FormType IN (1, 4, 5)
		BEGIN
			SELECT TOP 1
				@ControlID = FC.ControlID, @ControlType = FC.ControlType,
				@ValueColumn = 'MT.' + FC.FKColumn, 
				@TextColumn = CASE WHEN ISNULL(FCP.Value, '') <> '' THEN 'CAST(ISNULL(FCP.' + FCP.Value + ', '''') AS VARCHAR(50))' ELSE 'CAST(ISNULL(MT.' + CC.ColumnName + ', '''') AS NVARCHAR(MAX))' END + 
								CASE WHEN  ISNULL(ColumnName1, '') <> '' THEN   ' + '' - '' + CAST(ISNULL(' + CASE WHEN ISNULL(SCP.Value, '') <> '' THEN 'SCP.'+SCP.Value ELSE 'MT.' + ISNULL(ColumnName1, '') END + ', '''') AS NVARCHAR(MAX))' ELSE '' END +
								CASE WHEN  ISNULL(ColumnName2, '') <> '' THEN   ' + '' - '' + CAST(ISNULL(' + CASE WHEN ISNULL(TCP.Value, '') <> '' THEN 'TCP.'+TCP.Value ELSE 'MT.' + ISNULL(ColumnName2, '') END + ', '''') AS NVARCHAR(MAX))' ELSE '' END,
				@DeleteCondition = CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' ISNULL(MT.IsDeleted, 0) = 0 ' END, 
				@ActiveCondition = CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' ISNULL(MT.NotActive, 0) = 0 ' END,
				@VersionCondition = CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' ISNULL(MT.IsCurrentVersion, 1) = 1 ' END, 	
				@OrderByClause = CASE WHEN ISNULL(CN.Value, '') = '' THEN  
													'ORDER BY ' + CASE WHEN ISNULL(FC.FkOrder, 1) = 1 THEN 'CAST(ISNULL(MT.' +CC.ColumnName + ', '''')'  + ' AS NVARCHAR(MAX))'
																+ CASE WHEN  ISNULL(ColumnName1, '') <> '' THEN   ' +''-''+ CAST(ISNULL(' + ColumnName1 + ', '''')' + ' AS NVARCHAR(MAX))' ELSE '' END  
																+ CASE WHEN  ISNULL(ColumnName2, '') <> '' THEN   ' +''-''+ CAST(ISNULL(' + ColumnName2 + ', '''')' + ' AS NVARCHAR(MAX))' ELSE '' END +' ASC ' 
															WHEN ISNULL(FC.FkOrder, 1) = 2 THEN 'CAST(ISNULL(MT.' +CC.ColumnName + ', '''')'  + ' AS NVARCHAR(MAX))'
																+ CASE WHEN  ISNULL(ColumnName1, '') <> '' THEN   ' +''-''+ CAST(ISNULL(' + ColumnName1 + ', '''')' + ' AS NVARCHAR(MAX))' ELSE '' END  
																+ CASE WHEN  ISNULL(ColumnName2, '') <> '' THEN   ' +''-''+ CAST(ISNULL(' + ColumnName2 + ', '''')' + ' AS NVARCHAR(MAX))' ELSE '' END +' DESC '
															WHEN ISNULL(FC.FkOrder, 1) = 3 THEN 'ISNULL(MT.Orderby, 0) ASC '
															WHEN ISNULL(FC.FkOrder, 1) = 4 OR ISNULL(FC.FkOrder, 1) = 0 THEN 'MT.' + FC.FKColumn  + ' ASC ' END 
									ELSE ' ORDER BY MT.' + FC.FKColumn + ' ' + CN.Value + '' END,
				@TableName = CASE WHEN ISNULL(FC.FkType, 1) = 1 THEN 'CmnCodeMaster' WHEN ISNULL(FC.FkType, 1) = 3 THEN 'CmnFileUpload' ELSE FC.FkTable END,		
				@TypeCondition = CASE WHEN ISNULL(FC.FkType, 1) IN (1, 3) THEN 'Type ='''+  FC.FkTable + '''' ELSE '' END,
				@FirstColumnData = ISNULL(FCP.Value, ''), @SecondColumnData = ISNULL(SCP.Value, ''), @ThirdColumnData = ISNULL(TCP.Value, ''), @ColumnID = CC.ColumnID, 
				@FirstColumnID = ('MT.'+CC.ColumnName), @SecondColumnID = ('MT.'+CC.ColumnName1), @ThirdColumnID = ('MT.'+CC.ColumnName2),
				@MainTableName = CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
									  WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') ELSE ISNULL(FD.TableName, '') END,
				@FkVersion = ISNULL(FC.FkVersion, 0), @FkOrder = ISNULL(FC.FkOrder, 0), @FkNotActive = ISNULL(FC.FkNotActive, 0), @FkShowActive = ISNULL(FC.FkShowActive, 0),
				@AdditionalData = CONCAT('''{', SUBSTRING((SELECT CONCAT(',"', AD.ColumnName, '":"''+CAST(ISNULL(', CASE WHEN AD.FkType NOT IN (1, 2) THEN CONCAT('MT.', AD.ColumnName)
									ELSE CASE WHEN AD.FkType = 1 THEN CONCAT('(SELECT TOP 1 ', AD.FkData, ' FROM CmnCodeMaster CM WHERE CM.Type=''', AD.FkTable, ''' AND (PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ', AD.FkColumn, ')', '+'',%'', '','' +  
																		ISNULL(CONVERT(NVARCHAR(MAX), MT.', AD.ColumnName, '), '''') + '','') > 0))') 
										ELSE CONCAT('(SELECT TOP 1 ', AD.FkData, ' FROM ', AD.FkTable, ' CM WHERE (PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ', AD.FkColumn, ')', '+'',%'', '','' +  
																		ISNULL(CONVERT(NVARCHAR(MAX), MT.', AD.ColumnName, '), '''') + '','') > 0))') END
									END, ', '''') AS NVARCHAR(MAX))+''"') 
								FROM CmnControlColumns AD WHERE AD.ControlID = FC.ControlID /*AND AD.ColumnID <> CC.ColumnID*/ AND AD.IsDeleted = 0
								FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '}''')
  			FROM CmnFormDetails FD
  				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
  				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
  				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FC.SearchApplicable = 1 
				JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0 AND CC.DefaultValue <> 'SubTree'
					LEFT JOIN CmnControlProperty CN ON CN.ControlID = FC.ControlID AND CN.Name = 'Order By' AND CN.IsDeleted = 0
					LEFT JOIN CmnColumnProperty FCP ON FCP.ColumnID = CC.ColumnID AND FCP.Name = 'Column1 Data' AND FCP.IsDeleted = 0
					LEFT JOIN CmnColumnProperty SCP ON SCP.ColumnID = CC.ColumnID AND SCP.Name = 'Column2 Data' AND SCP.IsDeleted = 0
					LEFT JOIN CmnColumnProperty TCP ON TCP.ColumnID = CC.ColumnID AND TCP.Name = 'Column3 Data' AND TCP.IsDeleted = 0
  			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0
			ORDER BY CC.ColumnOrder;

			SELECT @FilterBy = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter By' AND IsDeleted = 0;
			SELECT @FilterTable = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter Table' AND IsDeleted = 0;
			SELECT @FilterKey = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter Key' AND IsDeleted = 0;
			SELECT @FilterUniqueKey = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter Unique Key' AND IsDeleted = 0;

			SELECT @FirstColumnTable = ISNULL(Value, '') FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Column1 Table' AND IsDeleted = 0;
			SELECT @SecondColumnTable = ISNULL(Value, '') FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Column2 Table' AND IsDeleted = 0;
			SELECT @ThirdColumnTable = ISNULL(Value, '') FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Column3 Table' AND IsDeleted = 0;
			SELECT @FirstColumnParent = ISNULL(Value, '') FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Column1 Parent' AND IsDeleted = 0;
			SELECT @SecondColumnParent = ISNULL(Value, '') FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Column2 Parent' AND IsDeleted = 0;
			SELECT @ThirdColumnParent = ISNULL(Value, '') FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Column3 Parent' AND IsDeleted = 0;

			SET @AdditionalCondition = ISNULL((SELECT FC.AdditionalConditions FROM CmnFormDetails FD
  										JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
  										JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
  										JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FC.SearchApplicable = 1 AND (FC.ControlType != 24 AND FC.ControlType != 25)
  										WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0), '')

			SET @FilterQry = ';WITH GridFill  AS (SELECT ROW_NUMBER() OVER (' + @OrderByClause + ') AS LIMIT, ' 
								+ @ValueColumn + ' AS Value,'+ @TextColumn + ' AS [Text],'+ @AdditionalData + ' AS AdditionalData' +  ' FROM '+ @TableName +' MT '
								+ '@SQLFilterTable@'
								+ ' WHERE ' + @TextColumn + ' LIKE ''%%''' 
								+ '@SQLFilterBy@'
								+ CASE WHEN @TypeCondition = '' THEN '' ELSE ' AND '  END + @TypeCondition 
								+ CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND ' END + @AdditionalCondition 
								+ '@SQLConditionColumns@'
								+ '@SQLRBSConditions@'
								+ CASE WHEN @DeleteCondition = '' THEN '' ELSE ' AND ' END  + @DeleteCondition 
								+ '@SQLActiveCondition@'
								+ CASE WHEN @VersionCondition = '' THEN '' ELSE ' AND ' END +  @VersionCondition + ')'
								+ ' INSERT INTO #tempFilteredParentData(FilterValue, FilterText, AdditionalData, OrderBy) SELECT Value, [Text], AdditionalData, LIMIT FROM GridFill '
								+ '@SQLLimit@';

			SET @qry = ';WITH GridFill  AS (SELECT ROW_NUMBER() OVER (' + @OrderByClause + ') AS LIMIT, ' 
						+ @ValueColumn + ' AS Value,'+ @TextColumn + ' AS [Text],'+ @AdditionalData + ' AS AdditionalData' +  ' FROM ' + @TableName + ' MT '
						+ '@SQLFilterTable@'
						+ CASE WHEN @FirstColumnTable <> '' THEN (' JOIN ' + @FirstColumnTable + ' FCP ON FCP.' + @FirstColumnParent + ' = ' + @FirstColumnID+ ' ') ELSE '' END
						+ CASE WHEN @SecondColumnTable <> '' THEN (' JOIN ' + @SecondColumnTable + ' SCP ON SCP.' + @SecondColumnParent + ' = ' + @SecondColumnID+ ' ') ELSE '' END
						+ CASE WHEN @ThirdColumnTable <> '' THEN (' JOIN ' + @ThirdColumnTable + ' TCP ON TCP.' + @ThirdColumnParent +' = '+ @ThirdColumnID+ ' ') ELSE '' END
						+ ' WHERE ' + @TextColumn + ' LIKE ''%' + '@IN_DataValue@' + '%'''
						+ '@SQLFilterBy@'
						+ CASE WHEN @TypeCondition = '' THEN '' ELSE ' AND '  END + @TypeCondition 
						+ CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND ' END + @AdditionalCondition
						+ '@SQLConditionColumns@'
						+ '@SQLRBSConditions@'
						+ CASE WHEN @DeleteCondition = '' THEN '' ELSE ' AND ' END  + @DeleteCondition 
						+ '@SQLActiveCondition@'
						+ CASE WHEN @VersionCondition = '' THEN '' ELSE ' AND ' END + @VersionCondition + ')'
						+ ' INSERT INTO #tempParentData(ParentValue, ParentText, AdditionalData, OrderBy) SELECT Value, [Text], AdditionalData, LIMIT FROM GridFill '
						+ '@SQLLimit@';

			SET @CountQry = 'SELECT COUNT(1) FROM ' +  @TableName + ' MT '
						+ '@SQLFilterTable@'
						+ CASE WHEN @FirstColumnTable <> '' THEN (' JOIN '+ @FirstColumnTable+ ' FCP ON FCP.'+ @FirstColumnParent+' = '+ @FirstColumnID+ ' ') ELSE '' END
						+ CASE WHEN @SecondColumnTable <> '' THEN (' JOIN '+ @SecondColumnTable+ ' SCP ON SCP.'+ @SecondColumnParent+' = '+ @SecondColumnID+ ' ') ELSE '' END
						+ CASE WHEN @ThirdColumnTable <> '' THEN (' JOIN '+ @ThirdColumnTable+ ' TCP ON TCP.'+ @ThirdColumnParent+' = '+ @ThirdColumnID+ ' ') ELSE '' END
						+ ' WHERE ' + @TextColumn + ' LIKE ''%' + '@IN_DataValue@' + '%'''
						+ '@SQLFilterBy@ '
						+ CASE WHEN @TypeCondition = '' THEN '' ELSE ' AND ' END + @TypeCondition
						+ '@SQLConditionColumns@'
						+ CASE WHEN @DeleteCondition = '' THEN '' ELSE ' AND ' END  + @DeleteCondition 
						+ CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND ' END + @AdditionalCondition
						+ '@SQLActiveCondition@'
						+ '@SQLRBSConditions@';

			SET @SPName = 'spCmnSearchControls';

			INSERT INTO CmnFormQuery (FormID, FormType, ControlID, ControlType, SPName, TableName, MainTableName, DMLType, Query, CountQuery, FilterQuery, SubQuery, 
				FilterBy, FilterTable, FilterKey, FilterUniqueKey, KeyColumn, FKOrder, FKDelete, FkNotActive, 
				FkVersion, AdditionalCondition, DataCondition, CreatedBy, CreatedDate,DeleteFlag, FkShowActive)
			 SELECT @IN_FormID, @FormType, @ControlID, @ControlType, @SPName, @TableName, @MainTableName, @QryType, @qry, @CountQry, @FilterQry, NULL, 
					@FilterBy, @FilterTable, @FilterKey, @FilterUniqueKey, @ValueColumn, @FkOrder, 0, @FkNotActive, @FkVersion, @AdditionalCondition,
					NULL, @IN_UserID, GETUTCDATE(), 0, @FkShowActive;
		END
		-- spCmnSearchControls Query End --

		--	spCmnGridValues Query Start --
		SET @FkDelete = 0;
		SET @FkNotActive = 0;
		SET @FkVersion = 0;

		IF @FormType IN (1, 2, 3, 4, 9, 10, 11, 12, 13)
		BEGIN
			SET @FilterQry = '';
			SET @AdditionalCondition = '';
			-- Add Grid Column list to temporary table
			IF OBJECT_ID('tempdb..#tempGridColumnList') IS NOT NULL
				DROP TABLE #tempGridColumnList;
			CREATE TABLE #tempGridColumnList(RecID INT IDENTITY(1,1) NOT NULL, GridColumnName NVARCHAR(200) NOT NULL, ControlID INT NOT NULL, ControlType INT NOT NULL, 
											TableName SYSNAME, KeyColumn SYSNAME, FKType INT NULL, FKTable NVARCHAR(200) NULL, FKDelete BIT NOT NULL, FKNotActive BIT NOT NULL, 
											FKVersion BIT NOT NULL, FkShowActive BIT NULL, FormType INT NOT NULL, FkOrder INT NOT NULL, MainTableName SYSNAME, FilterConditions NVARCHAR(1000) NOT NULL);
			INSERT INTO #tempGridColumnList
			SELECT CC.Value, FC.ControlID, FC.ControlType, FC.FkTable, 'MT.' + FC.FkColumn, FC.FKType, FC.FKTable, FC.FkDelete, FC.FkNotActive, FC.FkVersion, ISNULL(FC.FkShowActive, 0),
				   FD.FormType, ISNULL(FC.FkOrder, 0),
				   CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
					    WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') 
						ELSE ISNULL(FD.TableName, '') END, ISNULL(FC.FilterConditions, '')
			FROM CmnFormDetails FD WITH (NOLOCK)
				JOIN CmnFormTabs FT WITH (NOLOCK) ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
				JOIN CmnGroupBoxes GB WITH (NOLOCK) ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
				JOIN CmnFormControls FC WITH (NOLOCK) ON FC.GroupID = GB.GroupID AND (FC.ControlType = 19 OR FC.ControlType = 24 OR FC.ControlType = 25) AND FC.IsDeleted = 0
				JOIN CmnControlProperty CC WITH (NOLOCK) ON CC.ControlID = FC.ControlID AND CC.Name = 'Grid Header' AND CC.IsDeleted = 0
			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;

			-- Prepare Separate query for each Grid Column.
			SELECT @RowCnt = COUNT(1) FROM #tempGridColumnList;
			SET @RowIndex = 0;
			WHILE (@RowIndex < @RowCnt)
			BEGIN
				SET @RowIndex += 1;
				SELECT @GridColumnName = GridColumnName, @ControlID = ControlID, @ControlType = ControlType, @TableName = TableName, @MainTableName = MainTableName, 
						@KeyColumn = KeyColumn, @FKType = FKType, @FKTable = FKTable, @FkDelete = FkDelete, @FkNotActive = FkNotActive, @FkVersion = FKVersion,
						@FormType = FormType, @FkOrder = FkOrder, @FilterConditions = FilterConditions, @FkShowActive = FkShowActive
					FROM #tempGridColumnList WHERE RecID = @RowIndex;

				SET @FilterBy = '';
				SET @FilterTable = '';
				SET @FilterTable = '';
				SET @FilterKey = '';
				SET @FilterUniqueKey = '';
				SELECT @FilterBy = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter By' AND IsDeleted = 0;
				SELECT @FilterTable = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter Table' AND IsDeleted = 0;
				SELECT @FilterKey = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter Key' AND IsDeleted = 0;
				SELECT @FilterUniqueKey = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter Unique Key' AND IsDeleted = 0;

				SET @AdditionalCondition = ISNULL((SELECT TOP 1 FC.AdditionalConditions 
												   FROM CmnFormDetails FD WITH (NOLOCK)
													 JOIN CmnFormTabs FT WITH (NOLOCK) ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
													 JOIN CmnGroupBoxes GB WITH (NOLOCK) ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
													 JOIN CmnFormControls FC WITH (NOLOCK) ON FC.GroupID = GB.GroupID AND (FC.ControlType = 19 OR FC.ControlType = 24 OR FC.ControlType = 25) AND FC.IsDeleted = 0
													 JOIN CmnControlProperty CC WITH (NOLOCK) ON CC.ControlID = FC.ControlID AND CC.Name = 'Grid Header' AND CC.Value = @GridColumnName AND CC.IsDeleted = 0
												   WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0), '');
				IF (@ControlType = 24 OR @ControlType = 25) AND @FKType = 1
				BEGIN
					SET @TableName = 'CmnCodeMaster';
					SET @AdditionalCondition = 'Type = ''' + @FKTable + ''''  + CASE WHEN @AdditionalCondition <> '' THEN ' AND MT.' ELSE '' END + @AdditionalCondition;
				END

				SET @SelectStmtQry1 = '';
				SET @SelectStmtQry2 = '';
				SET @Index = 1;
				WHILE @Index < 3
				BEGIN
					SELECT @SelectStmt = SUBSTRING((SELECT ',' + '''"' + ColumnName + '":"'' + REPLACE(REPLACE(ISNULL(CAST(' + 
						CASE WHEN FC.ControlType = 2 AND ISNULL(SI.Value, '') <> '' AND FC.FkData <> '' THEN 'MT.'+ FC.ColumnName
							WHEN (FC.ControlType = 24 OR FC.ControlType = 25) THEN 
								CASE WHEN FC.FkType = 1 THEN ' SUBSTRING((SELECT '','' '+'+'+'(''{"Value":"'' + REPLACE(REPLACE(CAST(' + FC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST('+ FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')' +'+''"}'') FROM CmnCodeMaster CM WHERE CM.Type=''' + FC.FkTable + ''' AND                        
										(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +  
											ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0) '+
											CASE WHEN ISNULL(FC.GridParentControl, '') <> '' AND ISNULL(FC.AdditionalConditions, '') <> ''
											THEN CASE WHEN CHARINDEX('@', ISNULL(FC.AdditionalConditions, '')) = 0 
												THEN ' AND CM.' + REPLACE(ISNULL(FC.AdditionalConditions, ''), 'AND ', 'AND CM.') + ' = MT.' + ISNULL(FC.GridParentControl, '')
												ELSE dbo.fn_ConstractDependentConditions(ISNULL(FC.AdditionalConditions, ''), ISNULL(FC.GridParentControl, ''), 0, 'CM', 'MT') END
											ELSE '' END +
											' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '  
								WHEN FC.FkType = 2 THEN ' SUBSTRING((SELECT '','' '+'+'+'(''{"Value":"'' + REPLACE(REPLACE(CAST(' + FC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST('+ FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')' +'+''"}'') FROM ' + FC.FkTable + ' JT WHERE ' + 
										'(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +  							
											ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0)'+   
										CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' OR CHARINDEX('@', ISNULL(FC.AdditionalConditions, '')) > 0 THEN '' ELSE 
											CASE WHEN ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% NULL %' 
												OR ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% NOT NULL %'
												OR ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% = %' 
												OR ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% IN %' 
													THEN ' AND ' + FC.AdditionalConditions 
													ELSE '' END
										END +
										CASE WHEN ISNULL(CP.Value, '') = '' THEN '' ELSE ' AND '+ CP.Value END +
										CASE WHEN ISNULL(FC.GridParentControl, '') <> '' AND ISNULL(FC.AdditionalConditions, '') <> ''
										THEN CASE WHEN CHARINDEX('@', ISNULL(FC.AdditionalConditions, '')) = 0 
											THEN ' AND JT.' + REPLACE(ISNULL(FC.AdditionalConditions, ''), 'AND ', 'AND JT.') + ' = MT.' + ISNULL(FC.GridParentControl, '')
											ELSE dbo.fn_ConstractDependentConditions(ISNULL(FC.AdditionalConditions, ''), ISNULL(FC.GridParentControl, ''), 0, 'JT', 'MT') END
										ELSE '' END +
										CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(JT.IsDeleted, 0) = 0 ' END + 
										CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(JT.NotActive, 0) = 0 ' END + 
										CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(JT.IsCurrentVersion, 1) = 1 ' END +
										' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000)' 
								END
							WHEN (FC.FkType = 1 AND FC.ControlType <> 8) THEN ' SUBSTRING((SELECT '','' '+'+'+' CAST(' + FC.FkData + ' AS NVARCHAR(MAX)) FROM CmnCodeMaster CM WHERE CM.Type=''' + FC.FkTable + ''' AND                        
										(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +  
											ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0) '+
											' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '  
							 WHEN (FC.FkType = 2 AND FC.ControlType <> 8) THEN ' SUBSTRING((SELECT '','' '+'+'+' CAST(' + FC.FkData + ' AS NVARCHAR(MAX)) FROM ' + FC.FkTable + ' JT WHERE ' + 
										'(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +  							
											ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0)'+   
										CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' THEN '' ELSE 
											CASE WHEN ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% NULL %' 
												OR ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% NOT NULL %'
												OR ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% = %' 
												OR ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% IN %'
													THEN ' AND ' + FC.AdditionalConditions 
													ELSE '' END
										END +
										CASE WHEN ISNULL(CP.Value, '') = '' THEN '' ELSE ' AND '+ CP.Value END +
										CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(JT.IsDeleted, 0) = 0 ' END + 
										CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(JT.NotActive, 0) = 0 ' END + 
										CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(JT.IsCurrentVersion, 1) = 1 ' END +
										' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000)'  
							 WHEN FC.FkType = 3 THEN ' SUBSTRING((SELECT '','' + CAST(' + FC.FkColumn + ' AS NVARCHAR(MAX)) + ''|''+' + FC.FkData + '+''|'' + CF.FileName  
										FROM CmnFileUpload CF WHERE ' + FC.FkColumn + ' = MT.' + ColumnName +   
										' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '  
							 WHEN FC.FkType = 0 AND FC.FkData <> '' THEN 
									'CASE WHEN CONVERT(NVARCHAR(MAX), MT.' + FC.FkData +', 105)= ''01-01-1900'' THEN ''''
										ELSE CONVERT(NVARCHAR(MAX), MT.' + FC.FkData + ', 127) END'
						ELSE 
							(CASE WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') <> '' THEN ' CAST(MT.' + ColumnName + ' AS DECIMAL(32, ' + CAST((CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE DL.VALUE END) AS VARCHAR(5)) + '))' 
								  WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') = '' THEN ' CAST(MT.' + ColumnName + ' AS DECIMAL(32, ' + CAST((CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE 4 END) AS VARCHAR(5)) + '))' 
								  ELSE (CASE WHEN FC.DataType = 4 OR FC.DataType = 5 THEN 'CASE WHEN CONVERT(NVARCHAR(MAX), MT.' + ColumnName +', 105)= ''01-01-1900'' THEN ''''
													ELSE CONVERT(NVARCHAR(MAX), MT.' + ColumnName + ', 127) END'
										ELSE 'CONVERT(NVARCHAR(MAX), MT.' + ColumnName + ')' END) END)
							END + ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'') + ''"'''
					FROM CmnControlColumns FC 
						LEFT JOIN CmnColumnProperty CP ON CP.ColumnID = FC.ColumnID AND CP.Name = 'Condition' AND CP.IsDeleted = 0
						LEFT JOIN CmnColumnProperty DL ON DL.ColumnID = FC.ColumnID AND DL.Name = 'Decimal Length' AND DL.IsDeleted = 0
						LEFT JOIN CmnColumnProperty DDC ON DDC.ColumnID = FC.ColumnID AND DDC.Name = 'Decimal Currency' AND DDC.IsDeleted = 0
						LEFT JOIN CmnColumnProperty DCC ON DCC.ColumnID = FC.ColumnID AND DCC.Name = 'Currency Column' AND DCC.IsDeleted = 0
						LEFT JOIN CmnColumnProperty SI ON SI.ColumnID = FC.ColumnID AND SI.Name = 'Select by ID' AND SI.IsDeleted = 0
					WHERE FC.ControlID = @ControlID AND FC.IsDeleted = 0 AND 
							(ISNULL(FC.DependentFlag, 0) = CASE WHEN @Index = 1 THEN 0 ELSE 0 END OR ISNULL(FC.DependentFlag, 0) = CASE WHEN @Index = 1 THEN 1 ELSE 0 END)
					FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000);

					IF @Index = 1
						SET @SelectStmtQry1 = @SelectStmt;
					ELSE
						SET @SelectStmtQry2 = @SelectStmt;
					SET @Index += 1;
				END
		
				SELECT @CTEColumnnames = SUBSTRING((SELECT ',[' + ColumnName + ']'
												FROM CmnControlColumns FC WHERE FC.ControlID = @ControlID AND FC.IsDeleted = 0 
												AND ISNULL(FC.DependentFlag, 0) = CASE WHEN (@ControlType = 24 OR @ControlType = 25) THEN 0 ELSE ISNULL(FC.DependentFlag, 0) END
												FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000);
				SELECT @SelectColumnnames = SUBSTRING((SELECT '+ '','' + ISNULL([' + ColumnName + '], '''')'
													   FROM CmnControlColumns FC WHERE FC.ControlID = @ControlID AND FC.IsDeleted = 0 
													   AND ISNULL(FC.DependentFlag, 0) = CASE WHEN (@ControlType = 24 OR @ControlType = 25) THEN 0 ELSE ISNULL(FC.DependentFlag, 0) END
													   FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 9, 4000000000);
				IF (@FormType = 10)
				BEGIN
					SET @StartRangeColumns = ISNULL((SELECT ISNULL(FC.ColumnName, '') FROM CmnControlColumns FC 
														JOIN CmnColumnProperty CC ON CC.ColumnID = FC.ColumnID AND CC.Name= 'Date' AND CC.Value = 'Start'				
													WHERE FC.ControlID = @ControlID AND FC.IsDeleted = 0 
														AND ISNULL(FC.DependentFlag, 0) = CASE WHEN (@ControlType = 24 OR @ControlType = 25) THEN 0 ELSE ISNULL(FC.DependentFlag, 0) END
														AND (FC.ControlType = 4 OR FC.ControlType = 5)), '');
					IF (@StartRangeColumns = '') 
					BEGIN
						SELECT @StartRangeColumns = (SELECT ISNULL(FC.ColumnName, '') FROM CmnControlColumns FC WHERE FC.ControlID = @ControlID AND FC.IsDeleted = 0 
																			   AND ISNULL(FC.DependentFlag, 0) = CASE WHEN (@ControlType = 24 OR @ControlType = 25) THEN 0 ELSE ISNULL(FC.DependentFlag, 0) END
																			   AND (FC.ControlType = 4 OR FC.ControlType = 5) AND FC.ColumnName LIKE '%Start%');
					END
					SET @EndRangeColumns = ISNULL((SELECT ISNULL(FC.ColumnName, '') FROM CmnControlColumns FC 
														JOIN CmnColumnProperty CC ON CC.ColumnID = FC.ColumnID AND CC.Name= 'Date' AND CC.Value = 'End'				
													WHERE FC.ControlID = @ControlID AND FC.IsDeleted = 0 
														AND ISNULL(FC.DependentFlag, 0) = CASE WHEN (@ControlType = 24 OR @ControlType = 25) THEN 0 ELSE ISNULL(FC.DependentFlag, 0) END
														AND (FC.ControlType = 4 OR FC.ControlType = 5)), '');
					IF (@EndRangeColumns = '') 
					BEGIN
						SELECT @EndRangeColumns = (SELECT ISNULL(FC.ColumnName, '') FROM CmnControlColumns FC WHERE FC.ControlID = @ControlID AND FC.IsDeleted = 0 
																		   AND ISNULL(FC.DependentFlag, 0) = CASE WHEN (@ControlType = 24 OR @ControlType = 25) THEN 0 ELSE ISNULL(FC.DependentFlag, 0) END
																		   AND (FC.ControlType = 4 OR FC.ControlType = 5) AND FC.ColumnName LIKE '%End%');
					END
				END
				SELECT @GridType = (SELECT Value FROM CmnControlProperty CP where CP.ControlID = @ControlID AND CP.Name = 'Grid Type' AND @ControlType = 19 AND CP.IsDeleted = 0);
				
				IF (@FormType = 10 AND @GridType <> 0 AND (@StartRangeColumns <> '' AND @EndRangeColumns <> ''))
				BEGIN
					SET @qry = ';WITH GridValues ([Limit],' + @CTEColumnnames + ') AS (
								SELECT ROW_NUMBER() OVER (ORDER BY ' + '@SQLSortValues@' + '), ' 
								+ '@SQLSelectStmt@' + ' FROM ' + @TableName + ' MT '
								+ '@SQLFilterTable@'
								+ ' WHERE @SQLFkCondition@'
								+ '@SQLColumnValues@'
								+ '@SQLFilterBy@'
								+ CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND ' END + @AdditionalCondition
								+ '@SQLParentControl@'
								+ '@SQLFilterCondition@'
								+ '@SQLRBSConditions@'
								+ '@SQLConditionColumns@'
								+ CASE WHEN (@StartRangeColumns <> '' AND @EndRangeColumns <> '') THEN ' AND ' +  'MT.' + @StartRangeColumns + ' >= ' + '''@SQLStartDate@''' + ' AND ' + 'MT.' + @EndRangeColumns + ' <= ' + '''@SQLEndDate@''' ELSE '' END 
								+') SELECT ' + @SelectColumnnames + ' FROM GridValues '
								+ '@SQLLimit@'
								+ ' ORDER BY [Limit];'
				END
				ELSE
				BEGIN
					SET @qry = ';WITH GridValues ([Limit],' + @CTEColumnnames + ') AS (
								SELECT ROW_NUMBER() OVER (ORDER BY ' + '@SQLSortValues@' + '), ' 
								+ '@SQLSelectStmt@' + ' FROM ' + @TableName + ' MT '
								+ '@SQLFilterTable@'
								+ ' WHERE @SQLFkCondition@'
								+ '@SQLColumnValues@'
								+ '@SQLFilterBy@'
								+ CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND ' END + @AdditionalCondition
								+ '@SQLParentControl@'
								+ '@SQLFilterCondition@'
								+ '@SQLRBSConditions@'
								+ '@SQLConditionColumns@'
								+') SELECT ' + @SelectColumnnames + ' FROM GridValues '
								+ '@SQLLimit@'
								+ ' ORDER BY [Limit];'
				END
			
				SET @CountQry = 'SELECT COUNT(1) FROM ' + @TableName + ' MT '
								 + '@SQLFilterTable@'
								 + ' WHERE @SQLFkCondition@ '
								 + '@SQLColumnValues@'
								 + '@SQLFilterBy@'
								 + CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND ' END +  @AdditionalCondition
								 + '@SQLParentControl@'
								 + '@SQLFilterCondition@'
								 + '@SQLRBSConditions@'
								 + '@SQLConditionColumns@';

				SET @SPName = 'spCmnGridValues|' + @GridColumnName;

				INSERT INTO CmnFormQuery (FormID, FormType, ControlID, ControlType, SPName, TableName, MainTableName, DMLType, Query, CountQuery, FilterQuery, SubQuery, 
					FilterBy, FilterTable, FilterKey, FilterUniqueKey, KeyColumn, FKOrder, FKDelete, FkNotActive, 
					FkVersion, AdditionalCondition, DataCondition, CreatedBy, CreatedDate,DeleteFlag, FkShowActive)
				SELECT @IN_FormID, @FormType, @ControlID, @ControlType, @SPName, @TableName, @MainTableName, @QryType, @qry, @CountQry, @SelectStmtQry1, @SelectStmtQry2, @FilterBy, @FilterTable, @FilterKey, 
					@FilterUniqueKey, @KeyColumn, @FkOrder, @FkDelete, @FkNotActive, @FkVersion, @AdditionalCondition, @FilterConditions, @IN_UserID, GETUTCDATE(), 0, @FkShowActive;
			END
			IF OBJECT_ID('tempdb..#tempGridColumnList') IS NOT NULL
				DROP TABLE #tempGridColumnList;
		END
		--	spCmnGridValues Query End --

		-- spCmnGridFillControl Query Start --
		SET @FilterQry = '';
		SET @AdditionalCondition = '';
		SET @FkDelete = 0;
		SET @FkNotActive = 0;
		SET @FkVersion = 0;
		SET @FkShowActive = 0;
		-- Add Grid Column list to temporary table
		IF OBJECT_ID('tempdb..#tempGridFillColumnList') IS NOT NULL
			DROP TABLE #tempGridFillColumnList;
		CREATE TABLE #tempGridFillColumnList(RecID INT IDENTITY(1,1) NOT NULL, GridColumnName NVARCHAR(200) NOT NULL, ControlID INT NOT NULL, ControlType INT NOT NULL, TableName SYSNAME, 
											 KeyColumn SYSNAME, FKType INT NULL, FKTable NVARCHAR(200) NULL, FKDelete BIT NOT NULL, FKNotActive BIT NOT NULL, FormType INT NOT NULL, 
											 FKVersion BIT NOT NULL, FkOrder INT NOT NULL, FkShowActive BIT NULL, MainTableName SYSNAME);
		INSERT INTO #tempGridFillColumnList
		SELECT CC.Value, FC.ControlID, FC.ControlType, FC.FkTable, 'MT.' + FC.FkColumn, FC.FKType, FC.FKTable, FC.FkDelete, FC.FkNotActive,
			   FD.FormType,  FC.FkVersion, ISNULL(FC.FkOrder, 0), ISNULL(FC.FkShowActive, 0),
			   CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
					WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '')
					ELSE ISNULL(FD.TableName, '') END
		FROM CmnFormDetails FD WITH (NOLOCK)
			JOIN CmnFormTabs FT WITH (NOLOCK) ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
			JOIN CmnGroupBoxes GB WITH (NOLOCK) ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
			JOIN CmnFormControls FC WITH (NOLOCK) ON FC.GroupID = GB.GroupID AND FC.ControlType = 19 AND FC.IsDeleted = 0
			JOIN CmnControlProperty CC WITH (NOLOCK) ON CC.ControlID = FC.ControlID AND CC.Name = 'Grid Header' AND CC.IsDeleted = 0
		WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;

		-- Prepare Separate query for each Grid Column.
		SELECT @RowCnt = COUNT(1) FROM #tempGridFillColumnList;
		SET @RowIndex = 0;
		WHILE (@RowIndex < @RowCnt)
		BEGIN
			SET @RowIndex += 1;
			SELECT @GridColumnName = GridColumnName, @ControlID = ControlID, @ControlType = ControlType, @TableName = TableName, @MainTableName = MainTableName, @KeyColumn = KeyColumn, 
				   @FKType = FKType, @FKTable = FKTable, @FkDelete = FkDelete, @FkNotActive = FkNotActive, @FkVersion = FKVersion, @FormType = FormType, @FkOrder = FkOrder,
				   @FkShowActive = FkShowActive
			FROM #tempGridFillColumnList WHERE RecID = @RowIndex;

			SET @FilterBy = '';
			SET @FilterTable = '';
			SET @FilterTable = '';
			SET @FilterKey = '';
			SET @FilterUniqueKey = '';
			SELECT @FilterBy = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter By' AND IsDeleted = 0;
			SELECT @FilterTable = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter Table' AND IsDeleted = 0;
			SELECT @FilterKey = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter Key' AND IsDeleted = 0;
			SELECT @FilterUniqueKey = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Filter Unique Key' AND IsDeleted = 0;

			SET @AdditionalCondition = ISNULL((SELECT TOP 1 FC.AdditionalConditions 
												FROM CmnFormDetails FD WITH (NOLOCK)
													JOIN CmnFormTabs FT WITH (NOLOCK) ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
													JOIN CmnGroupBoxes GB WITH (NOLOCK) ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
													JOIN CmnFormControls FC WITH (NOLOCK) ON FC.GroupID = GB.GroupID AND FC.ControlType = 19 AND FC.IsDeleted = 0
													JOIN CmnControlProperty CC WITH (NOLOCK) ON CC.ControlID = FC.ControlID AND CC.Name = 'Grid Header' AND CC.Value = @GridColumnName AND CC.IsDeleted = 0
												WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0), '');
			SET @DataTreeCondition = ISNULL((SELECT Value FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Data Tree Condition' AND IsDeleted = 0), '');
			SELECT @CTEColumnnames = SUBSTRING((SELECT ',[' + ColumnName + ']'
										FROM CmnControlColumns FC WHERE FC.ControlID = @ControlID AND FC.IsDeleted = 0
										FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000);
			SELECT @SelectColumnnames = SUBSTRING((SELECT '+ '','' + ISNULL([' + ColumnName + '], '''')'
										FROM CmnControlColumns FC WHERE FC.ControlID = @ControlID AND FC.IsDeleted = 0
										FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 9, 4000000000);
			SET @OrderByColumn = '';
			SELECT @OrderByColumn = ISNULL(Value, '') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Order By Column' AND IsDeleted = 0;
			IF @OrderByColumn <> ''
			BEGIN 
		 		SET @KeyColumn = 'MT.' + @OrderByColumn + ',' + @KeyColumn;
			END

			SELECT @SelectStmt = SUBSTRING((SELECT ',' + '''"' + ColumnName + '":"'' + REPLACE(REPLACE(ISNULL(CAST(' +
								CASE WHEN FC.ControlType = 2 AND ISNULL(SI.Value, '') <> '' AND FC.FkData <> '' THEN 'MT.'+ FC.ColumnName									
									WHEN (FC.ControlType = 24 OR FC.ControlType = 25) THEN 
										CASE WHEN FC.FkType = 1 THEN ' SUBSTRING((SELECT '','' '+'+'+'(''{"Value":"'' + REPLACE(REPLACE(CAST(' + FC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST('+ FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')' +'+''"}'') FROM CmnCodeMaster CM WHERE CM.Type=''' + FC.FkTable + ''' AND                        
												(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +  
													ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0) '+
													CASE WHEN ISNULL(FC.GridParentControl, '') <> '' AND ISNULL(FC.AdditionalConditions, '') <> ''
													THEN CASE WHEN CHARINDEX('@', ISNULL(FC.AdditionalConditions, '')) = 0 
														THEN ' AND CM.' + REPLACE(ISNULL(FC.AdditionalConditions, ''), 'AND ', 'AND CM.') + ' = MT.' + ISNULL(FC.GridParentControl, '')
														ELSE dbo.fn_ConstractDependentConditions(ISNULL(FC.AdditionalConditions, ''), ISNULL(FC.GridParentControl, ''), 0, 'CM', 'MT') END
													ELSE '' END +
													' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '  
										WHEN FC.FkType = 2 THEN ' SUBSTRING((SELECT '','' '+'+'+'(''{"Value":"'' + REPLACE(REPLACE(CAST(' + FC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST('+ FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')' +'+''"}'') FROM ' + FC.FkTable + ' JT WHERE ' + 
												'(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +  							
													ISNULL(CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0)'+   
												CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' OR CHARINDEX('@', ISNULL(FC.AdditionalConditions, '')) > 0 THEN '' ELSE 
													CASE WHEN ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% NULL %' 
														OR ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% NOT NULL %'
														OR ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% = %' 
														OR ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% IN %' 
															THEN ' AND ' + FC.AdditionalConditions 
															ELSE '' END
												END +
												CASE WHEN ISNULL(CP.Value, '') = '' THEN '' ELSE ' AND '+ CP.Value END +
												CASE WHEN ISNULL(FC.GridParentControl, '') <> '' AND ISNULL(FC.AdditionalConditions, '') <> ''
												THEN CASE WHEN CHARINDEX('@', ISNULL(FC.AdditionalConditions, '')) = 0 
													THEN ' AND JT.' + REPLACE(ISNULL(FC.AdditionalConditions, ''), 'AND ', 'AND JT.') + ' = MT.' + ISNULL(FC.GridParentControl, '')
													ELSE dbo.fn_ConstractDependentConditions(ISNULL(FC.AdditionalConditions, ''), ISNULL(FC.GridParentControl, ''), 0, 'JT', 'MT') END
												ELSE '' END +
												CASE WHEN FC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(JT.IsDeleted, 0) = 0 ' END + 
												CASE WHEN FC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(JT.NotActive, 0) = 0 ' END + 
												CASE WHEN FC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(JT.IsCurrentVersion, 1) = 1 ' END +
												' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000)' 
										END 
									WHEN FC.FkType = 1 AND FC.ControlType <> 8 THEN ' SUBSTRING((SELECT '','' '+'+'+' REPLACE(REPLACE(CAST(' + FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')' + 
													CASE WHEN ISNULL(FC.FkData1, '') <> '' THEN '+' + ' CONCAT('' - '', REPLACE(REPLACE(ISNULL(CAST(CM.'+FC.FkData1+ ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"''))' ELSE '' END +
													CASE WHEN ISNULL(FC.FkData2, '') <> '' THEN '+' + ' CONCAT('' - '', REPLACE(REPLACE(ISNULL(CAST(CM.'+FC.FkData2+ ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"''))' ELSE '' END +
										' FROM CmnCodeMaster CM WHERE CM.Type=''' + FC.FkTable + ''' AND 																					
										(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +  
										ISNULL( CONVERT(NVARCHAR(MAX), MT.' + ColumnName + '), '''') + '','') > 0) ' +
										' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) ' 
										WHEN FC.FkType = 2 AND FC.ControlType <> 8 THEN ' (SELECT TOP 1 REPLACE(REPLACE(CAST(' +  FC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') ' +
													CASE WHEN ISNULL(FC.FkData1, '') <> '' THEN '+' + ' CONCAT('' - '', REPLACE(REPLACE(ISNULL(CAST(JT.'+FC.FkData1+ ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"''))' ELSE '' END +
													CASE WHEN ISNULL(FC.FkData2, '') <> '' THEN '+' + ' CONCAT('' - '', REPLACE(REPLACE(ISNULL(CAST(JT.'+FC.FkData2+ ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"''))' ELSE '' END +		
											 ' FROM ' + FC.FkTable + ' JT WHERE ' + '(PATINDEX(''%,'' + CONVERT(NVARCHAR(MAX), ' + FC.FkColumn + ')' + '+'',%'', '','' +  
											ISNULL(CONVERT(NVARCHAR(MAX), MT.' + CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' OR ISNULL(FC.AdditionalConditions, '') LIKE '% NULL%' OR ISNULL(FC.AdditionalConditions, '') LIKE '% NOT NULL%'
														OR ISNULL(FC.AdditionalConditions, '') LIKE '% = %' OR ISNULL(FC.AdditionalConditions, '') LIKE '% IN%' 
													THEN FC.ColumnName 
													ELSE FC.AdditionalConditions END + '), '''') + '','') > 0)'+  
												CASE WHEN ISNULL(FC.AdditionalConditions, '') = '' THEN '' 
												ELSE CASE WHEN ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% NULL %' 
														OR ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% NOT NULL %'
														OR ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% = %' 
														OR ISNULL((SELECT TOP 1 ISNULL(items, '') FROM dbo.fn_RevolSpliter(ISNULL(FC.AdditionalConditions, ''), ' AND ') ORDER BY ID DESC), '') LIKE '% IN %' 
													THEN ' AND ' + FC.AdditionalConditions 
													ELSE '' END END +' ' + CASE WHEN ISNULL(CP.Value, '') = '' THEN '' ELSE ' AND '+ CP.Value END  + ')' 
										WHEN FC.FkType = 3 THEN ' SUBSTRING((SELECT '','' + CAST(' + FC.FkColumn + ' AS NVARCHAR(MAX)) + ''|''+' + FC.FkData + '+''|'' + CF.FileName
																FROM CmnFileUpload CF WHERE ' + FC.FkColumn + ' = MT.' + ColumnName + 
																' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
									WHEN FC.FkType = 0 AND FC.FkData <> '' THEN 
											'CASE WHEN CONVERT(NVARCHAR(50), MT.' + FC.FkData +', 105)= ''01-01-1900'' THEN ''''
													ELSE '+(CASE WHEN FC.DataType = 4 OR FC.DataType = 5 THEN 'CONVERT(NVARCHAR(MAX), MT.' + FC.FkData + ', 127)' ELSE 'CONVERT(NVARCHAR(MAX), MT.' + FC.FkData + ')' END)+' END'
									ELSE (CASE WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') <> '' THEN ' CAST('+ 'MT.' + ColumnName+' AS DECIMAL(32, '+ CAST((CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE DL.VALUE END) AS VARCHAR(5)) +'))' 
											WHEN FC.DataType = 8 AND ISNULL(DL.VALUE, '') = '' THEN ' CAST('+ 'MT.' + ColumnName+ ' AS DECIMAL(32, '+ CAST((CASE WHEN ISNULL(DDC.VALUE, 0) = 1 THEN @DecimalLength ELSE 4 END) AS VARCHAR(5)) +'))'
											ELSE (CASE WHEN FC.DataType = 4 OR FC.DataType = 5 THEN 'CASE WHEN CONVERT(NVARCHAR(MAX), MT.' + ColumnName +', 105)= ''01-01-1900'' THEN ''''
																ELSE CONVERT(NVARCHAR(MAX), MT.' + ColumnName + ', 127) END'
													ELSE 'CONVERT(NVARCHAR(MAX), MT.' + ColumnName + ')' END) END)
									END +  ' AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'') + ''"'''
			FROM CmnControlColumns FC 
				LEFT JOIN CmnColumnProperty CP ON CP.ColumnID = FC.ColumnID AND CP.Name = 'Condition' AND CP.IsDeleted = 0
				LEFT JOIN CmnColumnProperty DL ON DL.ColumnID = FC.ColumnID AND DL.Name = 'Decimal Length' AND DL.IsDeleted = 0
				LEFT JOIN CmnColumnProperty DDC ON DDC.ColumnID = FC.ColumnID AND DDC.Name = 'Decimal Currency' AND DDC.IsDeleted = 0
				LEFT JOIN CmnColumnProperty DCC ON DCC.ColumnID = FC.ColumnID AND DCC.Name = 'Currency Column' AND DCC.IsDeleted = 0
				LEFT JOIN CmnColumnProperty SI ON SI.ColumnID = FC.ColumnID AND SI.Name = 'Select by ID' AND SI.IsDeleted = 0
			WHERE FC.ControlID = @ControlID AND FC.IsDeleted = 0
			FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000);

			SET @qry = ';WITH GridFill ([Limit],' + @CTEColumnnames + ',[IsNotActiveRecord]'+ ') AS ('
							+ 'SELECT ROW_NUMBER() OVER (ORDER BY ' + '@SQLSortValues@' + '), ' 
							+ @SelectStmt 
							+ ',' + '''"IsNotActiveRecord":"''' + ' + REPLACE(REPLACE(ISNULL(CAST(CONVERT(NVARCHAR(MAX),' +
								CASE WHEN @FkDelete = 0 AND @FkNotActive = 0 AND @FkVersion = 0 AND @FkShowActive = 1 THEN
								'CASE WHEN MT.IsDeleted = 1 OR MT.NotActive = 1 OR MT.IsCurrentVersion = 0 THEN ''1'' ELSE ''0'' END '
								ELSE '0' END +
								') AS NVARCHAR(MAX)), ''''), ''\'', ''\\''),''"'', ''\"'') + ''"''' 
							+ ' FROM ' + @TableName + ' MT '
							+ '@SQLFilterTable@'
							+ 'WHERE 1=1 '
							+ '@SQLFilterBy@'
							+ '@SQLColumnValues@'
							+ CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND ' END + @AdditionalCondition
							+ '@SQLDataID@'
							+ CASE WHEN @DataTreeCondition = '' THEN '' ELSE ' AND MT.' END + @DataTreeCondition
							+ '@SQLDataTreeValue@'
							+ '@SQLRBSConditions@'
							+ CASE WHEN ISNULL(@FkDelete, 0) = 0 THEN '' ELSE ' AND MT.IsDeleted = 0 ' END
							+ CASE WHEN ISNULL(@FkNotActive, 0) = 0 THEN '' ELSE ' AND MT.NotActive = 0 ' END + ')
								SELECT ' + @SelectColumnnames + '+ '','' + ISNULL([IsNotActiveRecord], '''')' + ' FROM GridFill '
							+ '@SQLLimit@'
							+ ' ORDER BY [Limit];'

			SET @CountQry = 'SELECT COUNT(1) FROM ' + @TableName + ' MT '
								+ '@SQLFilterTable@'
								+ 'WHERE 1=1 '
								+ '@SQLFilterBy@'
								+ '@SQLColumnValues@'
								+ CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND ' END + @AdditionalCondition
								+ '@SQLDataID@'
								+ CASE WHEN @DataTreeCondition = '' THEN '' ELSE ' AND MT.' END + @DataTreeCondition +
								+ '@SQLDataTreeValue@'
								+ '@SQLRBSConditions@'
								+ CASE WHEN ISNULL(@FkDelete, 0) = 0 THEN '' ELSE ' AND MT.IsDeleted = 0 ' END
								+ CASE WHEN ISNULL(@FkNotActive, 0) = 0 THEN '' ELSE ' AND MT.NotActive = 0 ' END;

			SET @SubQry = 'SET @TotCnt = (SELECT COUNT(1) FROM ' + @TableName + ' MT '
								+ '@SQLFilterTable@'
								+ ' WHERE 1=1 '
								+ '@SQLFilterBy@'
								+ '@SQLColumnValues@'
								+ CASE WHEN @AdditionalCondition = '' THEN '' ELSE ' AND ' + @AdditionalCondition END
								+ '@SQLDataID@'
								+ CASE WHEN @DataTreeCondition = '' THEN '' ELSE ' AND MT.' END + @DataTreeCondition
								+ '@SQLDataTreeValue@'
								+ '@SQLRBSConditions@'
								+ CASE WHEN ISNULL(@FkDelete, 0) = 0 THEN '' ELSE ' AND MT.IsDeleted = 0 ' END
								+ CASE WHEN ISNULL(@FkNotActive, 0) = 0 THEN '' ELSE ' AND MT.NotActive = 0 ' END;

			SET @SPName = 'spCmnGridFillControl|' + @GridColumnName;

			INSERT INTO CmnFormQuery (FormID, FormType, ControlID, ControlType, SPName, TableName, MainTableName, DMLType, Query, CountQuery, FilterQuery, SubQuery, 
				FilterBy, FilterTable, FilterKey, FilterUniqueKey, KeyColumn, FKOrder, FKDelete, FkNotActive, 
				FkVersion, AdditionalCondition, DataCondition, CreatedBy, CreatedDate,DeleteFlag, FkShowActive)
			SELECT @IN_FormID, @FormType, @ControlID, @ControlType, @SPName, @TableName, @MainTableName, @QryType, @qry, @CountQry, @FilterQry, @SubQry, @FilterBy, @FilterTable, @FilterKey, 
				@FilterUniqueKey, @KeyColumn, @FkOrder, @FkDelete, @FkNotActive, @FkVersion, @AdditionalCondition, @DataTreeCondition, @IN_UserID, GETUTCDATE(), 0, @FkShowActive;
		END
		IF OBJECT_ID('tempdb..#tempGridFillColumnList') IS NOT NULL
			DROP TABLE #tempGridFillColumnList;
		-- spCmnGridFillControl Query End --
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END

GO
PRINT N'Creating [dbo].[spCmnPrepareFormQueryForAll]'
GO

CREATE PROCEDURE [dbo].[spCmnPrepareFormQueryForAll] (
	@IN_UserID INT
)
AS
BEGIN

	DECLARE @RowCnt INT, @RowIndex INT, @FormID INT, @query NVARCHAR(200);

	IF OBJECT_ID('tempdb..#tempFormIDList') IS NOT NULL
		DROP TABLE #tempFormIDList;
	CREATE TABLE #tempFormIDList(RecID INT IDENTITY(1,1) NOT NULL, FormID INT NOT NULL);

	INSERT INTO #tempFormIDList SELECT FormID FROM CmnFormDetails WHERE IsDeleted = 0;
	
	SELECT @RowCnt = COUNT(*) FROM #tempFormIDList;
	SET @RowIndex = 0;
	WHILE (@RowIndex < @RowCnt)
	BEGIN
		SET @RowIndex += 1;
		SELECT @FormID = FormID FROM #tempFormIDList WHERE RecID = @RowIndex;
		SET @query = 'EXEC spCmnPrepareFormQuery ' + CONVERT(VARCHAR(10), @FormID) + ', ' + CONVERT(VARCHAR(10), @IN_UserID);
		-- PRINT @query;
		EXEC sp_executesql @query;
	END

	IF OBJECT_ID('tempdb..#tempFormIDList') IS NOT NULL
		DROP TABLE #tempFormIDList;	
END

GO
PRINT N'Creating [dbo].[spCmnRBSDataVariableDataSources]'
GO

CREATE PROCEDURE [dbo].[spCmnRBSDataVariableDataSources](@IN_RBSFormID INT, @IN_RBSUserID INT, @IN_RBSRoleID INT,
	@IN_RBSForm VARCHAR(50), @IN_UserID INT, @IN_SESSIONID VARCHAR(500), @IN_RBSGroupID INT)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	  DECLARE @ErrorMessage NVARCHAR(2000),
						@ErrorSeverity NVARCHAR(50),
						@ErrorState NVARCHAR(50),
						@DSCount INT = 0,
						@OutString NVARCHAR(MAX) = '', 
						@Query NVARCHAR(MAX) = '',
						@Min INT = 0,  
						@Max INT = 0

		IF OBJECT_ID('tempdb..#tempFormControls') IS NOT NULL
			DROP TABLE #tempFormControls
				
		CREATE TABLE #tempFormControls (
			ControlID BIGINT NULL,
			ControlName NVARCHAR(200) NULL,
			TableName VARCHAR(255) NULL,
			TableColumn VARCHAR(255) NULL,
			FkType INT NULL,
			FkTable VARCHAR(255) NULL,
			FkColumn VARCHAR(255) NULL,
			FkData VARCHAR(255) NULL,
			FkOrder INT NULL)

		IF OBJECT_ID('tempdb..#tempDistinctFormControls') IS NOT NULL
			DROP TABLE #tempDistinctFormControls
				
		CREATE TABLE #tempDistinctFormControls (
			ControlName NVARCHAR(200) NULL,
			TableName VARCHAR(255) NULL,
			TableColumn VARCHAR(255) NULL,
			FkType INT NULL,
			FkTable VARCHAR(255) NULL,
			FkColumn VARCHAR(255) NULL,
			FkData VARCHAR(255) NULL,
			FkOrder INT NULL,
			RankNo INT NULL)

		IF OBJECT_ID('tempdb..#tempFormControlDataSource') IS NOT NULL
			DROP TABLE #tempFormControlDataSource
				
		CREATE TABLE #tempFormControlDataSource (
			ControlName NVARCHAR(200) NULL,
			TableName VARCHAR(255) NULL,
			TableColumn VARCHAR(255) NULL,
			DSNum INT NULL,
			DSQuery NVARCHAR(MAX) NULL,
			DataSource NVARCHAR(MAX) NULL,
			ControlOrder INT NULL)

		INSERT INTO #tempFormControls
		SELECT FC.ControlID, FC.Name, 
		CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
			 WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') ELSE ISNULL(FD.TableName, '') END AS TableName,
			FC.TableColumn, FC.FkType, FC.FkTable, FC.FkColumn, FC.FkData, 1
		FROM CmnFormDetails FD
			JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
			JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
			JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0    
		WHERE FD.FormID = @IN_RBSFormID AND ISNULL(FD.IsDeleted, 0) = 0 AND ISNULL(FC.DataVariable, 1)  = 1
			AND ISNULL(FC.FkType, 0) <> 0 AND ISNULL(FC.ControlType, 0) IN (2, 8, 10, 13, 30, 31, 26, 24, 25)
		UNION
		SELECT CC.ColumnID, CC.DisplayName, 
			CASE WHEN ISNULL(GB.TableName, '') <> '' THEN ISNULL(GB.TableName, '')
			 WHEN ISNULL(FT.TableName, '') <> '' THEN ISNULL(FT.TableName, '') ELSE ISNULL(FD.TableName, '') END AS TableName,
			CC.ColumnName, CC.FkType, CC.FkTable, CC.FkColumn, CC.FkData, 1
		FROM CmnFormDetails FD  		
			JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
			JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
			JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0	AND FC.ControlType = 19
			JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0
		WHERE FD.FormID = @IN_RBSFormID AND FD.IsDeleted = 0 AND ISNULL(CC.DataVariable, 1)  = 1
			AND ISNULL(CC.FkType, 0) <> 0 AND ISNULL(CC.ControlType, 0) IN (2, 8, 10, 13, 30, 31, 24, 25)
		UNION
		SELECT FS.SearchID, FS.Name, ISNULL(FD.TableName, '') AS TableName,
			FS.TableColumn, FS.FkType, FS.FkTable, FS.FkColumn, FS.FkData, 1
		FROM CmnFormDetails FD  
			JOIN CmnFormSearchControl FS ON FS.FormID = FD.FormID AND FS.IsDeleted = 0
		WHERE FD.FormID = @IN_RBSFormID AND FD.IsDeleted = 0 AND ISNULL(FS.DataVariable, 1)  = 1
				AND ISNULL(FS.FkType, 0) IN (1, 2) AND ISNULL(FS.ControlType, 0) IN (2, 8, 10, 13, 30, 31, 24, 25);

		INSERT INTO #tempDistinctFormControls
		SELECT ControlName, TableName, TableColumn, FkType, FkTable, FkColumn, FkData, FkOrder, 
			RANK () OVER (PARTITION BY TableName, TableColumn ORDER BY ControlID)
		FROM #tempFormControls

		DELETE FROM #tempDistinctFormControls WHERE RankNo <> 1

		INSERT INTO #tempFormControlDataSource
		SELECT ControlName, TableName, TableColumn, 0,
			CASE WHEN FC.FkType = 1 THEN ' SET @DOUT = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"'' + REPLACE(REPLACE(CAST(CM.' + FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(CM.' + FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') ' +' +''"}'') FROM CmnCodeMaster CM WHERE CM.Type=''' + FkTable + '''' + CASE WHEN ISNULL(CMID.COLUMN_NAME, '') = '' THEN '' ELSE ' AND ISNULL(CM.IsDeleted, 0) = 0 ' END + CASE WHEN ISNULL(CMNA.COLUMN_NAME, '') = '' THEN '' ELSE ' AND ISNULL(CM.NotActive, 0) = 0 ' END + dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, 'CmnCodeMaster', FkColumn) + ' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
				WHEN FC.FkType = 2 THEN ' SET @DOUT = ISNULL(SUBSTRING((SELECT '','' + (''{"Value":"''+ REPLACE(REPLACE(CAST(MT.' + FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(MT.' + FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'')' +' +''"}'') FROM ' + FkTable + ' MT WHERE 1=1 ' + CASE WHEN ISNULL(FTID.COLUMN_NAME, '') = '' THEN '' ELSE ' AND ISNULL(MT.IsDeleted, 0) = 0 ' END + CASE WHEN ISNULL(FTNA.COLUMN_NAME, '') = '' THEN '' ELSE ' AND ISNULL(MT.NotActive, 0) = 0 ' END + dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, FkTable, FkColumn) + ' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000),'''') '
				ELSE '' END AS DSQuery, '', ROW_NUMBER() OVER (ORDER BY TableName, TableColumn)
		FROM #tempDistinctFormControls FC
			LEFT JOIN INFORMATION_SCHEMA.COLUMNS CMID ON FC.FkType = 1 AND CMID.TABLE_NAME = 'CmnCodeMaster' AND CMID.COLUMN_NAME = 'IsDeleted'
			LEFT JOIN INFORMATION_SCHEMA.COLUMNS FTID ON FC.FkType = 2 AND FTID.TABLE_NAME = FC.FkTable AND FTID.COLUMN_NAME = 'IsDeleted'
			LEFT JOIN INFORMATION_SCHEMA.COLUMNS CMNA ON FC.FkType = 1 AND CMNA.TABLE_NAME = 'CmnCodeMaster' AND CMNA.COLUMN_NAME = 'NotActive'
			LEFT JOIN INFORMATION_SCHEMA.COLUMNS FTNA ON FC.FkType = 2 AND FTNA.TABLE_NAME = FC.FkTable AND FTNA.COLUMN_NAME = 'NotActive'

		UPDATE #tempFormControlDataSource SET @DSCount = DSNum = @DSCount + 1 WHERE DSQuery <> ''
	  
		SET @Min = 0
		SET @Max = 0
		SELECT @Min = MIN(DSNum), @Max = MAX(DSNum) FROM #tempFormControlDataSource WHERE DSNum <> 0
	  
		WHILE (@Min <> 0 AND @Min <= @Max) 
		BEGIN
			SET @OutString = ''
			SELECT @Query = DSQuery FROM #tempFormControlDataSource WHERE DSNum = @Min
			IF @Query <> '' 
				EXEC sp_executesql @Query, N'@DOUT NVARCHAR(MAX) OUTPUT', @OutString OUTPUT  
	  
			UPDATE #tempFormControlDataSource SET DataSource = @OutString WHERE DSNum = @Min
	  
			SET @Min = @Min + 1
		END
	  
		IF @IN_RBSForm = 'Role'
		BEGIN
			SELECT DS.ControlName AS ControlName, DS.TableName AS TableName, DS.TableColumn AS TableColumn, 
				CONCAT('[', DS.DataSource, ']') AS DataSource, ISNULL(RBS.DataValue, '') AS DataValue, ISNULL(RBS.SelfData, 0) AS SelfData,
			CASE WHEN (DS.TableColumn IN ('CompanyID', 'BranchID', 'UserID', 'RoleID', 'DesignationID', 'DepartmentID', 'WorkshiftID', 
				'ReportingHeadID', 'NationalityID', 'GenderID', 'TitleID', 'EmployeeID', 'UserTypeID', 'InchargeID', 'ResponsibleID', 
				'Approvers', 'Reviewers', 'ApproverID', 'EmployeeDesignations') 
				OR DS.TableColumn LIKE '%ByID' OR DS.TableColumn LIKE '%ToID' OR DS.TableColumn LIKE '%ToIDs' OR DS.TableColumn LIKE '%ByIDs' 
				OR DS.TableColumn LIKE '%Designations' OR DS.TableColumn LIKE '%Roles' OR DS.TableColumn LIKE '%Departments'
				OR DS.TableColumn LIKE '%ClientID' OR DS.TableColumn LIKE '%Supplier' OR DS.TableColumn LIKE '%SupplierID') THEN 1 ELSE 0 END AS SelfOption
			FROM #tempFormControlDataSource DS
				LEFT JOIN CmnRBSRoleDataVariablePermission RBS ON RBS.RoleID = @IN_RBSRoleID AND RBS.FormID = @IN_RBSFormID
					AND RBS.TableName = DS.TableName AND RBS.TableColumn = DS.TableColumn AND ISNULL(RBS.IsDeleted, 0) = 0
			ORDER BY DS.ControlOrder;
		END
		ELSE IF (@IN_RBSForm = 'User')
		BEGIN
			SELECT DS.ControlName AS ControlName, DS.TableName AS TableName, DS.TableColumn AS TableColumn, 
				CONCAT('[', DS.DataSource, ']') AS DataSource, ISNULL(RBS.DataValue, '') AS DataValue, ISNULL(RBS.SelfData, 0) AS SelfData,
			CASE WHEN (DS.TableColumn IN ('CompanyID', 'BranchID', 'UserID', 'RoleID', 'DesignationID', 'DepartmentID', 'WorkshiftID', 
				'ReportingHeadID', 'NationalityID', 'GenderID', 'TitleID', 'EmployeeID', 'UserTypeID', 'InchargeID', 'ResponsibleID',
				'Approvers', 'Reviewers', 'ApproverID', 'EmployeeDesignations') 
				OR DS.TableColumn LIKE '%ByID' OR DS.TableColumn LIKE '%ToID' OR DS.TableColumn LIKE '%ToIDs' OR DS.TableColumn LIKE '%ByIDs' 
				OR DS.TableColumn LIKE '%Designations' OR DS.TableColumn LIKE '%Roles' OR DS.TableColumn LIKE '%Departments'
				OR DS.TableColumn LIKE '%ClientID' OR DS.TableColumn LIKE '%Supplier' OR DS.TableColumn LIKE '%SupplierID') THEN 1 ELSE 0 END AS SelfOption
			FROM #tempFormControlDataSource DS
				LEFT JOIN CmnRBSDataVariablePermission RBS ON RBS.UserID = @IN_RBSUserID AND RBS.FormID = @IN_RBSFormID
					AND RBS.TableName = DS.TableName AND RBS.TableColumn = DS.TableColumn AND ISNULL(RBS.IsDeleted, 0) = 0
			ORDER BY DS.ControlOrder;
		END
		ELSE IF (@IN_RBSForm = 'RBS Group')
		BEGIN
			SELECT DS.ControlName AS ControlName, DS.TableName AS TableName, DS.TableColumn AS TableColumn, 
				CONCAT('[', DS.DataSource, ']') AS DataSource, ISNULL(RBS.DataValue, '') AS DataValue, ISNULL(RBS.SelfData, 0) AS SelfData,
			CASE WHEN (DS.TableColumn IN ('CompanyID', 'BranchID', 'UserID', 'RoleID', 'DesignationID', 'DepartmentID', 'WorkshiftID', 
				'ReportingHeadID', 'NationalityID', 'GenderID', 'TitleID', 'EmployeeID', 'UserTypeID', 'InchargeID', 'ResponsibleID',
				'Approvers', 'Reviewers', 'ApproverID', 'EmployeeDesignations') 
				OR DS.TableColumn LIKE '%ByID' OR DS.TableColumn LIKE '%ToID' OR DS.TableColumn LIKE '%ToIDs' OR DS.TableColumn LIKE '%ByIDs' 
				OR DS.TableColumn LIKE '%Designations' OR DS.TableColumn LIKE '%Roles' OR DS.TableColumn LIKE '%Departments'
				OR DS.TableColumn LIKE '%ClientID' OR DS.TableColumn LIKE '%Supplier' OR DS.TableColumn LIKE '%SupplierID') THEN 1 ELSE 0 END AS SelfOption
			FROM #tempFormControlDataSource DS
				LEFT JOIN CmnRBSGroupsDataVariable RBS ON RBS.RBSGroupID = @IN_RBSGroupID AND RBS.FormID = @IN_RBSFormID
					AND RBS.TableName = DS.TableName AND RBS.TableColumn = DS.TableColumn AND ISNULL(RBS.IsDeleted, 0) = 0
			ORDER BY DS.ControlOrder;
		END

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnRBSDataVariableUpdate]'
GO

CREATE PROCEDURE [dbo].[spCmnRBSDataVariableUpdate](@IN_RBSFormID INT, @IN_RBSUserID INT, @IN_RBSRoleID INT, @IN_RBSForm VARCHAR(50), 
	@IN_ControlName NVARCHAR(200), @IN_TableName VARCHAR(255), @IN_TableColumn VARCHAR(255), @IN_DataValue NVARCHAR(MAX), 
	@IN_SelfData BIT, @IN_USERID INT, @IN_SESSIONID VARCHAR(500), @IN_RBSGroupID INT)
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
		BEGIN TRANSACTION tran_MyPageBlockConfig
			DECLARE @ErrorMessage NVARCHAR(2000),
							@ErrorSeverity NVARCHAR(50),
							@ErrorState NVARCHAR(50),
							@UTCTime DATETIME = GETUTCDATE(),
							@GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_USERID),
							@CompanyID INT = 0,
							@OrderBy INT = 0,
							@Min INT = 0,
							@Max INT = 0,
							@UserID INT,
							@RoleID INT = 0,
							@RBSGroup VARCHAR(100)

			SELECT @CompanyID = ISNULL(ED.CompanyID, 0)
			FROM CmnUserDetails UD
				JOIN MstEmployeeDetails ED ON UD.Type = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
			WHERE UD.UserID = @IN_USERID;

			IF @IN_RBSForm = 'Role'
			BEGIN
				IF NOT EXISTS (SELECT 1 FROM CmnRBSRoleDataVariablePermission WHERE RoleID = @IN_RBSRoleID AND FormID = @IN_RBSFormID 
						AND TableName = @IN_TableName AND TableColumn = @IN_TableColumn AND ISNULL(IsDeleted, 0) = 0) 
				BEGIN
					INSERT INTO CmnRBSRoleDataVariablePermission (RoleID, FormID, ControlName, TableName, TableColumn, DataValue,
						SelfData, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted)
					VALUES (@IN_RBSRoleID, @IN_RBSFormID, @IN_ControlName, @IN_TableName, @IN_TableColumn, @IN_DataValue, 
						@IN_SelfData, @IN_USERID, @UTCTime, @IN_USERID, @UTCTime, 0);
				END
				ELSE
				BEGIN
					UPDATE CmnRBSRoleDataVariablePermission
					SET ControlName = @IN_ControlName,
						DataValue = @IN_DataValue,
						SelfData = @IN_SelfData,
						ModifiedBy = @IN_USERID,
						ModifiedDate = @UTCTime
					WHERE RoleID = @IN_RBSRoleID AND FormID = @IN_RBSFormID 
						AND TableName = @IN_TableName AND TableColumn = @IN_TableColumn AND ISNULL(IsDeleted, 0) = 0;
				END

				UPDATE RBS
				SET ControlName = @IN_ControlName,
					DataValue = @IN_DataValue,
					SelfData = @IN_SelfData,
					ModifiedBy = @IN_USERID,
					ModifiedDate = @UTCTime
				FROM CmnRBSDataVariablePermission RBS
					JOIN CmnUserDetails UD ON UD.UserID = RBS.UserID AND ISNULL(UD.IsDeleted, 0) = 0
				WHERE PATINDEX(CONCAT('%,', CAST(@IN_RBSRoleID AS VARCHAR(50)), ',%'), CONCAT(',', UD.RoleID, ',')) > 0 AND RBS.FormID = @IN_RBSFormID 
					AND RBS.TableName = @IN_TableName AND RBS.TableColumn = @IN_TableColumn AND ISNULL(RBS.IsDeleted, 0) = 0;

				INSERT INTO CmnRBSDataVariablePermission (UserID, FormID, ControlName, TableName, TableColumn, DataValue,
					SelfData, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted)
				SELECT UD.UserID, @IN_RBSFormID, @IN_ControlName, @IN_TableName, @IN_TableColumn, @IN_DataValue, 
					@IN_SelfData, @IN_USERID, @UTCTime, @IN_USERID, @UTCTime, 0
				FROM CmnUserDetails UD 
				WHERE PATINDEX(CONCAT('%,', CAST(@IN_RBSRoleID AS VARCHAR(50)), ',%'), CONCAT(',', UD.RoleID, ',')) > 0 AND ISNULL(UD.IsDeleted, 0) = 0
					AND NOT EXISTS (SELECT 1 FROM CmnRBSDataVariablePermission RBS WHERE UD.UserID = RBS.UserID AND RBS.FormID = @IN_RBSFormID
						AND RBS.TableName = @IN_TableName AND RBS.TableColumn = @IN_TableColumn AND ISNULL(RBS.IsDeleted, 0) = 0);
			END
			ELSE IF (@IN_RBSForm = 'User')
			BEGIN
				IF NOT EXISTS (SELECT 1 FROM CmnRBSDataVariablePermission WHERE UserID = @IN_RBSUserID AND FormID = @IN_RBSFormID 
						AND TableName = @IN_TableName AND TableColumn = @IN_TableColumn AND ISNULL(IsDeleted, 0) = 0) 
				BEGIN
					INSERT INTO CmnRBSDataVariablePermission (UserID, FormID, ControlName, TableName, TableColumn, DataValue,
						SelfData, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted)
					VALUES (@IN_RBSUserID, @IN_RBSFormID, @IN_ControlName, @IN_TableName, @IN_TableColumn, @IN_DataValue, 
						@IN_SelfData, @IN_USERID, @UTCTime, @IN_USERID, @UTCTime, 0);
				END
				ELSE
				BEGIN
					UPDATE CmnRBSDataVariablePermission
					SET ControlName = @IN_ControlName,
						DataValue = @IN_DataValue,
						SelfData = @IN_SelfData,
						ModifiedBy = @IN_USERID,
						ModifiedDate = @UTCTime
					WHERE UserID = @IN_RBSUserID AND FormID = @IN_RBSFormID 
						AND TableName = @IN_TableName AND TableColumn = @IN_TableColumn AND ISNULL(IsDeleted, 0) = 0;
				END
			END
			ELSE IF (@IN_RBSForm = 'RBS Group')
			BEGIN
				SET @OrderBy = ISNULL((SELECT MAX(OrderBy) + 1 FROM CmnRBSGroupsDataVariable), 1);

				IF NOT EXISTS (SELECT 1 FROM CmnRBSGroupsDataVariable WHERE RBSGroupID = @IN_RBSGroupID AND FormID = @IN_RBSFormID 
						AND TableName = @IN_TableName AND TableColumn = @IN_TableColumn AND ISNULL(IsDeleted, 0) = 0) 
				BEGIN
					INSERT INTO CmnRBSGroupsDataVariable (RBSGroupID, FormID, ControlName, TableName, TableColumn, DataValue,
						SelfData, CompanyID, OrderBy, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT, 
						NotActive, IsDeleted, IsCurrentVersion, Version)
					VALUES (@IN_RBSGroupID, @IN_RBSFormID, @IN_ControlName, @IN_TableName, @IN_TableColumn, @IN_DataValue, 
						@IN_SelfData, @CompanyID, @OrderBy, @IN_USERID, @UTCTime, @GMTTime, @IN_USERID, @UTCTime, @GMTTime, 0, 0, 1, 1);
					
					IF NOT EXISTS (SELECT 1 FROM CmnRbsGroupForms WHERE RBSGroupID = @IN_RBSGroupID AND FormID = @IN_RBSFormID AND ISNULL(IsDeleted, 0) = 0)
					BEGIN
						SET @OrderBy = ISNULL((SELECT MAX(OrderBy) + 1 FROM CmnRbsGroupForms), 1);

						INSERT INTO CmnRbsGroupForms (RBSGroupID, FormID, CompanyID, OrderBy, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT, 
							NotActive, IsDeleted, IsCurrentVersion, Version)
						VALUES (@IN_RBSGroupID, @IN_RBSFormID, @CompanyID, @OrderBy, @IN_USERID, @UTCTime, @GMTTime, @IN_USERID, @UTCTime, @GMTTime, 0, 0, 1, 1);
					END
				END
				ELSE
				BEGIN
					SET @OrderBy = ISNULL((SELECT MAX(OrderBy) + 1 FROM CmnRBSGroupsDataVariable), 1);

					UPDATE CmnRBSGroupsDataVariable
					SET ControlName = @IN_ControlName,
						DataValue = @IN_DataValue,
						SelfData = @IN_SelfData,
						ModifiedBy = @IN_USERID,
						ModifiedDate = @UTCTime,
						ModifiedDateGMT = @GMTTime
					WHERE RBSGroupID = @IN_RBSGroupID AND FormID = @IN_RBSFormID 
						AND TableName = @IN_TableName AND TableColumn = @IN_TableColumn AND ISNULL(IsDeleted, 0) = 0;

					IF NOT EXISTS (SELECT 1 FROM CmnRbsGroupForms WHERE RBSGroupID = @IN_RBSGroupID AND FormID = @IN_RBSFormID AND ISNULL(IsDeleted, 0) = 0)
					BEGIN
						SET @OrderBy = ISNULL((SELECT MAX(OrderBy) + 1 FROM CmnRbsGroupForms), 1);

						INSERT INTO CmnRbsGroupForms (RBSGroupID, FormID, CompanyID, OrderBy, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT, 
							NotActive, IsDeleted, IsCurrentVersion, Version)
						VALUES (@IN_RBSGroupID, @IN_RBSFormID, @CompanyID, @OrderBy, @IN_USERID, @UTCTime, @GMTTime, @IN_USERID, @UTCTime, @GMTTime, 0, 0, 1, 1);
					END
				END

				DECLARE @UserRBSGroup Table (RowNum INT, UserID INT);

				INSERT INTO @UserRBSGroup

				SELECT ROW_NUMBER() OVER (ORDER BY UserID ASC) AS RowNum, UserID from cmnuserdetails where 
					PATINDEX('%,' + CAST(@IN_RBSGroupID AS NVARCHAR(50)) + ',%' , ',' + RBSGroupIDs + ',') > 0 AND IsDeleted = 0;
				SET @Min = 0;
				SET @Max = 0;
				SELECT @Min = MIN(RowNum), @Max = MAX(RowNum) FROM @UserRBSGroup WHERE ISNULL(RowNum, 0) <> 0;

				WHILE (@Min <> 0 AND @Min <= @Max)
				BEGIN	
					SET @UserID = ISNULL((SELECT UserID FROM @UserRBSGroup WHERE RowNum = @Min), 0);

					IF NOT EXISTS (SELECT 1 FROM CmnRBSDataVariablePermission WHERE UserID = @UserID AND FormID = @IN_RBSFormID 
							AND TableName = @IN_TableName AND TableColumn = @IN_TableColumn AND ISNULL(IsDeleted, 0) = 0) 
					BEGIN
						INSERT INTO CmnRBSDataVariablePermission (UserID, FormID, ControlName, TableName, TableColumn, DataValue,
								SelfData, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted)
						SELECT UD.UserID, @IN_RBSFormID, @IN_ControlName, @IN_TableName, @IN_TableColumn, @IN_DataValue, 
								@IN_SelfData, @IN_USERID, @UTCTime, @IN_USERID, @UTCTime, 0
							FROM CmnUserDetails UD 
							WHERE UserID = @UserID AND ISNULL(UD.IsDeleted, 0) = 0
								AND NOT EXISTS (SELECT 1 FROM CmnRBSDataVariablePermission RBS WHERE UD.UserID = RBS.UserID AND RBS.FormID = @IN_RBSFormID
						AND RBS.TableName = @IN_TableName AND RBS.TableColumn = @IN_TableColumn AND ISNULL(RBS.IsDeleted, 0) = 0);
					END
					ELSE
					BEGIN
						UPDATE CmnRBSDataVariablePermission
						SET ControlName = @IN_ControlName,
							DataValue = @IN_DataValue,
							SelfData = @IN_SelfData,
							ModifiedBy = @IN_USERID,
							ModifiedDate = @UTCTime
						WHERE UserID = @UserID AND FormID = @IN_RBSFormID 
							AND TableName = @IN_TableName AND TableColumn = @IN_TableColumn AND ISNULL(IsDeleted, 0) = 0;
					END			
			SET @Min = @Min + 1;
			END

			SET @RBSGroup = ISNULL((SELECT Name FROM CmnRBSGroups WHERE ReferenceID = @IN_RBSGroupID AND IsDeleted = 0), '');

			DECLARE @RoleRBSGroup Table (RowNum INT, RoleID INT);

			INSERT INTO @RoleRBSGroup
			SELECT ROW_NUMBER() OVER (ORDER BY CodemasterID ASC) AS RowNum, CodemasterID from CmnCodeMaster where Type = 'Roles'
					AND PATINDEX('%,' + @RBSGroup + ',%' , ',' + Details + ',') > 0 AND IsDeleted = 0;
			SET @Min = 0;
			SET @Max = 0;
			SELECT @Min = MIN(RowNum), @Max = MAX(RowNum) FROM @RoleRBSGroup WHERE ISNULL(RowNum, 0) <> 0;

			WHILE (@Min <> 0 AND @Min <= @Max)
			BEGIN	
				SET @RoleID = ISNULL((SELECT RoleID FROM @RoleRBSGroup WHERE RowNum = @Min), 0);

				IF NOT EXISTS (SELECT 1 FROM CmnRBSRoleDataVariablePermission WHERE RoleID = @RoleID AND FormID = @IN_RBSFormID 
						AND TableName = @IN_TableName AND TableColumn = @IN_TableColumn AND ISNULL(IsDeleted, 0) = 0) 
				BEGIN
					INSERT INTO CmnRBSRoleDataVariablePermission (RoleID, FormID, ControlName, TableName, TableColumn, DataValue,
						SelfData, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted)
					SELECT UD.CodemasterID, @IN_RBSFormID, @IN_ControlName, @IN_TableName, @IN_TableColumn, @IN_DataValue, 
							@IN_SelfData, @IN_USERID, @UTCTime, @IN_USERID, @UTCTime, 0
					FROM CmnCodeMaster UD
					WHERE Type = 'Roles' AND CodemasterID = @RoleID AND ISNULL(UD.IsDeleted, 0) = 0
							AND NOT EXISTS (SELECT 1 FROM CmnRBSRoleDataVariablePermission RBS WHERE RBS.RoleID = UD.CodemasterID AND RBS.FormID = @IN_RBSFormID
							AND RBS.TableName = @IN_TableName AND RBS.TableColumn = @IN_TableColumn AND ISNULL(RBS.IsDeleted, 0) = 0);
				END
				ELSE
				BEGIN
					UPDATE CmnRBSRoleDataVariablePermission
					SET ControlName = @IN_ControlName,
						DataValue = @IN_DataValue,
						SelfData = @IN_SelfData,
						ModifiedBy = @IN_USERID,
						ModifiedDate = @UTCTime
					WHERE RoleID = @RoleID AND FormID = @IN_RBSFormID 
						AND TableName = @IN_TableName AND TableColumn = @IN_TableColumn AND ISNULL(IsDeleted, 0) = 0;
				END
			
			SET @Min = @Min + 1;
			END

			END
		COMMIT TRANSACTION tran_MyPageBlockConfig
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION tran_MyPageBlockConfig

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnSaveAttendanceData]'
GO

CREATE PROCEDURE [dbo].[spCmnSaveAttendanceData] (
	@IN_ControlName NVARCHAR(500),
	@IN_MasterID BIGINT,
	@IN_Month VARCHAR(20),
	@IN_Year VARCHAR(20),
	@IN_ReferenceID BIGINT,
	@IN_ParentID BIGINT,
	@IN_Date VARCHAR(20), 
	@IN_Value NVARCHAR(500),
	@IN_AdditionalColumns VARCHAR(MAX),
	@IN_AdditionalData NVARCHAR(MAX),
	@IN_FormID INT, 
	@IN_UserID INT,
	@IN_SessionID VARCHAR(200))
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		--BEGIN TRANSACTION tran_SaveAttendanceData
			DECLARE @ErrorMessage NVARCHAR(2000),
					@ErrorSeverity NVARCHAR(50),
					@ErrorState NVARCHAR(50),
					@GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
					@UTCTime DATETIME = GETUTCDATE(),
					@ControlID BIGINT = 0,
					@FormTable VARCHAR(255) = '',
					@KeyColumn VARCHAR(255) = '',
					@MasterColumn VARCHAR(255) = '',
					@MasterValue VARCHAR(100) = '',
					@ParentIDColumn VARCHAR(255) = '',
					@DateColumn VARCHAR(255) = '',
					@ValueColumn VARCHAR(255) = '',
					@FkDelete BIT = 0,
					@FkNotActive BIT = 0,
					@FkVersion BIT = 0,
					@ReferenceID BIGINT = 0,
					@DataValue NVARCHAR(500) = '',
					@StatusFkType INT = 0,
					@StatusFkTable VARCHAR(255) = '',
					@StatusFkColumn VARCHAR(255) = '',
					@StatusFkData VARCHAR(255) = '',
					@OrderBy INT = 0,
					@CompanyID INT = 0,
					@IDQuery NVARCHAR(MAX) = '',
					@StatusQuery NVARCHAR(MAX) = '',
					@OrderQuery NVARCHAR(MAX) = '',
					@DMLQuery NVARCHAR(MAX) = ''

			SELECT @CompanyID = ISNULL(ED.CompanyID, 0)
			FROM CmnUserDetails UD
				LEFT JOIN MstEmployeeDetails ED ON UD.[Type] = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
			WHERE UD.UserID = @IN_UserID;

			IF @CompanyID = 0
				SET @CompanyID = ISNULL((SELECT TOP 1 ReferenceID FROM MstCompanyDetails WHERE ISNULL(ParentCompanyID, 0) = 0 AND IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1), 0);

			SELECT TOP 1 @ControlID = ControlID, @FkDelete = ISNULL(FkDelete, 0), @FkNotActive = ISNULL(FkNotActive, 0), @FkVersion = ISNULL(FkVersion, 0)
			FROM CmnFormQuery
			WHERE FormID = @IN_FormID AND SPName = 'spCmnGridFillControl|' + @IN_ControlName AND DeleteFlag = 0;

			SELECT @FormTable = ISNULL(TableName, '')
			FROM CmnFormDetails WHERE FormID = @IN_FormID;

			SELECT TOP 1 @KeyColumn = CC.ColumnName
			FROM CmnControlColumns CC
				JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID
			WHERE FC.ControlID = @ControlID AND CC.IsIdentity = 1 AND CC.IsDeleted = 0;

			SELECT TOP 1 @MasterColumn = CC.ColumnName
			FROM CmnColumnProperty CLP
				JOIN CmnControlColumns CC ON CC.ColumnID = CLP.ColumnID AND CC.IsDeleted = 0
				JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID
			WHERE FC.ControlID = @ControlID AND CLP.Name = 'Master Column' AND CLP.Value = '1' AND CLP.IsDeleted = 0;

			IF ISNULL(@MasterColumn, '') <> ''
			BEGIN
				SET @MasterColumn = CONCAT(@MasterColumn, ',');
				SET @MasterValue = CONCAT(@IN_MasterID, ',');
			END
			ELSE
			BEGIN
				SET @MasterColumn = '';
			END

			SELECT TOP 1 @ParentIDColumn = CC.ColumnName
			FROM CmnColumnProperty CLP
				JOIN CmnControlColumns CC ON CC.ColumnID = CLP.ColumnID AND CC.IsDeleted = 0
				JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID
			WHERE FC.ControlID = @ControlID AND CLP.Name = 'ParentID Column' AND CLP.Value = '1' AND CLP.IsDeleted = 0;

			SELECT TOP 1 @DateColumn = CC.ColumnName
			FROM CmnColumnProperty CLP
				JOIN CmnControlColumns CC ON CC.ColumnID = CLP.ColumnID AND CC.IsDeleted = 0
				JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID
			WHERE FC.ControlID = @ControlID AND CLP.Name = 'Date Column' AND CLP.Value = '1' AND CLP.IsDeleted = 0;

			SELECT TOP 1 @ValueColumn = CC.ColumnName, @StatusFkType = ISNULL(CC.FkType, 0), @StatusFkTable = ISNULL(CC.FkTable, ''),
				@StatusFkColumn = ISNULL(CC.FkColumn, ''), @StatusFkData = ISNULL(CC.FkData, '')
			FROM CmnColumnProperty CLP
				JOIN CmnControlColumns CC ON CC.ColumnID = CLP.ColumnID AND CC.IsDeleted = 0
				JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID
			WHERE FC.ControlID = @ControlID AND CLP.Name = 'Value Column' AND CLP.Value = '1' AND CLP.IsDeleted = 0;

			/*SET @IDQuery = CONCAT('SELECT @ID = ', @KeyColumn, ' FROM ', @FormTable, ' WHERE ', @ParentIDColumn, '=', @IN_ParentID,
				' AND (FORMAT(', @DateColumn, ', ''yyyy'') = ''', @IN_Year, ''') AND (FORMAT(', @DateColumn, ', ''MM'') = ''', @IN_Month, ''')',
				' AND (FORMAT(', @DateColumn, ', ''dd'') = ''', @IN_Date, ''')',
				CASE WHEN @FkDelete = 1 THEN ' AND ISNULL(IsDeleted, 0) = 0' ELSE '' END,
				CASE WHEN @FkNotActive = 1 THEN ' AND ISNULL(NotActive, 0) = 0' ELSE '' END,
				CASE WHEN @FkVersion = 1 THEN ' AND ISNULL(IsCurrentVersion, 1) = 1' ELSE '' END);

			EXEC SP_EXECUTESQL @IDQuery, N'@ID BIGINT OUT', @ReferenceID OUT*/

			IF @StatusFkType = 2
			BEGIN
				SET @StatusQuery = CONCAT('SELECT @DataValue = ISNULL(', @StatusFkColumn, ', ''0'') FROM ', @StatusFkTable, ' WHERE ',
					@StatusFkData, '=''', @IN_Value, ''' AND ISNULL(IsDeleted, 0) = 0');
			END
			ELSE IF @StatusFkType = 1
			BEGIN
				SET @StatusQuery = CONCAT('SELECT @DataValue = ISNULL(', @StatusFkColumn, ', ''0'') FROM CmnCodeMaster WHERE Type=''', @StatusFkTable, '''',
					' AND ', @StatusFkData, '=''', @IN_Value, ''' AND ISNULL(IsDeleted, 0) = 0');
			END
			IF ISNULL(@StatusQuery, '') <> ''
			BEGIN
				EXEC SP_EXECUTESQL @StatusQuery, N'@DataValue NVARCHAR(500) OUT', @DataValue OUT
			END
			ELSE
			BEGIN
				SET @DataValue = @IN_Value;
			END
			SET @DataValue = CASE WHEN ISNULL(@DataValue, '') = '' THEN '0' ELSE ISNULL(@DataValue, '0') END;

			IF ISNULL(@IN_ReferenceID, 0) <> 0
			BEGIN
				SET @DMLQuery = CONCAT('UPDATE ', @FormTable, ' SET ', @ValueColumn, '=''', @DataValue,
					''', ModifiedBy=', @IN_UserID, ', ModifiedDate = GETUTCDATE(), ModifiedDateGMT = GETUTCDATE()',
					' WHERE ', @KeyColumn, '=', @IN_ReferenceID, ' AND ', @ParentIDColumn, '=', @IN_ParentID,
					' AND (FORMAT(', @DateColumn, ', ''yyyy'') = ''', @IN_Year, ''') AND (FORMAT(', @DateColumn, ', ''MM'') = ''', @IN_Month, ''')',
					' AND (FORMAT(', @DateColumn, ', ''dd'') = ''', @IN_Date, ''')',
					CASE WHEN @FkDelete = 1 THEN ' AND ISNULL(IsDeleted, 0) = 0' ELSE '' END,
					CASE WHEN @FkNotActive = 1 THEN ' AND ISNULL(NotActive, 0) = 0' ELSE '' END,
					CASE WHEN @FkVersion = 1 THEN ' AND ISNULL(IsCurrentVersion, 1) = 1' ELSE '' END);
			END
			ELSE
			BEGIN
				IF ISNULL(@IN_AdditionalColumns, '') <> ''
				BEGIN
					SET @IN_AdditionalColumns = ',' + @IN_AdditionalColumns;
					SET @IN_AdditionalData =  ',' + @IN_AdditionalData;
				END
				SET @OrderQuery = CONCAT('SELECT @OrderBy = ISNULL(MAX(OrderBy), 0) FROM ', @FormTable, ' WHERE ', @ParentIDColumn, '=', @IN_ParentID,
					' AND (FORMAT(', @DateColumn, ', ''yyyy'') = ''', @IN_Year, ''') AND (FORMAT(', @DateColumn, ', ''MM'') = ''', @IN_Month, ''')',
					CASE WHEN @FkDelete = 1 THEN ' AND ISNULL(IsDeleted, 0) = 0' ELSE '' END,
					CASE WHEN @FkNotActive = 1 THEN ' AND ISNULL(NotActive, 0) = 0' ELSE '' END,
					CASE WHEN @FkVersion = 1 THEN ' AND ISNULL(IsCurrentVersion, 1) = 1' ELSE '' END);

				EXEC SP_EXECUTESQL @OrderQuery, N'@OrderBy INT OUT', @OrderBy OUT
				SET @OrderBy = @OrderBy + 1;

				SET @DMLQuery = CONCAT('INSERT INTO ', @FormTable, '(', @MasterColumn, @ParentIDColumn, ', ', @DateColumn, ', ', @ValueColumn, @IN_AdditionalColumns,
					', OrderBy, CompanyID, Version, IsCurrentVersion, IsDeleted, NotActive, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT)',
					' VALUES (', @MasterValue, @IN_ParentID, ', ''', @IN_Year, '-', @IN_Month, '-', @IN_Date, ''',''', @DataValue, '''', @IN_AdditionalData,
					',', @OrderBy, ',', @CompanyID,
					',1,1,0,0,', @IN_UserID, ',GETUTCDATE(),GETUTCDATE(),', @IN_UserID, ',GETUTCDATE(),GETUTCDATE())');
			END
			EXEC(@DMLQuery);
		--COMMIT TRANSACTION tran_SaveAttendanceData
	END TRY
	BEGIN CATCH
		--ROLLBACK TRANSACTION tran_SaveAttendanceData
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnSaveAttendanceMasterData]'
GO

CREATE PROCEDURE [dbo].[spCmnSaveAttendanceMasterData] (
	@IN_ControlName NVARCHAR(500),
	@IN_MasterColumns VARCHAR(MAX),
	@IN_MasterData NVARCHAR(MAX),
	@IN_FormID INT, 
	@IN_UserID INT,
	@IN_SessionID VARCHAR(200))
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		--BEGIN TRANSACTION tran_SaveAttendanceMasterData
			DECLARE @ErrorMessage NVARCHAR(2000),
					@ErrorSeverity NVARCHAR(50),
					@ErrorState NVARCHAR(50),
					@GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
					@UTCTime DATETIME = GETUTCDATE(),
					@GroupID BIGINT = 0,
					@TableName VARCHAR(255) = '',
					@KeyColumn VARCHAR(255) = '',
					@MasterID BIGINT = 0,
					@OrderBy INT = 0,
					@CompanyID INT = 0,
					@OrderQuery NVARCHAR(MAX) = '',
					@DMLQuery NVARCHAR(MAX) = ''

			SELECT @CompanyID = ISNULL(ED.CompanyID, 0)
			FROM CmnUserDetails UD
				LEFT JOIN MstEmployeeDetails ED ON UD.[Type] = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
			WHERE UD.UserID = @IN_UserID;

			IF @CompanyID = 0
				SET @CompanyID = ISNULL((SELECT TOP 1 ReferenceID FROM MstCompanyDetails WHERE ISNULL(ParentCompanyID, 0) = 0 AND IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1), 0);

			SELECT TOP 1 @GroupID = GB.GroupID, @TableName = ISNULL(GB.TableName, ''), @KeyColumn = ISNULL(GB.KeyColumn, '')
			FROM CmnFormTabs FT
				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
			WHERE FT.FormID = @IN_FormID AND FT.IsDeleted = 0 
				AND GB.Name = @IN_ControlName AND ISNULL(GB.TableName, '') <> '';

			SET @OrderQuery = CONCAT('SELECT @OrderBy = ISNULL(MAX(OrderBy), 0) FROM ', @TableName);

			EXEC SP_EXECUTESQL @OrderQuery, N'@OrderBy INT OUT', @OrderBy OUT
			SET @OrderBy = @OrderBy + 1;

			SET @DMLQuery = CONCAT('INSERT INTO ', @TableName, '(', @IN_MasterColumns, ', ',
				'OrderBy, CompanyID, Version, IsCurrentVersion, IsDeleted, NotActive, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT)',
				' VALUES (', @IN_MasterData, ',', @OrderBy, ',', @CompanyID,
				',1,1,0,0,', @IN_UserID, ',GETUTCDATE(),GETUTCDATE(),', @IN_UserID, ',GETUTCDATE(),GETUTCDATE())');
			EXEC(@DMLQuery);

			SET @MasterID = IDENT_CURRENT(@TableName);

			SELECT @MasterID AS  MasterID;
		--COMMIT TRANSACTION tran_SaveAttendanceMasterData
	END TRY
	BEGIN CATCH
		--ROLLBACK TRANSACTION tran_SaveAttendanceMasterData
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnSaveRbsGroups]'
GO

CREATE PROCEDURE [dbo].[spCmnSaveRbsGroups] (
	@IN_FormID INT, 
	@IN_UserID INT,
	@IN_RoleID INT,
	@IN_RbsGroupIDs VARCHAR(100),
	@IN_IsUserRbs INT
)	
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
			DECLARE @ErrorMessage NVARCHAR(2000),
					@ErrorSeverity NVARCHAR(50),
					@ErrorState NVARCHAR(50),
					@UTCTime DATETIME = GETUTCDATE(),
					@RBSGroups NVARCHAR(500);

			IF (ISNULL(@IN_IsUserRbs, 0) = 0 AND ISNULL(@IN_RbsGroupIDs, '') <> '')
			BEGIN
				SET @RBSGroups = ISNULL((SELECT STRING_AGG(Name, ',') FROM CmnRbsGroups 
										WHERE PATINDEX('%,' + CAST(ReferenceID AS NVARCHAR(50)) + ',%' , ',' + @IN_RbsGroupIDs + ',') > 0 AND IsDeleted = 0), '');

				DECLARE @RoleRBSGroup Table (RBSGroupID BIGINT);

				INSERT INTO @RoleRBSGroup
				SELECT Value FROM STRING_SPLIT(@IN_RbsGroupIDs, ',');
							
				DELETE FROM CmnRBSRoleDataVariablePermission 
				WHERE RoleID = @IN_RoleID AND IsDeleted = 0;

				INSERT INTO CmnRBSRoleDataVariablePermission (RoleID, FormID, ControlName, TableName, TableColumn, DataValue, SelfData, 
					CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted)
				SELECT @IN_RoleID, D.FormID, D.ControlName, D.TableName, D.TableColumn,
					REPLACE(REPLACE(STRING_AGG(CAST(D.DataValue AS VARCHAR(50)), ',') WITHIN GROUP (ORDER BY CAST(D.DataValue AS INT)), '-1,', ''), '-1', '') AS DataValue,
					MAX(CAST(D.SelfData AS INT)) AS SelfData, @IN_UserID, @UTCTime, @IN_UserID, @UTCTime, 0
				FROM 
					(SELECT DISTINCT GFV.FormID, GFV.ControlName, GFV.TableName, GFV.TableColumn,
						CASE WHEN TRIM(DV.value) = '' THEN '-1' ELSE TRIM(DV.value) END AS DataValue, GFV.SelfData
					FROM CmnRbsGroups G
						JOIN @RoleRBSGroup FG ON FG.RBSGroupID = G.ReferenceID
						JOIN CmnRbsGroupForms GF ON GF.RBSGroupID = G.ReferenceID AND GF.IsDeleted = 0
						JOIN CmnRBSGroupsDataVariable GFV ON GFV.RBSGroupID = GF.RBSGroupID 
							AND GFV.FormID = GF.FormID AND GFV.IsDeleted = 0
						CROSS APPLY STRING_SPLIT(GFV.DataValue, ',') AS DV) AS D
				GROUP BY D.FormID, D.ControlName, D.TableName, D.TableColumn;

				UPDATE CmnCodeMaster SET Details = ISNULL(@RBSGroups, '') WHERE Type = 'Roles' AND CodemasterID = @IN_RoleID AND IsDeleted = 0;
			END
			ELSE IF (ISNULL(@IN_IsUserRbs, 0) = 1 AND ISNULL(@IN_RbsGroupIDs, '') <> '') 
			BEGIN
				DECLARE @UserRBSGroup Table (RBSGroupID BIGINT);

				INSERT INTO @UserRBSGroup
				SELECT Value FROM STRING_SPLIT(@IN_RbsGroupIDs, ',');
							
				DELETE FROM CmnRBSDataVariablePermission 
				WHERE UserID = @IN_RoleID AND IsDeleted = 0;

				INSERT INTO CmnRBSDataVariablePermission (UserID, FormID, ControlName, TableName, TableColumn, DataValue, SelfData, 
					CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted)
				SELECT @IN_RoleID, D.FormID, D.ControlName, D.TableName, D.TableColumn,
					REPLACE(REPLACE(STRING_AGG(CAST(D.DataValue AS VARCHAR(50)), ',') WITHIN GROUP (ORDER BY CAST(D.DataValue AS INT)), '-1,', ''), '-1', '') AS DataValue,
					MAX(CAST(D.SelfData AS INT)) AS SelfData, @IN_UserID, @UTCTime, @IN_UserID, @UTCTime, 0
				FROM 
					(SELECT DISTINCT GFV.FormID, GFV.ControlName, GFV.TableName, GFV.TableColumn,
						CASE WHEN TRIM(DV.value) = '' THEN '-1' ELSE TRIM(DV.value) END AS DataValue, GFV.SelfData
					FROM CmnRbsGroups G
						JOIN @UserRBSGroup FG ON FG.RBSGroupID = G.ReferenceID
						JOIN CmnRbsGroupForms GF ON GF.RBSGroupID = G.ReferenceID AND GF.IsDeleted = 0
						JOIN CmnRBSGroupsDataVariable GFV ON GFV.RBSGroupID = GF.RBSGroupID 
							AND GFV.FormID = GF.FormID AND GFV.IsDeleted = 0
						CROSS APPLY STRING_SPLIT(GFV.DataValue, ',') AS DV) AS D
				GROUP BY D.FormID, D.ControlName, D.TableName, D.TableColumn;

				UPDATE CmnUserDetails SET RBSGroupIDs = @IN_RbsGroupIDs WHERE UserID = @IN_RoleID AND IsDeleted = 0;
			END
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnSaveRoleSettings]'
GO

CREATE PROCEDURE [dbo].[spCmnSaveRoleSettings] (
	@IN_RoleID INT = 0,
	@IN_DashboardFormID INT = 0,
	@IN_UserID INT = 0)	
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@UTCTime DATETIME = GETUTCDATE(),
				@GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
				@OrderBy INT = 0,
				@CompanyID INT = 0

		SET @OrderBy = ISNULL((SELECT MAX(OrderBy) + 1 FROM CmnRoleSettings), 1);
		SET @CompanyID = ISNULL((SELECT TOP 1 CD.ReferenceID
								 FROM MstCompanyDetails CD
			                     WHERE CD.ParentCompanyID IS NULL AND ISNULL(CD.IsDeleted, 0) = 0 AND ISNULL(CD.NotActive, 0) = 0 AND ISNULL(CD.IsCurrentVersion, 1) = 1), 0);

		IF NOT EXISTS(SELECT 1 FROM CmnRoleSettings RS WHERE ISNULL(RS.RoleID, 0) = @IN_RoleID AND ISNULL(RS.IsDeleted, 0) = 0)
		BEGIN
			INSERT INTO CmnRoleSettings (RoleID, MainDashboardID, CompanyID, OrderBy, NotActive, IsDeleted, IsCurrentVersion, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT, Version)
			VALUES (@IN_RoleID, @IN_DashboardFormID, @CompanyID, @OrderBy, 0, 0, 1, @IN_UserID, @UTCTime, @GMTTime, @IN_UserID, @UTCTime, @GMTTime, 1);			
		END
		ELSE
		BEGIN
			UPDATE CmnRoleSettings 
			SET MainDashboardID = @IN_DashboardFormID,
			ModifiedBy = @IN_UserID,
			ModifiedDate = @UTCTime,
			ModifiedDateGMT = @GMTTime
			WHERE ISNULL(RoleID, 0) = @IN_RoleID;
		END

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnSubTreeFillControl]'
GO

CREATE PROCEDURE [dbo].[spCmnSubTreeFillControl] (
	@IN_Event VARCHAR(50) = '', 
	@IN_FormID INT = 0, 
	@IN_UserID INT = 0, 
	@IN_Value NVARCHAR(500) = '',
	@IN_DataValue NVARCHAR(255), 
	@IN_Limit NVARCHAR(255))

AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY 	
		DECLARE @ErrorSeverity NVARCHAR(50) = '',
				@ErrorMessage NVARCHAR(2000) = '',
				@ErrorState NVARCHAR(50) = '',
				@Query NVARCHAR(MAX) = '',
				@ValueColumn NVARCHAR(255) = '',
				@SubTextColumn NVARCHAR(1000) = '',
				@DeleteCondition NVARCHAR(100) = '',
				@ActiveCondition NVARCHAR(100) = '',
				@VersionCondition NVARCHAR(100) = '',
				@OrderByClause NVARCHAR(255) = '',
				@ChildTableName VARCHAR(255) = '',
				@SubAdditionalCondition NVARCHAR(2000) = '',
				@SubTableName VARCHAR(255) = '',
				@ControlBased INT = 0, 
				@Value VARCHAR(255) = '',
				@ColumnID INT = 0,
				@IdentityColumn VARCHAR(255) = '',
				@OrderBy VARCHAR(10) = 'ASC',
				@ControlID INT = 0,
				@ParentColumn VARCHAR(255) = '',
				@ParentOrderBy VARCHAR(10) = 'ASC',
				@DataFillType INT = 0,
				@Count INT = 0;
		
		IF @IN_Event = 'SubTree'
		BEGIN
			SELECT TOP 1 @SubTableName = CC.FkTable, @ColumnID = CC.ColumnID, @IdentityColumn = FC.FkColumn, @ControlID = FC.ControlID
  			FROM CmnFormDetails FD
  				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
  				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
  				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FC.SearchApplicable = 1
				JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0
				JOIN CmnColumnProperty CP ON CP.ColumnID = CC.ColumnID
  			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;

			SELECT @ControlBased = Value FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Control Based' AND IsDeleted = 0;
			SELECT @OrderBy = ISNULL(Value, 'ASC') FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Order By' AND IsDeleted = 0;
			SELECT @ParentColumn = Value FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Parent Control' AND IsDeleted = 0;
			SELECT @ParentOrderBy = ISNULL(Value, 'ASC') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Order By' AND IsDeleted = 0;    
			SELECT @DataFillType = Value FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Tree Type' AND IsDeleted = 0;

			IF @SubTableName = 'CmnGroupBoxes' AND @ControlBased = 1
			BEGIN
				SET @Value = (SELECT SUBSTRING((SELECT ',' + CAST(FT.TabID AS NVARCHAR(MAX))
      			FROM CmnFormDetails FD
      				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
      			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0 FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000));
			END
			ELSE IF @SubTableName = 'CmnFormTabs' AND @ControlBased = 1
			BEGIN
				SET @Value = (SELECT TOP 1 FD.FormID FROM CmnFormDetails FD WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0);
			END
			ELSE IF @ControlBased = 0
			BEGIN
				SET @Value = @IN_Value; 
			END
			
			SELECT TOP 1 @ValueColumn = CC.FKColumn, 
				@SubTextColumn = (CASE WHEN @SubTableName = 'CmnGroupBoxes' THEN 'GB.' WHEN @SubTableName = 'CmnFormTabs' THEN 'FT.' ELSE '' END +
				CC.ColumnName + '' + CASE WHEN ISNULL(ColumnName1, '') = '' THEN '' ELSE ' + ''-'' + ' END + '' + 
																					  CASE WHEN ISNULL(ColumnName1, '') = '' THEN '' ELSE ISNULL(ColumnName1, '') END + '' + 
																					  CASE WHEN ISNULL(ColumnName2, '') = '' THEN '' ELSE ' + ''-'' + ' END + '' + 
																					  CASE WHEN ISNULL(ColumnName2, '') = '' THEN '' ELSE ISNULL(ColumnName2, '') END),      
				@DeleteCondition = CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' ISNULL(IsDeleted, 0) = 0 ' END, 
				@ActiveCondition = CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' ISNULL(NotActive, 0) = 0 ' END, 
				@VersionCondition = CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' ISNULL(IsCurrentVersion, 1) = 1 ' END, 
				@OrderByClause = ( CASE WHEN ISNULL(CN.Value, '') = '' THEN 				      
										CASE WHEN ISNULL(CC.FkOrder, 1) = 1 THEN ' ORDER BY ' + (SELECT CC.ColumnName + '' + 
																	CASE WHEN ISNULL(ColumnName1, '') = '' THEN '' ELSE ' + ''-'' + ' END + '' + 
																	CASE WHEN ISNULL(ColumnName1, '') = '' THEN '' ELSE ISNULL(ColumnName1, '') END + 
																	CASE WHEN ISNULL(ColumnName2, '') = '' THEN '' ELSE ' + ''-'' + ' END + '' + 
																	CASE WHEN ISNULL(ColumnName2, '') = '' THEN '' ELSE ISNULL(ColumnName2, '') END) + ' ASC'
													WHEN ISNULL(CC.FkOrder, 1) = 2 THEN ' ORDER BY ' + (SELECT CC.ColumnName + '' + 
														CASE WHEN ISNULL(ColumnName1, '') = '' THEN '' ELSE ' + ''-'' + ' END + '' + 
														CASE WHEN ISNULL(ColumnName1, '') = '' THEN '' ELSE ISNULL(ColumnName1, '') END + 
														CASE WHEN ISNULL(ColumnName2, '') = '' THEN '' ELSE ' + ''-'' + ' END + '' + 
														CASE WHEN ISNULL(ColumnName2, '') = '' THEN '' ELSE ISNULL(ColumnName2, '') END) + ' DESC'
													WHEN ISNULL(CC.FkOrder, 1) = 3 THEN ' ORDER BY Orderby ASC '
															WHEN ISNULL(CC.FkOrder, 1) = 4 THEN ' ORDER BY ' + CC.FKColumn + ' ASC ' ELSE '' END
								ELSE ' ORDER BY '+ FC.FKColumn+ ' '+CN.Value+ '' END),      
				@ChildTableName = CC.FkTable,
				@SubAdditionalCondition = (CASE WHEN ISNULL(CC.AdditionalConditions, '') = '' OR (@IN_DataValue <> '' AND @ControlBased = 0) THEN '' 
					ELSE (CASE WHEN CC.AdditionalConditions	LIKE '%@%' THEN ' AND ' + (CASE WHEN @SubTableName = 'CmnGroupBoxes' THEN ' GB.' ELSE ' ' END)+  REPLACE(CC.AdditionalConditions, '@1', CASE WHEN @ControlBased = 1 THEN ' IN(' + @Value +')' ELSE ' IN(MT.ParentValue)' END) 
								ELSE ' AND '+ ' ' +  CC.AdditionalConditions END) END)  
  			FROM CmnFormDetails FD
  				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
  				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
  				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FC.SearchApplicable = 1
				JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0
				JOIN CmnColumnProperty CP ON CP.ColumnID = CC.ColumnID
				LEFT JOIN CmnColumnProperty CN ON CN.ColumnID = CC.ColumnID AND CN.Name = 'Order By' AND CN.IsDeleted = 0
  			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0
			
			IF @ControlBased = 0
			BEGIN
				IF OBJECT_ID('tempdb..#tempParentList') IS NOT NULL
				DROP TABLE #tempParentList

				CREATE TABLE #tempParentList (
					ID BIGINT IDENTITY (1,1),
					ParentValue INT NULL,
					ParentText VARCHAR(255) NULL)
					
				SET @Query = 'INSERT INTO #tempParentList(ParentValue, ParentText) SELECT ParentValue, ParentText FROM #tempParentData ';
				EXEC (@Query)  
				
				SET @Query = 'INSERT INTO #tempChildData(ParentValue, ParentText, ChildValue,ChildText) ' + 'SELECT MT.ParentValue AS Value, MT.ParentText AS Text, ' + @ValueColumn + ' AS Value, ' + @SubTextColumn + ' AS [Text]'+
											' FROM #tempParentList MT '+
											' LEFT JOIN '+@ChildTableName+' CT ON IsDeleted = 0 '+
											CASE WHEN @SubAdditionalCondition = '' THEN ' AND CT.'+ @ParentColumn+ ' = MT.ParentValue ' ELSE @SubAdditionalCondition END +
											CASE WHEN @VersionCondition <> '' AND @ActiveCondition <> '' THEN ' WHERE ' ELSE '' END+
											CASE WHEN @VersionCondition = '' THEN '' ELSE ' AND ' END + @VersionCondition + 
											CASE WHEN @ActiveCondition = '' THEN '' ELSE ' AND ' END + @ActiveCondition + 
											CASE WHEN @DataFillType = 0 THEN '' ELSE ' AND MT.ID BETWEEN '+@IN_Limit END+
											' ORDER BY '+ @IdentityColumn + ' ' + @OrderBy
				EXEC (@Query)  
				
				IF @IN_DataValue <> '' 
				BEGIN
					SET @Query = 'INSERT INTO #tempChildData(ParentValue, ParentText, ChildValue,ChildText) ' + 'SELECT MT.FilterValue AS Value, MT.FilterText AS Text, ' + @ValueColumn + ' AS Value, ' + @SubTextColumn + ' AS [Text]'+
											' FROM ' + @ChildTableName + 
											' CT JOIN #tempFilteredParentData MT ON MT.FilterValue = '+ @ParentColumn+
											' WHERE IsDeleted = 0 AND ' +@SubTextColumn+ ' LIKE ''%' + ISNULL(@IN_DataValue, '') + '%''' +
											CASE WHEN @VersionCondition = '' THEN '' ELSE ' AND ' END + @VersionCondition + 
											CASE WHEN @ActiveCondition = '' THEN '' ELSE ' AND ' END + @ActiveCondition + 
											CASE WHEN @SubAdditionalCondition = '' THEN '' ELSE @SubAdditionalCondition END + 
											' ORDER BY '+ @IdentityColumn + ' ' + @OrderBy	
				END
				ELSE
					SET @Query = 'SELECT ParentValue AS Value, ParentText AS Text, ChildValue,ChildText FROM #tempChildData ORDER BY ParentValue '+ @ParentOrderBy;
				
				EXEC (@Query)
				IF @IN_DataValue <> ''
				BEGIN						       
					SET @Query = 'INSERT INTO #tempGetParent (ParentValue) SELECT DISTINCT(TC.ParentValue) '+
									'FROM #tempChildData TC WHERE NOT EXISTS (SELECT 1 FROM #tempParentData TS WHERE TS.ParentValue = TC.ParentValue)';
					EXEC (@Query)
				END
			END
			ELSE
			BEGIN
				IF @SubTableName = 'CmnGroupBoxes'
				 BEGIN
				   SET @Query = 'SELECT Value, [Text] FROM (SELECT DISTINCT(GB.' + @ValueColumn + ') AS Value, ' + @SubTextColumn + ' AS [Text], GB.GroupOrder, FT.TabOrder FROM ' + @ChildTableName + ' GB '+
								'LEFT JOIN CmnFormTabs FT ON FT.TabID = GB.TabID AND FT.IsDeleted = 0 '+
								'JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.ControlType <> 18 AND FC.ControlType <> 19 AND FC.IsDeleted = 0 '+
								'WHERE GB.IsDeleted = 0 ' + 
										CASE WHEN @VersionCondition = '' THEN '' ELSE ' AND GB.' END + @VersionCondition + 
										CASE WHEN @ActiveCondition = '' THEN '' ELSE ' AND GB.' END + @ActiveCondition + 
										CASE WHEN @SubAdditionalCondition = '' THEN '' ELSE @SubAdditionalCondition END  
								+ ') AS tempTable ORDER BY TabOrder ASC, GroupOrder '+ @OrderBy 
				END
				ELSE IF @SubTableName = 'CmnFormTabs'
				 BEGIN
				   SET @Query = 'SELECT Value, [Text] FROM (SELECT DISTINCT(FT.' + @ValueColumn + ') AS Value, ' + @SubTextColumn + ' AS [Text], FT.TabOrder FROM ' + @ChildTableName + ' FT '+
								'JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0 '+
								'JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.ControlType <> 18 AND FC.ControlType <> 19 AND FC.IsDeleted = 0 '+
								'WHERE FT.IsDeleted = 0 ' + 
										CASE WHEN @VersionCondition = '' THEN '' ELSE ' AND FT.' END + @VersionCondition + 
										CASE WHEN @ActiveCondition = '' THEN '' ELSE ' AND FT.' END + @ActiveCondition + 
										CASE WHEN @SubAdditionalCondition = '' THEN '' ELSE @SubAdditionalCondition END 
								+ ') AS tempTable ORDER BY TabOrder '+ @OrderBy 
				END
				EXEC (@Query) 
				SELECT ParentValue AS Value, ParentText AS Text FROM #tempParentData;				 
			END	
		END
		ELSE
		BEGIN	
  			SELECT Name, Value FROM CmnColumnProperty 
  			WHERE ColumnID = (SELECT TOP 1 CC.ColumnID FROM CmnFormDetails FD
														JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
														JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
														JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FC.SearchApplicable = 1
														JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0
														JOIN CmnColumnProperty CP ON CP.ColumnID = CC.ColumnID
													WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0) AND IsDeleted = 0
		END
	END TRY
	BEGIN CATCH
		--EXEC [Fn_ErrorFetch] @@SPID

		--INSERT INTO tbl_StoredProcedure_Error(MenuID, App_User, SQL_User, Server_Name, [Procedure_Name],
		--	Error_Code, Line_Number, [Error_Message], [Error_State], Logged_Date, [INPUT_PARAMS]) 
		--SELECT @MenuID, @UserID, USER_NAME(), @@SERVERNAME, ERROR_PROCEDURE(), ERROR_NUMBER(),
		--	ERROR_LINE(), ERROR_MESSAGE(), ERROR_STATE(), GETUTCDATE(), (SELECT PIN FROM TBL_ERRORFETCH);

		SELECT @ErrorMessage = TypeValues, @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() FROM CmnCodeMaster WHERE [Type] = 'Error Message'

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH   
END 
GO
PRINT N'Creating [dbo].[spCmnSearchControls]'
GO


CREATE PROCEDURE [dbo].[spCmnSearchControls] (
	@IN_Event VARCHAR(50), 
	@IN_FormID INT, 
	@IN_UserID INT, 
	@IN_SessionID VARCHAR(255),
	@IN_DataValue NVARCHAR(500), 
	@IN_PageIndex VARCHAR(50),
	@IN_PageSize VARCHAR(50), 
	@IN_DataFillType NVARCHAR(50), 
	@IN_DataID VARCHAR(100),
	@IN_FillValue VARCHAR(100))
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
	     DECLARE 
				 @ActiveCondition NVARCHAR(MAX),
				 @TableName SYSNAME,
				 @TypeCondition NVARCHAR(2000),
				 @ConditionColumns NVARCHAR(MAX),
				 @Cnt INT = 0,
				 @qry NVARCHAR(MAX),
				 @PageIndex INT = 0,
				 @PageLimit INT = 0,
				 @total INT = 0,
				 @Limit NVARCHAR(4000),
				 @ErrorMessage NVARCHAR(2000),
				 @ErrorSeverity NVARCHAR(50),
				 @ErrorState NVARCHAR(50),
				 @ControlID INT = 0,
				 @ParentOrderBy VARCHAR(10) = 'ASC',
				 @ControlBased INT = 0,
				 @Count INT = 0,
				 @ChildLimit NVARCHAR(4000),
				 @ColumnID INT = 0,
				 @FilterBy VARCHAR(100) = '',
				 @FilterValue INT = 0,
				 @FilterTable VARCHAR(100) = '',
				 @FilterKey VARCHAR(100) = '',
				 @FilterUniqueKey VARCHAR(100) = '',
				 @FkNotActive BIT = 0,
				 @ActiveCount INT = 0,
				 @FormType INT = 0,
				 @MainTableName VARCHAR(255) = '',				 
				 @RBSConditions NVARCHAR(MAX) = '',
				 @SearchQry NVARCHAR(MAX),
				 @CountQry NVARCHAR(MAX),
				 @FilterQry NVARCHAR(MAX),
				 @SQLFilterTable NVARCHAR(MAX),
				 @SQLFilterBy NVARCHAR(MAX),
				 @INParameters NVARCHAR(2000),
				 @FkColumn VARCHAR(100),
				 @FillValue VARCHAR(100),
				 @DataQry NVARCHAR(MAX),
				 @InsQry NVARCHAR(MAX),
				 @SeltQry NVARCHAR(MAX),
				 @FillPageIndex INT,
				 @DataCount INT,
				 @Min INT,
				 @FillDataCnt INT,
				 @FkOrder INT,
				 @TextColumn VARCHAR(100),
				 @RBSBranchID INT;

		SELECT @RBSBranchID = ISNULL(ED.BranchID, '') FROM CmnUserDetails UD
          		JOIN MstEmployeeDetails ED ON ED.ReferenceID = UD.TypeID	
        WHERE UD.UserID = @IN_UserID;

		SELECT @FormType = FormType, @ControlID = ControlID, @SearchQry = Query, @CountQry = CountQuery, @FilterQry = FilterQuery, 
			   @FilterBy = ISNULL(FilterBy,''), @FilterTable = ISNULL(FilterTable,''), @FilterKey = ISNULL(FilterKey,''), @FilterUniqueKey = ISNULL(FilterUniqueKey,''),
			   @FkNotActive = ISNULL(FkNotActive, 0), @TableName = ISNULL(TableName, ''), @MainTableName = ISNULL(MainTableName, ''), @FkOrder = ISNULL(FkOrder, 0)
		FROM CmnFormQuery
		WHERE FormID = @IN_FormID AND SPName = 'spCmnSearchControls' AND DeleteFlag = 0;
				
		IF @FilterBy <> ''
		BEGIN
			SELECT @FilterValue = ISNULL(ED.BranchID, '') FROM CmnUserDetails UD
          		JOIN MstEmployeeDetails ED ON ED.ReferenceID = UD.TypeID	
          	WHERE UD.UserID = @IN_UserID;
		END

		IF ISNULL(@FilterValue, '') = 0
			SET @FilterBy = '';
			
		SELECT @ActiveCount = COUNT(1) FROM CmnSearchParameterProcess WHERE SessionID = @IN_SessionID AND TableColumn = 'MT.NotActive';
		SET ANSI_PADDING ON;

		SET @ConditionColumns = ISNULL(SUBSTRING((SELECT  ' AND ' + CASE WHEN DP.ControlType = 'Textbox' OR DP.ControlType = 'Multiline Textbox' THEN 
																				DP.ColumnName + ' LIKE  ''%' + ISNULL(DP.ColumnValue, '') + '%'''
																	WHEN DP.ControlType = 'Check Listbox' THEN
																		'(' + REPLACE(DP.ColumnValue, '<col>', ''','' + CAST(' + DP.ColumnName  + ' AS VARCHAR(200)) + '',''' + ' LIKE ') + ')'
																	WHEN DP.ControlType IN ('Checklist Grid') THEN
																				'('''' + CAST(' + DP.ColumnName + ' AS VARCHAR(2000)) + '''' IN ('+ ISNULL(DP.ColumnValue, '') + '))'
																	WHEN DP.ControlType IN ('Radiolist Grid') THEN
																		'(PATINDEX(''%,'' + CAST(' + ISNULL(DP.ColumnValue, '') + ' AS VARCHAR(2000)) + '',%'', '',''+ CAST('+ ISNULL(DP.ColumnName, '') + ' AS NVARCHAR(100))+'','') > 0)'
																	WHEN DP.ControlType = 'Date' THEN 
																			CASE WHEN CHARINDEX('AND', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn+ '  BETWEEN '+ ISNULL(DP.ColumnValue, '')+ ')') 
																					WHEN CHARINDEX('<=', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn + ' '+ SUBSTRING(DP.ColumnValue, 1, LEN(DP.ColumnValue) -1) + ' 23:59:59:999'')')
																					WHEN CHARINDEX('>=', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn + ' '+ DP.ColumnValue+ ')')
																				ELSE ('('+DP.TableColumn+ ' >= '+ ISNULL(DP.ColumnValue, '')+ ') AND ('+DP.TableColumn+ ' <= '+ SUBSTRING(DP.ColumnValue, 1, LEN(DP.ColumnValue) -1) + ' 23:59:59:999'')') END 
																			WHEN DP.ControlType = 'DateTime' THEN 
																				CASE WHEN CHARINDEX('AND', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn+ ' BETWEEN '+ ISNULL(DP.ColumnValue, '')+ ')') 
																					WHEN CHARINDEX('>=', DP.ColumnValue) > 0 OR CHARINDEX('<=', DP.ColumnValue) > 0 THEN ('('+DP.TableColumn + ' '+ ISNULL(DP.ColumnValue, '')+ ')')
																				ELSE ('('+DP.TableColumn+ ' = '+ ISNULL(DP.ColumnValue, '')+ ')') END
																	ELSE DP.ColumnName  +' = '''+ ISNULL(DP.ColumnValue, '') + '''' END
  												FROM CmnSearchParameterProcess DP 
  												WHERE DP.SessionID = @IN_SessionID 
												ORDER BY CASE WHEN DP.ControlType IN ('Date','DateTime') THEN 1 
													              WHEN DP.ControlType IN ('Check Listbox','Checklist Grid','Radiolist Grid') THEN 2 
														     ELSE 3 END, DP.TableColumn 
												FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'),6, 4000000000), '')

		SET @ActiveCondition = CASE WHEN @FkNotActive = 0 THEN '' ELSE ' AND ISNULL(MT.NotActive, 0) = 0 ' END;
		IF @ActiveCount > 0
		BEGIN
		   SET @ActiveCondition = '';
		END

		SELECT @ParentOrderBy = ISNULL(Value, 'ASC') FROM CmnControlProperty WHERE ControlID = @ControlID AND Name = 'Order By' AND IsDeleted = 0;
		IF @IN_DataFillType = 1 AND @IN_DataID <> 0 AND @ParentOrderBy = 'DESC'
		BEGIN
		  SET @IN_PageIndex = 1;
		END

		SET @SQLFilterTable = CASE WHEN @FilterTable <> '' AND @FilterBy <> '' THEN (' JOIN ' + @FilterTable + ' JT ON JT.' + @FilterUniqueKey + ' = CONVERT(VARCHAR(MAX), MT.' + @FilterKey + ') AND JT.' + @FilterBy + ' = ' + CONVERT(VARCHAR(MAX), @FilterValue) + ' ') ELSE '' END;
		SET @SQLFilterBy = CASE WHEN @FilterBy <> '' AND ISNULL(@FilterValue, '') <> '' AND ISNULL(@FilterTable, '') = '' THEN ' AND '+ @FilterBy + ' = ' + CONVERT(VARCHAR(MAX), @FilterValue) ELSE '' END;
		
		EXEC spCmnGetFormTableRBSCondition @IN_FormID, @IN_UserID, @MainTableName, @TableName, @RBSConditions OUTPUT;
		
		IF @RBSConditions <> ''
		BEGIN
			SET @RBSConditions = REPLACE(@RBSConditions, 'ISNULL(CompanyID', 'ISNULL(MT.CompanyID');
			SET @RBSConditions = REPLACE(@RBSConditions, 'dbo.fn_DataSplit(', 'dbo.fn_DataSplit(MT.');
			SET @RBSConditions = ' AND ' + @RBSConditions;		
		END
	
		IF @IN_DataID <> 0 AND @ParentOrderBy <> 'DESC'
		BEGIN
			SET @Cnt = 0;
			SET @qry = 'SELECT @TaCnt = COUNT(1)  FROM '+ @TableName +' MT WHERE MT.IsDeleted = 0 ' + 
						CASE WHEN @TypeCondition = '' THEN '' ELSE ' AND ' + @TypeCondition END + 
						CASE WHEN @ConditionColumns = '' THEN '' ELSE ' AND ' + @ConditionColumns END + @RBSConditions + 
						CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
							WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END

			EXEC sp_executesql @qry, N'@TaCnt BIGINT OUTPUT', @Cnt OUTPUT;

			SET @PageIndex = @Cnt / @IN_PageSize;
			SET @PageLimit = @PageIndex * @IN_PageSize;
			SET @total = @Cnt % @IN_PageSize;

			SET @Limit = ' WHERE LIMIT BETWEEN ' + CAST(@PageLimit AS VARCHAR(50)) + ' AND ' + CAST(@PageLimit + @IN_PageSize AS VARCHAR(50));
			SET @ChildLimit = CAST(@PageLimit AS VARCHAR(50)) + ' AND ' + CAST(@PageLimit + @IN_PageSize AS VARCHAR(50));
		END 
		ELSE
		BEGIN
			SET @Limit = ' WHERE LIMIT BETWEEN ' + CAST(CASE WHEN @IN_PageIndex < 2 THEN 1 ELSE @IN_PageIndex + 1 END AS VARCHAR(50)) + ' AND ' + 
													CAST(CASE WHEN @IN_PageIndex = 0 THEN 0 ELSE @IN_PageIndex END + @IN_PageSize AS VARCHAR(50));
			
			SET @ChildLimit = CAST(CASE WHEN @IN_PageIndex = 0 THEN 1 ELSE @IN_PageIndex + 1 END AS VARCHAR(50)) + ' AND ' + 
													CAST(CASE WHEN @IN_PageIndex = 0 THEN 0 ELSE @IN_PageIndex END + @IN_PageSize AS VARCHAR(50));

			IF @IN_DataFillType = 1
			BEGIN
				SET @FkColumn = (SELECT FkColumn FROM CmnFormControls WHERE ControlID = @ControlID);  
				SET @TextColumn = (SELECT TOP 1 ColumnName FROM CmnControlColumns WHERE ControlID = @ControlID);  

				IF @IN_FillValue <> '' AND ISNULL(@FkColumn, '') <> ''
				BEGIN
					SET @IN_PageIndex = 0;
					SET @Limit = ' LIMIT BETWEEN ' + CAST(CASE WHEN @IN_PageIndex = 0 THEN 1 ELSE @IN_PageIndex + 1 END AS VARCHAR(50)) + ' AND ' + 
													CAST(CASE WHEN @IN_PageIndex = 0 THEN 0 ELSE @IN_PageIndex END + @IN_PageSize AS VARCHAR(50));
					SET @FillValue = @IN_FillValue;
					IF OBJECT_ID('tempdb..#tempTableData') IS NOT NULL
						DROP TABLE #tempTableData;

					CREATE TABLE #tempTableData (
						ParentValue NVARCHAR(255) NULL,
						OrderBy INT NULL
					);
        
					SET @qry = ('SELECT @ToCnt = COUNT(1) FROM '+ @TableName+' MT WHERE MT.IsDeleted = 0  '+ 
									CASE WHEN @ConditionColumns = '' THEN '' ELSE ' AND ' + @ConditionColumns END+ ' '+ @RBSConditions+
									CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
										WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END)
					EXEC sp_executesql @qry, N'@ToCnt INT OUTPUT', @Cnt OUTPUT;
           
					SET @DataQry = ('SELECT @FDataCnt = COUNT(1) FROM '+ @TableName+' MT WHERE MT.IsDeleted = 0 '+ 
										CASE WHEN @ConditionColumns = '' THEN '' ELSE ' AND ' + @ConditionColumns END+ ' ' + @RBSConditions+
										CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
											WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END
										+' AND '+ @FkColumn+ ' = ''' + @IN_FillValue + ''''); 
					EXEC sp_executesql @DataQry, N'@FDataCnt INT OUTPUT', @FillDataCnt OUTPUT;

					IF @FillDataCnt > 0
					BEGIN
						SET @Min = 0;
						WHILE @Cnt > @Min 
						BEGIN
							SET @Min = @Min + 1;
							TRUNCATE TABLE #tempTableData;

							SET @InsQry = (';WITH GridFill AS (SELECT ROW_NUMBER() OVER ( ORDER BY ' +CASE WHEN @FkOrder = 1 THEN (@TextColumn + ' ASC') WHEN @FkOrder = 2 THEN (@TextColumn + ' DESC') WHEN @FkOrder = 3 THEN 'OrderBy ASC'  WHEN @FkOrder = 4 THEN (@FkColumn + ' ASC')  WHEN @FkOrder = 5 THEN (@FkColumn + ' DESC') END+
												') AS LIMIT, '+@FkColumn + ' AS Value FROM '+ @TableName+' MT WHERE MT.IsDeleted = 0 '+
												CASE WHEN @ConditionColumns = '' THEN '' ELSE ' AND ' + @ConditionColumns END+ ' '+ @RBSConditions+
												CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
													WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END
												+ ') INSERT INTO #tempTableData(ParentValue,OrderBy) SELECT Value, LIMIT FROM GridFill  WHERE '+ @Limit);
							EXEC sp_executesql @InsQry
  
							SET @SeltQry = ('SELECT @DCount = COUNT(1) FROM #tempTableData WHERE ParentValue = '''+ @IN_FillValue + ''''); 							
							EXEC sp_executesql @SeltQry, N'@DCount INT OUTPUT', @DataCount OUTPUT;

							SET @FillPageIndex = @Min;     
							IF @DataCount > 0
							BEGIN
								IF OBJECT_ID('tempdb..#tempTableData') IS NOT NULL
									DROP TABLE #tempTableData;
								BREAK;
							END
             
							SET @IN_PageIndex = ((CASE WHEN @IN_PageIndex = 0 THEN 1 ELSE @FillPageIndex END) * @IN_PageSize);
               
							SET @Limit = (' LIMIT BETWEEN '+ @IN_PageIndex+ ' AND '+ CAST(CAST(@IN_PageIndex AS INT)+CAST(@IN_PageSize AS INT)  AS VARCHAR(50)));              
						END
					END
					ELSE
					BEGIN
						SET @Limit = (' LIMIT BETWEEN 0 AND '+ @IN_PageSize);
						SET @FillPageIndex = 1;
					END 
					
					SET @Limit = ' WHERE ' +@Limit;
             
				  END
			END
		END 

		IF OBJECT_ID('tempdb..#tempParentData') IS NOT NULL
			DROP TABLE #tempParentData;

		CREATE TABLE #tempParentData (
			ParentValue NVARCHAR(255) NULL,
			ParentText NVARCHAR(255) NULL,
			AdditionalData NVARCHAR(MAX) NULL,
			OrderBy INT NULL);

		IF OBJECT_ID('tempdb..#tempFilteredParentData') IS NOT NULL
			DROP TABLE #tempFilteredParentData;

		CREATE TABLE #tempFilteredParentData (
			FilterValue NVARCHAR(255) NULL,
			FilterText NVARCHAR(255) NULL,
			AdditionalData NVARCHAR(MAX) NULL,
			OrderBy INT NULL);
		
		IF OBJECT_ID('tempdb..#tempChildData') IS NOT NULL
			DROP TABLE #tempChildData;

		CREATE TABLE #tempChildData (
			ID BIGINT IDENTITY (1,1),
			ParentValue INT NULL,
			ParentText NVARCHAR(255) NULL,
			ChildValue NVARCHAR(255) NULL,
			ChildText VARCHAR(255) NULL);

		IF OBJECT_ID('tempdb..#tempParentValue') IS NOT NULL
			DROP TABLE #tempParentValue;

		CREATE TABLE #tempParentValue (
			ParentValue INT NULL);

		IF OBJECT_ID('tempdb..#tempGetParent') IS NOT NULL
			DROP TABLE #tempGetParent;

		CREATE TABLE #tempGetParent (
			ParentValue INT NULL);
			
		IF @ConditionColumns <> ''
			SET @ConditionColumns = ' AND ' + @ConditionColumns;
		
		IF @IN_DataFillType = 0
			SET @Limit = '';

		IF @IN_DataValue <> ''
		BEGIN
			SET @qry = REPLACE(@FilterQry, '@SQLFilterTable@', @SQLFilterTable);
			SET @qry = REPLACE(@qry, '@SQLFilterBy@', @SQLFilterBy);
			SET @qry = REPLACE(@qry, '@SQLConditionColumns@', @ConditionColumns);
			SET @qry = REPLACE(@qry, '@SQLRBSConditions@', @RBSConditions + (CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
						WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END));
			SET @qry = REPLACE(@qry, '@SQLActiveCondition@', @ActiveCondition);
			SET @qry = REPLACE(@qry, '@SQLLimit@', @Limit);
			SET @qry = REPLACE(@qry, '@UserID', @IN_UserID);
			EXEC sp_executesql @qry;
		END

		SET @qry = REPLACE(@SearchQry, '@SQLFilterTable@', @SQLFilterTable);
		SET @qry = REPLACE(@qry, '@SQLFilterBy@', @SQLFilterBy);
		SET @qry = REPLACE(@qry, '@SQLConditionColumns@', @ConditionColumns);
		SET @qry = REPLACE(@qry, '@IN_DataValue@', @IN_DataValue);
		SET @qry = REPLACE(@qry, '@SQLRBSConditions@', @RBSConditions + (CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
						WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END));
		SET @qry = REPLACE(@qry, '@SQLActiveCondition@', @ActiveCondition);
		SET @qry = REPLACE(@qry, '@SQLLimit@', @Limit);
		SET @qry = REPLACE(@qry, '@UserID', @IN_UserID);
		EXEC sp_executesql @qry;
			
		SET @Count = (SELECT COUNT(1) FROM #tempParentData);

		IF @FormType = 5
		BEGIN
			SELECT @ColumnID = CC.ColumnID FROM CmnFormControls FC
				JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0 AND CC.DefaultValue = 'SubTree'
  			WHERE FC.ControlID = @ControlID ;

			EXEC spCmnSubTreeFillControl 'SubTree', @IN_FormID, @IN_UserID, '', @IN_DataValue, @ChildLimit;
			SELECT @ControlBased = Value FROM CmnColumnProperty WHERE ColumnID = @ColumnID AND Name = 'Control Based' AND IsDeleted = 0;

			IF @IN_DataValue <> '' AND @ControlBased = 0
			BEGIN
				SET @qry = 'INSERT INTO #tempParentValue (ParentValue) SELECT DISTINCT(ParentValue) FROM #tempChildData ' + CASE WHEN @IN_DataFillType = 0 THEN '' ELSE ' WHERE ID BETWEEN ' + @ChildLimit END + ' ORDER BY ParentValue ' + @ParentOrderBy;
  				EXEC (@qry)  
				SET @qry = 'SELECT TC.ParentValue AS Value, ParentText AS Text, ChildValue,ChildText FROM #tempParentValue TP '+
								' JOIN #tempChildData TC ON TC.ParentValue = TP.ParentValue'+
								' ORDER BY TP.ParentValue ' + @ParentOrderBy;
				EXEC sp_executesql @qry;

				IF @IN_DataFillType = 0
					SELECT COUNT(1) FROM #tempParentValue;
				ELSE
				BEGIN
					SET @Count = @Count + (SELECT COUNT(1) FROM #tempGetParent);
					SELECT @Count;
				END
			END
			ELSE IF @ControlBased = 0
				SELECT @Count;
		END
		ELSE
			SELECT ParentValue AS Value, ParentText AS Text, ISNULL(AdditionalData, '{}') AS AdditionalData FROM #tempParentData ORDER By OrderBy;
		
		IF ((@IN_DataFillType = 1 AND @ControlBased = 1) AND @FormType = 5) OR @FormType <> 5
		BEGIN
  			SET @qry = REPLACE(@CountQry, '@SQLFilterTable@', @SQLFilterTable);
			SET @qry = REPLACE(@qry, '@SQLFilterBy@', @SQLFilterBy);
			SET @qry = REPLACE(@qry, '@SQLConditionColumns@', @ConditionColumns);
			SET @qry = REPLACE(@qry, '@IN_DataValue@', @IN_DataValue);
			SET @qry = REPLACE(@qry, '@SQLRBSConditions@', @RBSConditions + (CASE WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CreatedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+ CAST(@IN_UserID AS VARCHAR(5))+ ', MT.CreatedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100))
						WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'ModifiedBy') THEN CAST((' AND dbo.fn_GetTableBranchRBSCondition('+CAST(@IN_UserID AS VARCHAR(5))+ ', MT.ModifiedBy,'+ CAST(@IN_FormID AS VARCHAR(5))+ ') = 1') AS VARCHAR(100)) ELSE ' ' END));
			SET @qry = REPLACE(@qry, '@SQLActiveCondition@', @ActiveCondition);
			SET @qry = REPLACE(@qry, '@UserID', @IN_UserID);
			EXEC sp_executesql @qry;
		END

		SELECT @FillPageIndex, @FillValue

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
		SET @INParameters = '''' + @IN_Event + ''', ' + CAST(@IN_FormID AS VARCHAR(10)) + ', ' + CAST(@IN_UserID AS VARCHAR(10)) + ', ''' + @IN_SessionID + ''', ''' + @IN_DataValue + ''', ''' +
							@IN_PageIndex + ''', ''' + @IN_PageSize + ''', ''' + @IN_DataFillType + ''', ''' + @IN_DataID  + '''';
		EXEC spCmnHandleException @IN_FormID, 'spCmnSearchControls', @qry, @INParameters, @ErrorMessage, @ErrorSeverity, @ErrorState;
	END CATCH
END

GO
PRINT N'Creating [dbo].[spCmnSearchOnChangeControls]'
GO

CREATE PROCEDURE [dbo].[spCmnSearchOnChangeControls] (
	@IN_BindValue NVARCHAR(1000), 
	@IN_ControlName SYSNAME, 
	@IN_ControlValues NVARCHAR(1000),
	@IN_ParentData VARCHAR(100),
	@IN_FormID INT, 
	@IN_UserID INT,
	@IN_Process VARCHAR(200)
)
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
	  DECLARE @SCount INT = 0,
			  @DefaultValue NVARCHAR(1000),
			  @AdditionalConditions  NVARCHAR(MAX),
			  @ConditionValues  NVARCHAR(1000) ,
			  @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
			  @Min INT,
			  @Max INT,
			  @OutString NVARCHAR(MAX),
			  @Query NVARCHAR(MAX) = '',
			  @FkType INT = 0,
			  @TableMin INT = 0,
			  @TableCount INT = 0,
			  @ColumnID INT = 0,
			  @ControlType INT = 0,
			  @ConditionStart NVARCHAR(50),
			  @ConditionEnd NVARCHAR(50),
			  @FkTable NVARCHAR(150) = '',
			  @RBSTableName VARCHAR(255) = '',
			  @SplittedValue VARCHAR(500) = '',
			  @FormTypeID INT = 0,
			  @MainControlID BIGINT = 0,
			  @IsDatasource BIT = 0,
			  @ButtonID INT = 0;

		DECLARE @RBSDataVariable TABLE (
			RowNo INT NOT NULL,
			ControlName NVARCHAR(200) NULL,
			TableName VARCHAR(255) NULL,
			TableColumn VARCHAR(255) NULL,
			DataValue NVARCHAR(MAX) NULL)

		INSERT INTO @RBSDataVariable (RowNo, ControlName, TableName, TableColumn, DataValue)
		EXEC spCmnGetFormRBSData @IN_FormID, @IN_UserID, ''
    
		SELECT @RBSTableName = ISNULL(TableName, ''), @FormTypeID = ISNULL(FormType, 0)
		FROM CmnFormDetails WHERE FormID = @IN_FormID
		SET @SCount = 0;

		IF (@IN_Process <> '') 
		BEGIN
			SELECT @ButtonID = ISNULL(CodemasterID, 0) FROM CmnCodeMaster 
			WHERE Type = 'MenuButton' AND TypeValues = @IN_Process AND MenuID = @IN_FormID 
				AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 1) = 1;
		END;

		IF @FormTypeID IN (6, 8)
		BEGIN
			SELECT TOP 1 @MainControlID = FC.ControlID
			FROM CmnFormDetails FD
				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0
			WHERE FD.FormID = @IN_FormID
			ORDER BY FT.TabOrder, GB.GroupOrder, FC.ControlOrder;
		END

		CREATE TABLE #tempControlBindValues (
			SNum INT NULL,
			ColumnName SYSNAME NULL,
			ControlName NVARCHAR(100) NULL,
			ControlType NVARCHAR(100) NULL,								  
			DataType NVARCHAR(100) NULL,  
			ControlValue NVARCHAR(MAX) NULL,  
			SQuery NVARCHAR(MAX) NULL,
			DataSource NVARCHAR(MAX) NULL,
			Visibility BIT NULL,
			[Readonly] BIT NULL,
			IsDatasource INT NULL,
			Mandatory BIT NULL,
			DependentType SMALLINT NULL)

		IF OBJECT_ID('tempdb..#tempControlProcess') IS NOT NULL
					DROP TABLE #tempControlProcess

		CREATE TABLE #tempControlProcess (TableNum  INT NOT NULL IDENTITY(1, 1), FkType SYSNAME NULL, FkTable SYSNAME NULL, DefaultValue SYSNAME NULL, AdditionalConditions NVARCHAR(MAX) NULL, ColumnID INT NOT NULL, ControlType INT NOT NULL)

		INSERT INTO #tempControlProcess (FkType, FkTable, DefaultValue, AdditionalConditions, ColumnID, ControlType)
		SELECT CASE WHEN ISNULL(SC.FkType, 0) = 0 AND SC.ControlType IN (2,8,24,25) THEN 1 ELSE SC.FkType END, SC.FkTable, @IN_BindValue, CC.AdditionalConditions, CC.ColumnID, SC.ControlType  
		FROM CmnFormDetails FD
			JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
			JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
			JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND (FC.SearchApplicable = 1 OR FC.ControlID = @MainControlID) AND FC.IsDeleted = 0
			JOIN CmnFormSearchControl SC ON SC.FormID = FD.FormID AND SC.IsDeleted = 0 AND SC.TableColumn = @IN_ControlName AND ISNULL(SC.ButtonID, 0) = @ButtonID
			JOIN CmnSearchControlColumns CC ON CC.SearchID = SC.SearchID AND CC.IsDeleted = 0
		WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;
		
		SELECT @TableCount = COUNT(1) FROM #tempControlProcess;
		WHILE (@TableMin < @TableCount)
		BEGIN
			SET @DefaultValue = '';
			SET @AdditionalConditions = '';
			SET @ConditionValues = '';
			SET @TableMin = @TableMin + 1;
			SET @ConditionStart = '';
			SET @ConditionEnd = '';

			SELECT @FkType = FkType, @FkTable = FkTable, @DefaultValue = DefaultValue, @AdditionalConditions = AdditionalConditions, @ColumnID = ColumnID, @ControlType = ControlType
			FROM #tempControlProcess WHERE TableNum = @TableMin;
			
			IF @FkType = 1 AND ISNULL(@DefaultValue, '') = ''
				SET @DefaultValue = '0';

			IF @FkTable = 'Module'
				SET @DefaultValue = '';
 				
			IF @ControlType = 8 AND @IN_ControlValues <> ''
			BEGIN
				SET @ConditionStart = ' IN(';
				SET @ConditionEnd = ')';
			END
			ELSE
			BEGIN
				SET @ConditionStart = ' = N''';
				SET @ConditionEnd = '''';
			END

			SET @SplittedValue = '';
			IF @DefaultValue <> '' AND @ControlType = 8
			BEGIN
				SET @SplittedValue = dbo.fn_SplitString(@DefaultValue, ',', 1);
			END

			SELECT @ConditionValues = CASE WHEN CC.AdditionalConditions = '' THEN '' 
					ELSE dbo.fn_ConstractDependentConditions(CC.AdditionalConditions, @IN_ControlValues, @ControlType, '', '') END
			FROM CmnFormDetails FD
				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND (FC.SearchApplicable = 1 OR FC.ControlID = @MainControlID) AND FC.IsDeleted = 0
				JOIN CmnFormSearchControl SC ON SC.ControlID = FC.ControlID AND SC.IsDeleted = 0 AND SC.TableColumn = @IN_ControlName
				JOIN CmnSearchControlColumns CC ON CC.SearchID = SC.SearchID AND CC.IsDeleted = 0 AND CC.ColumnID = @ColumnID
			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;
			
			INSERT INTO #tempControlBindValues
			SELECT  0 SNum, CC.ColumnName, CC.DisplayName, CC.ControlType, DT.TypeValues AS DataType, '', 
				CASE WHEN CC.ControlType IN (2, 8) AND ISNULL(CC.DependentType, 0) NOT IN (2, 7) THEN
					CASE WHEN CC.FkType = 1 THEN ' SET @OutStr = SUBSTRING((SELECT '','' + (''{"Value":"'' + REPLACE(REPLACE(CAST(CM.' + CC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(CM.' + CC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"}'')
												FROM CmnCodeMaster CM WHERE CM.Type=''' + CC.FkTable + '''' 
													+ @ConditionValues +
													CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + CC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
													dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, 'CmnCodeMaster', CC.ColumnName) +
													CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND  + ISNULL(CM.IsDeleted, 0) = 0 '  END  +
													CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(CM.NotActive, 0) = 0 ' END + 
													CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(CM.IsCurrentVersion, 1) = 1 ' END +
													' ORDER BY ' + CASE WHEN ISNULL(CC.FkOrder, 0) = 1 THEN CC.FkData + ' ASC '
																							WHEN ISNULL(CC.FkOrder, 0) = 2 THEN CC.FkData + ' DESC ' 
																							WHEN ISNULL(CC.FkOrder, 0) = 3 THEN ' CM.OrderBy ' 
																							WHEN ISNULL(CC.FkOrder, 0) = 4 THEN CC.FkColumn + ' ASC ' 
																							ELSE ' CM.OrderBy ' END + 
												' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '	
					WHEN CC.FkType = 2 THEN  ' SET @OutStr = SUBSTRING((SELECT '','' + (''{"Value":"''+ REPLACE(REPLACE(CAST(MT.' + CC.FkColumn + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''","Text":"''+ REPLACE(REPLACE(CAST(MT.' + CC.FkData + ' AS NVARCHAR(MAX)), ''\'', ''\\''),''"'', ''\"'') +''"}'')
											FROM ' + CC.FkTable + ' MT WHERE 1=1 ' 
												+ @ConditionValues +
												CASE WHEN ISNULL(RBS.DataValue, '') = '' THEN '' ELSE ' AND EXISTS (SELECT 1 FROM dbo.fn_DataSplit(' + CC.FkColumn + ', '','') A WHERE (PATINDEX(''%,'' + A.items + '',%'', '',''+''' + ISNULL(RBS.DataValue, '') + '''+'','') > 0))' END +
												dbo.fn_GetTableCompanyRBSCondition(@IN_UserID, CC.FkTable, CC.ColumnName) +
												CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(MT.IsDeleted, 0) = 0 ' END + 
												CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(MT.NotActive, 0) = 0 ' END + 
												CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(MT.IsCurrentVersion, 1) = 1 ' END +
											' ORDER BY ' + CASE WHEN ISNULL(CC.FkOrder, 0) = 1 THEN ' MT.'+ CC.FkData + ' ASC '
																					WHEN ISNULL(CC.FkOrder, 0) = 2 THEN ' MT.' + CC.FkData + ' DESC '
																					WHEN ISNULL(CC.FkOrder, 0) = 3 THEN ' MT.OrderBy '
																					WHEN ISNULL(CC.FkOrder, 0) = 4 THEN CC.FkColumn + ' ASC '
																					ELSE ' MT.' + CC.FkData END +
											' FOR XML PATH(''''), ROOT(''MyString''), TYPE).value(''/MyString[1]'',''NVARCHAR(MAX)''), 2, 4000000000) '
					ELSE '' END
				ELSE
					CASE WHEN CC.FkType = 0 AND ISNULL(CC.DependentType, 0) <> 7 THEN ''
						WHEN ISNULL(CC.DependentType, 0) = 7 THEN
							CASE WHEN CC.FkType = 1 THEN 
								'SET @OutStr = (SELECT TOP(1) ' + CC.FkData + ' FROM CmnCodeMaster WHERE Type = ''' + CC.FkTable + ''' ' + ' AND ' + CC.FkColumn + ' = ' + @IN_ControlValues +
									CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
									CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
									CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END  + ')'
							WHEN CC.FkType = 2 THEN 
								'SET @OutStr = (SELECT TOP(1) ' + CC.FkData + ' FROM ' + CC.FkTable + ' WHERE ' + CC.FkColumn + ' = ' + @IN_ControlValues +
										CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
										CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
										CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + ')'
							WHEN CC.FkType = 0 AND (CC.DefaultValue <> '' AND PATINDEX(CONCAT('%,', CAST(@IN_ControlValues AS VARCHAR(50)), ',%'), CONCAT(',', CC.DefaultValue, ',')) > 0) THEN  
								'SET @OutStr = (SELECT TOP(1) AdditionalConditions FROM CmnSearchControlColumns WHERE SearchID = ' + CAST(CC.SearchID AS NVARCHAR) + 'AND ColumnID = ' + CAST(@ColumnID AS NVARCHAR) + 
									CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + ')'
							END
					ELSE 'SET @OutStr = (SELECT TOP(1) ' + CC.FkData + ' FROM ' + CC.FkTable + ' WHERE 1=1 ' + 
										CASE WHEN CC.FkDelete = 0 THEN '' ELSE ' AND ISNULL(IsDeleted, 0) = 0 ' END + 
										CASE WHEN CC.FkNotActive = 0 THEN '' ELSE ' AND ISNULL(NotActive, 0) = 0 ' END + 
										CASE WHEN CC.FkVersion = 0 THEN '' ELSE ' AND ISNULL(IsCurrentVersion, 1) = 1 ' END + @ConditionValues + ')' END
				END AS SQuery, '' AS DataSource, CC.Visibility, CC.Readonly, CASE WHEN ISNULL(CC.DependentType, 0) IN (1, 3, 6) THEN 1 ELSE 0 END, 
				CC.IsMandatory, CC.DependentType
			FROM CmnFormDetails FD
  				JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
  				JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
  				JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND (FC.SearchApplicable = 1 OR FC.ControlID = @MainControlID) AND FC.IsDeleted = 0
				JOIN CmnFormSearchControl SC ON SC.ControlID = FC.ControlID AND SC.IsDeleted = 0 AND SC.TableColumn = @IN_ControlName
				JOIN CmnSearchControlColumns CC ON CC.SearchID = SC.SearchID AND CC.IsDeleted = 0 AND CC.ColumnID = @ColumnID
					AND ((ISNULL(CC.DependentType, 0) <> 7 AND ((PATINDEX('%!=%', ISNULL(CC.DefaultValue, '')) > 0 AND 
							(PATINDEX('%,' + CAST((ISNULL(CONVERT(NVARCHAR(MAX), CASE WHEN (@FkType = 1 OR @FkType = 2) AND CC.DefaultValue <> '' AND @IN_ParentData = '' THEN (CASE WHEN @SplittedValue <> '' THEN @SplittedValue ELSE @DefaultValue END) 
										ELSE (CASE WHEN @IN_ParentData <> '' THEN @IN_ParentData ELSE '' END) END), '')) AS VARCHAR(50)) + ',%', ',' + REPLACE(ISNULL(CC.DefaultValue, ''), '!=', '') + ',') = 0))
						OR (PATINDEX('%!=%', ISNULL(CC.DefaultValue, '')) = 0 AND (PATINDEX('%,' + CAST((ISNULL(CONVERT(NVARCHAR(MAX), CASE WHEN (@FkType = 1 OR @FkType = 2) AND CC.DefaultValue <> '' AND @IN_ParentData = '' THEN (CASE WHEN @SplittedValue <> '' THEN @SplittedValue ELSE @DefaultValue END) 
										ELSE (CASE WHEN @IN_ParentData <> '' THEN @IN_ParentData ELSE '' END) END), '')) AS VARCHAR(50)) + ',%', ',' + REPLACE(ISNULL(CC.DefaultValue, ''), '!=', '') + ',') > 0)))) OR (ISNULL(CC.DependentType, 0) = 7))
  			JOIN CmnCodeMaster CT ON CT.Type = 'Control Type' AND CT.CodemasterID = CC.ControlType AND CT.IsDeleted = 0
  				JOIN CmnCodeMaster DT ON DT.Type = 'Data Type' AND DT.CodemasterID = CC.DataType AND DT.IsDeleted = 0
					LEFT JOIN @RBSDataVariable RBS ON RBS.TableName = @RBSTableName AND RBS.TableColumn = CC.ColumnName
			WHERE FD.FormID = @IN_FormID AND FD.IsDeleted = 0;
		END

		UPDATE #tempControlBindValues  SET @SCount = SNum = @SCount + 1 WHERE SQuery <> ''

		SET @Min = 0;
		SET @Max = 0;

		SELECT @Min = MIN(SNum), @Max = MAX(SNum) FROM #tempControlBindValues WHERE SNum <> 0 

		WHILE (@Min <> 0 AND @Min <= @Max) 
		BEGIN

			SET @OutString = ''
			SET @Query = ''
			SELECT @Query = SQuery, @IsDatasource = IsDatasource FROM #tempControlBindValues WHERE SNum = @Min      
		
			IF (@Query <> '')
			BEGIN
				EXEC sp_executesql @Query, N'@OutStr NVARCHAR(MAX) OUTPUT', @OutString OUTPUT
			END		
    
			UPDATE #tempControlBindValues
			SET DataSource = CASE WHEN (ControlType = 2 OR ControlType = 8) AND @IsDatasource = 1 THEN  @OutString
					ELSE '' END,
				ControlValue = CASE WHEN (ControlType <> 2 AND ControlType <> 8) OR @IsDatasource = 0 OR DependentType = 7 THEN @OutString 
					ELSE '' END
			WHERE SNum = @Min
      
			SET @Min = @Min + 1;
		END 

		SELECT ColumnName, ControlName, ControlType, DataType, '[' +DataSource+ ']' AS DataSource, ControlValue, Visibility, Readonly, IsDatasource, Mandatory, DependentType
		FROM #tempControlBindValues
	
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnSearchParameterProcess]'
GO

CREATE PROCEDURE [dbo].[spCmnSearchParameterProcess] (
	@IN_Event VARCHAR(20), 
	@IN_FormID INT,
	@IN_UserID INT, 
	@IN_SessionID VARCHAR(255),
	@IN_ControlName NVARCHAR(255), 
	@IN_ColumnName SYSNAME,
	@IN_ControlType NVARCHAR(100), 
	@IN_ColumnValue NVARCHAR(MAX),
	@IN_DataType VARCHAR(50))
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY

	   DECLARE @ColumnValue NVARCHAR(MAX),
			   @ErrorMessage NVARCHAR(2000),
			   @ErrorSeverity NVARCHAR(50),
			   @ErrorState NVARCHAR(50),
			   @SearchID INT,
			   @UTCTime DATETIME = GETUTCDATE(),
			   @ControlName NVARCHAR(100) = @IN_ControlName,
			   @TableColumn VARCHAR(100)= @IN_ColumnName,
			   @ControlCount INT

		IF @IN_Event = 'Clear' 
		BEGIN
			DELETE FROM CmnSearchParameterProcess WHERE SessionID = @IN_SessionID;
			DELETE FROM CmnRememberSearchControl WHERE UserID = @IN_UserID AND FormID = @IN_FormID;
		END
		ELSE
		 BEGIN

			SET @ColumnValue = '';
			IF @IN_ControlType = 'DATE' OR @IN_ControlType = 'DATETIME'
			BEGIN
			  IF CHARINDEX('From', @IN_ControlName) > 0
			  BEGIN
					SET @ControlName = (SELECT SUBSTRING(@IN_ControlName, 6, LEN(@IN_ControlName)));
					SET @TableColumn = (SELECT SUBSTRING(@IN_ColumnName, 5, LEN(@IN_ColumnName)));

					SELECT @ColumnValue = ColumnValue FROM CmnSearchParameterProcess WHERE SessionID = @IN_SessionID AND TableColumn = @TableColumn;

					IF ISNULL(@ColumnValue, '') <> ''
					BEGIN
						 SET @ColumnValue = (SELECT REPLACE(@ColumnValue, ' <= ', ''));
						 SET @ColumnValue = (''''+@IN_ColumnValue+ ''' AND '+ @ColumnValue);
					END
					ELSE
					BEGIN
						SET @ColumnValue = (' >= '''+ @IN_ColumnValue+ '''');
					END 
				END
				ELSE
				BEGIN
					SET @ControlName = (SELECT SUBSTRING(@IN_ControlName, 4, LEN(@IN_ControlName)));
					SET @TableColumn = (SELECT SUBSTRING(@IN_ColumnName, 3, LEN(@IN_ColumnName)));

					SELECT @ColumnValue = ColumnValue FROM CmnSearchParameterProcess WHERE SessionID = @IN_SessionID AND TableColumn = @TableColumn;

					IF ISNULL(@ColumnValue, '') <> ''
					BEGIN
						SET @ColumnValue = (SELECT REPLACE(@ColumnValue, ' >= ', ''));
						SET @ColumnValue = (@ColumnValue+ ' AND '''+ @IN_ColumnValue+ '''');
					END
					ELSE
					BEGIN
						SET @ColumnValue = (' <= '''+ @IN_ColumnValue+ '''');
					END
			  END
			END
			ELSE
			BEGIN
			  --IF @IN_DataType <> 'BIT' OR (@IN_DataType = 'BIT' AND @IN_ColumnValue = 'true') 
			  --BEGIN
					SET @ColumnValue = CASE WHEN @IN_DataType = 'BIT' AND @IN_ColumnValue = 'true' THEN '1' WHEN @IN_DataType = 'BIT' AND @IN_ColumnValue <> 'true' THEN '0' ELSE @IN_ColumnValue END
			  --END

			END

			SELECT @ControlCount = COUNT(1) FROM CmnSearchParameterProcess WHERE SessionID = @IN_SessionID AND TableColumn = @TableColumn;
    
			IF @ControlCount = 0
			BEGIN
			  INSERT INTO CmnSearchParameterProcess (ControlName, ColumnName, ControlType, ColumnValue, TableColumn, SessionID) 
  				VALUES (@IN_ControlName, 'MT.'+@IN_ColumnName, @IN_ControlType, @ColumnValue, 'MT.'+@TableColumn, @IN_SessionID);
			END
			ELSE
			BEGIN
			   UPDATE CmnSearchParameterProcess SET ColumnValue = @ColumnValue WHERE SessionID = @IN_SessionID AND TableColumn = @TableColumn;
			END     
    
			SET @SearchID = ISNULL((SELECT TOP 1 SearchID FROM CmnFormSearchControl WHERE Name = @ControlName AND TableColumn = @TableColumn AND FormID = @IN_FormID AND ISNULL(ButtonID, 0) = 0), 0);
			
			IF NOT EXISTS(SELECT 1 FROM CmnRememberSearchControl WHERE UserID = @IN_UserID AND SearchID = @SearchID) AND ISNULL(@SearchID, 0) <> 0
			BEGIN
				INSERT INTO CmnRememberSearchControl(SearchID, FormID, UserID, ControlValues, ColumnName, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted) 
				VALUES(@SearchID, @IN_FormID, @IN_UserID, @IN_ColumnValue, @IN_ControlName, @IN_UserID, @UTCTime, @IN_UserID,  @UTCTime, 0);
			END

		END 
	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnSessionTimeout]'
GO

CREATE PROCEDURE [dbo].[spCmnSessionTimeout]
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
			  @UTCTime DATETIME = GETUTCDATE(),
				@SessionTimeOut INT = 0

			SELECT TOP 1 @SessionTimeOut = CPP.SessionTimeout
			FROM CmnPasswordPolicy CPP 
			WHERE ISNULL(CPP.IsDeleted, 0) = 0 AND ISNULL(CPP.NotActive, 0) = 0 AND ISNULL(CPP.IsCurrentVersion, 1) = 1
			ORDER BY ReferenceID;

			UPDATE CLH 
			SET UserStatusID = 2, CLH.LogoutTime = @UTCTime, CLH.LogoutTypeID = 1, CLH.Remarks = 'Session timeout by service'
			FROM CmnLoginHistory CLH 
				JOIN CmnUserDetails UD ON UD.UserID = CLH.UserID AND (ISNULL(UD.OnlineUser, 0) = 0 OR UD.IsLocked = 1)
			WHERE CLH.UserStatusID = 1 AND @UTCTime > DATEADD(MI, @SessionTimeOut, ISNULL(CLH.LastUpdatedTime, CLH.LoginTime));

			UPDATE CLH 
			SET UserStatusID = 2, CLH.LogoutTime = @UTCTime, CLH.LogoutTypeID = 1, CLH.Remarks = 'User not active'
			FROM CmnLoginHistory CLH 
				JOIN CmnUserDetails UD ON UD.UserID = CLH.UserID AND UD.Type IN (1, 2, 3, 4)
				LEFT JOIN MstEmployeeDetails MED ON UD.Type = 1 AND UD.TypeID = MED.ReferenceID 
					AND ISNULL(MED.IsDeleted, 0) = 0 AND ISNULL(MED.NotActive, 0) = 0 AND ISNULL(MED.IsCurrentVersion, 1) = 1
  				LEFT JOIN MstClientContacts CCD ON UD.Type = 2 AND UD.TypeID = CCD.ReferenceID 
					AND ISNULL(CCD.IsDeleted, 0) = 0 AND ISNULL(CCD.NotActive, 0) = 0 AND ISNULL(CCD.IsCurrentVersion, 1) = 1
				LEFT JOIN MstManufacturerContacts MCD ON UD.Type = 3 AND UD.TypeID = MCD.ReferenceID 
					AND ISNULL(MCD.IsDeleted, 0) = 0 AND ISNULL(MCD.NotActive, 0) = 0 AND ISNULL(MCD.IsCurrentVersion, 1) = 1
				LEFT JOIN MstSupplierContacts SCD ON UD.Type = 4 AND UD.TypeID = SCD.ReferenceID 
					AND ISNULL(SCD.IsDeleted, 0) = 0 AND ISNULL(SCD.NotActive, 0) = 0 AND ISNULL(SCD.IsCurrentVersion, 1) = 1
			WHERE CLH.UserStatusID = 1 AND COALESCE(MED.ReferenceID, CCD.ReferenceID, MCD.ReferenceID, SCD.ReferenceID) IS NULL;

	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnSetSilentLoginStatus]'
GO

CREATE PROCEDURE [dbo].[spCmnSetSilentLoginStatus](
 @IN_UserName NVARCHAR(200),
 @IN_Token NVARCHAR(500),
 @IN_Status VARCHAR(1),
 @IN_SessionID NVARCHAR(500))
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		DECLARE @ErrorMessage VARCHAR(2000),
						@ErrorSeverity VARCHAR(50),
						@ErrorState	VARCHAR(50),
						@TimeStamp DATETIME = GETUTCDATE(),
						@Status VARCHAR(1) = '',
						@UserID INT = ISNULL((SELECT UserID FROM CmnUserDetails WHERE Username = @IN_UserName), 0)

		UPDATE SL
		SET [Status] = CASE WHEN SL.ExpiryDate >= @TimeStamp AND @IN_Status = 'S' THEN 'S' ELSE 'F' END,
			SessionID = CASE WHEN SL.ExpiryDate >= @TimeStamp AND @IN_Status = 'S' THEN @IN_SessionID ELSE NULL END,
			IsAuthenticated = 1
		FROM CmnSilentLoginTracking SL
		  JOIN CmnUserDetails UD ON UD.UserID = SL.UserID AND ISNULL(UD.IsLocked, 0) = 0 AND ISNULL(UD.IsDeleted, 0) = 0
		WHERE UD.Username = @IN_UserName AND SL.Token = @IN_Token AND SL.IsAuthenticated = 0 AND SL.Direction = 'IN'

		SELECT @Status = Status
		FROM CmnSilentLoginTracking WHERE Token = @IN_Token AND Direction = 'IN'

		SELECT ISNULL(@Status, 'F') AS Status, @UserID AS UserID;

	END TRY
	BEGIN CATCH
	  SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnSSOLoginRequest]'
GO

CREATE PROCEDURE [dbo].[spCmnSSOLoginRequest] (
	@IN_UserName NVARCHAR(200))
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		DECLARE @ErrorMessage VARCHAR(2000),
				@ErrorSeverity VARCHAR(50),
				@ErrorState	VARCHAR(50),
				@Message NVARCHAR(1000) = '',
				@UserID INT = ISNULL((SELECT TOP 1 UserID FROM CmnUserDetails WHERE Username = @IN_UserName AND ISNULL(IsLocked, 0) = 0 AND ISNULL(IsDeleted, 0) = 0), 0)

		IF @UserID = 0
		BEGIN
			SET @Message = 'User not available';
		END

		SELECT @Message AS Message, @UserID AS UserID;

	END TRY
	BEGIN CATCH
	  SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnSubTreeGridFill]'
GO

CREATE PROCEDURE [dbo].[spCmnSubTreeGridFill] (
    @IN_Event VARCHAR(100),              -- Event type (e.g., OnChange, GridFill)
    @IN_FormID INT,                      -- Form identifier
    @IN_UserID INT,                      -- User ID for RBS
    @IN_SessionID VARCHAR(255) = '',     -- Session ID
    @IN_DataID NVARCHAR(MAX) = '',       -- Filter values (e.g., '1#1#3#3#5' or '1#1#3')
    @IN_SortValues VARCHAR(500) = '',    -- Sort column,direction (e.g., 'ReferenceID,ASC')
    @IN_PageIndex INT = 0,               -- Page index (0-based)
    @IN_PageSize INT = 15,               -- Records per page
    @IN_DataFillType INT = 1,            -- 0 = no pagination, 1 = apply pagination
    @IN_GridColumn VARCHAR(100) = '',    -- Grid column identifier
    @IN_DataTreeValue VARCHAR(100) = '', -- Tree value filter
    @IN_FillValue NVARCHAR(100) = '',    -- Fill value filter
    @IN_MonthValue NVARCHAR(100) = ''    -- Month filter
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Declare variables
        DECLARE @ErrorMessage NVARCHAR(2000),
                @ErrorSeverity NVARCHAR(50),
                @ErrorState NVARCHAR(50),
                @Query NVARCHAR(MAX) = '',
                @ColumnValues NVARCHAR(2000) = '',
                @DataColumn NVARCHAR(1000) = '',
                @SortColumn SYSNAME = '',
                @SortType VARCHAR(50) = '',
                @Limit NVARCHAR(2000) = '',
                @TableName SYSNAME = 'viewStoSlotList',
                @KeyColumn SYSNAME = 'ReferenceID',
                @OrderBy VARCHAR(10) = 'ASC',
                @SQLSortValues NVARCHAR(MAX) = '',
                @SQLDataID NVARCHAR(MAX) = '',
                @RBSConditions NVARCHAR(MAX) = '',
                @ControlID BIGINT = 0,
                @FkDelete BIT = 0,
                @FkNotActive BIT = 0,
                @FkVersion BIT = 0,
                @FkTable SYSNAME = '',
                @AdditionalConditions NVARCHAR(2000) = '',
                @WhereClause NVARCHAR(MAX) = 'WHERE 1=1',
                @DynamicColumns NVARCHAR(MAX) = '',
                @FilterBy VARCHAR(100) = '',
                @FilterTable VARCHAR(100) = '',
                @FilterKey VARCHAR(100) = '',
                @FilterUniqueKey VARCHAR(100) = '',
                @FilterValue INT = 0,
                @SQLFilterTable NVARCHAR(MAX) = '',
                @SQLFilterBy NVARCHAR(MAX) = '';

        -- Temporary table for form configuration
        DECLARE @FormConfig TABLE (
            ControlID BIGINT,
            TableName SYSNAME,
            FkTable SYSNAME,
            FkColumn VARCHAR(100),
            AdditionalConditions NVARCHAR(2000),
            FkDelete BIT,
            FkNotActive BIT,
            FkVersion BIT,
            ColumnName NVARCHAR(100),
            ColumnName1 NVARCHAR(100),
            ColumnName2 NVARCHAR(100)
        );

        -- Temporary table for DataID splitting
        DECLARE @DataValues TABLE (RowNum INT IDENTITY(1,1), Value NVARCHAR(100));

        -- Temporary table for dynamic columns
        DECLARE @DynamicColumnList TABLE (ColumnName NVARCHAR(100));

        -- Retrieve form configuration (for AdditionalConditions, ControlType = 18)
        INSERT INTO @FormConfig (
            ControlID, TableName, FkTable, FkColumn, AdditionalConditions,
            FkDelete, FkNotActive, FkVersion, ColumnName, ColumnName1, ColumnName2
        )
        SELECT FC.ControlID, GB.TableName, FC.FkTable, FC.FkColumn, FC.AdditionalConditions,
               FC.FkDelete, FC.FkNotActive, FC.FkVersion, CC.ColumnName, CC.ColumnName1, CC.ColumnName2
        FROM CmnFormDetails FD
        JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
        JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
        JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FC.ControlType = 18
        JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0
        WHERE FD.FormID = @IN_FormID;

        -- Get primary configuration
        SELECT TOP 1
            @ControlID = ControlID,
            @FkTable = FkTable,
            @AdditionalConditions = ISNULL(AdditionalConditions, ''),
            @FkDelete = FkDelete,
            @FkNotActive = FkNotActive,
            @FkVersion = FkVersion
        FROM @FormConfig;

        -- Retrieve FilterBy and related fields from CmnFormQuery
        SELECT @FilterBy = ISNULL(FilterBy, ''),
               @FilterTable = ISNULL(FilterTable, ''),
               @FilterKey = ISNULL(FilterKey, ''),
               @FilterUniqueKey = ISNULL(FilterUniqueKey, '')
        FROM CmnFormQuery
        WHERE FormID = @IN_FormID AND SPName = 'spCmnSubTreeGridFill|' + @IN_GridColumn AND DeleteFlag = 0;

        -- Validate configuration
        IF @ControlID = 0
        BEGIN
            SET @ErrorMessage = 'No valid form configuration found for FormID: ' + CAST(@IN_FormID AS VARCHAR(10));
            RAISERROR (@ErrorMessage, 16, 1);
            RETURN;
        END

        -- Retrieve DataColumn and ControlID (from ControlType = 19)
        SELECT TOP 1 
            @DataColumn = ISNULL(FC.AdditionalConditions, ''),
            @ControlID = FC.ControlID
        FROM CmnFormDetails FD
        JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
        JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
        JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FC.ControlType = 19
        JOIN CmnControlColumns CC ON CC.ControlID = FC.ControlID AND CC.IsDeleted = 0
        WHERE FD.FormID = @IN_FormID
        GROUP BY FC.AdditionalConditions, FC.ControlID;

        -- Validate DataColumn
        IF @DataColumn = '' AND @IN_DataID <> ''
        BEGIN
            SET @ErrorMessage = 'No valid DataColumn found for FormID: ' + CAST(@IN_FormID AS VARCHAR(10));
            RAISERROR (@ErrorMessage, 16, 1);
            RETURN;
        END

        -- Retrieve dynamic column names
        INSERT INTO @DynamicColumnList (ColumnName)
        SELECT ColumnName
        FROM CmnControlColumns
        WHERE ControlID = @ControlID;

        -- Construct dynamic columns string
        SELECT @DynamicColumns = STRING_AGG(QUOTENAME(ColumnName), ', ')
        FROM @DynamicColumnList;

        -- Validate dynamic columns
        IF @DynamicColumns = ''
        BEGIN
            SET @ErrorMessage = 'No valid columns found for ControlID: ' + CAST(@ControlID AS VARCHAR(20));
            RAISERROR (@ErrorMessage, 16, 1);
            RETURN;
        END

        -- Determine sorting
        IF @IN_SortValues <> ''
        BEGIN
            SET @SortColumn = dbo.fn_SplitString(@IN_SortValues, ',', 1);
            SET @SortType = dbo.fn_SplitString(@IN_SortValues, ',', 2);
            SET @SQLSortValues = CASE WHEN @SortColumn <> '' AND @SortType IN ('ASC', 'DESC')
                                     THEN QUOTENAME(@SortColumn) + ' ' + @SortType
                                     ELSE QUOTENAME(@KeyColumn) + ' ' + @OrderBy
                                 END;
        END
        ELSE
        BEGIN
            SET @SQLSortValues = QUOTENAME(@KeyColumn) + ' ' + @OrderBy;
        END

        -- Retrieve FilterValue based on UserID
        IF @FilterBy <> ''
        BEGIN
            SELECT @FilterValue = ISNULL(ED.BranchID, 0)
            FROM CmnUserDetails UD
            JOIN MstEmployeeDetails ED ON ED.ReferenceID = UD.TypeID
            WHERE UD.UserID = @IN_UserID;

            IF ISNULL(@FilterValue, 0) = 0
                SET @FilterBy = '';

            SET @SQLFilterTable = CASE WHEN @FilterTable <> '' AND @FilterBy <> ''
                                  THEN ' JOIN ' + QUOTENAME(@FilterTable) + ' JT ON JT.' + QUOTENAME(@FilterUniqueKey) + ' = CONVERT(VARCHAR(MAX), MT.' + QUOTENAME(@FilterKey) + ') AND JT.' + QUOTENAME(@FilterBy) + ' = ' + CAST(@FilterValue AS VARCHAR(50))
                                  ELSE '' END;
            SET @SQLFilterBy = CASE WHEN @FilterBy <> '' AND ISNULL(@FilterValue, 0) <> 0 AND @FilterTable = ''
                                   THEN ' AND MT.' + QUOTENAME(@FilterBy) + ' = ' + CAST(@FilterValue AS VARCHAR(50))
                                   ELSE '' END;
        END

        -- Build column conditions dynamically
        IF @DataColumn <> '' AND @IN_DataID <> ''
        BEGIN
            -- Split DataID into individual values (using # delimiter)
            INSERT INTO @DataValues (Value)
            SELECT TRIM(Value)
            FROM STRING_SPLIT(@IN_DataID, '#')
            WHERE TRIM(Value) <> '';

            -- Count expected placeholders
            DECLARE @PlaceholderCount INT = LEN(@DataColumn) - LEN(REPLACE(@DataColumn, '@', ''));
            DECLARE @ValueCount INT = (SELECT COUNT(*) FROM @DataValues);

            -- Validate: Ensure ValueCount does not exceed PlaceholderCount
            IF @ValueCount > @PlaceholderCount
            BEGIN
                SET @ErrorMessage = 'Too many DataID values (' + CAST(@ValueCount AS VARCHAR(10)) +
                                    ') for placeholders in DataColumn (' + CAST(@PlaceholderCount AS VARCHAR(10)) + ')';
                RAISERROR (@ErrorMessage, 16, 1);
                RETURN;
            END

            -- Dynamically adjust @DataColumn to include only conditions up to ValueCount
            IF @ValueCount < @PlaceholderCount
            BEGIN
                DECLARE @TempDataColumn NVARCHAR(1000) = '';
                DECLARE @ConditionCount INT = 0;
                DECLARE @CurrentPos INT = 1;
                DECLARE @NextAnd INT;
                DECLARE @Condition NVARCHAR(100);

                -- Split @DataColumn by 'AND' to process each condition
                WHILE @CurrentPos <= LEN(@DataColumn) AND @ConditionCount < @ValueCount
                BEGIN
                    SET @NextAnd = CHARINDEX('AND', @DataColumn, @CurrentPos);
                    IF @NextAnd = 0
                        SET @NextAnd = LEN(@DataColumn) + 1;

                    -- Extract the condition
                    SET @Condition = TRIM(SUBSTRING(@DataColumn, @CurrentPos, @NextAnd - @CurrentPos));
                    IF @Condition LIKE '%@%' -- Ensure it contains a placeholder
                    BEGIN
                        SET @ConditionCount = @ConditionCount + 1;
                        IF @ConditionCount <= @ValueCount
                        BEGIN
                            SET @TempDataColumn = @TempDataColumn + @Condition;
                            IF @ConditionCount < @ValueCount
                                SET @TempDataColumn = @TempDataColumn + ' AND ';
                        END
                    END

                    SET @CurrentPos = @NextAnd + 4; -- Move past 'AND '
                END

                -- Update @DataColumn if valid conditions were found
                IF @TempDataColumn <> ''
                BEGIN
                    SET @DataColumn = RTRIM(@TempDataColumn);
                    -- Remove trailing 'AND' if present
                    IF RIGHT(@DataColumn, 4) = 'AND '
                        SET @DataColumn = LEFT(@DataColumn, LEN(@DataColumn) - 4);
                    SET @PlaceholderCount = @ValueCount; -- Update placeholder count
                END
            END

            -- Replace placeholders (@1, @2, etc.) with values
            SET @ColumnValues = @DataColumn;
            DECLARE @Counter INT = 1;
            DECLARE @Value NVARCHAR(100);

            DECLARE value_cursor CURSOR LOCAL FAST_FORWARD FOR
            SELECT Value FROM @DataValues ORDER BY RowNum;
            OPEN value_cursor;
            FETCH NEXT FROM value_cursor INTO @Value;
            WHILE @@FETCH_STATUS = 0
            BEGIN
                -- Validate value is numeric to prevent injection
                IF ISNUMERIC(@Value) = 1
                BEGIN
                    SET @ColumnValues = REPLACE(@ColumnValues, '@' + CAST(@Counter AS VARCHAR(10)), CAST(@Value AS VARCHAR(100)));
                END
                ELSE
                BEGIN
                    SET @ErrorMessage = 'Invalid non-numeric value at position ' + CAST(@Counter AS VARCHAR(10)) + ': ' + @Value;
                    RAISERROR (@ErrorMessage, 16, 1);
                    RETURN;
                END
                SET @Counter = @Counter + 1;
                FETCH NEXT FROM value_cursor INTO @Value;
            END
            CLOSE value_cursor;
            DEALLOCATE value_cursor;

            -- Replace remaining placeholders with NULL (if any)
            WHILE @Counter <= @PlaceholderCount
            BEGIN
                SET @ColumnValues = REPLACE(@ColumnValues, '@' + CAST(@Counter AS VARCHAR(10)), 'NULL');
                SET @Counter = @Counter + 1;
            END

            -- Ensure valid syntax
            SET @ColumnValues = LTRIM(RTRIM(@ColumnValues));
            IF @ColumnValues <> '' AND @ColumnValues LIKE '%=%' -- Ensure it contains a comparison
            BEGIN
                SET @ColumnValues = ' AND (' + @ColumnValues + ')';
                SET @WhereClause = @WhereClause + @ColumnValues;
            END
            ELSE
            BEGIN
                SET @ErrorMessage = 'Invalid ColumnValues generated: ' + ISNULL(@ColumnValues, 'NULL');
                RAISERROR (@ErrorMessage, 16, 1);
                RETURN;
            END
        END

        -- Apply RBS conditions
        EXEC spCmnGetFormTableRBSCondition @IN_FormID, @IN_UserID, @TableName, @TableName, @RBSConditions OUTPUT;
        IF @RBSConditions <> '' AND @RBSConditions LIKE '%=%'
        BEGIN
            SET @RBSConditions = ' AND (' + REPLACE(
                REPLACE(@RBSConditions, 'ISNULL(CompanyID', 'ISNULL(MT.CompanyID'),
                'dbo.fn_DataSplit(', 'dbo.fn_DataSplit(MT.'
            ) + ')';
            SET @WhereClause = @WhereClause + @RBSConditions;
        END

        -- Apply table flags
        IF @FkDelete = 1
        BEGIN
            SET @WhereClause = @WhereClause + ' AND MT.IsDeleted = 0';
        END
        IF @FkNotActive = 1
        BEGIN
            SET @WhereClause = @WhereClause + ' AND MT.NotActive = 0';
        END
        IF @FkVersion = 1
        BEGIN
            SET @WhereClause = @WhereClause + ' AND MT.Version = (SELECT MAX(Version) FROM ' + QUOTENAME(@TableName) + ' WHERE ReferenceID = MT.ReferenceID)';
        END

        -- Validate AdditionalConditions
        IF @AdditionalConditions <> '' AND @AdditionalConditions LIKE '%[=<>\!]%'
        BEGIN
            SET @WhereClause = @WhereClause + ' AND ' + @AdditionalConditions;
        END
        ELSE IF @AdditionalConditions <> ''
        BEGIN
            PRINT 'Warning: Invalid AdditionalConditions skipped: ' + @AdditionalConditions;
        END

        -- Apply view's built-in delete filter
        SET @WhereClause = @WhereClause + ' AND MT.IsDeleted = 0';

        -- Apply FilterBy conditions
        IF @SQLFilterBy <> ''
        BEGIN
            SET @WhereClause = @WhereClause + @SQLFilterBy;
        END

        -- Construct data query with dynamic columns
        SET @Query = '
            SELECT ' + @DynamicColumns + '
            FROM ' + QUOTENAME(@TableName) + ' MT
            ' + @SQLFilterTable + '
            ' + @WhereClause + '
            ORDER BY ' + @SQLSortValues;

        IF @IN_DataFillType = 1 AND @IN_Event IN ('GridFill', 'OnChange')
        BEGIN
            SET @IN_PageIndex = CASE WHEN @IN_PageIndex <= 0 THEN 0 ELSE @IN_PageIndex END;
            SET @Limit = 'WHERE LIMIT BETWEEN ' + CAST(@IN_PageIndex * @IN_PageSize + 1 AS VARCHAR(50)) +
                         ' AND ' + CAST((@IN_PageIndex + 1) * @IN_PageSize AS VARCHAR(50));
            SET @Query = '
                WITH PagedResults AS (
                    SELECT ' + @DynamicColumns + ',
                        ROW_NUMBER() OVER (ORDER BY ' + @SQLSortValues + ') AS LIMIT
                    FROM ' + QUOTENAME(@TableName) + ' MT
                    ' + @SQLFilterTable + '
                    ' + @WhereClause + '
                )
                SELECT ' + @DynamicColumns + '
                FROM PagedResults
                ' + @Limit;
        END

        -- Execute query
        EXEC sp_executesql @Query;

    END TRY
    BEGIN CATCH
        SET @ErrorMessage = ERROR_MESSAGE();
        SET @ErrorSeverity = ERROR_SEVERITY();
        SET @ErrorState = ERROR_STATE();

        DECLARE @INParameters NVARCHAR(2000);
        SET @INParameters = '''' + @IN_Event + ''', ' + CAST(@IN_FormID AS VARCHAR(10)) + ', ' +
                            CAST(@IN_UserID AS VARCHAR(10)) + ', ''' + @IN_SessionID + ''', ''' +
                            REPLACE(@IN_DataID, '''', '''''') + ''', ''' +
                            @IN_SortValues + ''', ' +
                            CAST(@IN_PageIndex AS VARCHAR(10)) + ', ' +
                            CAST(@IN_PageSize AS VARCHAR(10)) + ', ' +
                            CAST(@IN_DataFillType AS VARCHAR(10)) + ', ''' +
                            @IN_GridColumn + ''', ''' + @IN_DataTreeValue + ''', ''' +
                            @IN_FillValue + ''', ''' + @IN_MonthValue + '''';

        EXEC spCmnHandleException @IN_FormID, 'spCmnSubTreeGridFill', @Query, @INParameters,
                                  @ErrorMessage, @ErrorSeverity, @ErrorState;
    END CATCH
END

GO
PRINT N'Creating [dbo].[spCmnUpdateAuditDataProcess]'
GO

CREATE PROCEDURE [dbo].[spCmnUpdateAuditDataProcess]
AS  
BEGIN  
  SET NOCOUNT ON;  
  BEGIN TRY  
    DECLARE @ErrorMessage NVARCHAR(2000),  
      @ErrorSeverity NVARCHAR(50),  
      @ErrorState NVARCHAR(50),  
      @Message NVARCHAR(1000) = '',
      @MinData BIGINT,
      @MaxData BIGINT,  
      @Qry NVARCHAR(MAX) = '',
      @OldDataDisplay NVARCHAR(4000) = '',
      @NewDataDisplay NVARCHAR(4000) = '',
      @AuditTrialID BIGINT = 0;

    -- For lookup data query
    CREATE TABLE #tempQryData(
      RowNum BIGINT NOT NULL IDENTITY(1,1),
      AuditTrialID BIGINT NOT NULL,    
      AuditDataID BIGINT NOT NULL,
      TableColumnDisplay NVARCHAR(255),
      QryString NVARCHAR(MAX), 
      OldDataDisplay NVARCHAR(4000),
      NewDataDisplay NVARCHAR(4000)) 

    WHILE 1=1
    BEGIN 

      SET @AuditTrialID = NULL;

      SELECT @AuditTrialID = ReferenceID
      FROM CmnAuditTracking
      WHERE AuditDate  < DATEADD(mi, -10, GETDATE())
        AND IsProcessed = '0'
        AND Status = 'S'
      ORDER BY ReferenceID;
      
      IF @AuditTrialID IS NULL RETURN;

      INSERT INTO #tempQryData(AuditTrialID, AuditDataID, TableColumnDisplay, QryString)
      SELECT CAT.ReferenceID, CADT.ReferenceID, COALESCE(TCC.DisplayName, TFC.Name),
        CASE 
          WHEN ISNULL(TCC.FkType, TFC.FkType) = 1 THEN 
            'SELECT @NewDataDisplay = ' + 
              CASE WHEN ISNULL(CADT.NewData, '') NOT IN ('','0') THEN
                ' (SELECT ISNULL((SUBSTRING((SELECT DISTINCT '',''+ ISNULL(CAST('+ ISNULL(TCC.FkData, TFC.FkData)+ ' AS VARCHAR(50)), '''') FROM CmnCodeMaster WHERE Type = '''+ ISNULL(TCC.FkTable, TFC.FkTable)+ ''' AND (PATINDEX(''%,'' + CAST('+ISNULL(TCC.FkColumn, TFC.FkColumn)+' AS NVARCHAR(4000)) + '',%'', '','' + ISNULL('''+REPLACE(CADT.NewData,'''','''''')+''', '''') + '','') > 0) FOR XML PATH('''')), 2, 20000)), ''''))'
              ELSE '''''' END +
            ', @OldDataDisplay = ' + 
              CASE WHEN ISNULL(CADT.OldData, '') NOT IN ('','0') THEN
                ' (SELECT ISNULL((SUBSTRING((SELECT	DISTINCT '',''+ ISNULL(CAST('+ ISNULL(TCC.FkData, TFC.FkData)+ ' AS VARCHAR(50)), '''') FROM CmnCodeMaster WHERE Type = '''+ ISNULL(TCC.FkTable, TFC.FkTable)+ ''' AND (PATINDEX(''%,'' + CAST('+ISNULL(TCC.FkColumn, TFC.FkColumn)+' AS NVARCHAR(4000)) + '',%'', '','' + ISNULL('''+REPLACE(CADT.OldData,'''','''''')+''', '''') + '','') > 0) FOR XML PATH('''')), 2, 20000)), ''''))'
              ELSE '''''' END
          WHEN ISNULL(TCC.FkType, TFC.FkType) IN (2,3) THEN
            'SELECT @NewDataDisplay = ' +
            CASE WHEN ISNULL(CADT.NewData, '') NOT IN ('','0') THEN
              ' (SELECT ISNULL((SUBSTRING((SELECT DISTINCT '',''+ ISNULL(CAST('+ ISNULL(TCC.FkData, TFC.FkData)+ ' AS VARCHAR(50)), '''') FROM '+ ISNULL(TCC.FkTable, TFC.FkTable)+ ' WHERE (PATINDEX(''%,'' + CAST('+ISNULL(TCC.FkColumn, TFC.FkColumn)+' AS NVARCHAR(4000)) + '',%'', '','' + ISNULL('''+REPLACE(CADT.NewData,'''','''''')+''', '''') + '','') > 0) FOR XML PATH('''')), 2, 20000)), ''''))'
            ELSE '''''' END +
              ', @OldDataDisplay = ' + 
            CASE WHEN ISNULL(CADT.OldData, '') NOT IN ('','0') THEN
              ' (SELECT ISNULL((SUBSTRING((SELECT DISTINCT '',''+ ISNULL(CAST('+ ISNULL(TCC.FkData, TFC.FkData)+ ' AS VARCHAR(50)), '''') FROM '+ ISNULL(TCC.FkTable, TFC.FkTable) + ' WHERE (PATINDEX(''%,'' + CAST('+ISNULL(TCC.FkColumn, TFC.FkColumn)+' AS NVARCHAR(4000)) + '',%'', '','' + ISNULL('''+REPLACE(CADT.OldData,'''','''''')+''', '''') + '','') > 0) FOR XML PATH('''')), 2, 20000)), ''''))'
            ELSE '''''' END
          WHEN ISNULL(TCC.DataType, TFC.DataType) = 4 THEN 
            'SELECT @NewDataDisplay = ' 
            + CASE WHEN ISNULL(CADT.NewData, '') NOT IN ('','0') THEN ' FORMAT(CAST('''+CADT.NewData+''' AS DATE), ''dd-MMM-yyyy'')'
              ELSE '''''' END +
              ', @OldDataDisplay = ' 
            + CASE WHEN ISNULL(CADT.OldData, '') NOT IN ('','0') THEN ' FORMAT(CAST('''+CADT.OldData+''' AS DATE), ''dd-MMM-yyyy'')'
              ELSE '''''' END
          WHEN ISNULL(TCC.DataType, TFC.DataType) = 5 THEN 
            'SELECT @NewDataDisplay = ' 
            + CASE WHEN ISNULL(CADT.NewData, '') NOT IN ('','0') THEN ' FORMAT(CAST('''+CADT.NewData+''' AS DATETIME), ''dd-MMM-yyyy hh:mm:ss tt'')'
            ELSE '''''' END +
            ', @OldDataDisplay = ' 
            + CASE WHEN ISNULL(CADT.OldData, '') NOT IN ('','0') THEN ' FORMAT(CAST('''+CADT.OldData+''' AS DATETIME), ''dd-MMM-yyyy hh:mm:ss tt'')'
            ELSE '''''' END
          ELSE 'SELECT @NewDataDisplay = ISNULL('''+REPLACE(CADT.NewData,'''','''''')+''', ''''), @OldDataDisplay = ISNULL('''+REPLACE(CADT.OldData,'''','''''')+''', '''')'          
          END AS QryString   
      FROM CmnAuditTracking CAT   
        JOIN CmnAuditDataTracking CADT ON CAT.ReferenceID = CADT.AuditTrackingID 
        LEFT JOIN CmnFormControls TFC ON TFC.ControlID = CADT.ControlID 
          AND CADT.ColumnID = 0 -- AND TFC.IsDmlControl = 1
        LEFT JOIN CmnControlColumns TCC ON TCC.ControlID = CADT.ControlID 
          AND TCC.ColumnID = CADT.ColumnID -- AND TCC.IsDmlControl = 1
      WHERE CAT.ReferenceID = @AuditTrialID
        AND CADT.ControlID != 0   
        AND (ISNULL(CADT.NewData, '') NOT IN ('','0')
              OR ISNULL(CADT.OldData, '') NOT IN ('','0'));

      SELECT @MinData = 1;
      SELECT @MaxData = COUNT(1) FROM #tempQryData;

      WHILE @MinData <= @MaxData
      BEGIN
        SELECT @Qry = '', @NewDataDisplay = NULL, @OldDataDisplay = NULL;

        SET @Qry = (SELECT QryString FROM #tempQryData WHERE RowNum = @MinData);
        
        BEGIN TRY

          EXEC sp_executesql @Qry, N'@NewDataDisplay NVARCHAR(4000) OUTPUT, @OldDataDisplay NVARCHAR(4000) OUTPUT', @NewDataDisplay OUTPUT, @OldDataDisplay OUTPUT;
          
          UPDATE #tempQryData 
          SET NewDataDisplay = @NewDataDisplay,
            OldDataDisplay = @OldDataDisplay
          WHERE RowNum = @MinData;
          
        END TRY
        BEGIN CATCH   
          -- Errors can be ignored
        END CATCH         

        SET @MinData = @MinData + 1;
      END;

      UPDATE D
      SET OldDataDisplay = ISNULL(PD.OldDataDisplay, D.OldData), 
        NewDataDisplay = ISNULL(PD.NewDataDisplay, D.NewData), 
        TableColumnDisplay = ISNULL(PD.TableColumnDisplay, D.TableColumn)
      FROM CmnAuditDataTracking D
        LEFT JOIN #tempQryData PD ON PD.AuditDataID = D.ReferenceID
      WHERE D.AuditTrackingID = @AuditTrialID
        AND (ISNULL(D.NewData, '') NOT IN ('','0')
               OR ISNULL(D.OldData, '') NOT IN ('','0'));

      UPDATE CmnAuditTracking
      SET IsProcessed = '1'
      WHERE ReferenceID = @AuditTrialID;

      TRUNCATE TABLE #tempQryData;

    END

  END TRY  
  BEGIN CATCH   
    SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE()   
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH  
END  
GO
PRINT N'Creating [dbo].[spCmnUpdateMasterData]'
GO

CREATE PROCEDURE [dbo].[spCmnUpdateMasterData](
	@IN_CodemasterID INT,
	@IN_Type VARCHAR(50),
	@IN_Code VARCHAR(100),
	@IN_Name NVARCHAR(100),
	@IN_Description VARCHAR(1000),
	@IN_Category VARCHAR(400),
	@IN_Remarks VARCHAR(1000),
	@IN_Icon VARCHAR(100),
	@IN_Details VARCHAR(1000),
	@IN_SubType BIT,
	@IN_NotActive BIT,
	@IN_NotActiveDate DATETIME,
	@IN_OrderBy INT,
	@IN_IPAddress VARCHAR(100), 
	@IN_FormID INT,
	@IN_UserID INT)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	  DECLARE @ErrorMessage NVARCHAR(2000),
			  @ErrorSeverity NVARCHAR(50),
			  @ErrorState NVARCHAR(50),
			  @GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
			  @UTCTime DATETIME = GETUTCDATE(),
			  @OrderBy INT = 0,
			  @Count INT = 0,
			  @TypeValueCount INT = 0,
			  @Message VARCHAR(100) = '',
			  @WhereCondition NVARCHAR(4000) = '',
			  @DupCount INT = 0,
        @AuditTable VARCHAR(255) = '',
        @AuditQuery NVARCHAR(4000) = ''

		SELECT @OrderBy = Max(Orderby) + 1 FROM CmnCodeMaster WHERE Type = @IN_Type AND IsDeleted = 0;
		SELECT @Count = COUNT(1) FROM CmnCodeMaster WHERE CodemasterID <> @IN_CodemasterID AND Type = @IN_Type AND OrderBy = @IN_OrderBy AND IsDeleted = 0;
		SELECT @TypeValueCount = COUNT(1) FROM CmnCodeMaster WHERE Type = @IN_Type AND CodemasterID <> @IN_CodemasterID AND TypeValues = @IN_Name AND IsDeleted = 0;
		SELECT @DupCount = COUNT(1) FROM CmnCodeMaster WHERE CodemasterID <> @IN_CodemasterID AND Type = @IN_Type AND Code = @IN_Code AND Code <> '' AND IsDeleted = 0;

		IF @IN_OrderBy = 0 OR @Count > 0
		BEGIN
			SET @IN_OrderBy = @OrderBy;
		END

		IF @DupCount > 0
		BEGIN
			SET @Message = 'Duplicate occured in Type & Code';
		END
		ELSE IF @TypeValueCount > 0
		BEGIN
			SET @Message = 'Duplicate occured in Name';
		END
		ELSE
		BEGIN
     
      SET @AuditTable = SUBSTRING(('##atU' +  SUBSTRING(CAST(OBJECT_ID('CmnCodeMaster') AS VARCHAR(100)), 1, 32) 
           + RIGHT(ISNULL(FORMAT(GETDATE(), 'HHmmssff'), ''), 10) + CAST(ISNULL(@IN_FormID, 0) AS VARCHAR(50))) , 1, 63);
      SET @WhereCondition = ('WHERE Type = '''+ @IN_Type +''' AND CodeMasterID = '+ CAST(@IN_CodemasterID AS VARCHAR(50)) + ' AND IsDeleted = 0');
      
      SET @AuditQuery = 'IF OBJECT_ID(''tempdb..' + @AuditTable + ''') IS NOT NULL DROP TABLE ' + @AuditTable + ';
      SELECT * INTO ' + @AuditTable + '
      FROM CmnCodeMaster ' + @WhereCondition + ';'

      IF ISNULL(@AuditQuery, '') <> ''
        EXEC (@AuditQuery);

			UPDATE CmnCodeMaster SET Code = @IN_Code, TypeValues = @IN_Name, [Description] = @IN_Description, Category = @IN_Category, Remarks = @IN_Remarks, ImagePath = @IN_Icon, Details = @IN_Details, 
				SubType = @IN_SubType, ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ModifiedDateGMT = @GMTTime, NotActive = @IN_NotActive, NotActiveDate = @IN_NotActiveDate, OrderBy = @IN_OrderBy
			WHERE Type = @IN_Type AND CodemasterID = @IN_CodemasterID AND IsDeleted = 0;

			
			EXEC spCmnStaticAuditTracking 'UPDATE', '', 'CmnCodeMaster', 'CodeMasterID', @WhereCondition, @AuditTable, '', '', @IN_IPAddress, @IN_FormID, @IN_UserID, '', 0;
      
      SET @AuditQuery = 'IF OBJECT_ID(''tempdb..' + @AuditTable + ''') IS NOT NULL DROP TABLE ' + @AuditTable + ';'

      IF ISNULL(@AuditQuery, '') <> ''
        EXEC (@AuditQuery);

			SET @Message = 'S0003';
		END		

		SELECT @Message;

	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnUpdateRolePermission]'
GO

CREATE PROCEDURE [dbo].[spCmnUpdateRolePermission](
	@IN_RoleID INT, 
	@IN_ModuleID INT, 
	@IN_MenuID INT, 
	@IN_Read INT, 
	@IN_IsFavourite BIT, 
	@IN_FavouriteOrder INT, 
    @IN_Buttons VARCHAR(255), 
	@IN_Order INT, 
	@IN_SubOrder INT, 
	@IN_Tabs VARCHAR(255), 
	@IN_Data VARCHAR(255), 
	@IN_MainMenu INT, 
	@IN_FormID INT, 
	@IN_UserID INT,
	@IN_ConfirmMsg BIT,
	@IN_SelectedUserID VARCHAR(255),
	@IN_UserApplyCondition INT)

AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY		
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@ExceptionState INT = 0,
				@UTCTime DATETIME = GETUTCDATE(),
				@CompanyID INT = 0,
				@SelfCompany BIT = 1,
				@BranchID INT = 0,
				@SelfBranch BIT = 0,
				@UserType INT = 0,
				@Count INT = 0;

		IF (ISNULL(@IN_IsFavourite, 0) = 1 AND ISNULL(@IN_FavouriteOrder, 0) = 0)
		BEGIN
			SET @IN_FavouriteOrder = ISNULL((SELECT MAX(RBS.FavouriteOrder) + 1
			FROM CmnRBSPermission RBS
			WHERE RBS.UserID = @IN_UserID AND RBS.HasReadPermission = 1 
				AND RBS.IsFavourite = 1 AND ISNULL(RBS.IsDeleted, 0) = 0), 1);
		END

		SELECT @CompanyID = ISNULL(ED.CompanyID, UD.CompanyID), @BranchID = ISNULL(ED.BranchID, 0), @UserType = UD.Type
		FROM CmnUserDetails UD
			LEFT JOIN MstEmployeeDetails ED ON UD.[Type] = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
		WHERE UD.UserID = @IN_UserID;

		IF ISNULL(@CompanyID, 0) = 0 AND ISNULL(@UserType, 0) <> 0
			SET @CompanyID = ISNULL((SELECT TOP 1 ReferenceID FROM MstCompanyDetails WHERE IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1 AND ParentCompanyID IS NULL), 0);

		IF ISNULL(@CompanyID, 0) <> 0 AND ISNULL(@UserType, 0) <> 0
		BEGIN
			SELECT @SelfCompany = ISNULL(SelfCompany, 1), @SelfBranch = ISNULL(SelfBranch, 0)
			FROM CmnPasswordPolicy WHERE CompanyID = @CompanyID AND IsDeleted = 0;

			IF @SelfCompany = 1 AND EXISTS(SELECT 1 FROM CmnUserDetails WHERE UserID = @IN_UserID AND AccessTypeID = 2)
			BEGIN
				SET @SelfCompany = 0;
				SET @SelfBranch = 0;
			END
			ELSE IF @SelfBranch = 1 AND (ISNULL(@BranchID, 0) = 0 OR EXISTS(SELECT 1 FROM CmnUserDetails WHERE UserID = @IN_UserID AND AccessTypeID = 1))
			BEGIN
				SET @SelfBranch = 0;
			END
		END
		
		IF ISNULL(@UserType, 0) = 0
		BEGIN
			SET @SelfCompany = 0;
			SET @SelfBranch = 0;
		END
		
		SELECT @Count = COUNT(1) FROM CmnRolePermission WHERE RoleID = @IN_RoleID AND FormID = @IN_MenuID AND IsDeleted = 0;

		IF ISNULL(@Count, 0) <> 0
			BEGIN
				UPDATE CmnRolePermission
				SET HasReadPermission = @IN_Read, Buttons = @IN_Buttons, Tabs = @IN_Tabs, IsFavourite = @IN_IsFavourite,
					FavouriteOrder = @IN_FavouriteOrder, MainMenuOrder = @IN_Order, SubMenuOrder = @IN_SubOrder,
					ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ConfirmMsg = @IN_ConfirmMsg 
				WHERE RoleID = @IN_RoleID AND FormID = @IN_MenuID AND IsDeleted = 0;
				IF(@IN_MainMenu <> 0)
				BEGIN
					UPDATE CmnRolePermission SET HasReadPermission = 1 WHERE RoleID = @IN_RoleID AND FormID = @IN_MainMenu;
				END;
			END
			ELSE
			BEGIN
				INSERT INTO CmnRolePermission (RoleID, FormID, HasReadPermission, Buttons, Tabs, IsFavourite, FavouriteOrder,MainMenuOrder, SubMenuOrder,
					Audit, SubAudit, ValidateChecksum, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted, DeletedBy, DeletedDate, ConfirmMsg) 
				VALUES (@IN_RoleID, @IN_MenuID, @IN_Read, @IN_Buttons, @IN_Tabs, @IN_IsFavourite, @IN_FavouriteOrder, @IN_Order, @IN_SubOrder,
					0, 0, 0, @IN_UserID, @UTCTime, @IN_UserID, @UTCTime, 0, 0, NULL, @IN_ConfirmMsg);
				IF(@IN_MainMenu <> 0)
				BEGIN
					IF NOT EXISTS(SELECT 1 FROM CmnRolePermission WHERE RoleID = @IN_RoleID AND FormID = @IN_MainMenu)
					BEGIN
						SET @IN_Order = ISNULL((SELECT ISNULL(MainMenuOrder, 0) FROM CmnFormDetails where FormID = @IN_MainMenu), 0);
						INSERT INTO CmnRolePermission (RoleID, FormID, HasReadPermission, Buttons, Tabs, IsFavourite, FavouriteOrder,MainMenuOrder, SubMenuOrder,
							Audit, SubAudit, ValidateChecksum, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted, DeletedBy, DeletedDate, ConfirmMsg) 
						VALUES (@IN_RoleID, @IN_MainMenu, @IN_Read, '', '', @IN_IsFavourite, @IN_FavouriteOrder, @IN_Order, @IN_SubOrder,
							0, 0, 0, @IN_UserID, @UTCTime, @IN_UserID, @UTCTime, 0, 0, NULL, @IN_ConfirmMsg);
					END;
					ELSE
					BEGIN
						UPDATE CmnRolePermission SET HasReadPermission = 1 WHERE RoleID = @IN_RoleID AND FormID = @IN_MainMenu;
					END;
				END
			END

			IF @IN_UserApplyCondition IN (1, 2)
			BEGIN
				IF ISNULL(@Count, 0) <> 0
				BEGIN 
					IF(@IN_MainMenu <> 0)
					BEGIN
						UPDATE UP
						SET UP.HasReadPermission = 1, UP.ModifiedBy = @IN_UserID, UP.ModifiedDate = @UTCTime, ConfirmMsg = @IN_ConfirmMsg 
						FROM CmnRBSPermission UP
							JOIN CmnUserDetails UD ON ((LEN(LTRIM(RTRIM(ISNULL(@IN_SelectedUserID, '')))) = 0 AND UD.UserID IN (SELECT UserID FROM CmnUserDetails WHERE IsDeleted = 0 AND PATINDEX(CONCAT('%,', CAST(RoleID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0))OR (LEN(LTRIM(RTRIM(ISNULL(@IN_SelectedUserID, '')))) <> 0 AND UD.UserID IN (SELECT TRY_CAST(LTRIM(RTRIM(value)) AS INT) FROM STRING_SPLIT(@IN_SelectedUserID, ','))))
							LEFT JOIN MstEmployeeDetails ED ON UD.Type = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
						WHERE UP.FormID = @IN_MainMenu AND UP.UserID = UD.UserID AND UP.IsDeleted = 0
							AND (@SelfCompany = 0 OR ISNULL(ED.CompanyID, UD.CompanyID) = @CompanyID)
							AND (@SelfBranch = 0 OR ISNULL(ED.BranchID, 0) = @BranchID);
					END;
				END;
				ELSE
				BEGIN
					IF(@IN_MainMenu <> 0)
					BEGIN
					IF NOT EXISTS(SELECT 1 FROM CmnRolePermission WHERE RoleID = @IN_RoleID AND FormID = @IN_MainMenu)
					BEGIN
						INSERT INTO CmnRBSPermission (UserID, FormID, HasReadPermission, Buttons, Tabs, SubAudit, Audit, ValidateChecksum, MainMenuOrder, SubMenuOrder, 
							IsFavourite, FavouriteOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted, DeletedBy, DeletedDate, ConfirmMsg) 
						SELECT CUD.UserID, @IN_MainMenu, 1, '', '', 0, 0, 0, @IN_Order, @IN_SubOrder, @IN_IsFavourite, 
							@IN_FavouriteOrder, @IN_UserID, @UTCTime, @IN_UserID, @UTCTime, 0, 0, NULL, @IN_ConfirmMsg
						FROM CmnUserDetails CUD
							LEFT JOIN MstEmployeeDetails ED ON CUD.Type = 1 AND CUD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
						WHERE ((LEN(LTRIM(RTRIM(ISNULL(@IN_SelectedUserID, '')))) = 0 AND CUD.UserID IN (SELECT UserID FROM CmnUserDetails WHERE IsDeleted = 0 AND PATINDEX(CONCAT('%,', CAST(RoleID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0))OR (LEN(LTRIM(RTRIM(ISNULL(@IN_SelectedUserID, '')))) <> 0 AND CUD.UserID IN (SELECT TRY_CAST(LTRIM(RTRIM(value)) AS INT) FROM STRING_SPLIT(@IN_SelectedUserID, ','))))
							AND (@SelfCompany = 0 OR ISNULL(ED.CompanyID, CUD.CompanyID) = @CompanyID)
							AND (@SelfBranch = 0 OR ISNULL(ED.BranchID, 0) = @BranchID)
							AND NOT EXISTS (SELECT 1 FROM CmnRbsPermission CRBS WHERE CUD.UserID = CRBS.UserID AND CRBS.FormID = @IN_MainMenu AND CRBS.IsDeleted = 0);
					END;
					ELSE
					BEGIN
						UPDATE UP
						SET UP.HasReadPermission = 1, UP.ModifiedBy = @IN_UserID, UP.ModifiedDate = @UTCTime, ConfirmMsg = @IN_ConfirmMsg 
						FROM CmnRBSPermission UP
							JOIN CmnUserDetails UD ON ((LEN(LTRIM(RTRIM(ISNULL(@IN_SelectedUserID, '')))) = 0 AND UD.UserID IN (SELECT UserID FROM CmnUserDetails WHERE IsDeleted = 0 AND PATINDEX(CONCAT('%,', CAST(RoleID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0))OR (LEN(LTRIM(RTRIM(ISNULL(@IN_SelectedUserID, '')))) <> 0 AND UD.UserID IN (SELECT TRY_CAST(LTRIM(RTRIM(value)) AS INT) FROM STRING_SPLIT(@IN_SelectedUserID, ','))))
							LEFT JOIN MstEmployeeDetails ED ON UD.Type = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
						WHERE UP.FormID = @IN_MainMenu AND UP.UserID = UD.UserID AND UP.IsDeleted = 0
							AND (@SelfCompany = 0 OR ISNULL(ED.CompanyID, UD.CompanyID) = @CompanyID)
							AND (@SelfBranch = 0 OR ISNULL(ED.BranchID, 0) = @BranchID);
					END;
					END;
				END;
			END;

			IF @IN_UserApplyCondition IN (1, 2)
			BEGIN
				UPDATE UP
				SET UP.HasReadPermission = @IN_Read, UP.Buttons = @IN_Buttons, UP.Tabs = @IN_Tabs, UP.IsFavourite = @IN_IsFavourite,
					UP.FavouriteOrder = @IN_FavouriteOrder, UP.MainMenuOrder = @IN_Order, UP.SubMenuOrder = @IN_SubOrder,
					UP.ModifiedBy = @IN_UserID, UP.ModifiedDate = @UTCTime, ConfirmMsg = @IN_ConfirmMsg 
				FROM CmnRBSPermission UP
					JOIN CmnUserDetails UD ON ((LEN(LTRIM(RTRIM(ISNULL(@IN_SelectedUserID, '')))) = 0 AND UD.UserID IN (SELECT UserID FROM CmnUserDetails WHERE IsDeleted = 0 AND PATINDEX(CONCAT('%,', CAST(RoleID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0))OR (LEN(LTRIM(RTRIM(ISNULL(@IN_SelectedUserID, '')))) <> 0 AND UD.UserID IN (SELECT TRY_CAST(LTRIM(RTRIM(value)) AS INT) FROM STRING_SPLIT(@IN_SelectedUserID, ','))))
					LEFT JOIN MstEmployeeDetails ED ON UD.Type = 1 AND UD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
				WHERE UP.FormID = @IN_MenuID AND UP.UserID = UD.UserID AND UP.IsDeleted = 0
					AND (@SelfCompany = 0 OR ISNULL(ED.CompanyID, UD.CompanyID) = @CompanyID)
					AND (@SelfBranch = 0 OR ISNULL(ED.BranchID, 0) = @BranchID);
			
				INSERT INTO CmnRBSPermission (UserID, FormID, HasReadPermission, Buttons, Tabs, SubAudit, Audit, ValidateChecksum, MainMenuOrder, SubMenuOrder, 
					IsFavourite, FavouriteOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted, DeletedBy, DeletedDate, ConfirmMsg) 
				SELECT CUD.UserID, @IN_MenuID, @IN_Read, @IN_Buttons, @IN_Tabs, 0, 0, 0, @IN_Order, @IN_SubOrder, @IN_IsFavourite, 
					@IN_FavouriteOrder, @IN_UserID, @UTCTime, @IN_UserID, @UTCTime, 0, 0, NULL, @IN_ConfirmMsg
				FROM CmnUserDetails CUD
					LEFT JOIN MstEmployeeDetails ED ON CUD.Type = 1 AND CUD.TypeID = ED.ReferenceID AND ISNULL(ED.IsDeleted, 0) = 0
				WHERE ((LEN(LTRIM(RTRIM(ISNULL(@IN_SelectedUserID, ''))))= 0 AND CUD.UserID IN (SELECT UserID FROM CmnUserDetails WHERE IsDeleted = 0 AND PATINDEX(CONCAT('%,', CAST(RoleID AS VARCHAR(50)), ',%'), CONCAT(',', @IN_RoleID, ',')) > 0))OR (LEN(LTRIM(RTRIM(ISNULL(@IN_SelectedUserID, '')))) <> 0 AND CUD.UserID IN (SELECT TRY_CAST(LTRIM(RTRIM(value)) AS INT) FROM STRING_SPLIT(@IN_SelectedUserID, ','))))
					AND (@SelfCompany = 0 OR ISNULL(ED.CompanyID, CUD.CompanyID) = @CompanyID)
					AND (@SelfBranch = 0 OR ISNULL(ED.BranchID, 0) = @BranchID)
					AND NOT EXISTS (SELECT 1 FROM CmnRbsPermission CRBS WHERE CUD.UserID = CRBS.UserID AND CRBS.FormID = @IN_MenuID AND CRBS.IsDeleted = 0);
			END;
		SELECT 'S0003';
		
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnUpdateUserPermission]'
GO

CREATE PROCEDURE [dbo].[spCmnUpdateUserPermission](
	@IN_EmployeeID INT,
	@IN_ModuleID INT,
	@IN_MenuID INT, 
	@IN_Read BIT, 
	@IN_Audit BIT, 
    @IN_SubAudit BIT, 
	@IN_CheckSum BIT, 
	@IN_Buttons VARCHAR(255), 
	@IN_Order INT, 
	@IN_SubOrder INT, 
	@IN_Tabs VARCHAR(255), 
	@IN_Data VARCHAR(255), 
	@IN_MainMenu INT,
	@IN_FormID INT, 
	@IN_UserID INT,
	@IN_ConfirmMsg BIT)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

	DECLARE @ErrorMessage NVARCHAR(2000),
			@ErrorSeverity NVARCHAR(50),
			@ErrorState NVARCHAR(50),
			@Count INT = 0,
			@UTCTime DATETIME = GETUTCDATE(),
			@RoleID INT,
			@RoleCount INT
			 
	SELECT @Count = COUNT(1) FROM CmnRBSPermission WHERE UserID = @IN_EmployeeID AND FormID = @IN_MenuID AND IsDeleted = 0;	
	IF @Count > 0
	BEGIN
		UPDATE CmnRBSPermission SET HasReadPermission = @IN_Read, Buttons = @IN_Buttons, Tabs = @IN_Tabs, SubAudit = @IN_SubAudit, Audit = @IN_Audit, ValidateChecksum = @IN_CheckSum,
				MainMenuOrder = @IN_Order, SubMenuOrder = @IN_SubOrder, ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ConfirmMsg = @IN_ConfirmMsg 
				WHERE UserID = @IN_EmployeeID AND FormID = @IN_MenuID AND IsDeleted = 0;
		IF(@IN_MainMenu <> 0)
		BEGIN
			UPDATE CmnRBSPermission SET HasReadPermission = 1 WHERE UserID = @IN_EmployeeID AND FormID = @IN_MainMenu;
		END;
	END
	ELSE
	BEGIN
		INSERT INTO CmnRBSPermission (UserID, FormID, HasReadPermission, Buttons, Tabs, SubAudit, Audit, ValidateChecksum, MainMenuOrder, SubMenuOrder, IsFavourite, 
				FavouriteOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted, DeletedBy, DeletedDate, ConfirmMsg) 
			VALUES (@IN_EmployeeID, @IN_MenuID, @IN_Read, @IN_Buttons, @IN_Tabs, @IN_SubAudit, @IN_Audit, @IN_CheckSum, @IN_Order, @IN_SubOrder, 0, 0, @IN_UserID, @UTCTime, @IN_UserID, 
				@UTCTime, 0, 0, NULL, @IN_ConfirmMsg);
		IF(@IN_MainMenu <> 0)
		BEGIN
			IF NOT EXISTS(SELECT 1 FROM CmnRBSPermission WHERE UserID = @IN_EmployeeID AND FormID = @IN_MainMenu)
			BEGIN
				SET @IN_Order = ISNULL((SELECT ISNULL(MainMenuOrder, 0) FROM CmnFormDetails where FormID = @IN_MainMenu), 0);
				INSERT INTO CmnRBSPermission (UserID, FormID, HasReadPermission, Buttons, Tabs, SubAudit, Audit, ValidateChecksum, MainMenuOrder, SubMenuOrder, IsFavourite, 
					FavouriteOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDeleted, DeletedBy, DeletedDate, ConfirmMsg) 
				VALUES (@IN_EmployeeID, @IN_MainMenu, 1, '', '', @IN_SubAudit, @IN_Audit, @IN_CheckSum, @IN_Order, 0, 0, 0, @IN_UserID, @UTCTime, @IN_UserID, 
					@UTCTime, 0, 0, NULL, @IN_ConfirmMsg);
			END;
			ELSE
			BEGIN
				UPDATE CmnRBSPermission SET HasReadPermission = 1 WHERE UserID = @IN_EmployeeID AND FormID = @IN_MainMenu;			
			END;
		END;
	END

	SELECT 'S0003';

	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnUserPermissionLoad]'
GO

CREATE PROCEDURE [dbo].[spCmnUserPermissionLoad](
	@IN_FormID INT,
	@IN_UserID INT)
AS
BEGIN
  SET NOCOUNT ON

  BEGIN TRY

		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50),
				@CilentTableCount INT = 0,
				@ManufacturerTableCount INT = 0,
				@SupplierTableCount INT = 0

		DECLARE @UserDetails TABLE (UserID INT, Username NVARCHAR(200), UserTypeID INT, RoleID VARCHAR(100), BranchID INT, CompanyID INT, NickName NVARCHAR(200))

		DECLARE @RBSDataVariable TABLE (
				RowNo INT NOT NULL,
				ControlName NVARCHAR(200) NULL,
				TableName VARCHAR(255) NULL,
				TableColumn VARCHAR(255) NULL,
				DataValue NVARCHAR(MAX) NULL)

		INSERT INTO @RBSDataVariable (RowNo, ControlName, TableName, TableColumn, DataValue)
		EXEC spCmnGetFormRBSData @IN_FormID, @IN_UserID, ''
			 
		SELECT CodemasterID AS ButtonID, TypeValues AS ButtonName, Description, ImagePath AS ButtonIcon, Details AS ButtonEvent, MenuCategory AS ButtonType,
						ISNULL(AvailableStatus, '') AS ButtonStatus, ISNULL(ButtonKeyColumn, '')  AS ButtonKey, ISNULL(ButtonType, 0) AS FormButtonType
		FROM CmnCodeMaster WHERE Type = 'Menubutton' AND MenuID = @IN_FormID AND IsDeleted = 0 AND NotActive = 0 AND IsCurrentVersion = 1 ORDER BY OrderBy;   

		IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MstEmployeeDetails')
		BEGIN
			INSERT INTO @UserDetails (UserID, Username, UserTypeID, RoleID, BranchID, CompanyID, NickName)
			SELECT UD.UserID, ISNULL(UD.Username, ''), UD.Type, UD.RoleID, ED.BranchID, ED.CompanyID, ED.NickName
			FROM CmnUserDetails UD
				JOIN MstEmployeeDetails ED ON ED.ReferenceID = UD.TypeID 
					AND ISNULL(ED.IsDeleted, 0) = 0 AND ISNULL(ED.NotActive, 0) = 0 AND ISNULL(ED.IsCurrentVersion, 1) = 1
			WHERE UD.Type = 1 AND ISNULL(UD.IsDeleted, 0) = 0
			ORDER BY UD.UserID ASC;
		END
		
		IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MstClientContacts')
		BEGIN
			INSERT INTO @UserDetails (UserID, Username, UserTypeID, RoleID, BranchID, CompanyID)
			SELECT UD.UserID, ISNULL(UD.Username, ''), UD.Type, UD.RoleID, 0, 0
			FROM CmnUserDetails UD
				JOIN MstClientContacts CC ON CC.ReferenceID = UD.TypeID 
					AND ISNULL(CC.IsDeleted, 0) = 0 AND ISNULL(CC.NotActive, 0) = 0 AND ISNULL(CC.IsCurrentVersion, 1) = 1
				JOIN MstClientDetails CD ON CD.ReferenceID = CC.ClientID 
					AND ISNULL(CD.IsDeleted, 0) = 0 AND ISNULL(CD.NotActive, 0) = 0 AND ISNULL(CD.IsCurrentVersion, 1) = 1
			WHERE UD.Type = 2 AND ISNULL(UD.IsDeleted, 0) = 0
			ORDER BY UD.UserID ASC;
		END

		IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MstManufacturerContacts')
		BEGIN
			INSERT INTO @UserDetails (UserID, Username, UserTypeID, RoleID, BranchID, CompanyID)
			SELECT UD.UserID, ISNULL(UD.Username, ''), UD.Type, UD.RoleID, 0, 0
			FROM CmnUserDetails UD
				JOIN MstManufacturerContacts CC ON CC.ReferenceID = UD.TypeID 
					AND ISNULL(CC.IsDeleted, 0) = 0 AND ISNULL(CC.NotActive, 0) = 0 AND ISNULL(CC.IsCurrentVersion, 1) = 1
				JOIN MstManufacturerDetails CD ON CD.ReferenceID = CC.ManufacturerID 
					AND ISNULL(CD.IsDeleted, 0) = 0 AND ISNULL(CD.NotActive, 0) = 0 AND ISNULL(CD.IsCurrentVersion, 1) = 1
			WHERE UD.Type = 3 AND ISNULL(UD.IsDeleted, 0) = 0
			ORDER BY UD.UserID ASC;
		END

		IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'MstSupplierContacts')
		BEGIN
			INSERT INTO @UserDetails (UserID, Username, UserTypeID, RoleID, BranchID, CompanyID)
			SELECT UD.UserID, ISNULL(UD.Username, ''), UD.Type, UD.RoleID, 0, 0
			FROM CmnUserDetails UD
				JOIN MstSupplierContacts CC ON CC.ReferenceID = UD.TypeID 
					AND ISNULL(CC.IsDeleted, 0) = 0 AND ISNULL(CC.NotActive, 0) = 0 AND ISNULL(CC.IsCurrentVersion, 1) = 1
				JOIN MstSupplierDetails CD ON CD.ReferenceID = CC.SupplierID 
					AND ISNULL(CD.IsDeleted, 0) = 0 AND ISNULL(CD.NotActive, 0) = 0 AND ISNULL(CD.IsCurrentVersion, 1) = 1
			WHERE UD.Type = 4 AND ISNULL(UD.IsDeleted, 0) = 0
			ORDER BY UD.UserID ASC;
		END

		SELECT UD.UserID AS Value, CONCAT(ISNULL(UD.Username, ''), CASE WHEN ISNULL(UD.NickName, '') <> '' THEN ' - ' ELSE '' END, ISNULL(UD.NickName, '')) AS Text 
		FROM @UserDetails UD
			LEFT JOIN @RBSDataVariable RBSUSERID ON RBSUSERID.TableName = '' AND RBSUSERID.TableColumn = 'UserID'
			LEFT JOIN @RBSDataVariable RBSBranchID ON RBSBranchID.TableName = '' AND RBSBranchID.TableColumn = 'BranchID'
			LEFT JOIN @RBSDataVariable RBSRoleID ON RBSRoleID.TableName = '' AND RBSRoleID.TableColumn = 'RoleID'
			LEFT JOIN @RBSDataVariable RBSUserTypeID ON RBSUserTypeID.TableName = '' AND RBSUserTypeID.TableColumn = 'UserTypeID'
			LEFT JOIN @RBSDataVariable RBSCompanyID ON RBSCompanyID.TableName = '' AND RBSCompanyID.TableColumn = 'CompanyID'
		WHERE (ISNULL(RBSUSERID.DataValue, '') = '' OR (PATINDEX('%,' + CAST(UD.UserID AS VARCHAR(50)) + ',%', ',' + RBSUSERID.DataValue + ',') > 0))
			AND (ISNULL(RBSBranchID.DataValue, '') = '' OR (PATINDEX('%,' + CAST(UD.BranchID AS VARCHAR(50)) + ',%', ',' + RBSBranchID.DataValue + ',') > 0))
			AND (ISNULL(RBSRoleID.DataValue, '') = '' OR (PATINDEX('%,' + CAST(UD.RoleID AS VARCHAR(50)) + ',%', ',' + RBSRoleID.DataValue + ',') > 0))
			AND (ISNULL(RBSUserTypeID.DataValue, '') = '' OR (PATINDEX('%,' + CAST(UD.UserTypeID AS VARCHAR(50)) + ',%', ',' + RBSUserTypeID.DataValue + ',') > 0))
			AND (ISNULL(RBSCompanyID.DataValue, '') = '' OR (PATINDEX('%,' + CAST(UD.CompanyID AS VARCHAR(50)) + ',%', ',' + RBSCompanyID.DataValue + ',') > 0))
		ORDER BY UserID ASC;

	END TRY
	BEGIN CATCH

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
		
	END CATCH
		
END
GO
PRINT N'Creating [dbo].[spCmnUserSettings]'
GO

CREATE PROCEDURE [dbo].[spCmnUserSettings] (
	@IN_Type NVARCHAR(50),
	@IN_UserID INT,
	@IN_TypeID INT, 
	@IN_FormID INT)
AS
BEGIN
	
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorSeverity NVARCHAR(50) = '',
						@ErrorMessage NVARCHAR(2000) = '',
						@ErrorState NVARCHAR(50) = '',
						@GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
						@UTCTime DATETIME = GETUTCDATE()
		
		 IF @IN_Type = 'Theme'
		 BEGIN
			UPDATE CmnUserDetails SET ThemesID = @IN_TypeID, ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ModifiedDateGMT = @GMTTime WHERE UserID = @IN_UserID  
		 END
		 ELSE IF @IN_Type = 'Font'
		 BEGIN 
			UPDATE CmnUserDetails SET FontType = @IN_TypeID, ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ModifiedDateGMT = @GMTTime WHERE UserID = @IN_UserID
		 END
		 ELSE IF @IN_Type = 'Menu' 
		 BEGIN
			UPDATE CmnUserDetails SET MenuType = @IN_TypeID, ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ModifiedDateGMT = @GMTTime WHERE UserID = @IN_UserID  
		 END
		 ELSE IF @IN_Type = 'Profile' 
		 BEGIN
			UPDATE CmnUserDetails SET ProfileID = @IN_TypeID, ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ModifiedDateGMT = @GMTTime WHERE UserID = @IN_UserID
		 END
		 ELSE IF @IN_Type = 'Profile Orientation'
		 BEGIN
			UPDATE CmnUserDetails SET ProfileOrientation = @IN_TypeID, ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ModifiedDateGMT = @GMTTime WHERE UserID = @IN_UserID; 
		 END
		 ELSE IF @IN_Type = 'Main Page'
		 BEGIN
			UPDATE CmnUserDetails SET MainPageID = @IN_TypeID, ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ModifiedDateGMT = @GMTTime WHERE UserID = @IN_UserID; 
		 END
		 ELSE IF @IN_Type = 'Page Orientation'
		 BEGIN
			UPDATE CmnUserDetails SET PageOrientation = @IN_TypeID, ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ModifiedDateGMT = @GMTTime WHERE UserID = @IN_UserID; 
		 END
		 ELSE IF @IN_Type = 'Theme Mode'
		 BEGIN
			UPDATE CmnUserDetails SET ThemeMode = @IN_TypeID, ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ModifiedDateGMT = @GMTTime WHERE UserID = @IN_UserID; 
		 END
		 ELSE IF @IN_Type = 'Search Type'
		 BEGIN 
			UPDATE CmnUserDetails SET SearchType = @IN_TypeID, ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ModifiedDateGMT = @GMTTime WHERE UserID = @IN_UserID;
		 END
		 ELSE IF @IN_Type = 'Module Bar Required'
		 BEGIN 
			UPDATE CmnUserDetails SET ModuleBarRequired = @IN_TypeID, ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ModifiedDateGMT = @GMTTime WHERE UserID = @IN_UserID;
		 END
		 ELSE IF @IN_Type = 'Remember Search'
		 BEGIN 
			UPDATE CmnUserDetails SET RememberSearch = @IN_TypeID, ModifiedBy = @IN_UserID, ModifiedDate = @UTCTime, ModifiedDateGMT = @GMTTime WHERE UserID = @IN_UserID;
		 END
	END TRY

	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnValidateUserAccess]'
GO

CREATE PROCEDURE [dbo].[spCmnValidateUserAccess] (
	@IN_FormID INT,
	@IN_UserID INT,
	@IN_SessionID NVARCHAR(100)
)
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ReportUser BIT = 0,
				@ErrorMessage NVARCHAR(2000),  
				@ErrorSeverity NVARCHAR(50),  
				@ErrorState NVARCHAR(50)

		IF EXISTS(SELECT 1 FROM CmnUserDetails WHERE UserID = @IN_UserID AND (ISNULL(IsDeleted, 0) = 1 OR ISNULL(NotActive, 0) = 1))
			SET @ReportUser = 1;
		ELSE IF EXISTS(SELECT 1 FROM CmnUserDetails WHERE UserID = @IN_UserID AND ISNULL(LicenseType, 0) = 3)
			SET @ReportUser = 1;
		ELSE
			SET @ReportUser = 0;

		SELECT @ReportUser;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE()   
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[CmnSequenceFeeder]'
GO
CREATE TABLE [dbo].[CmnSequenceFeeder]
(
[NumberID] [INT] NOT NULL
)
GO
PRINT N'Creating primary key [PK_CmnSequenceFeeder] on [dbo].[CmnSequenceFeeder]'
GO
ALTER TABLE [dbo].[CmnSequenceFeeder] ADD CONSTRAINT [PK_CmnSequenceFeeder] PRIMARY KEY CLUSTERED ([NumberID])
GO
PRINT N'Creating [dbo].[CmnDatabaseTableSettings]'
GO
CREATE TABLE [dbo].[CmnDatabaseTableSettings]
(
[TableID] [INT] NOT NULL IDENTITY(1, 1),
[TableName] [NVARCHAR] (100) NOT NULL,
[KeyColumn] [NVARCHAR] (100) NULL,
[UniqueTypeID] [INT] NULL
)
GO
PRINT N'Creating primary key [PK_CmnDatabaseTableSettings] on [dbo].[CmnDatabaseTableSettings]'
GO
ALTER TABLE [dbo].[CmnDatabaseTableSettings] ADD CONSTRAINT [PK_CmnDatabaseTableSettings] PRIMARY KEY CLUSTERED ([TableID])
GO
PRINT N'Creating index [IDX_CmnDatabaseTableSettings] on [dbo].[CmnDatabaseTableSettings]'
GO
CREATE NONCLUSTERED INDEX [IDX_CmnDatabaseTableSettings] ON [dbo].[CmnDatabaseTableSettings] ([TableName])
GO
PRINT N'Creating [dbo].[spCmnValidationCheck]'
GO

CREATE PROCEDURE [dbo].[spCmnValidationCheck] (
	@IN_DmlType VARCHAR(100) ,
	@IN_FormID INT,
	@IN_UserID INT,
	@IN_SessionID VARCHAR(500),
	@IN_VisbleTabs VARCHAR(500))
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
	
		DECLARE @TableMin INT = 0,
				@TableCount INT = 0,
				@TableName SYSNAME = '',
				@ResponseMsg NVARCHAR(500)= '',
				@IsValidated BIT = 0,
				@ValidatedMsg NVARCHAR(500)= '',
				@IdentityColumn SYSNAME = '',
				@IdentityValue SYSNAME = '',
				@QGCount INT = 0,
				@AdditionalCondition NVARCHAR(MAX)= '',
				@DupCount INT = 0,
				@CurUniqueGroup NVARCHAR(500)= '',
				@DuplicateColumns NVARCHAR(MAX)= '',
				@ValidateColumns NVARCHAR(MAX)= '',
				@ControlValue NVARCHAR(MAX)= '',
				@ValQuery NVARCHAR(MAX)= '',
				@Min INT = 0,
				@Max INT = 0,
				@ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50) ,
				@CheckColumn INT = 0,
				@CheckCount INT = 0,
				@CheckColumnCount INT = 0,
				@FileCount INT = 0,
				@Version INT = 0,
				@UploadCount INT = 0,
				@CompanyIDColumn INT = 0,
				@CompanyID INT = 1,
				@UniqueTypeID INT = 1;
				
		IF OBJECT_ID('tempdb..#tempDMLTableNameProcess') IS NOT NULL
			DROP TABLE #tempDMLTableNameProcess

		CREATE TABLE #tempDMLTableNameProcess (TableNum INT NULL, TableName SYSNAME NOT NULL)

		INSERT INTO #tempDMLTableNameProcess (TableName)
		SELECT DISTINCT(TableName) FROM CmnDMLParameterProcess WHERE UserID = @IN_UserID AND ISNULL(TableName, '') <> '' AND SessionID = @IN_SessionID

		IF OBJECT_ID('tempdb..#tempDMLTableNameSort') IS NOT NULL
			DROP TABLE #tempDMLTableNameSort

		CREATE TABLE #tempDMLTableNameSort (TableNum INT NOT NULL IDENTITY(1, 1), TableName SYSNAME NOT NULL, TabID SYSNAME NOT NULL, GroupID SYSNAME NOT NULL)

		INSERT INTO #tempDMLTableNameSort (TableName, TabID, GroupID)
		SELECT distinct COALESCE(GB.TableName, FT.TableName, FD.TableName), GB.TabID, GB.GroupID 
		FROM CmnFormDetails FD
			JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
			JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID 
		WHERE FD.FormID = @IN_FormID 
		ORDER BY GB.TabID ASC, GB.GroupID ASC

		UPDATE TMP
		SET TMP.TableNum = TMP1.TableNum
		FROM #tempDMLTableNameProcess TMP
			JOIN #tempDMLTableNameSort TMP1 ON TMP1.TableName = TMP.TableName

		IF OBJECT_ID('tempdb..#tempDMLTableName') IS NOT NULL
			DROP TABLE #tempDMLTableName

		CREATE TABLE #tempDMLTableName (TableNum  INT NOT NULL IDENTITY(1, 1), TableName SYSNAME NOT NULL)

		INSERT INTO #tempDMLTableName 
		SELECT TableName FROM #tempDMLTableNameProcess AS tbl
		ORDER BY tbl.TableNum
  
		SELECT @TableCount = COUNT(1) FROM #tempDMLTableName

		WHILE (@TableMin < @TableCount)
		BEGIN
			SET @CheckColumn = 0;
			SET @TableMin = @TableMin + 1    

			SELECT @TableName = TableName  FROM #tempDMLTableName WHERE TableNum = @TableMin;
   
			SET @IsValidated = 1;
			SET @ValidatedMsg = '';

			SET @IdentityColumn = ISNULL((SELECT TOP 1 DP.ColumnName FROM CmnDMLParameterProcess DP 
			WHERE DP.UserID = @IN_UserID AND DP.IsIdentity = 1 AND TableName = @TableName AND DP.SessionID = @IN_SessionID), '')

			SET @IdentityValue = ISNULL((SELECT TOP 1 ISNULL(DP.ColumnValue, '') FROM CmnDMLParameterProcess DP 
			WHERE DP.UserID = @IN_UserID AND DP.IsIdentity = 1 AND TableName = @TableName AND DP.SessionID = @IN_SessionID), '')
			
			/*Mandatory Block*/
			IF (SELECT COUNT(1) FROM CmnDMLParameterProcess DP
					JOIN CmnFormControls FC ON FC.TableColumn = DP.ColumnName AND FC.IsDeleted = 0
					JOIN CmnGroupBoxes GB ON GB.GroupID = FC.GroupID
					JOIN CmnFormTabs FT ON FT.TabID = GB.TabID
					JOIN CmnRBSPermission RBS ON (PATINDEX('%,' + CAST(FT.TabID AS VARCHAR(50)) + ',%' , ',' + RBS.Tabs + ',') > 0) AND RBS.FormID = @IN_FormID AND RBS.UserID = @IN_UserID
					WHERE DP.UserID = @IN_UserID AND DP.IsMandatory = 1 AND DP.IsDmlControl = 1 AND FC.Visibility = 1 AND DP.SessionID = @IN_SessionID 
						AND (@IN_VisbleTabs = '' OR PATINDEX('%,' + CAST(FT.TabID AS VARCHAR(50)) + ',%' , ',' + @IN_VisbleTabs + ',') > 0)
						AND ((DP.DataType = 'BIT' AND DP.ColumnValue IN ('false')) 
							OR (DP.IsFKTable = 1 AND DP.ColumnValue IN ('', '0'))
							OR (DP.IsFKTable = 0 AND DP.ColumnValue IN ('')))) > 0 
			BEGIN       
				SET @ValidatedMsg = 'W0006';
				SET @IsValidated = 0;
			END 

		 /*Duplicate Block*/
			IF (SELECT COUNT(1) FROM CmnDMLParameterProcess DP WHERE DP.UserID = @IN_UserID AND ISNULL(DP.UniqueGroup, '0') <> '0' AND TableName = @TableName AND DP.SessionID = @IN_SessionID) > 0 AND @IsValidated = 1 
			BEGIN		
				SET @QGCount = 0;

				/*** UniqueTypeID 1 = Company wise, 2 = Application wise, 3 = Branch wise ***/
				SELECT TOP 1 @UniqueTypeID = ISNULL(UniqueTypeID, 1) FROM CmnDatabaseTableSettings WHERE TableName = @TableName;
				
				IF OBJECT_ID('tempdb..#tempUniqueGroup') IS NOT NULL DROP TABLE #tempUniqueGroup

				CREATE TABLE #tempUniqueGroup (QGNum INT NOT NULL, UniqueGroup INT)
  
				INSERT INTO #tempUniqueGroup
				SELECT DISTINCT 0, SF.NumberID
				FROM CmnSequenceFeeder SF
					JOIN CmnDMLParameterProcess DP ON	PATINDEX('%,' + CAST(SF.NumberID AS VARCHAR(50)) + ',%' , ',' + DP.UniqueGroup + ',') > 0
				WHERE DP.UserID = @IN_UserID AND DP.IsDmlControl = 1 AND ISNULL(DP.UniqueGroup, '') <> '' AND TableName = @TableName AND DP.SessionID = @IN_SessionID
				ORDER BY SF.NumberID
     
				UPDATE #tempUniqueGroup
				SET @QGCount = QGNum = @QGCount + 1
      
				SET @Min = 0;
				SET @Max = 0;
				SELECT @Min = MIN(QGNum), @Max = MAX(QGNum) FROM #tempUniqueGroup WHERE QGNum <> 0;
 
				SET @AdditionalCondition = ISNULL((SELECT  TOP 1 FC.AdditionalConditions FROM CmnFormDetails FD
      					JOIN CmnFormTabs FT ON FT.FormID = FD.FormID AND FT.IsDeleted = 0
      					JOIN CmnGroupBoxes GB ON GB.TabID = FT.TabID AND GB.IsDeleted = 0
      					JOIN CmnFormControls FC ON FC.GroupID = GB.GroupID AND FC.IsDeleted = 0 AND FC.SearchApplicable = 1
      				WHERE FD.FormID = @IN_FormID AND FD.TableName = @TableName AND FD.FormType <> 4 AND FD.IsDeleted = 0), '')      	

				SET @AdditionalCondition = REPLACE(@AdditionalCondition, 'UserID=@UserID', '');
				SET @AdditionalCondition = LTRIM(RTRIM(@AdditionalCondition));

				WHILE (@Min <> 0 AND @Min <= @Max) 
				BEGIN
					SET @DupCount = 0;
					SELECT @CurUniqueGroup = UniqueGroup FROM #tempUniqueGroup WHERE QGNum = @Min;       

					SET @DuplicateColumns = ISNULL(SUBSTRING((SELECT ', ' + DP.ControlName
											FROM CmnDMLParameterProcess DP 
											WHERE DP.UserID = @IN_UserID AND DP.IsDmlControl = 1 AND TableName = @TableName AND DP.SessionID = @IN_SessionID 
													AND	PATINDEX('%,' + CAST(@CurUniqueGroup AS VARCHAR(50)) + ',%' , ',' + DP.UniqueGroup + ',') > 0            
											ORDER BY DP.ColumnName FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '')

					SET @CheckCount = (SELECT COUNT(1) FROM CmnDMLParameterProcess WHERE UserID = @IN_UserID AND IsDmlControl = 1 AND TableName = @TableName AND SessionID = @IN_SessionID
                                         AND PATINDEX('%,' + CAST(@CurUniqueGroup AS VARCHAR(50)) + ',%' , ',' + UniqueGroup + ',') > 0  AND ColumnValue <> (CASE WHEN ControlType = 'Combobox' THEN '0' ELSE '' END));

					SET @CheckColumnCount = (SELECT COUNT(1) FROM CmnDMLParameterProcess WHERE UserID = @IN_UserID AND IsDmlControl = 1 AND TableName = @TableName AND SessionID = @IN_SessionID
													 AND PATINDEX('%,' + CAST(@CurUniqueGroup AS VARCHAR(50)) + ',%' , ',' + UniqueGroup + ',') > 0);
       
					IF @CheckCount = @CheckColumnCount
					BEGIN
						SET @ValidateColumns = ISNULL(SUBSTRING((SELECT ' AND ' + DP.ColumnName + '=''' + ISNULL(DP.ColumnValue, '') +  ''''
											FROM CmnDMLParameterProcess DP 
											WHERE DP.UserID = @IN_UserID AND DP.IsDmlControl = 1 AND TableName = @TableName AND DP.SessionID = @IN_SessionID				
													AND	PATINDEX('%,' + CAST(@CurUniqueGroup AS VARCHAR(50)) + ',%' , ',' + DP.UniqueGroup + ',') > 0 
											ORDER BY DP.ColumnName FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'),6, 4000000000), '')

						SET @ControlValue = ISNULL(SUBSTRING((SELECT ',' + DP.ColumnValue FROM CmnDMLParameterProcess DP 				
											WHERE DP.UserID = @IN_UserID AND DP.IsDmlControl = 1 AND TableName = @TableName AND DP.SessionID = @IN_SessionID
												AND	PATINDEX('%,' + CAST(@CurUniqueGroup AS VARCHAR(50)) + ',%' , ',' + DP.UniqueGroup + ',') > 0 
											ORDER BY DP.ColumnName FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','NVARCHAR(MAX)'), 2, 4000000000), '')

						SELECT @CheckColumn = COUNT(1) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'IsDeleted'
					
						IF @CheckColumn <> 0 
						BEGIN 
							SET @ValQuery =  'SELECT @DupCnt = COUNT(1)  FROM ' + @TableName + ' WHERE '+ @IdentityColumn + ' <> '''+ @IdentityValue + '''' +  ' AND ' 				
										+ CASE WHEN @AdditionalCondition != '' THEN  @AdditionalCondition  ELSE ' 1=1 ' END  
										+ CASE WHEN @ValidateColumns != '' THEN  (' AND ' + @ValidateColumns)  ELSE '' END + ' AND IsDeleted = 0'
						END
						ELSE
						BEGIN 
							SET @ValQuery =  'SELECT @DupCnt = COUNT(1)  FROM ' + @TableName + ' WHERE '+ @IdentityColumn + ' <> '''+ @IdentityValue + '''' +  ' AND ' 				
										+ CASE WHEN @AdditionalCondition != '' THEN  @AdditionalCondition  ELSE ' 1=1 ' END 
										+ CASE WHEN @ValidateColumns != '' THEN  (' AND ' + @ValidateColumns)  ELSE '' END
						END				
						
						IF @UniqueTypeID IN (0, 1)
						BEGIN
							SELECT @CompanyIDColumn = COUNT(1) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME = 'CompanyID';
							IF @CompanyIDColumn > 0
							BEGIN
								SELECT @CompanyID = ISNULL(CompanyID, 1) FROM CmnUserDetails WHERE UserId = @IN_UserID;
								SET @ValQuery = @ValQuery + ' AND CompanyID = ' + CAST(@CompanyID AS VARCHAR(50));
							END
						END

						EXEC sp_executesql @ValQuery, N'@DupCnt INT OUTPUT', @DupCount OUTPUT;

						SET @ResponseMsg = '';
						SELECT @UploadCount = COUNT(1) FROM CmnDMLParameterProcess CP WHERE CP.TableName = @TableName AND (CP.ControlType = 'attachment' OR CP.ControlType = 'photo viewer') AND (CP.ColumnValue <> '' AND CP.ColumnValue <> 0)  
										AND CP.UserID = @IN_UserID AND CP.VersionCheck = 1 AND CP.SessionID = @IN_SessionID;
          
						IF @UploadCount > 0
						BEGIN
							SELECT @Version = ISNULL(CP.ColumnValue, 0) FROM CmnDMLParameterProcess CP WHERE CP.TableName = @TableName AND CP.UserID = @IN_UserID AND CP.ColumnName = 'Version' AND CP.SessionID = @IN_SessionID;

							IF @Version <> 0
							BEGIN
								SELECT @FileCount = COUNT(1) FROM CmnFileUpload WHERE FormID = @IN_FormID AND FileRefID = @IdentityValue AND Version = @Version;

								IF @FileCount > 0
								BEGIN
									SET @ValidatedMsg = 'Duplicate occurred in Version';
									BREAK
								END
							END          
						END
				
						IF @DupCount > 0 AND @IsValidated = 1
						BEGIN
						IF @IN_DmlType = 'DML' 
							BEGIN
								SET @ValidatedMsg = 'Duplicate occurred in '+ @DuplicateColumns
							END
						ELSE
							BEGIN
								SET @ValidatedMsg = 'Duplicate occurred in ' + @DuplicateColumns + ' ' + @ControlValue
							END
						SET @IsValidated = 0
						BREAK
						END   
					END
					SET @Min = @Min + 1

				END	 
			END        
		
			SET @ResponseMsg = @ValidatedMsg;
        
			IF @ValidatedMsg <> ''         
					BREAK
		END
			 
		IF @IN_DmlType = 'DML' 
			SELECT @ResponseMsg;
		ELSE
			SELECT @ResponseMsg, @IdentityValue;
	
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spUpdateUserSessionTime]'
GO

CREATE PROCEDURE [dbo].[spUpdateUserSessionTime] (
	@IN_UserID INT, 
	@IN_SessionID NVARCHAR(500)
)
AS
BEGIN
SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000), @ErrorSeverity NVARCHAR(50), @ErrorState NVARCHAR(50);

		UPDATE CmnLoginHistory SET LastUpdatedTime = GETUTCDATE()
		WHERE UserID = @IN_UserID AND SessionID = @IN_SessionID	AND UserStatusID = 1;
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spMstCompanyUserCreation]'
GO

CREATE PROCEDURE [dbo].[spMstCompanyUserCreation] (
	@IN_UserID INT,
	@IN_ReferenceID BIGINT,
	@IN_DMLEvent VARCHAR(50)
)
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(4000),
				@ErrorSeverity INT,
				@ErrorState INT,
				@GMTTime DATETIME = dbo.fn_GMTCalculation(@IN_UserID),
				@UTCTime DATETIME = GETUTCDATE(),
				@UserID INT = @IN_UserID,
				@CompanyID INT = @IN_ReferenceID,
				@BranchID INT = 0,
				@EmployeeID BIGINT = 0,
				@UserName NVARCHAR(100) = '',
				@Password NVARCHAR(200) = '',
				@UserNameValidation BIT = 0;

		IF NOT EXISTS(SELECT 1 FROM CmnUserDetails WHERE CompanyID = @CompanyID AND IsDeleted = 0)
		BEGIN
			SELECT @UserName = REPLACE(CONCAT(Code, '_', ReferenceID), ' ', ''), @Password = ISNULL(DefaultUserPassword, '')
			FROM MstCompanyDetails WHERE ReferenceID = @CompanyID;

			IF ISNULL(@Password, '') = ''
				SET @Password = 'P/MNftTwf0OWXGc2ls+L5A==';

			WHILE @UserNameValidation = 0
			BEGIN
				IF NOT EXISTS(SELECT 1 FROM CmnUserDetails WHERE UserName = @UserName AND IsDeleted = 0)
					SET @UserNameValidation = 1;
				ELSE
					SET @UserName = CAST(REPLACE(NEWID(), '-', '') AS VARCHAR(8));
			END

			INSERT INTO MstEmployeeDetails (Code, FirstName, NickName, BranchID, CompanyID, OrderBy, Version, IsCurrentVersion,
				IsDeleted, NotActive, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT)
			VALUES ('AD', 'Admin', 'Admin', @BranchID, @CompanyID, 1,
				1, 1, 0, 0, @UserID, @UTCTime, @GMTTime, @UserID, @UTCTime, @GMTTime);

			SET @EmployeeID = IDENT_CURRENT('MstEmployeeDetails');

			INSERT INTO CmnUserDetails (Type, TypeID, UserName, Password, RoleID, ResetPassword, LicenseType, ProfileID, ThemesID, FontType,
				MenuType, CompanyID, OrderBy, IsDeleted, NotActive, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT)
			VALUES (1, @EmployeeID, @UserName, @Password, 1, 1, 1, 1, 8, 2, 2,
				@CompanyID, 1, 0, 0, @UserID, @UTCTime, @GMTTime, @UserID, @UTCTime, @GMTTime);

			SET @UserID = IDENT_CURRENT('CmnUserDetails');

			UPDATE CmnUserDetails
			SET CreatedBy = @UserID,
				ModifiedBy = @UserID
			WHERE UserID = @UserID;

			UPDATE MstEmployeeDetails
			SET CreatedBy = @UserID,
				ModifiedBy = @UserID
			WHERE ReferenceID = @EmployeeID;
		END
		ELSE
		BEGIN
			SELECT TOP 1 @UserID = UserID, @EmployeeID = ISNULL(TypeID, 0) 
			FROM CmnUserDetails 
			WHERE CompanyID = @CompanyID AND IsDeleted = 0 AND Type = 1 AND ISNULL(TypeID, 0) <> 0
			ORDER BY UserID;
		END

		IF NOT EXISTS(SELECT 1 FROM CmnPasswordPolicy WHERE CompanyID = @CompanyID AND IsDeleted = 0)
		BEGIN
			INSERT INTO CmnPasswordPolicy (MinimumLength, MaximumLength, ExpiryDays, ExpiryDaysNegotiable, IsNumeric, IsAlpha, IsSplCharacter,
				StartWithID, LoginAttempt, SessionTimeout, CaptchaValidation, CaptchaLevel, OTPValidation, OTPType, OTPExpireMin,
				MultipleLogin, AuthenticationType, RememberUser, RetrivePassword, RetriveType, PreviousPolicy, PreviousPolicyValue,
				PrevPwdRetrieveCount, PasswordResetType, SelfCompany, SelfBranch, CompanyID, OrderBy, Version, IsCurrentVersion,
				IsDeleted, NotActive, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT)
			SELECT TOP 1 MinimumLength, MaximumLength, ExpiryDays, ExpiryDaysNegotiable, IsNumeric, IsAlpha, IsSplCharacter,
				StartWithID, LoginAttempt, SessionTimeout, CaptchaValidation, CaptchaLevel, OTPValidation, OTPType, OTPExpireMin,
				MultipleLogin, AuthenticationType, RememberUser, RetrivePassword, RetriveType, PreviousPolicy, PreviousPolicyValue,
				PrevPwdRetrieveCount, PasswordResetType, SelfCompany, SelfBranch, @CompanyID, 
				ISNULL((SELECT MAX(OrderBy) FROM CmnPasswordPolicy), 0) + 1,
				1, 1, 0, 0, @UserID, @UTCTime, @GMTTime, @UserID, @UTCTime, @GMTTime
			FROM CmnPasswordPolicy
			WHERE IsDeleted = 0 ORDER BY ReferenceID;
		END

		IF NOT EXISTS(SELECT 1 FROM MstCompanyDetails WHERE ParentCompanyID = @CompanyID AND IsDeleted = 0)
		BEGIN
			INSERT INTO MstCompanyDetails (ParentCompanyID, Code, Name, Initial, CountryID, StateID,
				WeekendDays, CurrencyID, IndustryID, CompanyID, OrderBy, Version, IsCurrentVersion,
				IsDeleted, NotActive, CreatedBy, CreatedDate, CreatedDateGMT, ModifiedBy, ModifiedDate, ModifiedDateGMT)
			SELECT @CompanyID, Code, Name, Initial, CountryID, StateID, WeekendDays, CurrencyID, IndustryID, @CompanyID,
				1, 1, 1, 0, 0, @UserID, @UTCTime, @GMTTime, @UserID, @UTCTime, @GMTTime
			FROM MstCompanyDetails WHERE ReferenceID = @CompanyID;

			SET @BranchID = IDENT_CURRENT('MstCompanyDetails');

			UPDATE MstEmployeeDetails
			SET BranchID = @BranchID
			WHERE ReferenceID = @EmployeeID;
		END

		UPDATE MstCompanyDetails
		SET CompanyID = @CompanyID,
			CreatedBy = @UserID,
			ModifiedBy = @UserID
		WHERE ReferenceID = @CompanyID AND ISNULL(CompanyID, 0) <> @CompanyID;
	END TRY
	BEGIN CATCH
		 SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();  
		 RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);  
	END CATCH
END
GO
PRINT N'Creating [dbo].[spSrvCusRepAttachmentEntry]'
GO

CREATE PROCEDURE [dbo].[spSrvCusRepAttachmentEntry] ( 
	@fileRefID INT = 0,
	@MenuID INT = 0,
	@ReportName VARCHAR(100) = '',
	@UserID INT = 0,
	@FileExtension VARCHAR(100) = '',
	@FileName NVARCHAR(500) = '',
	@ReportFilePath NVARCHAR(500) = '',
	@ReportPath NVARCHAR(500) = '',
	@GUIID NVARCHAR(500) = '',
	@Checksum NVARCHAR(500) = '',
	@TableName VARCHAR(100) = ''
) AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorSeverity VARCHAR(50),
				@ErrorMessage VARCHAR(2000),
				@ErrorState VARCHAR(50)

		INSERT INTO CmnFileUpload (FileRefID, FormID, Type, OriginalFileName, FileName, FilePath, FileExtension, Checksum, GUIID, TableName, FullPath, CreatedBy,
			CreatedDate)
		SELECT @fileRefID, @MenuID, @ReportName, @FileName, @FileName, @ReportFilePath, @FileExtension, @Checksum, @GUIID, @TableName, @ReportPath, @UserID, GETDATE()

		SELECT IDENT_CURRENT('CmnFileUpload') AS UploadReferenceID;
	END TRY
	BEGIN CATCH
	  SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
END
GO
PRINT N'Creating [dbo].[SrvCustomReportTracking]'
GO
CREATE TABLE [dbo].[SrvCustomReportTracking]
(
[ReferenceID] [BIGINT] NOT NULL IDENTITY(1, 1),
[ReportType] [VARCHAR] (100) NULL,
[DataIDList] [VARCHAR] (100) NULL,
[DataID] [INT] NULL,
[ReportCode] [INT] NULL,
[SessionID] [VARCHAR] (500) NULL,
[UserID] [INT] NULL,
[MenuID] [INT] NULL,
[TemplateID] [INT] NULL,
[Status] [VARCHAR] (100) NULL,
[FileName] [NVARCHAR] (500) NULL,
[FilePath] [NVARCHAR] (500) NULL,
[ReportPath] [NVARCHAR] (500) NULL,
[ReportMode] [INT] NULL,
[IsSsrsReport] [BIT] NULL
)
GO
PRINT N'Creating primary key [PK_SrvCustomReportTracking] on [dbo].[SrvCustomReportTracking]'
GO
ALTER TABLE [dbo].[SrvCustomReportTracking] ADD CONSTRAINT [PK_SrvCustomReportTracking] PRIMARY KEY CLUSTERED ([ReferenceID])
GO
PRINT N'Creating [dbo].[spSrvCustomReportTracking]'
GO

CREATE PROCEDURE [dbo].[spSrvCustomReportTracking] ( 
	@ReportType VARCHAR(50) = '',
	@DataIDList VARCHAR(50) = '',
	@ReportCode INT = 0,
	@UserID INT = 0,
	@MenuID INT = 0,
	@SessionID VARCHAR(100) = '',
	@FileName NVARCHAR(500) = '',
	@ReportFilePath NVARCHAR(500) = '',
	@ReportPath NVARCHAR(500) = '',
	@Status VARCHAR(100) = '',
	@TemplateID INT = 0,
	@IsSsrsReport INT = 0,
	@DataID INT = 0,
	@ReportMode INT = 0
) AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorSeverity VARCHAR(50),
				@ErrorMessage VARCHAR(2000),
				@ErrorState VARCHAR(50)

		INSERT INTO SrvCustomReportTracking (ReportType, DataIDList, DataID, ReportCode, SessionID, UserID, MenuID, FileName, FilePath, ReportPath, Status, TemplateID, ReportMode, IsSsrsReport)
		SELECT @ReportType, @DataIDList, @DataID, @ReportCode, @SessionID, @UserID, @MenuID, @FileName, @ReportFilePath, @ReportPath, @Status, @TemplateID, @ReportMode, @IsSsrsReport;
	END TRY
	BEGIN CATCH
	  SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
END
GO
PRINT N'Creating [dbo].[spSrvFileCopierConfigRemote]'
GO

CREATE PROCEDURE [dbo].[spSrvFileCopierConfigRemote] (@IN_CompanyIDs VARCHAR(1000) = '')
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorSeverity VARCHAR(50),
				@ErrorMessage VARCHAR(2000),
				@ErrorState VARCHAR(50)
	  	
		;WITH CTE AS (
			SELECT 0 AS InstrumentID,
				'' AS InstrumentCode,
				'' AS InstrumentName,
				0 AS FileConfigID,
				'' AS MethodName,
				ISNULL(SFT.SourcePath, '') AS OutputPath,
				ISNULL(SFT.PathTypeID, 0) AS PathTypeID,
				ISNULL(SFT.FtpIpAddress, '') AS FtpIpAddress,
				ISNULL(CAST(SFT.FtpPort AS VARCHAR(50)), '') AS FtpPort,
				ISNULL(SFT.FtpUsername, '') AS FtpUsername,
				ISNULL(SFT.FtpPassword, '') AS FtpPassword,
				ISNULL(SFT.FtpPath, '') AS FtpPath,
				CASE WHEN SFT.AuthTypeID = 2 THEN ISNULL(KF.FullPath, '') ELSE '' END AS PublicKeyPath,
				ISNULL(FT.CodemasterID, 0) AS FileTypeID,
				ISNULL(FT.TypeValues, '') AS FileType,
				ISNULL(FT.Details, '') AS FileExtension
			FROM SrvFileCopierConfiguration SFT WITH (NOLOCK)
				LEFT JOIN CmnCodeMaster FT ON FT.Type = 'Supporting File Type' AND FT.IsDeleted = 0
					AND PATINDEX('%,' + CAST(FT.CodemasterID AS VARCHAR(50)) + ',%' , ',' + SFT.FileTypesIDs + ',') > 0
				LEFT JOIN CmnFileUpload KF WITH (NOLOCK) ON KF.ReferenceID = SFT.KeyFileID AND KF.IsDeleted = 0
			WHERE ISNULL(SFT.PathTypeID, 0) <> 0 AND ISNULL(SFT.FtpIpAddress, '') <> '' AND ISNULL(SFT.FtpPath, '') <> ''
				AND (ISNULL(@IN_CompanyIDs, '') = '' OR (PATINDEX('%,' + CAST(SFT.CompanyID AS VARCHAR(50)) + ',%', ',' + @IN_CompanyIDs + ',') > 0))
				AND SFT.IsDeleted = 0 AND SFT.NotActive = 0 AND SFT.IsCurrentVersion = 1
		)
		SELECT M.PathTypeID, M.FtpIpAddress, M.FtpPort, M.FtpUsername, M.FtpPassword, M.PublicKeyPath,
			SUBSTRING(((SELECT DISTINCT CONCAT(',{"FtpPath":"', REPLACE(T.FtpPath, '\', '\\'), '", "OutputPath":"', REPLACE(T.OutputPath, '\', '\\'), '"}') FROM CTE T
				WHERE T.PathTypeID = M.PathTypeID AND T.FtpIpAddress = M.FtpIpAddress
					AND T.FtpPort = M.FtpPort AND T.FtpUsername = M.FtpUsername
					AND T.FtpPassword = M.FtpPassword AND T.PublicKeyPath = M.PublicKeyPath
				FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','nvarchar(max)')), 2, 900000000) AS TransferPaths,
			SUBSTRING(((SELECT DISTINCT CONCAT(',', T.FileType) FROM CTE T
				WHERE T.PathTypeID = M.PathTypeID AND T.FtpIpAddress = M.FtpIpAddress
					AND T.FtpPort = M.FtpPort AND T.FtpUsername = M.FtpUsername
					AND T.FtpPassword = M.FtpPassword AND T.PublicKeyPath = M.PublicKeyPath
				FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','nvarchar(max)')), 2, 900000000) AS FileTypes,
			SUBSTRING(((SELECT DISTINCT CONCAT(',', T.FileExtension) FROM CTE T
				WHERE T.PathTypeID = M.PathTypeID AND T.FtpIpAddress = M.FtpIpAddress
					AND T.FtpPort = M.FtpPort AND T.FtpUsername = M.FtpUsername
					AND T.FtpPassword = M.FtpPassword AND T.PublicKeyPath = M.PublicKeyPath
				FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','nvarchar(max)')), 2, 900000000) AS FileExtensions,
			SUBSTRING(((SELECT DISTINCT CONCAT(',', T.InstrumentID) FROM CTE T
				WHERE T.PathTypeID = M.PathTypeID AND T.FtpIpAddress = M.FtpIpAddress
					AND T.FtpPort = M.FtpPort AND T.FtpUsername = M.FtpUsername
					AND T.FtpPassword = M.FtpPassword AND T.PublicKeyPath = M.PublicKeyPath
				FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','nvarchar(max)')), 2, 900000000) AS InstrumentIDs,
			SUBSTRING(((SELECT DISTINCT CONCAT(',', T.FileConfigID) FROM CTE T
				WHERE T.PathTypeID = M.PathTypeID AND T.FtpIpAddress = M.FtpIpAddress
					AND T.FtpPort = M.FtpPort AND T.FtpUsername = M.FtpUsername
					AND T.FtpPassword = M.FtpPassword AND T.PublicKeyPath = M.PublicKeyPath
				FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','nvarchar(max)')), 2, 900000000) AS FileConfigIDs,
			SUBSTRING(((SELECT DISTINCT CONCAT(',Instrument:', T.InstrumentCode, ' - ', T.InstrumentName, ', Method: ', T.MethodName) FROM CTE T
				WHERE T.PathTypeID = M.PathTypeID AND T.FtpIpAddress = M.FtpIpAddress
					AND T.FtpPort = M.FtpPort AND T.FtpUsername = M.FtpUsername
					AND T.FtpPassword = M.FtpPassword AND T.PublicKeyPath = M.PublicKeyPath
				FOR XML PATH(''), ROOT('MyString'), TYPE).value('/MyString[1]','nvarchar(max)')), 2, 900000000) AS Instruments
		FROM CTE M
		GROUP BY PathTypeID, FtpIpAddress, FtpPort, FtpUsername, FtpPassword, PublicKeyPath;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spSrvFileCopierConfiguration]'
GO

CREATE PROCEDURE [dbo].[spSrvFileCopierConfiguration] 
(
    @IN_CompanyIDs VARCHAR(1000) = ''
)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        SELECT 
			CASE WHEN ISNULL(SFC.PathTypeID, 0) = 0 THEN 'LOCAL'
                WHEN SFC.PathTypeID = 1 THEN 'LOCALNETWORK'
                WHEN SFC.PathTypeID = 2 THEN 'FTP'
                WHEN SFC.PathTypeID = 3 THEN 'SFTP'
                ELSE 'REMOTE' END AS ConfigType,
            0 AS InstrumentID,
	        ISNULL(SFC.ReferenceID, 0) AS ConfigID,
            ISNULL(SFC.TransferTypeID, 0) AS TransferTypeID,
            ISNULL(SFC.SourcePath, '') AS SourcePath,
            ISNULL(SFC.DestinationPath, '') AS DestinationPath,
            ISNULL(SFC.FileNamePattern, '') AS FileNamePattern,
            ISNULL(SFC.TransferModeID, 0) AS TransferModeID,
            ISNULL(SFC.FileOldDuration, 0) AS FileOldDuration,
            ISNULL(SFC.FileOldDurationUnitID, 0) AS FileOldDurationUnitID,
            ISNULL(SFC.FileTypesIDs, '') AS FileTypesIDs,
            ISNULL(SFC.ReplaceReq , 0) AS ReplaceReq,
            ISNULL(SFC.SubDirectoryReq, 0) AS SubDirectoryReq,
            ISNULL(STUFF((SELECT ',' + ISNULL(FT.TypeValues, '') FROM CmnCodeMaster FT WHERE FT.Type = 'Supporting File Type' 
							AND FT.IsDeleted = 0 AND PATINDEX('%,' + CAST(FT.CodemasterID AS VARCHAR(50)) + ',%', ',' + SFC.FileTypesIDs + ',') > 0
									FOR XML PATH('')), 1, 1, ''), '') AS FileTypes,
			ISNULL(STUFF((SELECT ',' + ISNULL(FT.Details, '') FROM CmnCodeMaster FT WHERE FT.Type = 'Supporting File Type' 
                  AND FT.IsDeleted = 0 AND PATINDEX('%,' + CAST(FT.CodemasterID AS VARCHAR(50)) + ',%', ',' + SFC.FileTypesIDs + ',') > 0
					FOR XML PATH('')), 1, 1, ''), '') AS FileExtensions,
            SFC.PathTypeID AS PathTypeID,
            SFC.FtpIpAddress AS FtpIpAddress,
            SFC.FtpPort AS FtpPort,
            SFC.FtpUsername AS FtpUsername,
            SFC.FtpPassword AS FtpPassword,
			CASE WHEN SFC.AuthTypeID = 2 THEN REPLACE(ISNULL(KF.FullPath, ''), '\', '/') ELSE '' END AS PublicKeyPath,
			CASE WHEN SFC.PathTypeID IN (1, 2, 3) THEN
                    ISNULL(STUFF((SELECT ',' + '{"FtpPath":"' + REPLACE(SFC2.FtpPath, '\', '\\') + '", "OutputPath":"' + REPLACE(SFC2.SourcePath, '\', '\\') + '"}'
                        FROM SrvFileCopierConfiguration SFC2
							LEFT JOIN CmnFileUpload KF2 ON KF2.ReferenceID = SFC2.KeyFileID AND KF2.IsDeleted = 0
                        WHERE SFC2.PathTypeID = SFC.PathTypeID AND SFC2.FtpIpAddress = SFC.FtpIpAddress
                          AND SFC2.FtpPort = SFC.FtpPort AND SFC2.FtpUsername = SFC.FtpUsername AND SFC2.FtpPassword = SFC.FtpPassword 
                          AND ((SFC.AuthTypeID = 2 AND ISNULL(KF2.FullPath, '') = ISNULL(KF.FullPath, '')) 
                              OR (SFC.AuthTypeID <> 2 OR SFC.AuthTypeID IS NULL)) AND SFC2.IsDeleted = 0 AND SFC2.NotActive = 0 
                          AND SFC2.IsCurrentVersion = 1 FOR XML PATH('')), 1, 1, ''), '') ELSE '' END AS TransferPaths,
            CASE WHEN SFC.PathTypeID IN (1, 2, 3) THEN
                    ISNULL(STUFF((SELECT ',' + CAST(FT.CodemasterID AS VARCHAR(20)) FROM CmnCodeMaster FT
									WHERE FT.Type = 'Supporting File Type' AND FT.IsDeleted = 0
								AND PATINDEX('%,' + CAST(FT.CodemasterID AS VARCHAR(50)) + ',%', ',' + SFC.FileTypesIDs + ',') > 0
									FOR XML PATH('')), 1, 1, ''), '') ELSE '' END AS InstrumentIDs,
            CASE WHEN SFC.PathTypeID IN (1, 2, 3) THEN
                    ISNULL(STUFF((SELECT ',' + CAST(SFC2.ReferenceID AS VARCHAR(20))
                        FROM SrvFileCopierConfiguration SFC2
							LEFT JOIN CmnFileUpload KF2 ON KF2.ReferenceID = SFC2.KeyFileID AND KF2.IsDeleted = 0
                        WHERE SFC2.PathTypeID = SFC.PathTypeID 
                          AND SFC2.FtpIpAddress = SFC.FtpIpAddress AND SFC2.FtpPort = SFC.FtpPort 
                          AND SFC2.FtpUsername = SFC.FtpUsername AND SFC2.FtpPassword = SFC.FtpPassword 
                          AND ((SFC.AuthTypeID = 2 AND ISNULL(KF2.FullPath, '') = ISNULL(KF.FullPath, '')) 
                              OR (SFC.AuthTypeID <> 2 OR SFC.AuthTypeID IS NULL))
                          AND SFC2.IsDeleted = 0 AND SFC2.NotActive = 0 AND SFC2.IsCurrentVersion = 1
						FOR XML PATH('')), 1, 1, ''), '') ELSE '' END AS FileConfigIDs,

            CASE WHEN SFC.PathTypeID IN (1, 2, 3) THEN
                    ISNULL(STUFF((SELECT ',' + 'Instrument:' + '' + ' - ' + '' + ', Method: ' + ''
                        FROM SrvFileCopierConfiguration SFC2
							LEFT JOIN CmnFileUpload KF2 ON KF2.ReferenceID = SFC2.KeyFileID AND KF2.IsDeleted = 0
                        WHERE SFC2.PathTypeID = SFC.PathTypeID AND SFC2.FtpIpAddress = SFC.FtpIpAddress
                          AND SFC2.FtpPort = SFC.FtpPort AND SFC2.FtpUsername = SFC.FtpUsername AND SFC2.FtpPassword = SFC.FtpPassword 
                          AND ((SFC.AuthTypeID = 2 AND ISNULL(KF2.FullPath, '') = ISNULL(KF.FullPath, '')) 
                              OR (SFC.AuthTypeID <> 2 OR SFC.AuthTypeID IS NULL))
                          AND SFC2.IsDeleted = 0 AND SFC2.NotActive = 0 AND SFC2.IsCurrentVersion = 1
                        FOR XML PATH('')), 1, 1, ''), '') ELSE '' END AS Instruments
        FROM SrvFileCopierConfiguration SFC
        LEFT JOIN CmnFileUpload KF ON KF.ReferenceID = SFC.KeyFileID AND KF.IsDeleted = 0
        WHERE (ISNULL(@IN_CompanyIDs, '') = '' 
           OR (PATINDEX('%,' + CAST(SFC.CompanyID AS VARCHAR(50)) + ',%', ',' + @IN_CompanyIDs + ',') > 0))
          AND SFC.IsDeleted = 0 AND SFC.NotActive = 0 AND SFC.IsCurrentVersion = 1
        ORDER BY CASE WHEN ISNULL(SFC.PathTypeID, 0) = 0 THEN 1
					WHEN SFC.PathTypeID = 1 THEN 2
					WHEN SFC.PathTypeID = 2 THEN 3
					WHEN SFC.PathTypeID = 3 THEN 4
					ELSE 5 END, SFC.ReferenceID;
    END TRY
    BEGIN CATCH
        DECLARE @ErrMsg NVARCHAR(4000), @ErrSeverity INT, @ErrState INT;
        SELECT 
            @ErrMsg = ERROR_MESSAGE(),
            @ErrSeverity = ERROR_SEVERITY(),
            @ErrState = ERROR_STATE();
        RAISERROR (@ErrMsg, @ErrSeverity, @ErrState);
    END CATCH
END
GO
PRINT N'Creating [dbo].[spSrvGetDataSyncConfiguration]'
GO

CREATE PROCEDURE [dbo].[spSrvGetDataSyncConfiguration] (@IN_DataSyncID INT)
AS
BEGIN
	
	SET NOCOUNT ON;
	BEGIN TRY

    DECLARE	@ErrorMessage VARCHAR(2000),
						@ErrorSeverity VARCHAR(50),
						@ErrorState INT,
						@SyncStartDate DATETIME = NULL,
						@SyncEndDate DATETIME = NULL,
						@SyncInterval INT = 0,
						@SyncIntervalPeriod INT = 0,
						@SyncTrackingID INT = 0,
						@Synccurdate DATETIME =  GETUTCDATE()

		SELECT TOP 1 @SyncStartDate = SyncEndDate FROM SrvDataSyncTracking WHERE DataSyncID = @IN_DataSyncID ORDER BY ReferenceID DESC;

		SELECT @SyncInterval = SyncInterval, @SyncIntervalPeriod = SyncIntervalPeriod, 
			@SyncStartDate = CASE WHEN @SyncStartDate IS NULL THEN SyncStartDate ELSE @SyncStartDate END
		FROM SrvDataSyncConfiguration WHERE ReferenceID = @IN_DataSyncID;

		IF @SyncStartDate IS NULL 
			SET @SyncStartDate = '01-01-1900'

		IF (ISNULL(@SyncInterval, 0) <> 0 AND ISNULL(@SyncIntervalPeriod, 0) <> 0)
		BEGIN
			IF @SyncIntervalPeriod = 1
				SET @SyncEndDate = DATEADD(MI, @SyncInterval, @SyncStartDate);
			ELSE IF @SyncIntervalPeriod = 2
				SET @SyncEndDate = DATEADD(HOUR, @SyncInterval, @SyncStartDate);
			ELSE IF @SyncIntervalPeriod = 3
				SET @SyncEndDate = DATEADD(DAY, @SyncInterval, @SyncStartDate);
		END
		
		if (@Synccurdate  >= @SyncEndDate)
		BEGIN
			INSERT INTO SrvDataSyncTracking (DataSyncID, SyncStartDate, SyncEndDate, SyncStatus, ModifiedDate)
			VALUES (@IN_DataSyncID, @SyncStartDate, @Synccurdate, 'I', @Synccurdate);
		END

		SET @SyncTrackingID = IDENT_CURRENT('SrvDataSyncTracking');

		SELECT SourceDatabaseType, SourceServerName, SourceAuthentication, SourceUsername, SourcePassword, SourcePortNo,
			SourceDatabaseName, DestTableName, SpName, 'SELECT * FROM ' + ISNULL(SourceTableName, '') + ' WHERE ' + SyncDateColumn + ' ' 
			+ CASE WHEN @SyncStartDate IS NULL THEN (' <= ''' + FORMAT(@Synccurdate, 'yyyy-MM-dd HH:mm:ss') + '''') 
				ELSE 'BETWEEN ''' + FORMAT(@SyncStartDate, 'yyyy-MM-dd HH:mm:ss') + ''' AND ''' + FORMAT(@Synccurdate, 'yyyy-MM-dd HH:mm:ss') + '''' END AS SyncQuery,
			@SyncTrackingID AS SyncTrackingID
		FROM SrvDataSyncConfiguration WHERE ReferenceID = @IN_DataSyncID  AND @Synccurdate  >= @SyncEndDate ;

		SELECT DestinationColumn, SourceColumn
		FROM SrvDataSyncColumnConfiguration
		WHERE DataSyncID = @IN_DataSyncID AND ISNULL(DestinationColumn, '') <> '' AND ISNULL(SourceColumn, '') <> ''
			AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 1) = 1;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spSrvGetDataSyncList]'
GO

CREATE PROCEDURE [dbo].[spSrvGetDataSyncList]
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE	@ErrorMessage VARCHAR(2000),
				@ErrorSeverity VARCHAR(50),
				@ErrorState INT

		IF OBJECT_ID('tempdb..#temp_SrvDataSyncTracking') IS NOT NULL DROP TABLE #temp_SrvDataSyncTracking
	
		SELECT DataSyncID, MAX(SyncEndDate) AS SyncEndDate INTO #temp_SrvDataSyncTracking
		FROM SrvDataSyncTracking WHERE ISNULL(SyncStatus, '') <> 'E'
		GROUP BY DataSyncID

		SELECT ReferenceID AS DataSyncID, Name AS DataSyncName
		FROM SrvDataSyncConfiguration SC 
			LEFT JOIN #temp_SrvDataSyncTracking T ON T.DataSyncID = SC.ReferenceID
		WHERE ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 1) = 1
			AND GETUTCDATE() >=	CASE WHEN SyncIntervalPeriod = 1 THEN  DATEADD(MI, SC.SyncInterval, COALESCE(T.SyncEndDate,  SC.SyncStartDate, '01-01-1900')) 
										WHEN SyncIntervalPeriod = 2 THEN  DATEADD(HOUR,  SC.SyncInterval,  COALESCE(T.SyncEndDate,  SC.SyncStartDate, '01-01-1900')) 
										WHEN SyncIntervalPeriod = 3 THEN  DATEADD(HOUR,  SC.SyncInterval,  COALESCE(T.SyncEndDate,  SC.SyncStartDate, '01-01-1900')) 
										END
		ORDER BY SC.OrderBy;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spSrvGetDownOrViewReport]'
GO

CREATE PROCEDURE [dbo].[spSrvGetDownOrViewReport] ( 
	@ReportCode INT = 0,
	@DataID INT = 0,
	@ReportMode INT = 0,
	@DataIDList VARCHAR(50) = '',
	@MenuID INT = 0,
	@UserID INT = 0
) AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorSeverity VARCHAR(50),
				@ErrorMessage VARCHAR(2000),
				@ErrorState VARCHAR(50)

		SELECT TOP 1 FileName AS FileName, FilePath AS FilePath, ReportPath AS ReportPath, Status AS ReportStatus  FROM SrvCustomReportTracking WHERE ReportMode = 2 AND ReportCode = @ReportCode AND DataID = @DataID AND MenuID = @MenuID ORDER BY ReferenceID DESC

	END TRY
	BEGIN CATCH
	  SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
END
GO
PRINT N'Creating [dbo].[spSrvGetPendingApis]'
GO

CREATE PROCEDURE [dbo].[spSrvGetPendingApis]
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorMessage NVARCHAR(2000),
				@ErrorSeverity NVARCHAR(50),
				@ErrorState NVARCHAR(50)

		SELECT ET.ReferenceID AS TransactionID, ET.ApiName AS ApiName, ET.RefID,
			ISNULL(ET.RequestMethod, '') AS RequestMethod, ISNULL(ET.ContentType, '') AS ContentType,
			ISNULL(ET.ApiLink, '') AS ApiLink, ISNULL(ET.Payload, '') AS Payload, ISNULL(ET.Header, '') AS Header
		FROM SrvApiTransactionTracking ET
		WHERE (ET.Status = 1 OR ET.Status = 4
			OR (ET.Status = 3  AND ISNULL(ET.RetryCount, 0) > 0 AND ISNULL(ET.RetryCount, 0) >= ISNULL(ET.FailureCount, 0)))
		ORDER BY ET.CreatedDate;
	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spSrvGetSsrsReportConfig]'
GO

CREATE PROCEDURE [dbo].[spSrvGetSsrsReportConfig] (@IN_ReportCode VARCHAR(100))
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY

		DECLARE	@ErrorMessage VARCHAR(2000),
				@ErrorSeverity VARCHAR(50),
				@ErrorState INT,
				@SsrsReportID BIGINT = 0

		SELECT @SsrsReportID = RC.ReferenceID
		FROM SrvSsrsReportConfiguration RC
		WHERE RC.Code = @IN_ReportCode
			AND RC.IsDeleted = 0 AND RC.NotActive = 0 AND RC.IsCurrentVersion = 1;

		SELECT RC.ReferenceID, RC.Name, ISNULL(RC.SpName, '') AS SpName, RC.RdlFileID,
			FU.OriginalFileName, FU.FileName, FU.FilePath, ISNULL(FU.FileExtension, '') AS FileExtension,
			ISNULL(FU.FullPath, '') AS FullPath, ISNULL(RC.ReportTypeID, 0) AS ReportTypeID,
			ISNULL(RT.TypeValues, '') AS ReportType, ISNULL(RC.SpParameters, '') AS SpParameters,
			ISNULL(RC.IsMultipleReport, 0) AS IsMultipleReport, ISNULL(RC.IsSaveAttachment, 0) AS IsSaveAttachment,
			ISNULL(RC.AttachmentPath, '') AS AttachmentPath, ISNULL(RC.IsAttachmentEntryReq, 0) AS AttchmentEntryReq,
			ISNULL('SrvSsrsReportConfiguration', '') AS TableName, ISNULL(RC.FilePath, '') AS AttachmentFilePath,
			ISNULL(RC.IsEmailTrackingReq, 0) AS EmailTrackingReq, ISNULL(RC.MailTypeID, 0) AS MailTypeID, ISNULL(RC.ClientIDs, '') AS ClientIDs,
			ISNULL(RC.EmployeeIDs, '') AS EmployeeIDs, ISNULL(RC.TrackingSP, '') AS TrackingSPName
		FROM SrvSsrsReportConfiguration RC
			JOIN CmnFileUpload FU ON FU.ReferenceID = RC.RdlFileID AND FU.IsDeleted = 0
			LEFT JOIN CmnCodeMaster RT ON RT.Type = 'SSRS Report Type' AND RT.CodemasterID = RC.ReportTypeID
				AND RT.IsDeleted = 0 AND RT.NotActive = 0 AND RT.IsCurrentVersion = 1
		WHERE RC.ReferenceID = @SsrsReportID;

		SELECT RDS.DataSource, ISNULL(RDS.ImagePathColumns, '') AS ImagePathColumns
		FROM SrvSsrsReportDataSources RDS
		WHERE RDS.SsrsReportID = @SsrsReportID
			AND RDS.IsDeleted = 0 AND RDS.NotActive = 0 AND RDS.IsCurrentVersion = 1
		ORDER BY RDS.OrderBy;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[spSrvUpdateApiStatus]'
GO

CREATE PROCEDURE [dbo].[spSrvUpdateApiStatus] (
	@IN_TransactionID BIGINT,
	@IN_ApiStatusID INT,
	@IN_ErrorMessage NVARCHAR(2000),
	@IN_ApiResponse  NVARCHAR(4000)
) AS
BEGIN
	SET NOCOUNT ON;
	
	BEGIN TRY
		DECLARE @ErrorSeverity VARCHAR(50),
				@ErrorMessage VARCHAR(2000),
				@ErrorState VARCHAR(50),
				@UTCTime DATETIME = GETUTCDATE()
	  	
		UPDATE SrvApiTransactionTracking
		SET Status = @IN_ApiStatusID,
			SendDate = @UTCTime,
			FailureCount = CASE WHEN @IN_ApiStatusID = 3 THEN ISNULL(FailureCount, 0) + 1 ELSE FailureCount END,
			ErrorMessage = @IN_ErrorMessage,
			ApiResponse = @IN_ApiResponse
		WHERE ReferenceID = @IN_TransactionID;
	END TRY
	BEGIN CATCH
	  SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
END
GO
PRINT N'Creating [dbo].[spSrvUpdateDataSyncStatus]'
GO

CREATE PROCEDURE [dbo].[spSrvUpdateDataSyncStatus] (@IN_SyncTrackingID BIGINT, @IN_SyncStatus VARCHAR(1), @IN_ErrorMessage NVARCHAR(4000))
AS
BEGIN
	
	SET NOCOUNT ON;
	BEGIN TRY

    DECLARE	@ErrorMessage VARCHAR(2000),
						@ErrorSeverity VARCHAR(50),
						@ErrorState INT,
						@DataSyncID INT = ISNULL((SELECT DataSyncID FROM SrvDataSyncTracking WHERE ReferenceID = @IN_SyncTrackingID), 0),
						@Query NVARCHAR(MAX) = ''

		UPDATE SrvDataSyncTracking
		SET SyncStatus = @IN_SyncStatus,
			ErrorMessage = @IN_ErrorMessage,
			ModifiedDate = GETUTCDATE()
		WHERE ReferenceID = @IN_SyncTrackingID

		SELECT @Query = 'UPDATE ' + DestTableName + ' SET SyncStatus = ''' + CASE WHEN @IN_SyncStatus = 'S' THEN 'P' ELSE @IN_SyncStatus END
			+ ''', ErrorMessage = ''' + @IN_ErrorMessage + ''', ModifiedDate = GETUTCDATE() WHERE SyncStatus = ''I'''
		FROM SrvDataSyncConfiguration 
		WHERE ReferenceID = @DataSyncID
			AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 1) = 1;

		IF ISNULL(@Query, '') <> ''
			EXEC(@Query)

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Creating [dbo].[viewAdmUserReactive]'
GO

CREATE VIEW [dbo].[viewAdmUserReactive]
AS
	SELECT 1 AS Type,
		ISNULL(CUD.UserID, 0) AS UserID,
		ISNULL(CUD.UserName, '') AS UserName,
		ISNULL(CUD.TypeID, 0) AS TypeID,
		ISNULL(MED.NotActive, 0) AS NotActive,
		CASE WHEN ISNULL(MED.NotActive, 0) = 1 THEN 0 ELSE 1 END AS IsActive,
		MED.IsDeleted AS IsDeleted,
		ISNULL(CUD.NotActive, 0) AS UserNotActive
	FROM MstEmployeeDetails MED
		LEFT JOIN CmnUserDetails CUD ON CUD.Type = 1 AND MED.ReferenceID = CUD.TypeID
	WHERE CUD.IsDeleted = 0
	UNION
	SELECT 2 AS Type,
		ISNULL(CUD.UserID, 0) AS UserID,
		ISNULL(CUD.UserName, '') AS UserName,
		ISNULL(CUD.TypeID, 0) AS TypeID,
		ISNULL(MCD.NotActive, 0) AS NotActive,
		CASE WHEN ISNULL(MCD.NotActive, 0) = 1 OR ISNULL(MCD.IsDeleted, 0) = 1 THEN 0 ELSE 1 END AS IsActive,
		MCD.IsDeleted AS IsDeleted,
		ISNULL(CUD.NotActive, 0) AS UserNotActive
	FROM MstClientDetails MCD 
		LEFT JOIN CmnUserDetails CUD ON CUD.Type = 2 AND MCD.ReferenceID = CUD.TypeID
	WHERE CUD.IsDeleted = 0
GO
PRINT N'Creating [dbo].[viewCmnApplicationMessages]'
GO
CREATE VIEW [dbo].[viewCmnApplicationMessages] 
AS
	SELECT ISNULL(CMM.ReferenceID, 0) AS ReferenceID,
		ISNULL(CCM.CodemasterID, 0) AS LanguageID,
		ISNULL(AM.KeyCode, '') AS KeyCode,
		ISNULL(AM.Message, '') AS ActualMessage,
		COALESCE(CMM.Message, AM.Message, '') AS Message,
		ISNULL(CMM.IsDeleted, 0) AS IsDeleted,
		0 AS NotActive,
		1 AS IsCurrentVersion,
		ISNULL(CMM.OrderBy, 0) AS OrderBy
	FROM CmnApplicationMessages AM
		JOIN CmnCodeMaster CCM ON CCM.Type = 'Languages'
			AND CCM.IsDeleted = 0 AND CCM.NotActive = 0 AND CCM.IsCurrentVersion = 1
		LEFT JOIN CmnMessagesMultiLingual CMM ON CMM.KeyCode = AM.KeyCode AND CMM.LanguageID = CCM.CodemasterID
			AND CMM.IsDeleted = 0
	WHERE AM.IsDeleted = 0 AND AM.KeyCode <> '' AND AM.Changeable = 1
GO
PRINT N'Creating [dbo].[viewCmnAuditDataList]'
GO
CREATE VIEW [dbo].[viewCmnAuditDataList]
AS
	SELECT ADT.AuditTrackingID, AUT.AuditDate, AUT.IpAddress, AUT.UserID, AUT.FormID, AUT.FormName, AUT.EventName,
    AUT.TableName, AUT.IdentityValue, ADT.TableColumn, ADT.OldData, ADT.NewData,
		 CASE WHEN EXISTS(SELECT 1 FROM CmnAuditTracking vAUT
								JOIN CmnAuditDataTracking vADT ON vADT.AuditTrackingID = vAUT.ReferenceID AND vADT.TableColumn = ADT.TableColumn
							WHERE vAUT.TableName = AUT.TableName
								AND vAUT.IdentityValue = AUT.IdentityValue
								AND vAUT.EventName NOT IN ('INSERT') AND ISNULL(vADT.OldData,'') <> ''
								AND ISNULL(vADT.OldData,'') <> ISNULL(vADT.NewData,'')) THEN 1 ELSE 0 END AS IsModified
	FROM CmnAuditTracking AUT
		JOIN CmnAuditDataTracking ADT ON ADT.AuditTrackingID = AUT.ReferenceID
	WHERE AUT.Status = 'S';
GO
PRINT N'Creating [dbo].[viewCmnAuditDataTracking]'
GO
CREATE VIEW [dbo].[viewCmnAuditDataTracking]
AS 
	SELECT ADT.ReferenceID, ADT.AuditTrackingID, ADT.ControlID, ADT.ColumnID, 
		CASE WHEN ISNULL(ADT.TableColumnDisplay, '') <> '' THEN ADT.TableColumnDisplay ELSE ADT.TableColumn END AS TableColumn,
		CASE WHEN ISNULL(ADT.OldDataDisplay, '') <> '' THEN ADT.OldDataDisplay ELSE ADT.OldData END AS OldData,
		CASE WHEN ISNULL(ADT.NewDataDisplay, '') <> '' THEN ADT.NewDataDisplay ELSE ADT.NewData END AS NewData,
		ADT.CreatedDate, ADT.ModifiedDate, ADT.ModifiedBy, ADT.IsDeleted, ADT.SyncError, ADT.ErrorMessage, ADT.OldDataDisplay, ADT.NewDataDisplay, ADT.TableColumnDisplay
	FROM CmnAuditTracking AUT
		JOIN CmnAuditDataTracking ADT ON ADT.AuditTrackingID = AUT.ReferenceID
	WHERE AUT.Status = 'S';
GO
PRINT N'Creating [dbo].[viewCmnCodeMaster]'
GO

CREATE VIEW [dbo].[viewCmnCodeMaster]
AS
	SELECT CodemasterID, DisplayType, Type, TypeValues, Code, Description, Remarks,
		UserAccess, Category, ImagePath, CompanyID, OrderBy, IsDeleted, NotActive, IsCurrentVersion
	FROM CmnCodeMaster;
GO
PRINT N'Creating [dbo].[viewCmnCodeMasterNextID]'
GO

CREATE VIEW [dbo].[viewCmnCodeMasterNextID]
AS
	SELECT Type, ISNULL(MAX(CodemasterID), 0) + 1 NextCodeMasterID
	FROM CmnCodeMaster
	GROUP BY Type;
GO
PRINT N'Creating [dbo].[viewCmnFormCodeMasters]'
GO

CREATE VIEW [dbo].[viewCmnFormCodeMasters]
AS
	SELECT FT.FormID AS FormID, FC.FkTable AS CodeMaster
	FROM CmnFormControls FC
		JOIN CmnGroupBoxes GB ON GB.GroupID = FC.GroupID AND GB.IsDeleted = 0
		JOIN CmnFormTabs FT ON FT.TabID = GB.TabID AND FT.IsDeleted = 0
	WHERE FC.FkType = 1 AND ISNULL(FC.FkTable, '') <> '' AND FC.IsDeleted = 0
	UNION
	SELECT FT.FormID AS FormID, CC.FkTable AS CodeMaster
	FROM CmnControlColumns CC
		JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID
		JOIN CmnGroupBoxes GB ON GB.GroupID = FC.GroupID AND GB.IsDeleted = 0
		JOIN CmnFormTabs FT ON FT.TabID = GB.TabID AND FT.IsDeleted = 0
	WHERE CC.FkType = 1 AND ISNULL(CC.FkTable, '') <> '' AND CC.IsDeleted = 0
	UNION
	SELECT FT.FormID AS FormID, GC.FkTable AS CodeMaster
	FROM CmnGridControlColumns GC
		JOIN CmnControlColumns CC ON CC.ColumnID = GC.ControlID
		JOIN CmnFormControls FC ON FC.ControlID = CC.ControlID
		JOIN CmnGroupBoxes GB ON GB.GroupID = FC.GroupID AND GB.IsDeleted = 0
		JOIN CmnFormTabs FT ON FT.TabID = GB.TabID AND FT.IsDeleted = 0
	WHERE GC.FkType = 1 AND ISNULL(GC.FkTable, '') <> '' AND GC.IsDeleted = 0
	UNION
	SELECT FC.FormID AS FormID, FC.FkTable AS CodeMaster
	FROM CmnFormSearchControl FC
	WHERE FC.FkType = 1 AND ISNULL(FC.FkTable, '') <> '' AND FC.IsDeleted = 0
	UNION
	SELECT FC.FormID AS FormID, SC.FkTable AS CodeMaster
	FROM CmnSearchControlColumns SC
		JOIN CmnFormSearchControl FC ON FC.SearchID = SC.SearchID
	WHERE SC.FkType = 1 AND ISNULL(SC.FkTable, '') <> '' AND SC.IsDeleted = 0
GO
PRINT N'Creating [dbo].[viewCmnFormDetails]'
GO

CREATE VIEW [dbo].[viewCmnFormDetails]
AS
	SELECT ISNULL(CFD.FormID, 0) AS ReferenceID,
		ISNULL(CFD.FormID, 0) AS FormID,
	    CASE WHEN ISNULL(CFD.MainMenu1, 0) <> 0 THEN '... ' ELSE '' END + ISNULL(CFD.Name, '') AS Name,
		ISNULL(CFD.DisplayName, '') AS DisplayName,		
		ISNULL(CFD.FormPath, '') AS FormPath,	
		ISNULL(CFD.MainMenu1, 0) AS MainMenu1,
		ISNULL(PM.Name, '') AS ParentMenu,	
		ISNULL(CFD.ModuleID, 0) AS ModuleID,				
		ISNULL(MCM.TypeValues, '') AS Module,
		ISNULL(CFD.MainMenuOrder, 0) AS MainMenuOrder,
		CASE WHEN ISNULL(CFD.MainMenu1, 0) <> 0 
			THEN ISNULL((SELECT TOP 1 MM.MainMenuOrder FROM CmnFormDetails MM WHERE MM.FormID = CFD.MainMenu1), 999) 
			ELSE ISNULL(CFD.MainMenuOrder, 0) END AS MainMenuCalOrder, 
		ISNULL(CFD.SubMenuOrder, 0) AS SubMenuOrder,
		ISNULL(CFD.TableName, '') AS TableName,	
		ISNULL(CFD.KeyColumn, '') AS KeyColumn,			
		ISNULL(CFD.FormType, 0) AS FormTypeID,			
		ISNULL(FTCM.TypeValues, '') AS FormType,
		ISNULL(CFD.FormIcon, '') AS FormIcon,
		ISNULL(CFD.AuditTrail, 0) AS AuditTrail,
		--CASE WHEN ISNULL(CFD.AuditTrail, 0) = 0 THEN 2 ELSE 1 END AS AuditTrail,
		ISNULL(CFD.CreatedBy, 0) AS CreatedBy,	
		CFD.CreatedDate AS CreatedDate,	
		ISNULL(CFD.ModifiedBy, 0) AS ModifiedBy,	
		CFD.ModifiedDate AS ModifiedDate,
		ISNULL(CFD.DeletedBy, 0) AS DeletedBy,	
		CFD.DeletedDate AS DeletedDate,
		ISNULL(CFD.IsMobileMenu, 0) AS IsMobileMenu,
		CASE WHEN ISNULL(CFD.IsMobileMenu, 0) = 0 THEN 2 ELSE 1 END AS MobileMenu,
		ISNULL(CFD.IsOfflineSave, 0) AS IsOfflineSave,
		CASE WHEN ISNULL(CFD.IsOfflineSave, 0) = 0 THEN 2 ELSE 1 END AS OfflineSave,
		ISNULL(CFD.CompanyID, 0) AS CompanyID,
		ISNULL(CFD.IsFooter, 0) AS IsFooter,
		CASE WHEN ISNULL(CFD.IsFooter, 0) = 0 THEN 2 ELSE 1 END AS Footer,
		CASE WHEN ISNULL(CFD.MainMenu1, 0) <> 0 THEN 0 ELSE 1 END AS IsParentMenu,
		CFD.ModifiedDateGMT AS ModifiedDateGMT,
		ISNULL(CFD.IsDeleted, 0) AS IsDeleted,
		CASE WHEN ISNULL(CFD.IsDeleted, 0) = 0 THEN 2 ELSE 1 END AS Deleted,
		0 AS NotActive,
		1 AS IsCurrentVersion,
		0 AS OrderBy
	FROM CmnFormDetails CFD 	
		LEFT JOIN CmnFormDetails PM ON PM.FormID = CFD.MainMenu1
		LEFT JOIN CmnCodeMaster FTCM ON FTCM.Type = 'Form Type' AND FTCM.CodemasterID = CFD.FormType
		LEFT JOIN CmnCodeMaster MCM ON MCM.Type = 'Module' AND MCM.CodemasterID = CFD.ModuleID 
	--WHERE CFD.IsDeleted = 0;
GO
PRINT N'Creating [dbo].[viewCmnRBSFormList]'
GO
CREATE VIEW [dbo].[viewCmnRBSFormList]
AS
	SELECT ISNULL(RBS.ReferenceID, 0) AS ReferenceID, 
		CASE WHEN ISNULL(RBS.ReferenceID, 0) > 0 THEN 1 ELSE 0 END AS IsRequired,
		ISNULL(G.ReferenceID, 0) AS RBSGroupID,
		ISNULL(FD.FormID, 0) AS FormID,
		ISNULL(FD.Name, '') AS FormName,
		ISNULL(FD.ModuleID, 0) AS ModuleID,
		ISNULL(CCM.TypeValues, '') AS Module,
		ISNULL(MD.DisplayName, '') AS MainMenuName,
		'' AS RBSDataVariable,
		ISNULL(FD.IsDeleted, 0) AS IsDeleted,
		ISNULL(CCM.OrderBy, 0) AS ModuleOrder,
		CASE WHEN MD.FormID IS NOT NULL THEN MD.MainMenuOrder
			WHEN MD.FormID IS NULL AND ISNULL(FD.FormPath, '') <> '' THEN FD.MainMenuOrder ELSE 999 END AS MainMenuOrder,
		ISNULL(FD.SubMenuOrder, 0) AS SubMenuOrder
	FROM CmnFormDetails FD
		JOIN CmnRbsGroups G ON ISNULL(G.IsDeleted, 0) = 0 AND ISNULL(G.NotActive, 0) = 0 AND ISNULL(G.IsCurrentVersion, 1) = 1
		LEFT JOIN CmnRbsGroupForms RBS ON RBS.FormID = FD.FormID AND RBS.RBSGroupID = G.ReferenceID
			AND ISNULL(RBS.IsDeleted, 0) = 0 AND ISNULL(RBS.NotActive, 0) = 0 AND ISNULL(RBS.IsCurrentVersion, 1) = 1
		LEFT JOIN CmnCodeMaster CCM ON CCM.Type = 'Module' AND CCM.CodemasterID = FD.ModuleID
			AND ISNULL(CCM.IsDeleted, 0) = 0 AND ISNULL(CCM.NotActive, 0) = 0 AND ISNULL(CCM.IsCurrentVersion, 1) = 1
		LEFT JOIN CmnFormDetails MD ON MD.FormID = ISNULL(FD.MainMenu1, 0)
	WHERE ISNULL(FD.IsDeleted, 0) = 0 AND ISNULL(FD.FormPath, '') <> '';
		
GO
PRINT N'Creating [dbo].[viewCodeMasterTypes]'
GO

CREATE VIEW [dbo].[viewCodeMasterTypes]
AS
	SELECT Type, UserAccess
	FROM CmnCodeMaster
	WHERE ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive, 0) = 0 AND ISNULL(IsCurrentVersion, 1) = 1
	GROUP BY Type, UserAccess;
GO
PRINT N'Creating [dbo].[viewUserStatus]'
GO

CREATE VIEW [dbo].[viewUserStatus]
AS
	SELECT	UD.UserID AS UserID, 
			UD.Username AS UserName, 
			ISNULL(ED.NickName, '') AS EmployeeName,
			CASE WHEN ISNULL(UD.Type, 0) = 1 THEN ISNULL(ED.NickName, '') 
				WHEN ISNULL(UD.Type, 0) = 2 THEN ISNULL(UD.UserName, '') END AS Name,
			CASE WHEN ISNULL(UD.NotActive, 0) = 1 THEN 1 ELSE 0 END AS UserActive,
			ISNULL(UD.NotActive, 0) AS ProcessUserActive,
			ISNULL(CM.TypeValues, '') AS Type, 
			ISNULL((SELECT STRING_AGG(UR.TypeValues, ', ') FROM CmnCodeMaster UR WHERE UR.Type = 'Roles' 
				 AND PATINDEX(CONCAT('%,', CAST(UR.CodemasterID AS VARCHAR(50)), ',%'), CONCAT(',', UD.RoleID, ',')) > 0), '') AS Role, 
			UD.IsLocked AS IsLocked, 
			CASE WHEN ISNULL(UD.IsLocked, 0) = 1 THEN 1 ELSE 2 END AS LockedStatus, 
			ISNULL(LH.LoginIP, '') AS IPAddress, 
			CASE WHEN REPLACE(CONVERT(VARCHAR(50), LH.LoginTime, 106), ' ', '-') = '01-Jan-1900' THEN '' ELSE ISNULL(CONVERT(VARCHAR(50), 
				LH.LoginTime, 127), '') END AS LoginTime,
			LH.LogoutTime,
			ISNULL(LH.UserStatusID, 0) AS StatusID, 
			ISNULL(LH.LogoutTypeID, 0) AS Logout,
			CASE WHEN ISNULL(LH.UserStatusID, 0) = 1 THEN 1 ELSE 0 END AS LoginStatus, 
			UD.UserID AS ModifiedBy, 
			UD.ModifiedDate AS ModifiedDate, 
			ISNULL(UD.IsDeleted, 0) AS IsDeleted, 
			--0 AS NotActive, 
			ISNULL(UD.NotActive, 0) AS NotActive,
			ISNULL(LH.ReferenceID, 0) AS HistoryReferenceID, 
			ISNULL(LH.SessionID, '') AS SessionID, 
			ISNULL(CL.TypeValues, '') AS LicenseType, 
			ISNULL(CA.TypeValues, '') AS AuthenticationType, 
			ISNULL(UD.RoleID, 0) AS UserRole, 
			ISNULL(UD.Type, 0) AS UserType, 
			ISNULL(UD.OnlineUser, 0) AS OnlineUser,
			0 AS IsRequired,
			UD.CreatedBy AS CreatedBy,
			ISNULL(ED.CompanyID, UD.CompanyID) AS CompanyID
	FROM CmnUserDetails UD
		LEFT JOIN MstEmployeeDetails ED ON UD.Type = 1 AND UD.TypeID = ED.ReferenceID
		LEFT JOIN (SELECT UserID, MAX(ReferenceID) AS ReferenceID FROM CmnLoginHistory GROUP BY UserID) HU ON HU.UserID = UD.UserID 
		LEFT JOIN CmnLoginHistory LH ON LH.ReferenceID = HU.ReferenceID
		LEFT JOIN CmnCodemaster CM ON CM.Type = 'Company Type' AND CM.CodemasterID = UD.Type AND CM.IsDeleted = 0
		LEFT JOIN CmnCodemaster CL ON CL.Type = 'License Type' AND CL.CodemasterID = UD.LicenseType AND CL.IsDeleted = 0
		LEFT JOIN CmnCodemaster CA ON CA.Type = 'Authentication Type' AND CA.CodemasterID = UD.AuthenticationType AND CA.IsDeleted = 0
		--LEFT JOIN CmnCodemaster RL ON RL.Type = 'Roles' AND RL.CodemasterID = UD.RoleID AND RL.IsDeleted = 0
	--WHERE ISNULL(ED.NotActive, 0) = 0
GO
PRINT N'Creating [dbo].[viewUserStatusHistory]'
GO

CREATE VIEW [dbo].[viewUserStatusHistory]
AS
	SELECT	UD.UserID AS UserID,
			UD.Username AS UserName, 
			ISNULL(LH.LoginIP, '') AS IPAddress, 
			LH.LoginTime,
			LH.LogoutTime,
			ISNULL(LH.UserStatusID, 0) AS StatusID,
			ISNULL(LH.LogoutTypeID, 0) AS Logout, 
			CASE WHEN ISNULL(LH.UserStatusID, 0) = 1 THEN 'Active' 
				 WHEN ISNULL(LH.UserStatusID, 0) = 2 THEN 'Loged Out' END AS LoginStatus,
			ISNULL(CONCAT(LH.OS, '_', LH.OSVersion), '') AS OS,
			ISNULL(CONCAT(LH.Browser, '_', LH.BrowserVersion), '') AS Browser,
			ISNULL(Remarks, '') AS Remarks,
			CASE WHEN ISNULL(LH.IsMobileApp, 0) = 0 THEN 'NO'
				 WHEN ISNULL(LH.IsMobileApp, 0)= 1 THEN 'Yes' END AS IsMobileApp,
			CASE WHEN ISNULL(LH.IsMobileBrowser, 0) = 0 THEN 'NO'
				 WHEN ISNULL(LH.IsMobileBrowser, 0) = 1 THEN 'Yes' END AS IsMobileBrowser,
			ISNULL(LH.ReferenceID, 0) AS HistoryReferenceID, 
			ISNULL(LH.SessionID, '') AS SessionID, 
			ISNULL(UD.RoleID, 0) AS UserRole, 
			ISNULL(UD.Type, 0) AS UserType,
			ISNULL(UD.OnlineUser, 0) AS OnlineUser,
			0 AS IsDeleted,
			0 AS NotActive 			
	FROM CmnUserDetails UD
		JOIN CmnLoginHistory LH ON LH.UserID = UD.UserID
GO
PRINT N'Creating [dbo].[fn_ConvertFloatToString]'
GO

CREATE FUNCTION [dbo].[fn_ConvertFloatToString] (@FloatNumber FLOAT)        
RETURNS VARCHAR(50)
AS
BEGIN
	DECLARE @Output VARCHAR(50)
			/*@RoundNumber BIGINT,
			@Length INT,
			@RoundLength INT,
			@DecimalScale INT;

	SET @RoundNumber = ROUND(@FloatNumber, 0);

	IF (@FloatNumber - @RoundNumber) = 0
		SET @Output = STR(@FloatNumber);
	ELSE
	BEGIN
		SET @Length = LEN(FORMAT(@FloatNumber, '######################.###############'));
		SET @RoundLength = LEN(@RoundNumber);
		--SET @DecimalScale = CAST(SQL_VARIANT_PROPERTY(@FloatNumber, 'Scale') AS INT);
		SET @DecimalScale = @Length - @RoundLength - 1;
		SET @DecimalScale = CASE WHEN @DecimalScale < 0 THEN 0 ELSE @DecimalScale END;
		SET @Output = STR(@FloatNumber, @Length, @DecimalScale);
	END

	RETURN RTRIM(LTRIM(ISNULL(@Output, '')));*/
	IF @FloatNumber = 0
		SET @Output = CAST(@FloatNumber AS VARCHAR(50))
	ELSE
		SET @Output = FORMAT(@FloatNumber, '######################.###############');
	SET @Output = CASE WHEN SUBSTRING(ISNULL(@Output, ''), 1, 1) = '.' THEN CONCAT('0', @Output) ELSE @Output END;
	SET @Output = CASE WHEN SUBSTRING(ISNULL(@Output, ''), 1, 1) = '-' AND SUBSTRING(ISNULL(@Output, ''), 2, 1) = '.' THEN CONCAT('-0', SUBSTRING(ISNULL(@Output, ''), 2, 100)) ELSE @Output END;
	RETURN @Output;
END
GO
PRINT N'Creating [dbo].[fn_GetCurrencyConversionRate]'
GO

CREATE FUNCTION [dbo].[fn_GetCurrencyConversionRate] (@IN_FromCurrencyID INT, @IN_ToCurrencyID INT)
RETURNS FLOAT
AS
BEGIN	
	DECLARE @CurrencyRate FLOAT = 1

	SELECT TOP 1 @CurrencyRate = CorrectedRate 
	FROM MstCurrencyConversion
	WHERE FromCurrency = @IN_FromCurrencyID AND ToCurrency = @IN_ToCurrencyID
		AND ISNULL(IsDeleted, 0) = 0 AND ISNULL(NotActive,0) = 0 AND ISNULL(IsCurrentVersion,1) = 1									
 
 RETURN ISNULL(@CurrencyRate, 1)
END

GO
PRINT N'Creating [dbo].[fn_GetDecryptData]'
GO

CREATE FUNCTION [dbo].[fn_GetDecryptData] (@IN_Value NVARCHAR(MAX), @IN_Key NVARCHAR(100))
RETURNS NVARCHAR(MAX) AS
BEGIN
	IF ISNULL(@IN_Key, '') = ''
	BEGIN
		SET @IN_Key = 'NGMVC';
	END
	RETURN CONVERT(NVARCHAR(MAX), DecryptByPassPhrase(@IN_Key, CONVERT(VARBINARY(MAX), @IN_Value, 2)));
END
GO
PRINT N'Creating [dbo].[fn_GetEncryptData]'
GO

CREATE FUNCTION [dbo].[fn_GetEncryptData] (@IN_Value NVARCHAR(MAX), @IN_Key NVARCHAR(100))
RETURNS NVARCHAR(MAX) AS
BEGIN
	IF ISNULL(@IN_Key, '') = ''
	BEGIN
		SET @IN_Key = 'NGMVC';
	END
	RETURN CONVERT(NVARCHAR(MAX), EncryptByPassPhrase(@IN_Key, @IN_Value), 2);
END
GO
PRINT N'Creating [dbo].[fn_GetRuleValues]'
GO

CREATE FUNCTION [dbo].[fn_GetRuleValues]( 
	@IN_Rule NVARCHAR(100)
)
	        
RETURNS @temptable TABLE (
	RuleID INT,
	MinValue DECIMAL(32, 6), MaxValue DECIMAL(32, 6))
AS   
BEGIN
	
	INSERT INTO @temptable(RuleID, MinValue, MaxValue)
	SELECT CASE WHEN CHARINDEX('>=', @IN_Rule) > 0 AND CHARINDEX('<=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) > 0 THEN 2
				WHEN CHARINDEX('<>', @IN_Rule) > 0 OR CHARINDEX('!=', @IN_Rule) > 0 THEN 5 
				WHEN CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) = 0 AND CHARINDEX('=', @IN_Rule) = 0 THEN 4 
				WHEN CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) > 0 AND CHARINDEX('=', @IN_Rule) = 0 THEN 12 
				WHEN CHARINDEX('>', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) = 0 AND CHARINDEX('=', @IN_Rule) = 0 THEN 11 
				WHEN CHARINDEX('>', @IN_Rule) > 0 AND CHARINDEX('<=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) > 0 THEN 6 
				WHEN CHARINDEX('>=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) = 0 AND CHARINDEX('>', @IN_Rule) > 0 THEN 9 
				WHEN CHARINDEX('<=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) = 0 THEN 1
				WHEN CHARINDEX('>=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) > 0 THEN 3
				WHEN CHARINDEX('=', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) = 0 AND CHARINDEX('<', @IN_Rule) = 0 THEN 10
				ELSE 0 END AS RuleID,
			CASE WHEN CHARINDEX('<>', @IN_Rule) > 0 OR CHARINDEX('!=', @IN_Rule) > 0 THEN SUBSTRING(@IN_Rule, 3, 50)
				 WHEN CHARINDEX('>=', @IN_Rule) > 0 AND CHARINDEX('<=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) > 0 THEN SUBSTRING(@IN_Rule, CHARINDEX('>=', @IN_Rule) + 2, CHARINDEX('<=', @IN_Rule) - 3)
				 WHEN CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) = 0 AND CHARINDEX('=', @IN_Rule) = 0 THEN NULL
				 WHEN CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) > 0 AND CHARINDEX('=', @IN_Rule) = 0 THEN SUBSTRING(@IN_Rule, CHARINDEX('>', @IN_Rule) + 1, CHARINDEX('<', @IN_Rule) - 2)
				 WHEN CHARINDEX('>', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) = 0 AND CHARINDEX('=', @IN_Rule) = 0 THEN SUBSTRING(@IN_Rule, CHARINDEX('>', @IN_Rule) + 1, 50)	
				 WHEN CHARINDEX('>', @IN_Rule) > 0 AND CHARINDEX('<=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) > 0 THEN SUBSTRING(@IN_Rule, CHARINDEX('>', @IN_Rule) + 1, CHARINDEX('<=', @IN_Rule) - 2)
				 WHEN CHARINDEX('>=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) = 0 AND CHARINDEX('>', @IN_Rule) > 0 THEN SUBSTRING(@IN_Rule, CHARINDEX('>=', @IN_Rule) + 2, 50)
				 WHEN CHARINDEX('<=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) = 0 THEN NULL
				 WHEN CHARINDEX('>=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) > 0 THEN SUBSTRING(@IN_Rule, CHARINDEX('>=', @IN_Rule) + 2, CHARINDEX('<', @IN_Rule) - 3)
				 WHEN CHARINDEX('=', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) = 0 AND CHARINDEX('<', @IN_Rule) = 0 THEN SUBSTRING(@IN_Rule, CHARINDEX('=', @IN_Rule) + 1, 50)
				 END AS MinValue,
			CASE WHEN CHARINDEX('<>', @IN_Rule) > 0 OR CHARINDEX('!=', @IN_Rule) > 0 THEN NULL
				 WHEN CHARINDEX('>=', @IN_Rule) > 0 AND CHARINDEX('<=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) > 0 THEN SUBSTRING(@IN_Rule, CHARINDEX('<=', @IN_Rule) + 2, 50) 
				 WHEN CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) = 0 AND CHARINDEX('=', @IN_Rule) = 0 THEN SUBSTRING(@IN_Rule, CHARINDEX('<', @IN_Rule) + 1, 50)
				 WHEN CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) > 0 AND CHARINDEX('=', @IN_Rule) = 0 THEN SUBSTRING(@IN_Rule, CHARINDEX('<', @IN_Rule) + 1, 50)
				 WHEN CHARINDEX('>', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) = 0 AND CHARINDEX('=', @IN_Rule) = 0 THEN NULL
				 WHEN CHARINDEX('>', @IN_Rule) > 0 AND CHARINDEX('<=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) > 0 THEN SUBSTRING(@IN_Rule, CHARINDEX('<=', @IN_Rule) + 2, 50)
				 WHEN CHARINDEX('>=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) = 0 AND CHARINDEX('>', @IN_Rule) > 0 THEN NULL
				 WHEN CHARINDEX('<=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) = 0 THEN SUBSTRING(@IN_Rule, CHARINDEX('<=', @IN_Rule) + 2, 50) 
				 WHEN CHARINDEX('>=', @IN_Rule) > 0 AND CHARINDEX('<', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) > 0 THEN SUBSTRING(@IN_Rule, CHARINDEX('<', @IN_Rule) + 1, 50)
				 WHEN CHARINDEX('=', @IN_Rule) > 0 AND CHARINDEX('>', @IN_Rule) = 0 AND CHARINDEX('<', @IN_Rule) = 0 THEN NULL
				 END AS MaxValue

	RETURN
END 
GO
PRINT N'Creating [dbo].[spCmnAfterSaveDMLProcess]'
GO

CREATE PROCEDURE [dbo].[spCmnAfterSaveDMLProcess](
	@IN_AfterSaveEventTypeID INT, 
	@IN_DmlType VARCHAR(100),
	@IN_DataID BIGINT,
	@IN_FormID INT,
	@IN_UserID INT)	
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
	DECLARE @ErrorMessage NVARCHAR(2000),
			@ErrorSeverity NVARCHAR(50),
			@ErrorState NVARCHAR(50);
	
	--IF @IN_AfterSaveEventTypeID = 1	-- AMS Service Contract Scheduler
	--	EXEC spAMSCreateServiceContractScheduler @IN_DataID, @IN_DmlType, @IN_FormID, @IN_UserID;
	--ELSE 
	IF @IN_AfterSaveEventTypeID = 2	-- Instrument Scheduler
		EXEC spSchInstrumentSchedulerLogDetails @IN_DataID, @IN_UserID
	ELSE IF @IN_AfterSaveEventTypeID = 3	-- Sample Scheduler
		EXEC spSchSchedulerSampleLogDetails @IN_DataID, @IN_UserID
	ELSE IF @IN_AfterSaveEventTypeID = 4	-- Duplicate Sample
	BEGIN
		EXEC spSmrCopyTestDetailsForDuplicatedSample @IN_UserID, @IN_DataID, @IN_DmlType, @IN_FormID;
		EXEC spSmrSampleLogAfterDML  @IN_UserID, @IN_DataID, @IN_DmlType, @IN_FormID;
	END
	ELSE IF @IN_AfterSaveEventTypeID = 5	-- Sales Lead Cost Calculation
		EXEC spSFSalesLeadCalculations @IN_DataID, @IN_UserID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 6	-- Calibration Manager (Calibration reading and result table entry )
		EXEC spCmrCalibrationParameterUpdate @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 7	-- Calibration Result Entry (Calibration Parameter result update for each Calibration Points)
		EXEC spCmrResultUpdateFromReading @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 8	-- Sales Order Cost Calculation
		EXEC spSFSalesOrderCalculations @IN_DataID, @IN_UserID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 9	-- Generate Lead for the Sales Force Enquiry
		EXEC spSFLeadGenerationForEnquiry @IN_DataID, @IN_DmlType, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 10	-- Generate Lead for the Lab Sales Force Enquiry
		EXEC spLsfLeadGenerationForEnquiry @IN_DataID, @IN_DmlType, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 11	-- Lab Sales Lead Cost Calculation
		EXEC spLsfLabSalesLeadCalculations @IN_DataID, @IN_UserID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 12	-- Lab Sales Order Cost Calculation
		EXEC spLsfLabSalesOrderCalculations @IN_DataID, @IN_UserID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 13	-- Final Settlement Calculation
		EXEC spHrmsCalculateFinalSettlement @IN_DataID, @IN_DmlType, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 14	-- Questionaire Count Calculation
		EXEC spQmsCalculateNoOfQuestions @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 15	-- Feedback Question Count Calculation
		EXEC spQmsCalculateFeedbackNoOfQuestions @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 16	-- Order Creation from Lead Order Confirmation
		EXEC spLsfOrderConfirmation @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 17	-- Production Blending Update
		EXEC spProProductionBlendingUpdate @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 18	-- Production Blending Tracking
		EXEC spProProductionBlendingTracking @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 19	-- Production Dispatch Status Update
		EXEC spProProductionDispatchStatusUpdate @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 20	-- Purchase Order Cost Calculation
		EXEC spPurPurchaseOrderCalculations @IN_DataID, @IN_UserID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 21	-- Purchase Order Status Update
		EXEC spPurPurchaseOrderStatusUpdate @IN_DataID, @IN_UserID, @IN_FormID;
	ELSE IF @IN_AfterSaveEventTypeID = 22	-- Generate Enquiry for Sales Force Account Coverage
	BEGIN
		EXEC spSFEnquiryGenerationForAccountCoverage @IN_DataID, @IN_DmlType, @IN_UserID;
		EXEC spSFAccCoveragePostSave @IN_UserID, @IN_DataID, @IN_DmlType;	---- Digital Marketing Email Insert and Update	
	END
	ELSE IF @IN_AfterSaveEventTypeID = 23	-- Employee Final Settlement Calculation
		EXEC spHrmsCalculateFinalSettlement @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 24	-- Production Materials and Parameters Insert
		EXEC spProProductionMaterialsandParametersInsert @IN_DataID, @IN_DmlType, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 25	-- INVOICE CALCULATION
		EXEC spAccInvoiceAfterDML @IN_UserID, @IN_DataID, @IN_DmlType, @IN_FormID;
	ELSE IF @IN_AfterSaveEventTypeID = 26	-- Patient Record Order Calculation
		EXEC spPrPatientRecordOrderCalculations @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 27	-- Sample log from patient record Form
		EXEC spSmrPatientRecordSampleLog @IN_DataID, @IN_FormID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 28	-- Calibration Lead Calculation
		EXEC spLsfLabSalesLeadCalibrationCalculations @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 29	-- Calibration Order Calculation
		EXEC spLsfLabSalesOrderCalibrationCalculations @IN_DataID, @IN_UserID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 30	-- Culture Revival Mother Stock Details Add
		EXEC spMdAddCultureRevivalMotherStockDetails @IN_DataID, @IN_UserID, @IN_FormID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 31	-- Payment Receipt information update in Invoice details
		EXEC spAccUpdateInvReceiptDetails @IN_DataID, @IN_UserID, @IN_FormID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 32 -- Training Questionaire Count Calculation
		EXEC spQmsCalcTrainingQuestions @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 33 -- PO Payment information update in Purchase Order details
		EXEC spAccUpdatePOPaymentDetails @IN_DataID, @IN_UserID, @IN_FormID, @IN_DmlType, @IN_AfterSaveEventTypeID;
	ELSE IF @IN_AfterSaveEventTypeID = 34 -- Lab Sales Invoice Calculations
		EXEC spAccLsfInvoiceAfterDML @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 35 -- inventy po request
		EXEC spInvPoRequest @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 36 -- Lab Sales rECEIPT UPDATE
		EXEC spAccUpdateLSFInvReceipt @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 37 -- Employee Performance Calculation
		EXEC spHrmsEmpPerfromanceCalc @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 38 -- Business Plan Calculation
		EXEC spAccBusinessPlanCalculation @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 39 -- Purchase Request Calc
		EXEC spPurPurchaseRequestPostDML @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 40 -- serive contract Calc
		EXEC spEAMServiceContractCalculations @IN_DataID, @IN_UserID, @IN_DmlType, @IN_FormID;
	ELSE IF @IN_AfterSaveEventTypeID = 41 -- Audit Capa Entry
		EXEC spQmsAuditCapaEntry  @IN_UserID,@IN_DataID, '';
	ELSE IF @IN_AfterSaveEventTypeID = 42 -- Sales Lead Duplicate
		EXEC spLsfQuotationDuplicate  @IN_UserID,@IN_DataID, '';
	ELSE IF @IN_AfterSaveEventTypeID = 43 -- Lab Sales Work Order Invoice Calculations
		EXEC spAccLsfWOInvoiceAfterDML @IN_UserID, @IN_DataID, @IN_DmlType, @IN_FormID;
	ELSE IF @IN_AfterSaveEventTypeID = 44 -- Sales Lead Duplicate
		EXEC spSFQuotationDuplicate  @IN_UserID,@IN_DataID,  '';
	ELSE IF @IN_AfterSaveEventTypeID = 45 -- Sales Lead Duplicate
		EXEC spSmrWorkOrderPlanSampleLog  @IN_UserID,@IN_DataID,  '';
	ELSE IF @IN_AfterSaveEventTypeID = 46 -- PO Payment information update in Purchase Order details
		EXEC spAccUpdateOtherPayment @IN_DataID, @IN_UserID, @IN_FormID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 47 -- Warranty Claim after dml
		EXEC spPurWarrantyAfterDML  @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 48 --Stock Adjustment after dml
		EXEC spPurStockAdjustmentAfterDML  @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 49	--internal Delivery
	BEGIN
		EXEC spInvStockRequestStatusUpdate @IN_DataID, @IN_UserID,@IN_FormID,@IN_DmlType;
		EXEC spInvInternalDeliveryafterDML  @IN_UserID, @IN_DataID, '';
	END
    ELSE IF @IN_AfterSaveEventTypeID = 50 -- Patient Billing Update
		EXEC spPRConsultBillingUpdate @IN_DataID, @IN_UserID, @IN_FormID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 51	-- Link Support File To Sample
		EXEC spIntLinkSupportFileToSample  @IN_DataID, @IN_DmlType, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 52 -- Lab Credit Note Update
		EXEC spAccUpdateLSFCreditNote @IN_DataID, @IN_UserID, @IN_FormID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 53 -- Sample Reg after Dml
		EXEC spSmrSampleLogAfterDML  @IN_UserID, @IN_DataID, @IN_DmlType, @IN_FormID;
	ELSE IF @IN_AfterSaveEventTypeID = 54 -- RCRM Production material and Parameter insert
		EXEC spProRCRMProdMatandParaInsert  @IN_DataID, @IN_DmlType, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 55 -- HMS Pharmacysales insert from Consultation
		EXEC spPRPharmacySaleEntry  @IN_UserID,@IN_DataID, @IN_DmlType ;
	ELSE IF @IN_AfterSaveEventTypeID = 56	-- Production Blending Update
		EXEC spProRCRMProdBlendingUpdate @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 57	-- Production Blending Tracking
		EXEC spProRCRMProdBlendingTracking @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 58 -- Sales Credit Note Update
		EXEC spAccUpdateSFCreditNote @IN_DataID, @IN_UserID, @IN_FormID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 59 -- INPatient Billing Update
		EXEC spPRIPConsultBillingUpdate @IN_DataID, @IN_UserID, @IN_FormID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 60 -- Asset validation aFTER SAVE
		EXEC spEAMAssetValidationAfterSave  @IN_UserID,@IN_DataID,@IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 61	-- Sample Sales Lead Cost Calculation
		EXEC spLsfSampleSalesLeadCalculations @IN_DataID, @IN_UserID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 62	-- Sample Sales Order Cost Calculation
		EXEC spLsfSampleSalesOrderCalculations @IN_DataID, @IN_UserID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 63	-- Generate Sample Lead for Sample Enquiry
		EXEC spLsfSampleLeadGeneration @IN_DataID, @IN_DmlType, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 64	-- Stablity Study Plan
		EXEC spStbStabilityStudyPlanAfterDML  @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 65 -- Lab Sales Work Order Invoice Calculations
		EXEC spAccLabWOInvoice @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 66 -- IWS Validation Post Save DML (Standards & Reagents)
		EXEC spAMSIWSValidationPostDML @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 67 -- ISS Validation Post Save DML (Standards & Reagents)
		EXEC spAMSISSValidationPostDML @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 68 -- IWS QC Table Insert (Standards & Reagents)
		EXEC spAmsIWSQCSampleDetailsEntry @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 69 -- Sample Storage Frequency Entry
		EXEC spStoSampleStorageAfterDML @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 70 -- Sample Storage Spec Status Update
		EXEC spStoSpecStatusUpdateAfterDML @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 71 -- ISS %Area Result
		EXEC spAmsUpdateAreaParamResult @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 72 -- QMS Employee Training Attempt update
		EXEC spQmsTrainingAttemptUpdate @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 73 -- QMS Employee Training Evaluation Status update
		EXEC spQmsUpdateQuestionEvaluationStatus @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 74 -- GST Filing Update
		EXEC spACCUpdateTaxFiling @IN_UserID, @IN_DataID, @IN_DmlType, @IN_FormID;
	ELSE IF @IN_AfterSaveEventTypeID = 75 -- Sample Sales & Direct order clientID update
		EXEC spLsfOrderClientUpdate @IN_UserID, @IN_DataID, @IN_DmlType;
 	ELSE IF @IN_AfterSaveEventTypeID = 76 -- Stock Receive Status update
	BEGIN
		EXEC spInvstockReceiveStatusUpdate @IN_UserID, @IN_DataID, @IN_DmlType;
		EXEC spPurPurchaseOrderStatusUpdate @IN_DataID, @IN_UserID;
	END
	ELSE IF @IN_AfterSaveEventTypeID = 77 --Media Plate Issue Status Update
   		EXEC spMdIssuePlateStatusUpdate @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 78 --Media Plate Return Status Update
   		EXEC spMdReturnPlateStatusUpdate @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 79 --Account Fixed Asset Depreciation Status Update
		EXEC spAccDepreciationStatusUpdate @IN_UserID, @IN_DataID, @IN_DmlType, @IN_FormID;
	ELSE IF @IN_AfterSaveEventTypeID = 80 --Update Pass Rating In Interview Metrics
		EXEC spHrmsInterviewPassRatingCalc @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 81 --Project Task Plan post save update
		EXEC spPrjProjectTaskPlanPostSave @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 82 --Patient Record form file upload
		EXEC spSmrPRFilesInsertFromSamples @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 83 --Project QA task Initiate 
		EXEC spPrjTaskQAStatusUpdate @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 84 --Project Task Transfer
		EXEC spPrjTaskTransferStatusUpdate @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 85 -- Patient Invoice Calculations
		EXEC spAccPRVistInvoiceAfterDML @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 86 -- Integrator Sample Result Update
		EXEC spIntUpdateManualResultStatus @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 87 -- Integrator Spl. Sample Result Transfer
		EXEC spIntSplSampleResultsTransfer @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 88 -- Closing Balance Summary Update
		EXEC spAccClosingBalancePostSave @IN_UserID, @IN_DataID, @IN_DmlType, @IN_FormID;
	ELSE IF @IN_AfterSaveEventTypeID = 89 -- Send Out Invoice Calculations
		EXEC spAccSendOutInvoiceAfterDML @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 90 -- Project Batch Release Plan Task Insert
		EXEC spPrjBatchReleaseTaskInsert @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 91 -- Employee Appraisal Insert
		EXEC spHrmsEmployeeAppraisalInsert @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 92 -- Employee Skill Evaluation Insert
		EXEC spHRMSInsertEmpEvaluation @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 93 -- Post save entry when SMA order approved
		EXEC spCSInsertClientSMA @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 94 -- ERP Sync Update in Sample Registration
		EXEC spSmrERPUpdateERPSyncStatus @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 95	-- Patient Record Add on Test	
		EXEC spSmrPatientRecordSampleLog @IN_UserID, @IN_DataID, @IN_DmlType;	
	ELSE IF @IN_AfterSaveEventTypeID = 96	-- Digital Marketing Email Insert and Update	
		EXEC spSFAccCoveragePostSave @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 97 -- Credit Invoice Update
		EXEC spAccCreditInvAfterSaveDml @IN_DataID, @IN_UserID, @IN_FormID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 98 -- Test Accreditation Update
		EXEC spMstAccTestMethodAfterDml @IN_DataID, @IN_UserID, @IN_FormID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 99 -- Bulk Receipt After Save
		EXEC spAccBulkPaymentDetailAfterDml @IN_DataID, @IN_UserID, @IN_FormID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 100 -- Barcode creation entry
		EXEC spSmrInsertBarCode @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 101 -- Lab Sample Invoice Entry
		EXEC spAccSampleInvoiceInsert @IN_UserID, @IN_DataID, @IN_DmlType, @IN_FormID;
	ELSE IF @IN_AfterSaveEventTypeID = 102 -- Lab Sample Proforma Invoice Calculation
		EXEC spAccProformaInvoiceAfterDML @IN_UserID, @IN_DataID, @IN_DmlType, @IN_FormID;
	ELSE IF @IN_AfterSaveEventTypeID = 103 -- Lab Work Order Proforma Invoice Calculation
		EXEC spAccLabWOProformaInvoice @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 104 -- Credit Note Update
		EXEC spAccUpdateCreditNote @IN_DataID, @IN_UserID, @IN_FormID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 105 -- Credit Invoice Update
		EXEC spAccCreditInvoiceAfterSaveDml @IN_DataID, @IN_UserID, @IN_FormID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 106 --Account Fixed Asset IT Depreciation Status Update
		EXEC spAccITDepreciationStatusUpdate @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 107 --Duplicate Group, Test for Lab Order
		EXEC spSmrDuplicateOrderDetails @IN_UserID, @IN_DataID, @IN_DmlType;	
	ELSE IF @IN_AfterSaveEventTypeID = 108 --Duplicate Group, Test for Sample Order
		EXEC spSmrDuplicateSampleOrderDetails @IN_UserID, @IN_DataID, @IN_DmlType;	
	ELSE IF @IN_AfterSaveEventTypeID = 109 --Duplicate Group, Test for Sample Lead
		EXEC spSmrDuplicateSampleLeadDetails @IN_UserID, @IN_DataID, @IN_DmlType;	
	ELSE IF @IN_AfterSaveEventTypeID = 110 --Inspection Flag Update
		EXEC spSmrSampleInspectionUpdate @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 111 --Sample Direct Invoice Calculations
    		EXEC spAccDirectInvCalculation @IN_DataID, @IN_UserID, @IN_DmlType, @IN_FormID;
	ELSE IF @IN_AfterSaveEventTypeID = 112 --Batch Storage Sample insert to Sample Storage
		EXEC spSmrBatchStorageSamplesInsert @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 113 --Material Return Update
		EXEC spPurMaterialReturnUpdate @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 114 --Material Return Shipment Update
		EXEC spPurMaterialShipmentUpdate @IN_UserID, @IN_DataID, @IN_DmlType;
	ELSE IF @IN_AfterSaveEventTypeID = 115 --Course Calculate No Of Questions
    		EXEC spQmsCourseCalculateNoOfQues  @IN_DataID, @IN_UserID;
	ELSE IF @IN_AfterSaveEventTypeID = 116 --Test Changes Updated
    		EXEC spSmrBatchLogAfterDML  @IN_UserID, @IN_DataID,@IN_DmlType ;


	SELECT '' AS ErrorMessage;

	END TRY
	BEGIN CATCH
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 
		SELECT @ErrorMessage AS ErrorMessage;
	END CATCH
END
GO
PRINT N'Creating [dbo].[spCmnRebuildIndex]'
GO

CREATE PROCEDURE [dbo].[spCmnRebuildIndex]
AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @RowIndex INT, @RowCount INT, @IndexName VARCHAR(255), @TableName VARCHAR(255), 
			@ObjectID INT, @IndexID INT, @Fragmentation Float, @Query VARCHAR(MAX);
	
	IF OBJECT_ID('tempdb..#tempReindexList') IS NOT NULL
		DROP TABLE #tempReindexList;
	CREATE TABLE #tempReindexList(RowNum INT IDENTITY(1,1) NOT NULL, IndexName VARCHAR(255) NOT NULL, TableName VARCHAR(255) NOT NULL, 
								  ObjectID INT NOT NULL, IndexID INT NOT NULL, Fragmentation Float NOT NULL);
	
	INSERT INTO #tempReindexList (IndexName, TableName, ObjectID, IndexID, Fragmentation)
	SELECT ISNULL(B.name, ''), ISNULL(object_name(A.object_id), ''), ISNULL(A.object_id, 0), ISNULL(A.index_id, 0), ISNULL(A.avg_fragmentation_in_percent, 0)
	FROM sys.dm_db_index_physical_stats (DB_ID(), NULL,NULL, NULL, NULL) AS A
		INNER JOIN sys.indexes AS B	ON(A.object_id = B.object_id AND A.index_id = B.index_id)
	WHERE A.avg_fragmentation_in_percent >= 5.0
		AND B.name IS NOT NULL AND object_name(A.object_id) IS NOT NULL
	ORDER BY A.index_id;
	
	SELECT @RowCount = COUNT(1) FROM #tempReindexList;
	SET @RowCount = 5;
	SET @RowIndex = 0;
	WHILE @RowIndex < @RowCount
	BEGIN
		SET @RowIndex = @RowIndex + 1;
		SELECT @IndexName = IndexName, @TableName = TableName, @ObjectID = ObjectID, @IndexID = IndexID, 
				@Fragmentation = Fragmentation
		FROM #tempReindexList WHERE RowNum = @RowIndex;
		
		SET @Query = '';
		IF @Fragmentation < 30.0
		BEGIN
			SET @Query = 'ALTER INDEX ' + @IndexName + ' ON ' + @TableName + ' REORGANIZE'
		END
		ELSE IF @Fragmentation >= 30.0
		BEGIN
			SET @Query = 'ALTER INDEX ' + @IndexName + ' ON ' + @TableName + ' REBUILD'
		END
		
		IF (@Query <> '')
			EXEC(@Query);
	END

	IF OBJECT_ID('tempdb..#tempReindexList') IS NOT NULL
		DROP TABLE #tempReindexList;	
END

GO
PRINT N'Creating [dbo].[spGetAddedDeletedIDs]'
GO

CREATE PROCEDURE [dbo].[spGetAddedDeletedIDs] (
	@IN_NewIDs VARCHAR(MAX),
	@IN_OldIDs VARCHAR(MAX),
	@OUT_NewIDs VARCHAR(MAX) OUT,
	@OUT_DeletedIDs VARCHAR(MAX) OUT
)
AS
BEGIN 
 
    SET @OUT_NewIDs = '';
    SET @OUT_DeletedIDs = '';
    
    -- Add New IDs to Temp Table
	IF OBJECT_ID('tempdb..#tempNewIDList') IS NOT NULL
		DROP TABLE #tempNewIDList;
	CREATE TABLE #tempNewIDList(RowNum INT IDENTITY(1,1) NOT NULL, ID INT NULL);
	IF @IN_NewIDs <> ''
	BEGIN
		INSERT INTO #tempNewIDList (ID) SELECT value FROM STRING_SPLIT(@IN_NewIDs, ',');
	END
	
	-- Add Old IDs to Temp Table
	IF OBJECT_ID('tempdb..#tempOldIDList') IS NOT NULL
		DROP TABLE #tempOldIDList;
	CREATE TABLE #tempOldIDList(RowNum INT IDENTITY(1,1) NOT NULL, ID INT NULL);
	IF @IN_NewIDs <> ''
	BEGIN
		INSERT INTO #tempOldIDList (ID) SELECT value FROM STRING_SPLIT(@IN_OldIDs, ',');
	END	
	
    -- Added Tests
	SET @OUT_NewIDs = ISNULL(STUFF((SELECT DISTINCT ',' + CAST(ID AS VARCHAR(20)) FROM #tempNewIDList WHERE ID NOT IN(SELECT ID FROM #tempOldIDList)
								FOR XML PATH('')), 1, 1, ''), '');
    -- Deleted Tests
	SET @OUT_DeletedIDs = ISNULL(STUFF((SELECT DISTINCT ',' + CAST(ID AS VARCHAR(20)) FROM #tempOldIDList WHERE ID NOT IN(SELECT ID FROM #tempNewIDList)
									FOR XML PATH('')), 1, 1, ''), '');
		
	IF OBJECT_ID('tempdb..#tempNewIDList') IS NOT NULL
		DROP TABLE #tempNewIDList;
	IF OBJECT_ID('tempdb..#tempOldIDList') IS NOT NULL
		DROP TABLE #tempOldIDList;
END
GO
PRINT N'Creating [dbo].[spSrvEmailTrackingEntry]'
GO

CREATE PROCEDURE [dbo].[spSrvEmailTrackingEntry] ( 
	@TypeID INT = 0,
	@EmployeeIDs VARCHAR(100) = '',
	@ClientIDs VARCHAR(100) = '',
	@FileName NVARCHAR(500) = '',
	@ReportPath NVARCHAR(500) = '',
	@DataID INT = 0,
	@ReportID INT = 0,
	@MenuID INT = 0,
	@UserID INT = 0
	
) AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ErrorSeverity VARCHAR(50),
				@ErrorMessage VARCHAR(2000),
				@ErrorState VARCHAR(50)

		INSERT INTO CmnCustomReportEmail (Type, EmployeeID, ClientID, FileName, Path, ReportID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
		SELECT @TypeID, @EmployeeIDs, @ClientIDs, @FileName, @ReportPath, @ReportID, @UserID,  GETDATE(), @UserID,  GETDATE()
	END TRY
	BEGIN CATCH
	  SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE() 

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
END
GO
PRINT N'Adding foreign keys to [dbo].[CmnMessagesMultiLingual]'
GO
ALTER TABLE [dbo].[CmnMessagesMultiLingual] ADD CONSTRAINT [FK_CmnMessagesMultiLingualKeyCode] FOREIGN KEY ([KeyCode]) REFERENCES [dbo].[CmnApplicationMessages] ([KeyCode]) ON DELETE CASCADE
GO
PRINT N'Adding foreign keys to [dbo].[CmnAuditDataTracking]'
GO
ALTER TABLE [dbo].[CmnAuditDataTracking] ADD CONSTRAINT [FK_CmnAuditTrackingAuditTrackingID] FOREIGN KEY ([AuditTrackingID]) REFERENCES [dbo].[CmnAuditTracking] ([ReferenceID])
GO
PRINT N'Adding foreign keys to [dbo].[CmnColumnProperty]'
GO
ALTER TABLE [dbo].[CmnColumnProperty] ADD CONSTRAINT [FK_CmnColumnPropertyColumnID] FOREIGN KEY ([ColumnID]) REFERENCES [dbo].[CmnControlColumns] ([ColumnID])
GO
PRINT N'Adding foreign keys to [dbo].[CmnColumnsMultiLingual]'
GO
ALTER TABLE [dbo].[CmnColumnsMultiLingual] ADD CONSTRAINT [FK_CmnColumnsMultiLingual] FOREIGN KEY ([ColumnID]) REFERENCES [dbo].[CmnControlColumns] ([ColumnID]) ON DELETE CASCADE
GO
PRINT N'Adding foreign keys to [dbo].[CmnControlColumns]'
GO
ALTER TABLE [dbo].[CmnControlColumns] ADD CONSTRAINT [FK_CmnControlColumnsControlID] FOREIGN KEY ([ControlID]) REFERENCES [dbo].[CmnFormControls] ([ControlID])
GO
PRINT N'Adding foreign keys to [dbo].[CmnControlProperty]'
GO
ALTER TABLE [dbo].[CmnControlProperty] ADD CONSTRAINT [FK_CmnControlPropertyControlID] FOREIGN KEY ([ControlID]) REFERENCES [dbo].[CmnFormControls] ([ControlID])
GO
PRINT N'Adding foreign keys to [dbo].[CmnControlsMultiLingual]'
GO
ALTER TABLE [dbo].[CmnControlsMultiLingual] ADD CONSTRAINT [FK_CmnControlsMultiLingual] FOREIGN KEY ([ControlID]) REFERENCES [dbo].[CmnFormControls] ([ControlID]) ON DELETE CASCADE
GO
PRINT N'Adding foreign keys to [dbo].[CmnFormSearchControl]'
GO
ALTER TABLE [dbo].[CmnFormSearchControl] ADD CONSTRAINT [FK_CmnFormSearchControlControlID] FOREIGN KEY ([ControlID]) REFERENCES [dbo].[CmnFormControls] ([ControlID])
GO
ALTER TABLE [dbo].[CmnFormSearchControl] ADD CONSTRAINT [FK_CmnFormSearchControlFormID] FOREIGN KEY ([FormID]) REFERENCES [dbo].[CmnFormDetails] ([FormID])
GO
PRINT N'Adding foreign keys to [dbo].[CmnFormControls]'
GO
ALTER TABLE [dbo].[CmnFormControls] ADD CONSTRAINT [FK_CmnFormControlsGroupID] FOREIGN KEY ([GroupID]) REFERENCES [dbo].[CmnGroupBoxes] ([GroupID])
GO
PRINT N'Adding foreign keys to [dbo].[CmnFormMultiLingual]'
GO
ALTER TABLE [dbo].[CmnFormMultiLingual] ADD CONSTRAINT [FK_CmnFormMultiLingual] FOREIGN KEY ([FormID]) REFERENCES [dbo].[CmnFormDetails] ([FormID]) ON DELETE CASCADE
GO
PRINT N'Adding foreign keys to [dbo].[CmnRememberSearchControl]'
GO
ALTER TABLE [dbo].[CmnRememberSearchControl] ADD CONSTRAINT [FK_CmnRememberSearchControlSearchID] FOREIGN KEY ([SearchID]) REFERENCES [dbo].[CmnFormSearchControl] ([SearchID])
GO
ALTER TABLE [dbo].[CmnRememberSearchControl] ADD CONSTRAINT [FK_CmnRememberSearchControlFormID] FOREIGN KEY ([FormID]) REFERENCES [dbo].[CmnFormDetails] ([FormID])
GO
PRINT N'Adding foreign keys to [dbo].[CmnSearchControlColumns]'
GO
ALTER TABLE [dbo].[CmnSearchControlColumns] ADD CONSTRAINT [FK_CmnSearchControlColumnsSearchID] FOREIGN KEY ([SearchID]) REFERENCES [dbo].[CmnFormSearchControl] ([SearchID])
GO
PRINT N'Adding foreign keys to [dbo].[CmnSearchMultiLingual]'
GO
ALTER TABLE [dbo].[CmnSearchMultiLingual] ADD CONSTRAINT [FK_CmnSearchMultiLingual] FOREIGN KEY ([SearchID]) REFERENCES [dbo].[CmnFormSearchControl] ([SearchID]) ON DELETE CASCADE
GO
PRINT N'Adding foreign keys to [dbo].[CmnGridColumnsMultiLingual]'
GO
ALTER TABLE [dbo].[CmnGridColumnsMultiLingual] ADD CONSTRAINT [FK_CmnGridColumnsMultiLingual] FOREIGN KEY ([ColumnID]) REFERENCES [dbo].[CmnGridControlColumns] ([ColumnID]) ON DELETE CASCADE
GO
PRINT N'Adding foreign keys to [dbo].[CmnGroupMultiLingual]'
GO
ALTER TABLE [dbo].[CmnGroupMultiLingual] ADD CONSTRAINT [FK_CmnGroupMultiLingual] FOREIGN KEY ([GroupID]) REFERENCES [dbo].[CmnGroupBoxes] ([GroupID]) ON DELETE CASCADE
GO
PRINT N'Adding foreign keys to [dbo].[CmnGroupBoxes]'
GO
ALTER TABLE [dbo].[CmnGroupBoxes] ADD CONSTRAINT [FK_CmnGroupBoxesTabID] FOREIGN KEY ([TabID]) REFERENCES [dbo].[CmnFormTabs] ([TabID])
GO
PRINT N'Adding foreign keys to [dbo].[CmnRBSPermission]'
GO
ALTER TABLE [dbo].[CmnRBSPermission] ADD CONSTRAINT [FK_CmnRBSPermissionUserID] FOREIGN KEY ([UserID]) REFERENCES [dbo].[CmnUserDetails] ([UserID]) ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CmnRBSPermission] ADD CONSTRAINT [FK_CmnRBSPermissionFormID] FOREIGN KEY ([FormID]) REFERENCES [dbo].[CmnFormDetails] ([FormID]) ON DELETE CASCADE
GO
PRINT N'Adding foreign keys to [dbo].[CmnRolePermission]'
GO
ALTER TABLE [dbo].[CmnRolePermission] ADD CONSTRAINT [FK_CmnRolePermissionFormID] FOREIGN KEY ([FormID]) REFERENCES [dbo].[CmnFormDetails] ([FormID]) ON DELETE CASCADE
GO
PRINT N'Adding foreign keys to [dbo].[CmnSearchColumnsMultiLingual]'
GO
ALTER TABLE [dbo].[CmnSearchColumnsMultiLingual] ADD CONSTRAINT [FK_CmnSearchColumnsMultiLingual] FOREIGN KEY ([ColumnID]) REFERENCES [dbo].[CmnSearchControlColumns] ([ColumnID]) ON DELETE CASCADE
GO
PRINT N'Adding foreign keys to [dbo].[CmnTabsMultiLingual]'
GO
ALTER TABLE [dbo].[CmnTabsMultiLingual] ADD CONSTRAINT [FK_CmnTabsMultiLingual] FOREIGN KEY ([TabID]) REFERENCES [dbo].[CmnFormTabs] ([TabID]) ON DELETE CASCADE
GO
PRINT N'Adding foreign keys to [dbo].[CmnUserProfile]'
GO
ALTER TABLE [dbo].[CmnUserProfile] ADD CONSTRAINT [FK_CmnUserProfile] FOREIGN KEY ([UserID]) REFERENCES [dbo].[CmnUserDetails] ([UserID])
GO
PRINT N'Adding constraints to [dbo].[CmnCodeMaster]'
GO
/*ALTER TABLE [dbo].[CmnCodeMaster] ADD CONSTRAINT [DF__CmnCodeMa__SubTy__157FBEFC] DEFAULT ((0)) FOR [SubType]
GO
ALTER TABLE [dbo].[CmnCodeMaster] ADD CONSTRAINT [DF__CmnCodeMa__Butto__7CC50B5F] DEFAULT ((0)) FOR [ButtonCategory]
GO
ALTER TABLE [dbo].[CmnCodeMaster] ADD CONSTRAINT [DF__CmnCodeMa__IsMul__63CD7C5B] DEFAULT ((0)) FOR [IsMultipleApproval]
GO
ALTER TABLE [dbo].[CmnCodeMaster] ADD CONSTRAINT [DF__CmnCodeMa__IsDml__1690B651] DEFAULT ((1)) FOR [IsDml]
GO
PRINT N'Adding constraints to [dbo].[CmnFormTabs]'
GO
ALTER TABLE [dbo].[CmnFormTabs] ADD CONSTRAINT [DF__CmnFormTa__IsMob__33E74997] DEFAULT ((1)) FOR [IsMobile]
GO
PRINT N'Adding constraints to [dbo].[CmnUserDetails]'
GO
ALTER TABLE [dbo].[CmnUserDetails] ADD CONSTRAINT [DF__CmnUserDe__MenuB__515D5557] DEFAULT ((0)) FOR [MenuBar]
GO
ALTER TABLE [dbo].[CmnUserDetails] ADD CONSTRAINT [DF__CmnUserDe__NotAc__2079DA72] DEFAULT ((0)) FOR [NotActive]
GO*/

